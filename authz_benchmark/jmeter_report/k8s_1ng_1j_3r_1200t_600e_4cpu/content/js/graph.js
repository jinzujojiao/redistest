/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 844.0, "series": [{"data": [[0.0, 7.0], [0.1, 28.0], [0.2, 31.0], [0.3, 32.0], [0.4, 33.0], [0.5, 34.0], [0.6, 35.0], [0.7, 35.0], [0.8, 36.0], [0.9, 36.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 38.0], [1.4, 38.0], [1.5, 38.0], [1.6, 39.0], [1.7, 39.0], [1.8, 39.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 40.0], [2.3, 40.0], [2.4, 41.0], [2.5, 41.0], [2.6, 41.0], [2.7, 41.0], [2.8, 41.0], [2.9, 42.0], [3.0, 42.0], [3.1, 42.0], [3.2, 42.0], [3.3, 42.0], [3.4, 42.0], [3.5, 42.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 43.0], [4.2, 43.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 44.0], [5.0, 44.0], [5.1, 44.0], [5.2, 45.0], [5.3, 45.0], [5.4, 45.0], [5.5, 45.0], [5.6, 45.0], [5.7, 45.0], [5.8, 45.0], [5.9, 45.0], [6.0, 45.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 46.0], [6.8, 46.0], [6.9, 46.0], [7.0, 46.0], [7.1, 46.0], [7.2, 47.0], [7.3, 47.0], [7.4, 47.0], [7.5, 47.0], [7.6, 47.0], [7.7, 47.0], [7.8, 47.0], [7.9, 47.0], [8.0, 47.0], [8.1, 47.0], [8.2, 47.0], [8.3, 48.0], [8.4, 48.0], [8.5, 48.0], [8.6, 48.0], [8.7, 48.0], [8.8, 48.0], [8.9, 48.0], [9.0, 48.0], [9.1, 48.0], [9.2, 48.0], [9.3, 48.0], [9.4, 49.0], [9.5, 49.0], [9.6, 49.0], [9.7, 49.0], [9.8, 49.0], [9.9, 49.0], [10.0, 49.0], [10.1, 49.0], [10.2, 49.0], [10.3, 49.0], [10.4, 49.0], [10.5, 50.0], [10.6, 50.0], [10.7, 50.0], [10.8, 50.0], [10.9, 50.0], [11.0, 50.0], [11.1, 50.0], [11.2, 50.0], [11.3, 50.0], [11.4, 50.0], [11.5, 50.0], [11.6, 51.0], [11.7, 51.0], [11.8, 51.0], [11.9, 51.0], [12.0, 51.0], [12.1, 51.0], [12.2, 51.0], [12.3, 51.0], [12.4, 51.0], [12.5, 51.0], [12.6, 51.0], [12.7, 52.0], [12.8, 52.0], [12.9, 52.0], [13.0, 52.0], [13.1, 52.0], [13.2, 52.0], [13.3, 52.0], [13.4, 52.0], [13.5, 52.0], [13.6, 52.0], [13.7, 53.0], [13.8, 53.0], [13.9, 53.0], [14.0, 53.0], [14.1, 53.0], [14.2, 53.0], [14.3, 53.0], [14.4, 53.0], [14.5, 54.0], [14.6, 54.0], [14.7, 54.0], [14.8, 54.0], [14.9, 54.0], [15.0, 54.0], [15.1, 54.0], [15.2, 54.0], [15.3, 55.0], [15.4, 55.0], [15.5, 55.0], [15.6, 55.0], [15.7, 55.0], [15.8, 55.0], [15.9, 55.0], [16.0, 55.0], [16.1, 55.0], [16.2, 55.0], [16.3, 56.0], [16.4, 56.0], [16.5, 56.0], [16.6, 56.0], [16.7, 56.0], [16.8, 56.0], [16.9, 56.0], [17.0, 56.0], [17.1, 56.0], [17.2, 56.0], [17.3, 56.0], [17.4, 56.0], [17.5, 56.0], [17.6, 57.0], [17.7, 57.0], [17.8, 57.0], [17.9, 57.0], [18.0, 57.0], [18.1, 57.0], [18.2, 57.0], [18.3, 57.0], [18.4, 57.0], [18.5, 57.0], [18.6, 57.0], [18.7, 57.0], [18.8, 57.0], [18.9, 57.0], [19.0, 57.0], [19.1, 57.0], [19.2, 57.0], [19.3, 58.0], [19.4, 58.0], [19.5, 58.0], [19.6, 58.0], [19.7, 58.0], [19.8, 58.0], [19.9, 58.0], [20.0, 58.0], [20.1, 58.0], [20.2, 58.0], [20.3, 58.0], [20.4, 58.0], [20.5, 58.0], [20.6, 58.0], [20.7, 58.0], [20.8, 58.0], [20.9, 58.0], [21.0, 58.0], [21.1, 58.0], [21.2, 58.0], [21.3, 58.0], [21.4, 59.0], [21.5, 59.0], [21.6, 59.0], [21.7, 59.0], [21.8, 59.0], [21.9, 59.0], [22.0, 59.0], [22.1, 59.0], [22.2, 59.0], [22.3, 59.0], [22.4, 59.0], [22.5, 59.0], [22.6, 59.0], [22.7, 59.0], [22.8, 59.0], [22.9, 59.0], [23.0, 59.0], [23.1, 59.0], [23.2, 59.0], [23.3, 59.0], [23.4, 59.0], [23.5, 59.0], [23.6, 60.0], [23.7, 60.0], [23.8, 60.0], [23.9, 60.0], [24.0, 60.0], [24.1, 60.0], [24.2, 60.0], [24.3, 60.0], [24.4, 60.0], [24.5, 60.0], [24.6, 60.0], [24.7, 60.0], [24.8, 60.0], [24.9, 60.0], [25.0, 60.0], [25.1, 60.0], [25.2, 60.0], [25.3, 60.0], [25.4, 60.0], [25.5, 60.0], [25.6, 60.0], [25.7, 60.0], [25.8, 60.0], [25.9, 61.0], [26.0, 61.0], [26.1, 61.0], [26.2, 61.0], [26.3, 61.0], [26.4, 61.0], [26.5, 61.0], [26.6, 61.0], [26.7, 61.0], [26.8, 61.0], [26.9, 61.0], [27.0, 61.0], [27.1, 61.0], [27.2, 61.0], [27.3, 61.0], [27.4, 61.0], [27.5, 61.0], [27.6, 61.0], [27.7, 61.0], [27.8, 61.0], [27.9, 61.0], [28.0, 61.0], [28.1, 61.0], [28.2, 62.0], [28.3, 62.0], [28.4, 62.0], [28.5, 62.0], [28.6, 62.0], [28.7, 62.0], [28.8, 62.0], [28.9, 62.0], [29.0, 62.0], [29.1, 62.0], [29.2, 62.0], [29.3, 62.0], [29.4, 62.0], [29.5, 62.0], [29.6, 62.0], [29.7, 62.0], [29.8, 62.0], [29.9, 62.0], [30.0, 62.0], [30.1, 62.0], [30.2, 62.0], [30.3, 62.0], [30.4, 63.0], [30.5, 63.0], [30.6, 63.0], [30.7, 63.0], [30.8, 63.0], [30.9, 63.0], [31.0, 63.0], [31.1, 63.0], [31.2, 63.0], [31.3, 63.0], [31.4, 63.0], [31.5, 63.0], [31.6, 63.0], [31.7, 63.0], [31.8, 63.0], [31.9, 63.0], [32.0, 63.0], [32.1, 63.0], [32.2, 63.0], [32.3, 63.0], [32.4, 63.0], [32.5, 64.0], [32.6, 64.0], [32.7, 64.0], [32.8, 64.0], [32.9, 64.0], [33.0, 64.0], [33.1, 64.0], [33.2, 64.0], [33.3, 64.0], [33.4, 64.0], [33.5, 64.0], [33.6, 64.0], [33.7, 64.0], [33.8, 64.0], [33.9, 64.0], [34.0, 64.0], [34.1, 64.0], [34.2, 64.0], [34.3, 64.0], [34.4, 64.0], [34.5, 65.0], [34.6, 65.0], [34.7, 65.0], [34.8, 65.0], [34.9, 65.0], [35.0, 65.0], [35.1, 65.0], [35.2, 65.0], [35.3, 65.0], [35.4, 65.0], [35.5, 65.0], [35.6, 65.0], [35.7, 65.0], [35.8, 65.0], [35.9, 65.0], [36.0, 65.0], [36.1, 65.0], [36.2, 65.0], [36.3, 65.0], [36.4, 65.0], [36.5, 66.0], [36.6, 66.0], [36.7, 66.0], [36.8, 66.0], [36.9, 66.0], [37.0, 66.0], [37.1, 66.0], [37.2, 66.0], [37.3, 66.0], [37.4, 66.0], [37.5, 66.0], [37.6, 66.0], [37.7, 66.0], [37.8, 66.0], [37.9, 66.0], [38.0, 66.0], [38.1, 66.0], [38.2, 66.0], [38.3, 66.0], [38.4, 67.0], [38.5, 67.0], [38.6, 67.0], [38.7, 67.0], [38.8, 67.0], [38.9, 67.0], [39.0, 67.0], [39.1, 67.0], [39.2, 67.0], [39.3, 67.0], [39.4, 67.0], [39.5, 67.0], [39.6, 67.0], [39.7, 67.0], [39.8, 67.0], [39.9, 67.0], [40.0, 67.0], [40.1, 67.0], [40.2, 68.0], [40.3, 68.0], [40.4, 68.0], [40.5, 68.0], [40.6, 68.0], [40.7, 68.0], [40.8, 68.0], [40.9, 68.0], [41.0, 68.0], [41.1, 68.0], [41.2, 68.0], [41.3, 68.0], [41.4, 68.0], [41.5, 68.0], [41.6, 68.0], [41.7, 68.0], [41.8, 68.0], [41.9, 69.0], [42.0, 69.0], [42.1, 69.0], [42.2, 69.0], [42.3, 69.0], [42.4, 69.0], [42.5, 69.0], [42.6, 69.0], [42.7, 69.0], [42.8, 69.0], [42.9, 69.0], [43.0, 69.0], [43.1, 69.0], [43.2, 69.0], [43.3, 69.0], [43.4, 69.0], [43.5, 70.0], [43.6, 70.0], [43.7, 70.0], [43.8, 70.0], [43.9, 70.0], [44.0, 70.0], [44.1, 70.0], [44.2, 70.0], [44.3, 70.0], [44.4, 70.0], [44.5, 70.0], [44.6, 70.0], [44.7, 70.0], [44.8, 70.0], [44.9, 70.0], [45.0, 71.0], [45.1, 71.0], [45.2, 71.0], [45.3, 71.0], [45.4, 71.0], [45.5, 71.0], [45.6, 71.0], [45.7, 71.0], [45.8, 71.0], [45.9, 71.0], [46.0, 71.0], [46.1, 71.0], [46.2, 71.0], [46.3, 72.0], [46.4, 72.0], [46.5, 72.0], [46.6, 72.0], [46.7, 72.0], [46.8, 72.0], [46.9, 72.0], [47.0, 72.0], [47.1, 72.0], [47.2, 72.0], [47.3, 72.0], [47.4, 72.0], [47.5, 73.0], [47.6, 73.0], [47.7, 73.0], [47.8, 73.0], [47.9, 73.0], [48.0, 73.0], [48.1, 73.0], [48.2, 73.0], [48.3, 73.0], [48.4, 73.0], [48.5, 73.0], [48.6, 74.0], [48.7, 74.0], [48.8, 74.0], [48.9, 74.0], [49.0, 74.0], [49.1, 74.0], [49.2, 74.0], [49.3, 74.0], [49.4, 74.0], [49.5, 74.0], [49.6, 75.0], [49.7, 75.0], [49.8, 75.0], [49.9, 75.0], [50.0, 75.0], [50.1, 75.0], [50.2, 75.0], [50.3, 75.0], [50.4, 75.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 76.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 77.0], [51.4, 77.0], [51.5, 77.0], [51.6, 77.0], [51.7, 77.0], [51.8, 77.0], [51.9, 78.0], [52.0, 78.0], [52.1, 78.0], [52.2, 78.0], [52.3, 78.0], [52.4, 78.0], [52.5, 79.0], [52.6, 79.0], [52.7, 79.0], [52.8, 79.0], [52.9, 79.0], [53.0, 80.0], [53.1, 80.0], [53.2, 80.0], [53.3, 80.0], [53.4, 81.0], [53.5, 81.0], [53.6, 81.0], [53.7, 81.0], [53.8, 81.0], [53.9, 82.0], [54.0, 82.0], [54.1, 82.0], [54.2, 82.0], [54.3, 83.0], [54.4, 83.0], [54.5, 83.0], [54.6, 83.0], [54.7, 84.0], [54.8, 84.0], [54.9, 84.0], [55.0, 85.0], [55.1, 85.0], [55.2, 85.0], [55.3, 85.0], [55.4, 86.0], [55.5, 86.0], [55.6, 86.0], [55.7, 86.0], [55.8, 86.0], [55.9, 87.0], [56.0, 87.0], [56.1, 87.0], [56.2, 87.0], [56.3, 87.0], [56.4, 88.0], [56.5, 88.0], [56.6, 88.0], [56.7, 88.0], [56.8, 88.0], [56.9, 89.0], [57.0, 89.0], [57.1, 89.0], [57.2, 89.0], [57.3, 89.0], [57.4, 90.0], [57.5, 90.0], [57.6, 90.0], [57.7, 90.0], [57.8, 90.0], [57.9, 90.0], [58.0, 91.0], [58.1, 91.0], [58.2, 91.0], [58.3, 91.0], [58.4, 91.0], [58.5, 91.0], [58.6, 92.0], [58.7, 92.0], [58.8, 92.0], [58.9, 92.0], [59.0, 92.0], [59.1, 92.0], [59.2, 93.0], [59.3, 93.0], [59.4, 93.0], [59.5, 93.0], [59.6, 93.0], [59.7, 93.0], [59.8, 94.0], [59.9, 94.0], [60.0, 94.0], [60.1, 94.0], [60.2, 94.0], [60.3, 95.0], [60.4, 95.0], [60.5, 95.0], [60.6, 95.0], [60.7, 96.0], [60.8, 96.0], [60.9, 96.0], [61.0, 96.0], [61.1, 97.0], [61.2, 97.0], [61.3, 97.0], [61.4, 98.0], [61.5, 98.0], [61.6, 98.0], [61.7, 99.0], [61.8, 99.0], [61.9, 100.0], [62.0, 100.0], [62.1, 100.0], [62.2, 101.0], [62.3, 101.0], [62.4, 102.0], [62.5, 102.0], [62.6, 103.0], [62.7, 103.0], [62.8, 104.0], [62.9, 104.0], [63.0, 105.0], [63.1, 106.0], [63.2, 106.0], [63.3, 107.0], [63.4, 107.0], [63.5, 108.0], [63.6, 108.0], [63.7, 109.0], [63.8, 109.0], [63.9, 110.0], [64.0, 110.0], [64.1, 111.0], [64.2, 111.0], [64.3, 112.0], [64.4, 112.0], [64.5, 113.0], [64.6, 113.0], [64.7, 114.0], [64.8, 114.0], [64.9, 115.0], [65.0, 116.0], [65.1, 117.0], [65.2, 118.0], [65.3, 119.0], [65.4, 120.0], [65.5, 121.0], [65.6, 122.0], [65.7, 124.0], [65.8, 125.0], [65.9, 127.0], [66.0, 128.0], [66.1, 130.0], [66.2, 132.0], [66.3, 134.0], [66.4, 136.0], [66.5, 139.0], [66.6, 141.0], [66.7, 143.0], [66.8, 146.0], [66.9, 150.0], [67.0, 153.0], [67.1, 155.0], [67.2, 157.0], [67.3, 160.0], [67.4, 162.0], [67.5, 164.0], [67.6, 166.0], [67.7, 168.0], [67.8, 171.0], [67.9, 174.0], [68.0, 176.0], [68.1, 179.0], [68.2, 181.0], [68.3, 184.0], [68.4, 187.0], [68.5, 189.0], [68.6, 191.0], [68.7, 193.0], [68.8, 196.0], [68.9, 198.0], [69.0, 200.0], [69.1, 202.0], [69.2, 204.0], [69.3, 206.0], [69.4, 208.0], [69.5, 211.0], [69.6, 213.0], [69.7, 215.0], [69.8, 216.0], [69.9, 218.0], [70.0, 220.0], [70.1, 221.0], [70.2, 223.0], [70.3, 224.0], [70.4, 226.0], [70.5, 227.0], [70.6, 228.0], [70.7, 230.0], [70.8, 231.0], [70.9, 232.0], [71.0, 233.0], [71.1, 235.0], [71.2, 236.0], [71.3, 237.0], [71.4, 238.0], [71.5, 240.0], [71.6, 241.0], [71.7, 242.0], [71.8, 244.0], [71.9, 245.0], [72.0, 246.0], [72.1, 247.0], [72.2, 249.0], [72.3, 250.0], [72.4, 251.0], [72.5, 252.0], [72.6, 253.0], [72.7, 254.0], [72.8, 255.0], [72.9, 256.0], [73.0, 257.0], [73.1, 258.0], [73.2, 259.0], [73.3, 260.0], [73.4, 261.0], [73.5, 262.0], [73.6, 263.0], [73.7, 264.0], [73.8, 264.0], [73.9, 265.0], [74.0, 266.0], [74.1, 267.0], [74.2, 268.0], [74.3, 269.0], [74.4, 270.0], [74.5, 271.0], [74.6, 272.0], [74.7, 273.0], [74.8, 274.0], [74.9, 275.0], [75.0, 276.0], [75.1, 277.0], [75.2, 278.0], [75.3, 278.0], [75.4, 279.0], [75.5, 280.0], [75.6, 281.0], [75.7, 282.0], [75.8, 283.0], [75.9, 284.0], [76.0, 285.0], [76.1, 286.0], [76.2, 287.0], [76.3, 288.0], [76.4, 289.0], [76.5, 290.0], [76.6, 291.0], [76.7, 292.0], [76.8, 293.0], [76.9, 293.0], [77.0, 294.0], [77.1, 295.0], [77.2, 296.0], [77.3, 297.0], [77.4, 298.0], [77.5, 299.0], [77.6, 299.0], [77.7, 300.0], [77.8, 301.0], [77.9, 302.0], [78.0, 303.0], [78.1, 303.0], [78.2, 304.0], [78.3, 305.0], [78.4, 306.0], [78.5, 307.0], [78.6, 308.0], [78.7, 309.0], [78.8, 310.0], [78.9, 311.0], [79.0, 312.0], [79.1, 313.0], [79.2, 314.0], [79.3, 316.0], [79.4, 317.0], [79.5, 318.0], [79.6, 319.0], [79.7, 320.0], [79.8, 321.0], [79.9, 322.0], [80.0, 323.0], [80.1, 324.0], [80.2, 325.0], [80.3, 326.0], [80.4, 327.0], [80.5, 328.0], [80.6, 330.0], [80.7, 331.0], [80.8, 332.0], [80.9, 333.0], [81.0, 334.0], [81.1, 335.0], [81.2, 337.0], [81.3, 338.0], [81.4, 340.0], [81.5, 341.0], [81.6, 342.0], [81.7, 344.0], [81.8, 345.0], [81.9, 347.0], [82.0, 348.0], [82.1, 350.0], [82.2, 352.0], [82.3, 353.0], [82.4, 355.0], [82.5, 357.0], [82.6, 358.0], [82.7, 360.0], [82.8, 362.0], [82.9, 364.0], [83.0, 366.0], [83.1, 368.0], [83.2, 369.0], [83.3, 371.0], [83.4, 373.0], [83.5, 374.0], [83.6, 376.0], [83.7, 378.0], [83.8, 380.0], [83.9, 382.0], [84.0, 385.0], [84.1, 387.0], [84.2, 389.0], [84.3, 391.0], [84.4, 393.0], [84.5, 395.0], [84.6, 397.0], [84.7, 399.0], [84.8, 402.0], [84.9, 404.0], [85.0, 406.0], [85.1, 408.0], [85.2, 410.0], [85.3, 412.0], [85.4, 414.0], [85.5, 416.0], [85.6, 418.0], [85.7, 420.0], [85.8, 422.0], [85.9, 424.0], [86.0, 426.0], [86.1, 428.0], [86.2, 430.0], [86.3, 432.0], [86.4, 434.0], [86.5, 436.0], [86.6, 438.0], [86.7, 440.0], [86.8, 441.0], [86.9, 443.0], [87.0, 445.0], [87.1, 447.0], [87.2, 448.0], [87.3, 450.0], [87.4, 451.0], [87.5, 453.0], [87.6, 454.0], [87.7, 456.0], [87.8, 457.0], [87.9, 459.0], [88.0, 460.0], [88.1, 461.0], [88.2, 462.0], [88.3, 464.0], [88.4, 465.0], [88.5, 466.0], [88.6, 468.0], [88.7, 469.0], [88.8, 470.0], [88.9, 472.0], [89.0, 473.0], [89.1, 474.0], [89.2, 476.0], [89.3, 477.0], [89.4, 478.0], [89.5, 480.0], [89.6, 481.0], [89.7, 482.0], [89.8, 483.0], [89.9, 485.0], [90.0, 486.0], [90.1, 487.0], [90.2, 488.0], [90.3, 490.0], [90.4, 491.0], [90.5, 492.0], [90.6, 493.0], [90.7, 495.0], [90.8, 496.0], [90.9, 497.0], [91.0, 498.0], [91.1, 500.0], [91.2, 501.0], [91.3, 502.0], [91.4, 504.0], [91.5, 505.0], [91.6, 506.0], [91.7, 508.0], [91.8, 509.0], [91.9, 511.0], [92.0, 512.0], [92.1, 514.0], [92.2, 515.0], [92.3, 516.0], [92.4, 518.0], [92.5, 519.0], [92.6, 520.0], [92.7, 522.0], [92.8, 523.0], [92.9, 525.0], [93.0, 526.0], [93.1, 528.0], [93.2, 529.0], [93.3, 530.0], [93.4, 532.0], [93.5, 533.0], [93.6, 535.0], [93.7, 536.0], [93.8, 538.0], [93.9, 539.0], [94.0, 540.0], [94.1, 542.0], [94.2, 543.0], [94.3, 545.0], [94.4, 546.0], [94.5, 548.0], [94.6, 549.0], [94.7, 551.0], [94.8, 552.0], [94.9, 553.0], [95.0, 555.0], [95.1, 557.0], [95.2, 558.0], [95.3, 559.0], [95.4, 561.0], [95.5, 562.0], [95.6, 564.0], [95.7, 566.0], [95.8, 568.0], [95.9, 570.0], [96.0, 571.0], [96.1, 573.0], [96.2, 575.0], [96.3, 577.0], [96.4, 579.0], [96.5, 581.0], [96.6, 583.0], [96.7, 585.0], [96.8, 586.0], [96.9, 588.0], [97.0, 590.0], [97.1, 592.0], [97.2, 595.0], [97.3, 597.0], [97.4, 599.0], [97.5, 602.0], [97.6, 605.0], [97.7, 608.0], [97.8, 611.0], [97.9, 615.0], [98.0, 618.0], [98.1, 621.0], [98.2, 624.0], [98.3, 628.0], [98.4, 632.0], [98.5, 636.0], [98.6, 640.0], [98.7, 645.0], [98.8, 649.0], [98.9, 653.0], [99.0, 657.0], [99.1, 664.0], [99.2, 669.0], [99.3, 676.0], [99.4, 683.0], [99.5, 691.0], [99.6, 705.0], [99.7, 720.0], [99.8, 733.0], [99.9, 758.0], [100.0, 844.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 222.0, "minX": 0.0, "maxY": 555945.0, "series": [{"data": [[0.0, 555945.0], [300.0, 63697.0], [600.0, 19394.0], [700.0, 3630.0], [200.0, 77499.0], [100.0, 63755.0], [400.0, 57307.0], [800.0, 222.0], [500.0, 56837.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 79377.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 818909.0, "series": [{"data": [[0.0, 818909.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 79377.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1164.3361080507582, "minX": 1.63175304E12, "maxY": 1200.0, "series": [{"data": [[1.63175382E12, 1200.0], [1.63175316E12, 1200.0], [1.63175346E12, 1200.0], [1.63175376E12, 1200.0], [1.63175358E12, 1200.0], [1.63175388E12, 1200.0], [1.63175322E12, 1200.0], [1.63175352E12, 1200.0], [1.63175334E12, 1200.0], [1.63175364E12, 1200.0], [1.63175394E12, 1198.132656957401], [1.63175328E12, 1200.0], [1.6317531E12, 1200.0], [1.6317534E12, 1200.0], [1.6317537E12, 1200.0], [1.63175304E12, 1164.3361080507582]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63175394E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.0, "minX": 353.0, "maxY": 479.0, "series": [{"data": [[353.0, 239.0], [362.0, 282.0], [372.0, 265.0], [373.0, 263.0], [375.0, 284.0], [379.0, 266.0], [381.0, 184.0], [388.0, 296.0], [389.0, 188.0], [391.0, 300.0], [397.0, 319.0], [404.0, 298.0], [407.0, 295.0], [403.0, 338.0], [405.0, 328.0], [409.0, 291.0], [418.0, 302.5], [416.0, 347.0], [421.0, 326.0], [423.0, 243.5], [424.0, 300.72727272727275], [425.0, 309.5], [427.0, 298.0], [428.0, 365.0], [431.0, 381.0], [444.0, 359.75], [433.0, 325.1666666666667], [434.0, 377.0], [436.0, 249.0], [437.0, 336.0], [438.0, 364.84615384615387], [441.0, 311.5], [442.0, 385.0], [445.0, 362.0], [447.0, 355.0], [460.0, 380.4285714285714], [450.0, 304.0], [448.0, 283.0], [451.0, 353.6666666666667], [461.0, 388.8800000000001], [462.0, 409.90625], [452.0, 368.81818181818176], [454.0, 343.0], [456.0, 400.0], [457.0, 379.0], [458.0, 360.5], [459.0, 400.0], [466.0, 432.8], [464.0, 409.75], [467.0, 413.23076923076917], [476.0, 366.5], [477.0, 328.0], [478.0, 276.0], [479.0, 366.00000000000006], [468.0, 299.0], [469.0, 265.0], [471.0, 376.25], [472.0, 444.0], [474.0, 479.0], [475.0, 393.5], [481.0, 396.0], [484.0, 356.68749999999994], [485.0, 411.6666666666667], [486.0, 382.8333333333333], [487.0, 296.0], [498.0, 429.23076923076917], [496.0, 400.57142857142856], [499.0, 425.6000000000001], [508.0, 258.0], [509.0, 248.75], [504.0, 282.0], [511.0, 251.5], [510.0, 248.07142857142858], [501.0, 387.6666666666667], [502.0, 318.3333333333333], [507.0, 259.0], [503.0, 282.0769230769231], [505.0, 282.0], [506.0, 257.0], [531.0, 274.3333333333333], [518.0, 258.0], [516.0, 235.33333333333334], [519.0, 236.66666666666666], [537.0, 268.5], [543.0, 254.0], [540.0, 251.0], [539.0, 277.0], [520.0, 250.625], [521.0, 245.5], [527.0, 273.0], [534.0, 274.4], [535.0, 281.0], [533.0, 287.0], [530.0, 269.3333333333333], [529.0, 264.0], [528.0, 259.0], [532.0, 274.2], [551.0, 266.0], [553.0, 271.8888888888889], [552.0, 274.85714285714283], [554.0, 265.25], [562.0, 269.0], [561.0, 269.0], [569.0, 266.4], [570.0, 264.0], [571.0, 264.6666666666667], [563.0, 268.3333333333333], [565.0, 266.0], [567.0, 266.5], [566.0, 269.0], [555.0, 266.0], [556.0, 266.0], [544.0, 252.0], [564.0, 266.0], [602.0, 276.0], [589.0, 268.16666666666663], [585.0, 266.0], [592.0, 269.5], [593.0, 271.5], [598.0, 274.0], [607.0, 279.0], [587.0, 268.75], [583.0, 272.0], [604.0, 277.0], [606.0, 278.0], [605.0, 277.0], [586.0, 267.0], [613.0, 284.0], [621.0, 272.15384615384613], [609.0, 281.0], [610.0, 281.0], [616.0, 283.7142857142857], [628.0, 276.875], [631.0, 285.8], [630.0, 278.0], [629.0, 277.0], [626.0, 269.0], [624.0, 269.8], [639.0, 283.7142857142858], [637.0, 284.8], [638.0, 283.5], [634.0, 284.0], [633.0, 280.0], [636.0, 284.5], [625.0, 269.0], [619.0, 275.0], [622.0, 272.82352941176475], [623.0, 273.0], [620.0, 277.20000000000005], [618.0, 279.00000000000006], [617.0, 282.0], [645.0, 277.625], [641.0, 278.5833333333333], [640.0, 284.83333333333337], [655.0, 281.0], [653.0, 280.19047619047615], [654.0, 277.8], [650.0, 283.0], [651.0, 285.2], [652.0, 285.4], [642.0, 280.6666666666667], [643.0, 279.5], [649.0, 284.2], [646.0, 282.99999999999994], [656.0, 280.0], [671.0, 278.0], [667.0, 273.5], [665.0, 273.0], [666.0, 273.0], [669.0, 274.0], [664.0, 271.0], [658.0, 274.875], [659.0, 272.6666666666667], [661.0, 271.0], [662.0, 271.4], [663.0, 274.5], [648.0, 286.25], [644.0, 275.0], [689.0, 302.3333333333333], [679.0, 288.4], [696.0, 283.5], [700.0, 287.0], [701.0, 288.0], [702.0, 287.0], [683.0, 295.0], [680.0, 292.0], [690.0, 304.0], [693.0, 281.1363636363637], [692.0, 294.8333333333333], [691.0, 304.5], [695.0, 281.0], [694.0, 281.0], [722.0, 262.5], [706.0, 279.2499999999999], [705.0, 288.0], [707.0, 282.77011494252866], [723.0, 256.57894736842104], [724.0, 250.66666666666666], [725.0, 248.14285714285714], [726.0, 247.14285714285714], [727.0, 247.0], [721.0, 277.0], [733.0, 251.5], [734.0, 251.0], [728.0, 248.75], [729.0, 249.0], [731.0, 249.62499999999997], [708.0, 320.0], [717.0, 273.0], [715.0, 269.0], [762.0, 270.0], [740.0, 260.0], [745.0, 262.0], [743.0, 266.0], [760.0, 269.0], [736.0, 257.0], [763.0, 269.0], [759.0, 268.3333333333333], [758.0, 267.0], [752.0, 265.0], [767.0, 253.05555555555554], [766.0, 261.6666666666667], [765.0, 267.25], [764.0, 265.0], [738.0, 256.0], [772.0, 243.0], [768.0, 240.63636363636365], [770.0, 242.65], [771.0, 243.25], [774.0, 243.7], [775.0, 246.5], [792.0, 252.4], [794.0, 242.0], [798.0, 226.66666666666666], [795.0, 236.5], [781.0, 251.0], [801.0, 226.66666666666666], [803.0, 228.5], [800.0, 226.7], [813.0, 218.5], [814.0, 209.0], [815.0, 217.5], [806.0, 229.5], [802.0, 227.75], [807.0, 229.25], [817.0, 234.5], [819.0, 239.0], [828.0, 218.0], [822.0, 215.0], [821.0, 214.0], [826.0, 219.0], [805.0, 228.0], [808.0, 230.11111111111111], [809.0, 229.8], [810.0, 224.5], [812.0, 220.6], [858.0, 211.125], [838.0, 217.25], [835.0, 219.0], [834.0, 218.8], [845.0, 220.6], [846.0, 221.5], [844.0, 221.0], [847.0, 221.33333333333334], [839.0, 215.83333333333334], [857.0, 195.0], [861.0, 195.0], [863.0, 232.0], [859.0, 215.0], [860.0, 194.0], [856.0, 217.2], [848.0, 222.25], [852.0, 227.0], [849.0, 224.6], [850.0, 227.0], [851.0, 226.0], [836.0, 216.0], [855.0, 219.0], [854.0, 217.0], [853.0, 223.33333333333331], [840.0, 217.0], [842.0, 217.5], [841.0, 217.0], [843.0, 219.83333333333334], [868.0, 195.0], [895.0, 213.5], [884.0, 207.0], [879.0, 205.0], [889.0, 212.0], [864.0, 215.0], [921.0, 195.5], [925.0, 192.71428571428572], [926.0, 195.0], [915.0, 227.0], [914.0, 226.0], [913.0, 226.0], [924.0, 191.75], [923.0, 192.5], [922.0, 194.0], [900.0, 216.0], [903.0, 217.16666666666666], [909.0, 220.9090909090909], [904.0, 218.4], [907.0, 219.0], [898.0, 216.0], [897.0, 215.0], [910.0, 223.71428571428572], [911.0, 226.0], [918.0, 203.66666666666669], [919.0, 197.0], [917.0, 206.66666666666666], [930.0, 199.0], [954.0, 214.0], [952.0, 34.39130434782609], [953.0, 213.0], [939.0, 206.0], [959.0, 212.5], [945.0, 212.0], [948.0, 213.0], [951.0, 213.0], [928.0, 199.5], [940.0, 207.0], [957.0, 220.0], [956.0, 215.0], [942.0, 210.0], [960.0, 215.0], [964.0, 210.49999999999997], [966.0, 210.5], [965.0, 208.0], [968.0, 199.0], [969.0, 194.0], [961.0, 216.0], [962.0, 215.0], [973.0, 189.8], [975.0, 40.03846153846153], [972.0, 192.0], [967.0, 203.5], [985.0, 192.0], [987.0, 197.0], [991.0, 201.0], [986.0, 195.5], [977.0, 191.66666666666666], [983.0, 192.5], [980.0, 189.0], [982.0, 192.0], [992.0, 203.75], [994.0, 205.66666666666666], [1016.0, 210.5], [1017.0, 61.51515151515152], [1018.0, 204.12499999999997], [1020.0, 211.24324324324323], [1023.0, 215.66666666666666], [1021.0, 223.33333333333334], [1019.0, 195.0], [1003.0, 213.0], [1000.0, 23.483870967741936], [1005.0, 215.5], [1006.0, 216.71428571428572], [1007.0, 217.66666666666666], [1008.0, 218.0], [1011.0, 217.5], [1012.0, 217.0], [1013.0, 214.0], [1010.0, 219.0], [1035.0, 213.0], [1030.0, 219.5], [1026.0, 216.16666666666666], [1041.0, 190.66666666666666], [1042.0, 190.0], [1054.0, 204.66666666666666], [1049.0, 123.0], [1044.0, 191.0], [1046.0, 49.0], [1047.0, 194.0], [1052.0, 199.5], [1032.0, 220.625], [1029.0, 218.4], [1028.0, 218.0], [1031.0, 219.4], [1027.0, 217.0], [1033.0, 219.0], [1036.0, 208.5], [1037.0, 71.45454545454544], [1038.0, 196.7], [1039.0, 191.0], [1057.0, 208.0], [1056.0, 206.5], [1086.0, 192.875], [1087.0, 189.0], [1084.0, 202.4], [1082.0, 186.5], [1083.0, 185.0], [1085.0, 200.0], [1073.0, 210.24999999999997], [1076.0, 208.33333333333334], [1075.0, 208.0], [1072.0, 214.0], [1079.0, 199.2], [1080.0, 206.0], [1077.0, 75.55555555555557], [1081.0, 202.5], [1065.0, 197.28571428571428], [1066.0, 216.2], [1069.0, 218.6], [1070.0, 214.88888888888889], [1064.0, 189.8], [1063.0, 212.5], [1060.0, 211.25], [1061.0, 50.0], [1058.0, 60.64705882352941], [1092.0, 195.33333333333337], [1088.0, 191.2], [1093.0, 198.0], [1094.0, 94.78888888888889], [1104.0, 210.5], [1090.0, 190.75], [1098.0, 202.0], [1106.0, 207.5], [1109.0, 215.33333333333334], [1107.0, 82.16129032258065], [1110.0, 212.81818181818184], [1115.0, 205.7142857142857], [1117.0, 201.33333333333334], [1118.0, 201.5], [1112.0, 212.8], [1114.0, 207.0], [1099.0, 202.0], [1103.0, 213.5], [1121.0, 200.4], [1120.0, 299.2068965517241], [1151.0, 207.5], [1150.0, 208.0], [1145.0, 205.0], [1146.0, 206.0], [1138.0, 199.5], [1139.0, 202.0], [1142.0, 205.0], [1141.0, 17.0], [1143.0, 203.5], [1122.0, 199.66666666666669], [1123.0, 189.54999999999998], [1129.0, 188.0], [1130.0, 188.5], [1131.0, 189.33333333333334], [1127.0, 187.0], [1125.0, 187.0], [1124.0, 185.66666666666666], [1126.0, 185.0], [1133.0, 274.0819672131148], [1134.0, 193.0], [1135.0, 196.0], [1132.0, 134.66666666666666], [1089.0, 190.0], [1164.0, 172.66666666666666], [1158.0, 193.0], [1157.0, 199.0769230769231], [1159.0, 191.9], [1153.0, 203.5], [1152.0, 214.0], [1180.0, 185.0], [1183.0, 186.0], [1178.0, 182.5], [1175.0, 180.0], [1177.0, 181.0], [1170.0, 176.0], [1173.0, 178.0], [1185.0, 191.66666666666666], [1187.0, 193.66666666666666], [1186.0, 69.45945945945947], [1184.0, 190.66666666666666], [1200.0, 175.7144771190077], [1165.0, 173.5], [1167.0, 175.0], [1188.0, 194.0], [1189.0, 195.0], [1190.0, 125.5], [1191.0, 76.14285714285714], [1193.0, 159.0], [1195.0, 124.75], [1197.0, 50.666666666666664], [1198.0, 50.454545454545446], [1196.0, 52.0], [1194.0, 67.27777777777779]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[1198.95079963397, 175.85183115400233]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67209.15, "minX": 1.63175304E12, "maxY": 8050651.933333334, "series": [{"data": [[1.63175382E12, 7892964.333333333], [1.63175316E12, 7890058.983333333], [1.63175346E12, 7758916.666666667], [1.63175376E12, 7984222.4], [1.63175358E12, 7893492.6], [1.63175388E12, 7899435.6], [1.63175322E12, 7922896.566666666], [1.63175352E12, 8050651.933333334], [1.63175334E12, 7940248.966666667], [1.63175364E12, 7783613.133333334], [1.63175394E12, 4842356.4], [1.63175328E12, 7864468.183333334], [1.6317531E12, 7880576.65], [1.6317534E12, 7894285.383333334], [1.6317537E12, 7899831.8], [1.63175304E12, 3236557.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63175382E12, 165349.83333333334], [1.63175316E12, 165016.95], [1.63175346E12, 162541.66666666666], [1.63175376E12, 167261.6], [1.63175358E12, 165360.9], [1.63175388E12, 165485.4], [1.63175322E12, 165972.33333333334], [1.63175352E12, 168653.23333333334], [1.63175334E12, 166340.3], [1.63175364E12, 163059.03333333333], [1.63175394E12, 101442.6], [1.63175328E12, 164752.23333333334], [1.6317531E12, 164089.75], [1.6317534E12, 165377.5], [1.6317537E12, 165493.7], [1.63175304E12, 67209.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63175394E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 82.59142285877516, "minX": 1.63175304E12, "maxY": 192.86988648711892, "series": [{"data": [[1.63175382E12, 170.06383334727732], [1.63175316E12, 178.9398393036496], [1.63175346E12, 176.87324255319163], [1.63175376E12, 186.03731639539507], [1.63175358E12, 187.4175241345834], [1.63175388E12, 168.92635503393703], [1.63175322E12, 175.61845307551343], [1.63175352E12, 178.37410390590424], [1.63175334E12, 165.79018013073346], [1.63175364E12, 179.6671700290128], [1.63175394E12, 173.1148475426812], [1.63175328E12, 188.10416631681616], [1.6317531E12, 177.04149558397214], [1.6317534E12, 176.12394813885498], [1.6317537E12, 192.86988648711892], [1.63175304E12, 82.59142285877516]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63175394E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 82.43281511404852, "minX": 1.63175304E12, "maxY": 192.71297457244464, "series": [{"data": [[1.63175382E12, 169.89201037396444], [1.63175316E12, 178.76083026447816], [1.63175346E12, 176.70585531914972], [1.63175376E12, 185.88011115521832], [1.63175358E12, 187.2546303267597], [1.63175388E12, 168.76232988932165], [1.63175322E12, 175.44339056509554], [1.63175352E12, 178.20667989960302], [1.63175334E12, 165.62553432130858], [1.63175364E12, 179.50757588611543], [1.63175394E12, 172.9425353188241], [1.63175328E12, 187.93076290113999], [1.6317531E12, 176.8716418910986], [1.6317534E12, 175.95663739021217], [1.6317537E12, 192.71297457244464], [1.63175304E12, 82.43281511404852]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63175394E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63175304E12, "maxY": 1.2172440527196429, "series": [{"data": [[1.63175382E12, 0.040558855517443766], [1.63175316E12, 0.11342484097757059], [1.63175346E12, 0.02953191489361688], [1.63175376E12, 0.06307066296149277], [1.63175358E12, 0.06028208603122089], [1.63175388E12, 0.03128030227037167], [1.63175322E12, 0.03397232872145399], [1.63175352E12, 0.042290719992126045], [1.63175334E12, 0.07823960880195685], [1.63175364E12, 0.07531771213329458], [1.63175394E12, 0.0], [1.63175328E12, 0.03801911031251605], [1.6317531E12, 0.07586854145368634], [1.6317534E12, 0.2513759933082387], [1.6317537E12, 0.03753113663339868], [1.63175304E12, 1.2172440527196429]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63175394E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.63175304E12, "maxY": 844.0, "series": [{"data": [[1.63175382E12, 744.0], [1.63175316E12, 692.0], [1.63175346E12, 781.0], [1.63175376E12, 769.0], [1.63175358E12, 774.0], [1.63175388E12, 708.0], [1.63175322E12, 694.0], [1.63175352E12, 690.0], [1.63175334E12, 654.0], [1.63175364E12, 654.0], [1.63175394E12, 669.0], [1.63175328E12, 762.0], [1.6317531E12, 844.0], [1.6317534E12, 725.0], [1.6317537E12, 767.0], [1.63175304E12, 538.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63175382E12, 462.0], [1.63175316E12, 448.0], [1.63175346E12, 499.0], [1.63175376E12, 439.0], [1.63175358E12, 546.0], [1.63175388E12, 422.0], [1.63175322E12, 411.0], [1.63175352E12, 475.0], [1.63175334E12, 477.0], [1.63175364E12, 490.0], [1.63175394E12, 473.0], [1.63175328E12, 481.0], [1.6317531E12, 525.0], [1.6317534E12, 497.0], [1.6317537E12, 528.0], [1.63175304E12, 87.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63175382E12, 678.9900000000016], [1.63175316E12, 600.0], [1.63175346E12, 630.0], [1.63175376E12, 715.0], [1.63175358E12, 748.0], [1.63175388E12, 527.0], [1.63175322E12, 485.0], [1.63175352E12, 555.0], [1.63175334E12, 580.0], [1.63175364E12, 585.0], [1.63175394E12, 567.9900000000016], [1.63175328E12, 579.0], [1.6317531E12, 776.0], [1.6317534E12, 577.0], [1.6317537E12, 722.0], [1.63175304E12, 111.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63175382E12, 576.0], [1.63175316E12, 523.0], [1.63175346E12, 576.0], [1.63175376E12, 551.0], [1.63175358E12, 627.0], [1.63175388E12, 480.0], [1.63175322E12, 454.0], [1.63175352E12, 512.0], [1.63175334E12, 533.0], [1.63175364E12, 545.0], [1.63175394E12, 512.0], [1.63175328E12, 524.0], [1.6317531E12, 579.9500000000007], [1.6317534E12, 529.0], [1.6317537E12, 652.0], [1.63175304E12, 94.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63175382E12, 12.0], [1.63175316E12, 12.0], [1.63175346E12, 10.0], [1.63175376E12, 15.0], [1.63175358E12, 14.0], [1.63175388E12, 7.0], [1.63175322E12, 15.0], [1.63175352E12, 13.0], [1.63175334E12, 12.0], [1.63175364E12, 18.0], [1.63175394E12, 14.0], [1.63175328E12, 13.0], [1.6317531E12, 15.0], [1.6317534E12, 14.0], [1.6317537E12, 15.0], [1.63175304E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63175382E12, 73.0], [1.63175316E12, 68.0], [1.63175346E12, 71.0], [1.63175376E12, 77.0], [1.63175358E12, 88.0], [1.63175388E12, 69.0], [1.63175322E12, 76.0], [1.63175352E12, 76.0], [1.63175334E12, 76.0], [1.63175364E12, 68.0], [1.63175394E12, 73.0], [1.63175328E12, 82.0], [1.6317531E12, 87.0], [1.6317534E12, 77.0], [1.6317537E12, 73.0], [1.63175304E12, 61.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63175394E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 704.0, "series": [{"data": [[2.0, 21.5], [3.0, 38.0], [10.0, 44.0], [12.0, 55.5], [13.0, 36.0], [19.0, 143.0], [22.0, 100.0], [23.0, 55.0], [24.0, 59.5], [25.0, 18.0], [27.0, 48.0], [28.0, 69.5], [32.0, 74.0], [35.0, 133.0], [40.0, 139.5], [43.0, 112.0], [44.0, 27.5], [45.0, 21.0], [46.0, 103.0], [47.0, 74.0], [49.0, 108.0], [51.0, 127.0], [52.0, 134.5], [55.0, 96.0], [61.0, 56.5], [63.0, 76.0], [62.0, 139.5], [64.0, 70.0], [71.0, 148.0], [68.0, 76.0], [70.0, 79.0], [75.0, 76.0], [74.0, 135.5], [77.0, 61.0], [82.0, 89.0], [84.0, 91.5], [87.0, 61.0], [91.0, 62.0], [97.0, 64.0], [99.0, 60.0], [102.0, 137.5], [100.0, 51.0], [105.0, 66.0], [110.0, 170.5], [108.0, 53.0], [118.0, 52.0], [132.0, 216.0], [129.0, 120.0], [131.0, 67.0], [130.0, 243.0], [147.0, 66.0], [162.0, 63.0], [164.0, 68.5], [173.0, 55.0], [169.0, 70.0], [174.0, 61.0], [183.0, 248.0], [192.0, 64.5], [208.0, 66.0], [230.0, 224.5], [225.0, 54.0], [226.0, 60.0], [236.0, 248.5], [270.0, 177.0], [278.0, 220.0], [318.0, 56.0], [312.0, 231.0], [329.0, 224.0], [323.0, 224.0], [322.0, 64.0], [331.0, 67.0], [333.0, 68.0], [344.0, 191.0], [367.0, 243.0], [352.0, 279.0], [373.0, 266.0], [369.0, 70.0], [391.0, 65.0], [411.0, 335.0], [427.0, 309.0], [431.0, 246.0], [421.0, 211.0], [429.0, 61.0], [419.0, 65.0], [438.0, 64.0], [456.0, 64.0], [457.0, 69.0], [470.0, 67.0], [465.0, 61.0], [482.0, 68.0], [486.0, 60.0], [493.0, 60.0], [488.0, 254.0], [497.0, 58.0], [498.0, 58.0], [502.0, 56.0], [524.0, 320.0], [531.0, 63.0], [513.0, 302.0], [543.0, 62.0], [528.0, 61.0], [538.0, 58.0], [568.0, 63.0], [563.0, 64.0], [557.0, 66.0], [558.0, 196.0], [567.0, 313.0], [564.0, 87.0], [569.0, 66.0], [550.0, 90.5], [547.0, 68.0], [549.0, 58.0], [561.0, 280.0], [574.0, 283.0], [577.0, 70.0], [598.0, 300.0], [587.0, 68.0], [581.0, 61.0], [592.0, 62.0], [580.0, 66.5], [583.0, 63.0], [595.0, 66.0], [636.0, 255.0], [615.0, 287.0], [630.0, 318.0], [633.0, 252.0], [631.0, 102.0], [634.0, 55.0], [635.0, 66.0], [608.0, 57.0], [623.0, 63.0], [646.0, 222.0], [649.0, 306.0], [650.0, 345.0], [664.0, 96.0], [663.0, 64.0], [652.0, 334.0], [644.0, 205.0], [642.0, 334.5], [666.0, 289.5], [651.0, 65.0], [648.0, 65.5], [662.0, 66.0], [667.0, 69.0], [660.0, 62.0], [669.0, 61.0], [687.0, 262.0], [685.0, 72.0], [684.0, 63.0], [676.0, 67.0], [692.0, 317.0], [691.0, 292.0], [682.0, 317.0], [695.0, 62.0], [706.0, 70.0], [717.0, 95.0], [726.0, 65.0], [761.0, 275.0], [741.0, 59.0], [756.0, 70.0], [760.0, 66.0], [752.0, 64.5], [747.0, 64.0], [767.0, 63.0], [759.0, 64.0], [764.0, 58.0], [781.0, 58.0], [775.0, 59.0], [798.0, 58.0], [788.0, 334.0], [780.0, 63.0], [777.0, 59.0], [817.0, 65.0], [828.0, 283.5], [831.0, 271.0], [820.0, 60.0], [802.0, 62.0], [827.0, 96.5], [826.0, 65.0], [818.0, 64.0], [860.0, 61.0], [852.0, 269.0], [845.0, 279.0], [833.0, 66.0], [857.0, 56.0], [889.0, 60.0], [888.0, 65.0], [882.0, 68.0], [878.0, 59.0], [869.0, 65.0], [870.0, 62.5], [895.0, 54.0], [890.0, 67.0], [877.0, 64.0], [884.0, 62.0], [883.0, 63.0], [923.0, 63.0], [927.0, 62.0], [921.0, 66.0], [915.0, 64.0], [914.0, 65.0], [926.0, 64.0], [902.0, 65.0], [899.0, 61.0], [909.0, 70.0], [925.0, 62.0], [904.0, 65.0], [907.0, 68.0], [908.0, 67.0], [940.0, 64.0], [958.0, 61.0], [949.0, 64.0], [935.0, 62.0], [950.0, 68.0], [953.0, 67.0], [959.0, 69.0], [956.0, 66.0], [985.0, 62.0], [969.0, 60.0], [968.0, 59.0], [981.0, 60.0], [983.0, 64.0], [982.0, 60.0], [980.0, 62.0], [979.0, 64.0], [978.0, 63.0], [988.0, 63.0], [972.0, 65.0], [973.0, 65.0], [975.0, 66.0], [974.0, 66.0], [971.0, 62.0], [984.0, 64.0], [964.0, 64.0], [965.0, 65.0], [961.0, 63.0], [963.0, 65.0], [960.0, 66.0], [970.0, 65.0], [989.0, 65.0], [991.0, 63.0], [990.0, 64.0], [977.0, 63.0], [976.0, 64.0], [987.0, 63.0], [986.0, 60.5], [1017.0, 63.0], [1006.0, 64.0], [1013.0, 63.0], [1011.0, 63.0], [1012.0, 64.0], [1014.0, 63.0], [1015.0, 63.0], [1010.0, 61.0], [1001.0, 62.0], [1000.0, 64.0], [1002.0, 64.0], [1004.0, 63.0], [1005.0, 62.0], [1003.0, 64.0], [997.0, 64.0], [1008.0, 63.0], [1021.0, 64.0], [1023.0, 61.0], [1022.0, 64.0], [1009.0, 63.0], [992.0, 63.0], [1007.0, 65.0], [996.0, 63.0], [995.0, 62.0], [993.0, 65.0], [994.0, 63.0], [1020.0, 65.0], [1019.0, 63.0], [1018.0, 63.0], [999.0, 64.0], [998.0, 65.0], [1016.0, 63.0], [1024.0, 65.0], [1048.0, 66.0], [1043.0, 62.0], [1041.0, 66.0], [1040.0, 58.0], [1042.0, 61.0], [1033.0, 63.0], [1029.0, 40.0], [1028.0, 64.0], [1032.0, 62.0], [1031.0, 64.0], [1035.0, 58.0], [1034.0, 64.0], [1045.0, 64.0], [1046.0, 66.0], [1044.0, 64.0], [1053.0, 65.0], [1049.0, 95.5], [1051.0, 66.0], [1027.0, 65.0], [1036.0, 63.0], [1082.0, 67.0], [1039.0, 63.0], [1038.0, 63.0], [1060.0, 68.0], [1025.0, 64.0], [1026.0, 64.0], [1106.0, 70.0], [1092.0, 66.0], [1127.0, 302.0], [1115.0, 56.0], [1108.0, 67.0], [1139.0, 348.0], [1164.0, 70.0], [1201.0, 71.0], [1173.0, 65.0], [1167.0, 61.0], [1214.0, 429.5], [1184.0, 92.0], [1172.0, 64.0], [1242.0, 665.0], [1241.0, 497.0], [1246.0, 84.0], [1226.0, 388.0], [1268.0, 124.0], [1233.0, 208.0], [1234.0, 367.0], [1237.0, 73.0], [1251.0, 102.0], [1253.0, 86.0], [1259.0, 58.0], [1275.0, 342.0], [1279.0, 412.0], [1338.0, 83.0], [1317.0, 69.0], [1341.0, 78.0], [1319.0, 77.0], [1322.0, 79.5], [1286.0, 389.0], [1296.0, 377.0], [1309.0, 81.0], [1293.0, 75.0], [1328.0, 66.0], [1366.0, 74.0], [1381.0, 75.0], [1380.0, 625.0], [1390.0, 96.0], [1409.0, 468.0], [1408.0, 90.0], [1428.0, 94.0], [1415.0, 461.0], [1505.0, 704.0], [1495.0, 91.0], [1530.0, 76.0], [1474.0, 141.5], [1492.0, 88.0], [1504.0, 95.0], [1491.0, 100.0], [1549.0, 478.0], [1578.0, 149.5], [1558.0, 124.0], [1581.0, 472.0], [1553.0, 359.0], [1585.0, 97.0], [1599.0, 182.0], [1593.0, 469.0], [1557.0, 150.0], [1560.0, 91.0], [1628.0, 393.0], [1631.0, 260.0], [1656.0, 158.0], [1620.0, 562.0], [1622.0, 114.0], [1616.0, 235.5], [1629.0, 193.0], [1648.0, 533.0], [1621.0, 372.0], [1676.0, 467.0], [1689.0, 265.0], [1704.0, 250.0], [1682.0, 140.0], [1712.0, 174.0], [1714.0, 198.0], [1669.0, 436.0], [1668.0, 250.0], [1692.0, 263.0], [1667.0, 194.0], [1697.0, 595.0], [1696.0, 513.0], [1726.0, 475.0], [1716.0, 399.5], [1762.0, 389.0], [1786.0, 427.0], [1775.0, 378.0], [1754.0, 359.5], [1773.0, 375.0], [1787.0, 610.0], [1744.0, 381.0], [1766.0, 237.0], [1763.0, 343.0], [1781.0, 238.0], [1803.0, 429.0], [1827.0, 441.0], [1832.0, 357.0], [1826.0, 535.0], [1820.0, 336.0], [1822.0, 254.0], [1823.0, 469.0], [1795.0, 403.0], [1792.0, 281.0], [1794.0, 303.0], [1797.0, 235.0], [1800.0, 330.0], [1848.0, 402.0], [1805.0, 466.0], [1844.0, 375.0], [1842.0, 372.0], [1810.0, 392.0], [1818.0, 491.5], [1814.0, 443.0], [1833.0, 336.0], [1834.0, 373.0], [1870.0, 475.0], [1862.0, 419.0], [1908.0, 271.0], [1896.0, 362.0], [1865.0, 394.0], [1888.0, 323.0], [1895.0, 542.0], [1910.0, 389.5], [1919.0, 494.0], [1872.0, 342.0], [1877.0, 283.0], [1879.0, 301.0], [1975.0, 301.0], [1959.0, 292.0], [1955.0, 364.0], [1931.0, 387.0], [1963.0, 416.0], [1920.0, 312.0], [1976.0, 326.0], [1988.0, 457.0], [2001.0, 268.0], [1995.0, 313.0], [1996.0, 417.5], [2003.0, 343.0], [2008.0, 370.0], [2011.0, 340.0], [2012.0, 298.0], [2019.0, 341.0], [2026.0, 294.0], [2039.0, 317.0], [2038.0, 307.5], [2040.0, 306.0], [2042.0, 328.5], [2074.0, 303.5], [2076.0, 303.5], [2066.0, 331.0], [2060.0, 322.0], [2048.0, 300.0], [2050.0, 286.0], [2058.0, 302.0], [2132.0, 312.0], [2158.0, 327.0], [2152.0, 356.0], [2160.0, 345.0], [2122.0, 258.0], [2112.0, 301.0], [2116.0, 261.0], [2120.0, 359.0], [2126.0, 344.0], [2094.0, 315.0], [2084.0, 285.0], [2080.0, 294.0], [2098.0, 322.5], [2106.0, 335.0], [2248.0, 431.5], [2192.0, 315.0], [2063.0, 382.0], [2051.0, 300.0], [2069.0, 287.0], [2059.0, 307.0], [2111.0, 324.0], [2101.0, 317.0], [2165.0, 308.0], [2163.0, 296.0], [2167.0, 303.0], [2083.0, 307.0], [2093.0, 324.0], [2139.0, 310.0], [2127.0, 319.0], [2215.0, 366.0], [2177.0, 305.0], [2195.0, 300.0], [1.0, 21.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2248.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 704.0, "series": [{"data": [[2.0, 21.5], [3.0, 37.5], [10.0, 44.0], [12.0, 55.5], [13.0, 36.0], [19.0, 143.0], [22.0, 99.5], [23.0, 55.0], [24.0, 59.5], [25.0, 18.0], [27.0, 48.0], [28.0, 69.5], [32.0, 74.0], [35.0, 133.0], [40.0, 139.5], [43.0, 112.0], [44.0, 27.0], [45.0, 21.0], [46.0, 103.0], [47.0, 73.0], [49.0, 108.0], [51.0, 127.0], [52.0, 134.5], [55.0, 96.0], [61.0, 56.5], [63.0, 76.0], [62.0, 139.5], [64.0, 70.0], [71.0, 148.0], [68.0, 75.5], [70.0, 79.0], [75.0, 75.0], [74.0, 135.5], [77.0, 61.0], [82.0, 89.0], [84.0, 91.0], [87.0, 61.0], [91.0, 62.0], [97.0, 64.0], [99.0, 60.0], [102.0, 137.5], [100.0, 51.0], [105.0, 66.0], [110.0, 170.5], [108.0, 53.0], [118.0, 52.0], [132.0, 216.0], [129.0, 120.0], [131.0, 67.0], [130.0, 242.0], [147.0, 66.0], [162.0, 63.0], [164.0, 68.5], [173.0, 55.0], [169.0, 70.0], [174.0, 61.0], [183.0, 248.0], [192.0, 64.0], [208.0, 66.0], [230.0, 224.0], [225.0, 54.0], [226.0, 60.0], [236.0, 248.0], [270.0, 177.0], [278.0, 220.0], [318.0, 56.0], [312.0, 231.0], [329.0, 224.0], [323.0, 224.0], [322.0, 64.0], [331.0, 67.0], [333.0, 68.0], [344.0, 191.0], [367.0, 243.0], [352.0, 278.0], [373.0, 266.0], [369.0, 70.0], [391.0, 65.0], [411.0, 335.0], [427.0, 308.0], [431.0, 246.0], [421.0, 211.0], [429.0, 61.0], [419.0, 65.0], [438.0, 64.0], [456.0, 64.0], [457.0, 68.0], [470.0, 67.0], [465.0, 61.0], [482.0, 68.0], [486.0, 59.0], [493.0, 60.0], [488.0, 254.0], [497.0, 58.0], [498.0, 58.0], [502.0, 56.0], [524.0, 320.0], [531.0, 63.0], [513.0, 302.0], [543.0, 62.0], [528.0, 61.0], [538.0, 58.0], [568.0, 63.0], [563.0, 64.0], [557.0, 66.0], [558.0, 195.0], [567.0, 313.0], [564.0, 87.0], [569.0, 65.0], [550.0, 90.0], [547.0, 68.0], [549.0, 58.0], [561.0, 280.0], [574.0, 283.0], [577.0, 70.0], [598.0, 300.0], [587.0, 68.0], [581.0, 61.0], [592.0, 62.0], [580.0, 66.5], [583.0, 63.0], [595.0, 66.0], [636.0, 254.0], [615.0, 287.0], [630.0, 317.5], [633.0, 251.0], [631.0, 102.0], [634.0, 54.5], [635.0, 66.0], [608.0, 57.0], [623.0, 63.0], [646.0, 222.0], [649.0, 306.0], [650.0, 345.0], [664.0, 95.5], [663.0, 63.0], [652.0, 334.0], [644.0, 205.0], [642.0, 334.0], [666.0, 289.0], [651.0, 65.0], [648.0, 65.0], [662.0, 66.0], [667.0, 69.0], [660.0, 62.0], [669.0, 61.0], [687.0, 262.0], [685.0, 72.0], [684.0, 63.0], [676.0, 67.0], [692.0, 317.0], [691.0, 292.0], [682.0, 316.5], [695.0, 62.0], [706.0, 70.0], [717.0, 95.0], [726.0, 65.0], [761.0, 274.0], [741.0, 59.0], [756.0, 70.0], [760.0, 66.0], [752.0, 64.0], [747.0, 63.0], [767.0, 62.0], [759.0, 63.0], [764.0, 58.0], [781.0, 58.0], [775.0, 59.0], [798.0, 58.0], [788.0, 334.0], [780.0, 63.0], [777.0, 59.0], [817.0, 65.0], [828.0, 283.0], [831.0, 271.0], [820.0, 60.0], [802.0, 62.0], [827.0, 96.5], [826.0, 65.0], [818.0, 64.0], [860.0, 61.0], [852.0, 268.5], [845.0, 279.0], [833.0, 66.0], [857.0, 55.0], [889.0, 60.0], [888.0, 65.0], [882.0, 68.0], [878.0, 59.0], [869.0, 65.0], [870.0, 62.0], [895.0, 53.0], [890.0, 66.5], [877.0, 64.0], [884.0, 62.0], [883.0, 63.0], [923.0, 63.0], [927.0, 62.0], [921.0, 66.0], [915.0, 64.0], [914.0, 65.0], [926.0, 64.0], [902.0, 65.0], [899.0, 61.0], [909.0, 70.0], [925.0, 62.0], [904.0, 64.0], [907.0, 68.0], [908.0, 67.0], [940.0, 64.0], [958.0, 61.0], [949.0, 64.0], [935.0, 62.0], [950.0, 68.0], [953.0, 67.0], [959.0, 69.0], [956.0, 66.0], [985.0, 62.0], [969.0, 60.0], [968.0, 58.0], [981.0, 60.0], [983.0, 64.0], [982.0, 60.0], [980.0, 61.0], [979.0, 64.0], [978.0, 62.0], [988.0, 63.0], [972.0, 64.5], [973.0, 65.0], [975.0, 66.0], [974.0, 66.0], [971.0, 62.0], [984.0, 64.0], [964.0, 64.0], [965.0, 65.0], [961.0, 63.0], [963.0, 65.0], [960.0, 65.0], [970.0, 64.0], [989.0, 64.0], [991.0, 63.0], [990.0, 64.0], [977.0, 63.0], [976.0, 64.0], [987.0, 63.0], [986.0, 60.0], [1017.0, 63.0], [1006.0, 64.0], [1013.0, 63.0], [1011.0, 63.0], [1012.0, 64.0], [1014.0, 63.0], [1015.0, 63.0], [1010.0, 61.0], [1001.0, 62.0], [1000.0, 64.0], [1002.0, 63.0], [1004.0, 63.0], [1005.0, 62.0], [1003.0, 64.0], [997.0, 63.0], [1008.0, 63.0], [1021.0, 64.0], [1023.0, 61.0], [1022.0, 64.0], [1009.0, 62.0], [992.0, 63.0], [1007.0, 64.0], [996.0, 63.0], [995.0, 62.0], [993.0, 64.0], [994.0, 63.0], [1020.0, 65.0], [1019.0, 63.0], [1018.0, 63.0], [999.0, 64.0], [998.0, 65.0], [1016.0, 63.0], [1024.0, 64.0], [1048.0, 66.0], [1043.0, 62.0], [1041.0, 66.0], [1040.0, 58.0], [1042.0, 61.0], [1033.0, 63.0], [1029.0, 40.0], [1028.0, 64.0], [1032.0, 62.0], [1031.0, 64.0], [1035.0, 58.0], [1034.0, 64.0], [1045.0, 64.0], [1046.0, 66.0], [1044.0, 64.0], [1053.0, 65.0], [1049.0, 95.0], [1051.0, 66.0], [1027.0, 65.0], [1036.0, 63.0], [1082.0, 66.0], [1039.0, 63.0], [1038.0, 63.0], [1060.0, 68.0], [1025.0, 64.0], [1026.0, 64.0], [1106.0, 70.0], [1092.0, 65.0], [1127.0, 301.0], [1115.0, 56.0], [1108.0, 67.0], [1139.0, 348.0], [1164.0, 70.0], [1201.0, 71.0], [1173.0, 65.0], [1167.0, 61.0], [1214.0, 429.0], [1184.0, 92.0], [1172.0, 63.0], [1242.0, 665.0], [1241.0, 496.5], [1246.0, 84.0], [1226.0, 387.5], [1268.0, 124.0], [1233.0, 207.5], [1234.0, 366.5], [1237.0, 72.0], [1251.0, 102.0], [1253.0, 86.0], [1259.0, 58.0], [1275.0, 342.0], [1279.0, 412.0], [1338.0, 83.0], [1317.0, 68.0], [1341.0, 78.0], [1319.0, 76.0], [1322.0, 79.0], [1286.0, 388.5], [1296.0, 377.0], [1309.0, 81.0], [1293.0, 75.0], [1328.0, 65.5], [1366.0, 74.0], [1381.0, 75.0], [1380.0, 625.0], [1390.0, 96.0], [1409.0, 468.0], [1408.0, 90.0], [1428.0, 93.5], [1415.0, 461.0], [1505.0, 704.0], [1495.0, 91.0], [1530.0, 76.0], [1474.0, 141.5], [1492.0, 88.0], [1504.0, 95.0], [1491.0, 99.0], [1549.0, 477.0], [1578.0, 149.0], [1558.0, 124.0], [1581.0, 472.0], [1553.0, 358.0], [1585.0, 96.0], [1599.0, 182.0], [1593.0, 469.0], [1557.0, 150.0], [1560.0, 91.0], [1628.0, 393.0], [1631.0, 259.0], [1656.0, 157.5], [1620.0, 562.0], [1622.0, 113.0], [1616.0, 235.0], [1629.0, 193.0], [1648.0, 533.0], [1621.0, 371.0], [1676.0, 467.0], [1689.0, 265.0], [1704.0, 250.0], [1682.0, 139.0], [1712.0, 174.0], [1714.0, 198.0], [1669.0, 436.0], [1668.0, 249.0], [1692.0, 263.0], [1667.0, 194.0], [1697.0, 595.0], [1696.0, 513.0], [1726.0, 475.0], [1716.0, 399.0], [1762.0, 388.5], [1786.0, 427.0], [1775.0, 377.0], [1754.0, 359.0], [1773.0, 375.0], [1787.0, 610.0], [1744.0, 380.5], [1766.0, 237.0], [1763.0, 343.0], [1781.0, 237.0], [1803.0, 429.0], [1827.0, 440.0], [1832.0, 356.0], [1826.0, 535.0], [1820.0, 335.0], [1822.0, 253.5], [1823.0, 469.0], [1795.0, 402.0], [1792.0, 280.5], [1794.0, 303.0], [1797.0, 235.0], [1800.0, 329.5], [1848.0, 402.0], [1805.0, 466.0], [1844.0, 375.0], [1842.0, 371.5], [1810.0, 391.5], [1818.0, 491.5], [1814.0, 442.5], [1833.0, 336.0], [1834.0, 372.0], [1870.0, 475.0], [1862.0, 419.0], [1908.0, 271.0], [1896.0, 362.0], [1865.0, 394.0], [1888.0, 323.0], [1895.0, 541.0], [1910.0, 389.0], [1919.0, 494.0], [1872.0, 342.0], [1877.0, 283.0], [1879.0, 301.0], [1975.0, 300.0], [1959.0, 291.0], [1955.0, 364.0], [1931.0, 387.0], [1963.0, 415.0], [1920.0, 312.0], [1976.0, 326.0], [1988.0, 457.0], [2001.0, 268.0], [1995.0, 312.0], [1996.0, 417.0], [2003.0, 343.0], [2008.0, 370.0], [2011.0, 340.0], [2012.0, 298.0], [2019.0, 341.0], [2026.0, 293.0], [2039.0, 317.0], [2038.0, 307.5], [2040.0, 306.0], [2042.0, 328.0], [2074.0, 303.0], [2076.0, 303.0], [2066.0, 331.0], [2060.0, 322.0], [2048.0, 299.5], [2050.0, 285.5], [2058.0, 302.0], [2132.0, 312.0], [2158.0, 326.0], [2152.0, 356.0], [2160.0, 344.0], [2122.0, 258.0], [2112.0, 301.0], [2116.0, 261.0], [2120.0, 359.0], [2126.0, 344.0], [2094.0, 315.0], [2084.0, 285.0], [2080.0, 294.0], [2098.0, 322.5], [2106.0, 335.0], [2248.0, 431.5], [2192.0, 315.0], [2063.0, 381.0], [2051.0, 299.5], [2069.0, 287.0], [2059.0, 307.0], [2111.0, 324.0], [2101.0, 317.0], [2165.0, 308.0], [2163.0, 295.0], [2167.0, 303.0], [2083.0, 307.0], [2093.0, 324.0], [2139.0, 310.0], [2127.0, 319.0], [2215.0, 366.0], [2177.0, 305.0], [2195.0, 300.0], [1.0, 21.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2248.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 409.4166666666667, "minX": 1.63175304E12, "maxY": 1009.15, "series": [{"data": [[1.63175382E12, 995.8], [1.63175316E12, 994.15], [1.63175346E12, 992.9666666666667], [1.63175376E12, 996.4833333333333], [1.63175358E12, 996.95], [1.63175388E12, 997.7], [1.63175322E12, 1000.6666666666666], [1.63175352E12, 1002.1], [1.63175334E12, 998.9833333333333], [1.63175364E12, 980.6833333333333], [1.63175394E12, 609.5], [1.63175328E12, 995.6666666666666], [1.6317531E12, 995.0333333333333], [1.6317534E12, 996.1833333333333], [1.6317537E12, 1009.15], [1.63175304E12, 409.4166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63175394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 408.45, "minX": 1.63175304E12, "maxY": 1015.9833333333333, "series": [{"data": [[1.63175382E12, 996.0833333333334], [1.63175316E12, 995.6666666666666], [1.63175346E12, 979.1666666666666], [1.63175376E12, 1007.6], [1.63175358E12, 996.15], [1.63175388E12, 996.9], [1.63175322E12, 999.8333333333334], [1.63175352E12, 1015.9833333333333], [1.63175334E12, 1002.05], [1.63175364E12, 982.2833333333333], [1.63175394E12, 611.1], [1.63175328E12, 992.4833333333333], [1.6317531E12, 994.4833333333333], [1.6317534E12, 996.25], [1.6317537E12, 996.95], [1.63175304E12, 408.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63175394E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 408.45, "minX": 1.63175304E12, "maxY": 1015.9833333333333, "series": [{"data": [[1.63175382E12, 996.0833333333334], [1.63175316E12, 995.6666666666666], [1.63175346E12, 979.1666666666666], [1.63175376E12, 1007.6], [1.63175358E12, 996.15], [1.63175388E12, 996.9], [1.63175322E12, 999.8333333333334], [1.63175352E12, 1015.9833333333333], [1.63175334E12, 1002.05], [1.63175364E12, 982.2833333333333], [1.63175394E12, 611.1], [1.63175328E12, 992.4833333333333], [1.6317531E12, 994.4833333333333], [1.6317534E12, 996.25], [1.6317537E12, 996.95], [1.63175304E12, 408.45]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63175394E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 408.45, "minX": 1.63175304E12, "maxY": 1015.9833333333333, "series": [{"data": [[1.63175382E12, 996.0833333333334], [1.63175316E12, 995.6666666666666], [1.63175346E12, 979.1666666666666], [1.63175376E12, 1007.6], [1.63175358E12, 996.15], [1.63175388E12, 996.9], [1.63175322E12, 999.8333333333334], [1.63175352E12, 1015.9833333333333], [1.63175334E12, 1002.05], [1.63175364E12, 982.2833333333333], [1.63175394E12, 611.1], [1.63175328E12, 992.4833333333333], [1.6317531E12, 994.4833333333333], [1.6317534E12, 996.25], [1.6317537E12, 996.95], [1.63175304E12, 408.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63175394E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

