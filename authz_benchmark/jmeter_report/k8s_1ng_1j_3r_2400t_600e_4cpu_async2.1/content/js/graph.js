/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2431.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 6.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 12.0], [9.1, 12.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 16.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 17.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 18.0], [21.9, 18.0], [22.0, 18.0], [22.1, 18.0], [22.2, 18.0], [22.3, 18.0], [22.4, 18.0], [22.5, 18.0], [22.6, 18.0], [22.7, 18.0], [22.8, 18.0], [22.9, 18.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 19.0], [23.7, 19.0], [23.8, 19.0], [23.9, 19.0], [24.0, 19.0], [24.1, 19.0], [24.2, 19.0], [24.3, 19.0], [24.4, 19.0], [24.5, 19.0], [24.6, 19.0], [24.7, 19.0], [24.8, 19.0], [24.9, 19.0], [25.0, 19.0], [25.1, 19.0], [25.2, 19.0], [25.3, 19.0], [25.4, 19.0], [25.5, 19.0], [25.6, 19.0], [25.7, 19.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 20.0], [26.2, 20.0], [26.3, 20.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 20.0], [26.8, 20.0], [26.9, 20.0], [27.0, 20.0], [27.1, 20.0], [27.2, 20.0], [27.3, 20.0], [27.4, 20.0], [27.5, 20.0], [27.6, 20.0], [27.7, 20.0], [27.8, 20.0], [27.9, 20.0], [28.0, 20.0], [28.1, 20.0], [28.2, 20.0], [28.3, 20.0], [28.4, 20.0], [28.5, 20.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 21.0], [29.0, 21.0], [29.1, 21.0], [29.2, 21.0], [29.3, 21.0], [29.4, 21.0], [29.5, 21.0], [29.6, 21.0], [29.7, 21.0], [29.8, 21.0], [29.9, 21.0], [30.0, 21.0], [30.1, 21.0], [30.2, 21.0], [30.3, 21.0], [30.4, 21.0], [30.5, 21.0], [30.6, 21.0], [30.7, 21.0], [30.8, 21.0], [30.9, 21.0], [31.0, 21.0], [31.1, 21.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 22.0], [32.7, 22.0], [32.8, 22.0], [32.9, 22.0], [33.0, 22.0], [33.1, 22.0], [33.2, 22.0], [33.3, 22.0], [33.4, 22.0], [33.5, 22.0], [33.6, 22.0], [33.7, 22.0], [33.8, 23.0], [33.9, 23.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 23.0], [35.0, 23.0], [35.1, 23.0], [35.2, 23.0], [35.3, 23.0], [35.4, 23.0], [35.5, 23.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 23.0], [36.3, 23.0], [36.4, 23.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 25.0], [39.3, 25.0], [39.4, 25.0], [39.5, 25.0], [39.6, 25.0], [39.7, 25.0], [39.8, 25.0], [39.9, 25.0], [40.0, 25.0], [40.1, 25.0], [40.2, 25.0], [40.3, 25.0], [40.4, 25.0], [40.5, 25.0], [40.6, 25.0], [40.7, 25.0], [40.8, 25.0], [40.9, 25.0], [41.0, 25.0], [41.1, 25.0], [41.2, 25.0], [41.3, 25.0], [41.4, 25.0], [41.5, 25.0], [41.6, 25.0], [41.7, 25.0], [41.8, 25.0], [41.9, 26.0], [42.0, 26.0], [42.1, 26.0], [42.2, 26.0], [42.3, 26.0], [42.4, 26.0], [42.5, 26.0], [42.6, 26.0], [42.7, 26.0], [42.8, 26.0], [42.9, 26.0], [43.0, 26.0], [43.1, 26.0], [43.2, 26.0], [43.3, 26.0], [43.4, 26.0], [43.5, 26.0], [43.6, 26.0], [43.7, 26.0], [43.8, 26.0], [43.9, 26.0], [44.0, 26.0], [44.1, 26.0], [44.2, 26.0], [44.3, 26.0], [44.4, 26.0], [44.5, 26.0], [44.6, 27.0], [44.7, 27.0], [44.8, 27.0], [44.9, 27.0], [45.0, 27.0], [45.1, 27.0], [45.2, 27.0], [45.3, 27.0], [45.4, 27.0], [45.5, 27.0], [45.6, 27.0], [45.7, 27.0], [45.8, 27.0], [45.9, 27.0], [46.0, 27.0], [46.1, 27.0], [46.2, 27.0], [46.3, 27.0], [46.4, 27.0], [46.5, 27.0], [46.6, 27.0], [46.7, 27.0], [46.8, 27.0], [46.9, 27.0], [47.0, 27.0], [47.1, 27.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 28.0], [48.8, 28.0], [48.9, 28.0], [49.0, 28.0], [49.1, 28.0], [49.2, 28.0], [49.3, 28.0], [49.4, 28.0], [49.5, 28.0], [49.6, 28.0], [49.7, 29.0], [49.8, 29.0], [49.9, 29.0], [50.0, 29.0], [50.1, 29.0], [50.2, 29.0], [50.3, 29.0], [50.4, 29.0], [50.5, 29.0], [50.6, 29.0], [50.7, 29.0], [50.8, 29.0], [50.9, 29.0], [51.0, 29.0], [51.1, 29.0], [51.2, 29.0], [51.3, 29.0], [51.4, 29.0], [51.5, 29.0], [51.6, 29.0], [51.7, 29.0], [51.8, 29.0], [51.9, 29.0], [52.0, 30.0], [52.1, 30.0], [52.2, 30.0], [52.3, 30.0], [52.4, 30.0], [52.5, 30.0], [52.6, 30.0], [52.7, 30.0], [52.8, 30.0], [52.9, 30.0], [53.0, 30.0], [53.1, 30.0], [53.2, 30.0], [53.3, 30.0], [53.4, 30.0], [53.5, 30.0], [53.6, 30.0], [53.7, 30.0], [53.8, 30.0], [53.9, 30.0], [54.0, 30.0], [54.1, 30.0], [54.2, 31.0], [54.3, 31.0], [54.4, 31.0], [54.5, 31.0], [54.6, 31.0], [54.7, 31.0], [54.8, 31.0], [54.9, 31.0], [55.0, 31.0], [55.1, 31.0], [55.2, 31.0], [55.3, 31.0], [55.4, 31.0], [55.5, 31.0], [55.6, 31.0], [55.7, 31.0], [55.8, 31.0], [55.9, 31.0], [56.0, 31.0], [56.1, 31.0], [56.2, 32.0], [56.3, 32.0], [56.4, 32.0], [56.5, 32.0], [56.6, 32.0], [56.7, 32.0], [56.8, 32.0], [56.9, 32.0], [57.0, 32.0], [57.1, 32.0], [57.2, 32.0], [57.3, 32.0], [57.4, 32.0], [57.5, 32.0], [57.6, 32.0], [57.7, 32.0], [57.8, 32.0], [57.9, 33.0], [58.0, 33.0], [58.1, 33.0], [58.2, 33.0], [58.3, 33.0], [58.4, 33.0], [58.5, 33.0], [58.6, 33.0], [58.7, 33.0], [58.8, 33.0], [58.9, 33.0], [59.0, 33.0], [59.1, 33.0], [59.2, 33.0], [59.3, 33.0], [59.4, 34.0], [59.5, 34.0], [59.6, 34.0], [59.7, 34.0], [59.8, 34.0], [59.9, 34.0], [60.0, 34.0], [60.1, 34.0], [60.2, 34.0], [60.3, 34.0], [60.4, 34.0], [60.5, 34.0], [60.6, 34.0], [60.7, 35.0], [60.8, 35.0], [60.9, 35.0], [61.0, 35.0], [61.1, 35.0], [61.2, 35.0], [61.3, 35.0], [61.4, 35.0], [61.5, 35.0], [61.6, 35.0], [61.7, 36.0], [61.8, 36.0], [61.9, 36.0], [62.0, 36.0], [62.1, 36.0], [62.2, 36.0], [62.3, 36.0], [62.4, 36.0], [62.5, 36.0], [62.6, 37.0], [62.7, 37.0], [62.8, 37.0], [62.9, 37.0], [63.0, 37.0], [63.1, 37.0], [63.2, 38.0], [63.3, 38.0], [63.4, 38.0], [63.5, 38.0], [63.6, 38.0], [63.7, 39.0], [63.8, 39.0], [63.9, 39.0], [64.0, 39.0], [64.1, 40.0], [64.2, 40.0], [64.3, 41.0], [64.4, 41.0], [64.5, 42.0], [64.6, 42.0], [64.7, 43.0], [64.8, 44.0], [64.9, 45.0], [65.0, 47.0], [65.1, 49.0], [65.2, 52.0], [65.3, 54.0], [65.4, 56.0], [65.5, 58.0], [65.6, 61.0], [65.7, 63.0], [65.8, 66.0], [65.9, 69.0], [66.0, 72.0], [66.1, 75.0], [66.2, 78.0], [66.3, 81.0], [66.4, 84.0], [66.5, 88.0], [66.6, 91.0], [66.7, 94.0], [66.8, 98.0], [66.9, 102.0], [67.0, 105.0], [67.1, 108.0], [67.2, 111.0], [67.3, 114.0], [67.4, 117.0], [67.5, 119.0], [67.6, 122.0], [67.7, 124.0], [67.8, 127.0], [67.9, 129.0], [68.0, 132.0], [68.1, 134.0], [68.2, 136.0], [68.3, 139.0], [68.4, 141.0], [68.5, 144.0], [68.6, 146.0], [68.7, 148.0], [68.8, 150.0], [68.9, 153.0], [69.0, 155.0], [69.1, 157.0], [69.2, 159.0], [69.3, 162.0], [69.4, 164.0], [69.5, 167.0], [69.6, 169.0], [69.7, 171.0], [69.8, 173.0], [69.9, 175.0], [70.0, 177.0], [70.1, 179.0], [70.2, 181.0], [70.3, 183.0], [70.4, 185.0], [70.5, 187.0], [70.6, 189.0], [70.7, 192.0], [70.8, 194.0], [70.9, 197.0], [71.0, 199.0], [71.1, 202.0], [71.2, 204.0], [71.3, 206.0], [71.4, 208.0], [71.5, 210.0], [71.6, 213.0], [71.7, 215.0], [71.8, 216.0], [71.9, 219.0], [72.0, 221.0], [72.1, 223.0], [72.2, 225.0], [72.3, 227.0], [72.4, 230.0], [72.5, 232.0], [72.6, 234.0], [72.7, 236.0], [72.8, 238.0], [72.9, 240.0], [73.0, 242.0], [73.1, 245.0], [73.2, 247.0], [73.3, 249.0], [73.4, 251.0], [73.5, 253.0], [73.6, 255.0], [73.7, 257.0], [73.8, 259.0], [73.9, 261.0], [74.0, 263.0], [74.1, 265.0], [74.2, 267.0], [74.3, 270.0], [74.4, 272.0], [74.5, 274.0], [74.6, 276.0], [74.7, 278.0], [74.8, 280.0], [74.9, 282.0], [75.0, 284.0], [75.1, 286.0], [75.2, 288.0], [75.3, 291.0], [75.4, 293.0], [75.5, 295.0], [75.6, 297.0], [75.7, 299.0], [75.8, 302.0], [75.9, 304.0], [76.0, 306.0], [76.1, 308.0], [76.2, 310.0], [76.3, 312.0], [76.4, 314.0], [76.5, 316.0], [76.6, 318.0], [76.7, 320.0], [76.8, 322.0], [76.9, 324.0], [77.0, 326.0], [77.1, 329.0], [77.2, 331.0], [77.3, 333.0], [77.4, 335.0], [77.5, 337.0], [77.6, 339.0], [77.7, 342.0], [77.8, 344.0], [77.9, 346.0], [78.0, 349.0], [78.1, 351.0], [78.2, 353.0], [78.3, 355.0], [78.4, 357.0], [78.5, 359.0], [78.6, 361.0], [78.7, 363.0], [78.8, 365.0], [78.9, 368.0], [79.0, 370.0], [79.1, 372.0], [79.2, 374.0], [79.3, 376.0], [79.4, 379.0], [79.5, 381.0], [79.6, 383.0], [79.7, 385.0], [79.8, 388.0], [79.9, 390.0], [80.0, 392.0], [80.1, 394.0], [80.2, 396.0], [80.3, 399.0], [80.4, 401.0], [80.5, 403.0], [80.6, 406.0], [80.7, 408.0], [80.8, 410.0], [80.9, 412.0], [81.0, 414.0], [81.1, 416.0], [81.2, 418.0], [81.3, 420.0], [81.4, 422.0], [81.5, 425.0], [81.6, 427.0], [81.7, 429.0], [81.8, 431.0], [81.9, 434.0], [82.0, 436.0], [82.1, 439.0], [82.2, 441.0], [82.3, 443.0], [82.4, 446.0], [82.5, 448.0], [82.6, 450.0], [82.7, 452.0], [82.8, 455.0], [82.9, 457.0], [83.0, 459.0], [83.1, 461.0], [83.2, 464.0], [83.3, 466.0], [83.4, 468.0], [83.5, 470.0], [83.6, 473.0], [83.7, 475.0], [83.8, 477.0], [83.9, 480.0], [84.0, 482.0], [84.1, 484.0], [84.2, 486.0], [84.3, 489.0], [84.4, 491.0], [84.5, 494.0], [84.6, 496.0], [84.7, 499.0], [84.8, 501.0], [84.9, 503.0], [85.0, 505.0], [85.1, 508.0], [85.2, 510.0], [85.3, 512.0], [85.4, 514.0], [85.5, 517.0], [85.6, 519.0], [85.7, 521.0], [85.8, 523.0], [85.9, 526.0], [86.0, 528.0], [86.1, 531.0], [86.2, 533.0], [86.3, 536.0], [86.4, 538.0], [86.5, 541.0], [86.6, 543.0], [86.7, 545.0], [86.8, 547.0], [86.9, 549.0], [87.0, 552.0], [87.1, 554.0], [87.2, 556.0], [87.3, 558.0], [87.4, 560.0], [87.5, 563.0], [87.6, 566.0], [87.7, 568.0], [87.8, 570.0], [87.9, 573.0], [88.0, 575.0], [88.1, 577.0], [88.2, 580.0], [88.3, 582.0], [88.4, 585.0], [88.5, 587.0], [88.6, 589.0], [88.7, 592.0], [88.8, 594.0], [88.9, 596.0], [89.0, 599.0], [89.1, 601.0], [89.2, 603.0], [89.3, 606.0], [89.4, 608.0], [89.5, 610.0], [89.6, 612.0], [89.7, 614.0], [89.8, 617.0], [89.9, 619.0], [90.0, 622.0], [90.1, 624.0], [90.2, 627.0], [90.3, 629.0], [90.4, 631.0], [90.5, 633.0], [90.6, 635.0], [90.7, 638.0], [90.8, 640.0], [90.9, 643.0], [91.0, 645.0], [91.1, 648.0], [91.2, 650.0], [91.3, 653.0], [91.4, 655.0], [91.5, 657.0], [91.6, 660.0], [91.7, 662.0], [91.8, 664.0], [91.9, 667.0], [92.0, 669.0], [92.1, 672.0], [92.2, 674.0], [92.3, 677.0], [92.4, 679.0], [92.5, 681.0], [92.6, 684.0], [92.7, 686.0], [92.8, 689.0], [92.9, 691.0], [93.0, 693.0], [93.1, 696.0], [93.2, 698.0], [93.3, 700.0], [93.4, 703.0], [93.5, 705.0], [93.6, 708.0], [93.7, 710.0], [93.8, 713.0], [93.9, 715.0], [94.0, 717.0], [94.1, 720.0], [94.2, 722.0], [94.3, 724.0], [94.4, 727.0], [94.5, 729.0], [94.6, 731.0], [94.7, 733.0], [94.8, 736.0], [94.9, 738.0], [95.0, 740.0], [95.1, 742.0], [95.2, 745.0], [95.3, 747.0], [95.4, 750.0], [95.5, 753.0], [95.6, 755.0], [95.7, 758.0], [95.8, 760.0], [95.9, 763.0], [96.0, 765.0], [96.1, 768.0], [96.2, 770.0], [96.3, 773.0], [96.4, 775.0], [96.5, 778.0], [96.6, 781.0], [96.7, 783.0], [96.8, 785.0], [96.9, 788.0], [97.0, 790.0], [97.1, 793.0], [97.2, 796.0], [97.3, 799.0], [97.4, 801.0], [97.5, 804.0], [97.6, 807.0], [97.7, 810.0], [97.8, 813.0], [97.9, 817.0], [98.0, 820.0], [98.1, 823.0], [98.2, 827.0], [98.3, 830.0], [98.4, 834.0], [98.5, 838.0], [98.6, 841.0], [98.7, 845.0], [98.8, 850.0], [98.9, 854.0], [99.0, 858.0], [99.1, 863.0], [99.2, 868.0], [99.3, 873.0], [99.4, 878.0], [99.5, 885.0], [99.6, 892.0], [99.7, 902.0], [99.8, 918.0], [99.9, 954.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 602533.0, "series": [{"data": [[0.0, 602533.0], [2300.0, 2.0], [600.0, 38257.0], [2400.0, 22.0], [700.0, 36614.0], [200.0, 42429.0], [800.0, 21091.0], [900.0, 2322.0], [1000.0, 51.0], [1100.0, 470.0], [300.0, 41679.0], [1200.0, 11.0], [1400.0, 59.0], [100.0, 37553.0], [400.0, 39617.0], [500.0, 38724.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 764199.0, "series": [{"data": [[0.0, 764199.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 137211.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2171.2907724067877, "minX": 1.6334205E12, "maxY": 2400.0, "series": [{"data": [[1.6334208E12, 2400.0], [1.6334205E12, 2171.2907724067877], [1.63342116E12, 2400.0], [1.63342086E12, 2400.0], [1.63342056E12, 2400.0], [1.63342122E12, 2400.0], [1.63342092E12, 2400.0], [1.63342062E12, 2400.0], [1.63342128E12, 2400.0], [1.63342098E12, 2400.0], [1.6334214E12, 2389.919928196489], [1.63342068E12, 2400.0], [1.63342134E12, 2400.0], [1.63342104E12, 2400.0], [1.63342074E12, 2400.0], [1.6334211E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334214E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 255.0, "maxY": 412.4482758620689, "series": [{"data": [[255.0, 101.11111111111111], [258.0, 127.5], [264.0, 125.0], [267.0, 143.0], [268.0, 119.0], [269.0, 144.0], [270.0, 136.33333333333334], [271.0, 144.66666666666666], [273.0, 110.0], [274.0, 113.25], [276.0, 164.0], [277.0, 129.66666666666666], [279.0, 153.0], [281.0, 163.375], [282.0, 149.1818181818182], [284.0, 143.99999999999997], [285.0, 126.0], [289.0, 141.83333333333334], [288.0, 156.5], [290.0, 155.0], [291.0, 156.46666666666667], [292.0, 172.29861111111111], [293.0, 178.83333333333334], [294.0, 94.4940476190476], [295.0, 65.9], [297.0, 63.599999999999994], [298.0, 62.0], [299.0, 61.333333333333336], [296.0, 55.0], [301.0, 98.0], [306.0, 79.35714285714283], [307.0, 80.4], [308.0, 81.45454545454545], [309.0, 78.5], [310.0, 78.5], [313.0, 33.5], [311.0, 48.0], [316.0, 38.0], [323.0, 55.9375], [324.0, 58.416666666666664], [325.0, 63.91666666666668], [326.0, 62.75], [328.0, 74.5], [335.0, 26.187499999999996], [332.0, 34.529411764705884], [333.0, 31.0], [334.0, 31.42105263157895], [329.0, 63.714285714285715], [330.0, 53.4], [331.0, 47.919999999999995], [327.0, 67.0], [349.0, 17.75], [336.0, 9.0], [337.0, 6.666666666666667], [341.0, 11.0], [347.0, 16.0], [346.0, 14.75], [340.0, 10.333333333333334], [343.0, 14.0], [344.0, 12.0], [345.0, 13.0], [350.0, 16.0], [351.0, 13.11111111111111], [353.0, 6.666666666666667], [360.0, 11.333333333333334], [356.0, 10.5], [357.0, 8.0], [364.0, 15.6], [355.0, 5.0], [358.0, 9.5], [363.0, 14.0], [365.0, 18.666666666666668], [367.0, 22.0], [366.0, 20.5], [352.0, 8.0], [369.0, 23.0], [368.0, 23.0], [370.0, 23.6], [372.0, 15.863636363636367], [377.0, 11.333333333333334], [374.0, 7.0], [383.0, 18.0], [381.0, 16.0], [382.0, 17.0], [378.0, 15.5], [396.0, 22.666666666666668], [384.0, 19.58823529411765], [392.0, 22.5], [395.0, 23.6], [393.0, 24.142857142857142], [397.0, 20.0], [398.0, 14.0], [389.0, 21.571428571428573], [388.0, 20.5], [387.0, 19.666666666666668], [385.0, 17.5], [386.0, 17.5], [407.0, 13.0], [405.0, 15.666666666666666], [415.0, 15.0], [413.0, 14.0], [409.0, 26.545454545454543], [411.0, 16.0], [412.0, 15.0], [410.0, 15.0], [414.0, 12.0], [419.0, 22.5], [427.0, 30.25], [422.0, 25.0], [431.0, 35.0], [425.0, 27.5], [426.0, 29.0], [421.0, 24.666666666666668], [429.0, 31.5], [430.0, 33.0], [428.0, 31.666666666666668], [418.0, 22.0], [423.0, 26.0], [434.0, 37.0], [432.0, 35.5], [435.0, 39.75], [445.0, 21.5], [446.0, 17.0], [444.0, 23.0], [437.0, 42.642857142857146], [436.0, 41.0], [433.0, 36.0], [438.0, 35.2], [439.0, 31.666666666666668], [441.0, 29.5], [443.0, 24.333333333333332], [442.0, 26.0], [451.0, 24.666666666666668], [454.0, 28.0], [452.0, 26.0], [457.0, 31.714285714285715], [459.0, 34.0], [450.0, 23.333333333333332], [453.0, 26.5], [456.0, 30.25], [455.0, 28.0], [463.0, 36.0], [461.0, 34.6], [465.0, 38.5], [464.0, 37.5], [466.0, 42.53333333333334], [468.0, 35.230769230769226], [469.0, 27.0], [472.0, 20.23076923076923], [471.0, 25.0], [478.0, 24.666666666666668], [477.0, 23.0], [479.0, 26.0], [481.0, 28.333333333333332], [480.0, 27.0], [483.0, 29.875], [484.0, 31.5], [487.0, 27.41176470588235], [485.0, 33.0], [486.0, 33.0], [491.0, 5.0], [488.0, 8.5], [490.0, 5.0], [493.0, 7.0], [496.0, 11.0], [497.0, 12.0], [502.0, 19.0], [510.0, 28.0], [507.0, 24.0], [503.0, 21.666666666666668], [511.0, 30.5], [509.0, 26.5], [508.0, 25.666666666666668], [505.0, 22.0], [516.0, 39.0], [513.0, 34.25], [512.0, 32.25], [515.0, 37.666666666666664], [519.0, 31.285714285714285], [532.0, 14.0], [537.0, 21.333333333333332], [528.0, 15.0], [543.0, 30.260869565217394], [541.0, 27.0], [542.0, 28.0], [540.0, 26.0], [538.0, 22.0], [539.0, 22.5], [536.0, 20.0], [534.0, 17.6], [518.0, 37.0], [517.0, 39.0], [527.0, 11.0], [521.0, 15.499999999999998], [522.0, 16.0], [520.0, 22.0], [570.0, 23.0], [546.0, 19.27272727272727], [545.0, 25.375], [549.0, 26.0], [551.0, 5.0], [572.0, 24.0], [571.0, 23.0], [569.0, 22.0], [568.0, 21.0], [573.0, 27.666666666666668], [567.0, 20.0], [562.0, 19.0], [565.0, 20.0], [555.0, 7.0], [557.0, 10.0], [556.0, 8.0], [559.0, 12.0], [577.0, 32.0], [576.0, 31.0], [590.0, 22.5], [591.0, 23.0], [578.0, 32.0], [579.0, 31.0], [580.0, 29.666666666666668], [582.0, 31.875], [583.0, 27.285714285714285], [592.0, 24.428571428571427], [607.0, 40.0], [605.0, 38.25], [604.0, 37.0], [601.0, 35.0], [603.0, 36.75], [600.0, 33.666666666666664], [596.0, 32.0], [598.0, 32.25], [589.0, 20.8], [587.0, 19.75], [588.0, 21.0], [586.0, 23.5], [584.0, 22.0], [585.0, 21.0], [624.0, 24.75], [609.0, 31.44444444444445], [608.0, 38.8], [610.0, 20.57142857142857], [628.0, 27.0], [626.0, 26.333333333333332], [630.0, 29.333333333333332], [618.0, 21.5], [623.0, 23.333333333333332], [629.0, 28.75], [611.0, 12.0], [613.0, 13.5], [632.0, 30.2], [633.0, 31.307692307692303], [638.0, 23.0], [637.0, 32.6], [636.0, 33.0], [634.0, 32.0], [635.0, 32.666666666666664], [612.0, 14.0], [646.0, 7.0], [641.0, 17.166666666666664], [640.0, 16.0], [650.0, 8.0], [648.0, 6.0], [651.0, 10.0], [654.0, 11.5], [644.0, 6.0], [642.0, 9.8], [643.0, 7.0], [666.0, 25.0], [664.0, 22.0], [668.0, 27.666666666666668], [670.0, 29.333333333333332], [669.0, 29.0], [671.0, 30.0], [662.0, 22.0], [663.0, 23.0], [660.0, 20.5], [678.0, 28.666666666666668], [673.0, 31.5], [681.0, 24.0], [680.0, 25.666666666666668], [674.0, 32.0], [676.0, 32.5], [675.0, 32.0], [679.0, 27.5], [696.0, 11.0], [697.0, 12.0], [689.0, 10.75], [692.0, 8.0], [691.0, 8.0], [694.0, 11.5], [695.0, 11.0], [688.0, 10.0], [702.0, 15.333333333333334], [701.0, 15.0], [700.0, 14.0], [699.0, 13.5], [698.0, 12.333333333333334], [677.0, 34.00000000000001], [682.0, 13.25], [686.0, 12.5], [687.0, 14.0], [683.0, 13.0], [720.0, 30.0], [724.0, 32.25], [725.0, 32.0], [726.0, 32.666666666666664], [727.0, 33.66666666666667], [722.0, 29.5], [723.0, 30.666666666666668], [718.0, 28.5], [710.0, 22.666666666666668], [708.0, 21.0], [707.0, 22.0], [715.0, 27.0], [717.0, 28.0], [713.0, 25.0], [712.0, 24.0], [711.0, 24.0], [728.0, 30.5], [730.0, 25.857142857142858], [734.0, 19.75], [733.0, 22.666666666666668], [729.0, 27.0], [741.0, 13.5], [737.0, 16.0], [736.0, 19.0], [749.0, 14.0], [738.0, 15.8], [742.0, 15.0], [760.0, 20.0], [761.0, 22.0], [765.0, 25.0], [756.0, 17.666666666666668], [757.0, 19.0], [752.0, 15.0], [766.0, 25.0], [767.0, 25.0], [753.0, 14.5], [755.0, 17.0], [762.0, 22.25], [763.0, 22.666666666666668], [746.0, 14.333333333333334], [748.0, 14.0], [770.0, 28.666666666666668], [768.0, 27.0], [783.0, 13.5], [774.0, 26.5], [773.0, 28.25], [772.0, 30.5], [771.0, 30.333333333333332], [775.0, 25.0], [784.0, 12.5], [786.0, 8.5], [785.0, 9.5], [798.0, 14.333333333333334], [799.0, 14.0], [787.0, 9.5], [788.0, 10.5], [790.0, 10.5], [791.0, 11.0], [780.0, 15.333333333333334], [778.0, 18.857142857142858], [777.0, 23.5], [776.0, 22.0], [782.0, 15.333333333333334], [802.0, 16.0], [800.0, 14.5], [807.0, 19.0], [804.0, 17.666666666666668], [803.0, 16.0], [805.0, 19.0], [813.0, 26.0], [814.0, 26.0], [815.0, 27.0], [808.0, 20.333333333333332], [810.0, 22.666666666666668], [811.0, 24.0], [812.0, 25.0], [824.0, 35.8], [825.0, 36.5], [826.0, 35.5], [828.0, 41.666666666666664], [827.0, 38.5], [816.0, 27.0], [830.0, 41.333333333333336], [801.0, 16.0], [832.0, 38.0], [845.0, 27.0], [847.0, 29.0], [844.0, 26.0], [833.0, 33.0], [837.0, 34.6], [835.0, 33.0], [842.0, 32.666666666666664], [841.0, 31.0], [839.0, 33.0], [861.0, 27.0], [863.0, 26.333333333333332], [862.0, 27.0], [848.0, 26.0], [852.0, 28.0], [855.0, 25.0], [854.0, 24.0], [850.0, 29.0], [851.0, 28.0], [838.0, 33.0], [843.0, 27.0], [876.0, 39.666666666666664], [873.0, 41.0909090909091], [872.0, 28.75], [867.0, 27.0], [866.0, 26.5], [865.0, 26.0], [879.0, 26.75], [877.0, 37.666666666666664], [878.0, 32.35], [869.0, 26.0], [870.0, 27.0], [895.0, 17.0], [892.0, 13.0], [886.0, 14.0], [881.0, 25.0], [880.0, 27.0], [875.0, 43.666666666666664], [874.0, 41.833333333333336], [902.0, 24.0], [912.0, 30.833333333333336], [914.0, 30.5], [915.0, 32.0], [916.0, 32.875], [917.0, 29.416666666666664], [918.0, 29.166666666666664], [896.0, 18.0], [908.0, 29.333333333333332], [911.0, 29.0], [907.0, 27.333333333333332], [905.0, 25.125000000000004], [906.0, 26.0], [897.0, 19.5], [901.0, 21.5], [903.0, 23.0], [920.0, 24.0], [921.0, 27.0], [922.0, 20.0], [923.0, 17.0], [925.0, 19.0], [927.0, 24.0], [924.0, 20.0], [900.0, 21.0], [904.0, 23.0], [932.0, 32.5], [934.0, 32.5], [931.0, 30.25], [933.0, 39.0], [928.0, 26.0], [936.0, 25.5], [944.0, 29.111111111111114], [953.0, 35.142857142857146], [955.0, 37.22222222222223], [957.0, 40.63636363636363], [958.0, 42.333333333333336], [956.0, 36.333333333333336], [954.0, 37.0], [950.0, 34.333333333333336], [947.0, 33.0], [949.0, 34.0], [946.0, 32.833333333333336], [945.0, 30.5], [937.0, 27.166666666666668], [942.0, 26.0], [987.0, 27.5], [966.0, 12.0], [962.0, 10.0], [974.0, 21.0], [969.0, 12.0], [970.0, 13.0], [967.0, 23.5], [965.0, 11.0], [963.0, 10.0], [989.0, 30.944444444444443], [984.0, 25.0], [990.0, 32.25], [983.0, 25.0], [991.0, 32.0], [978.0, 23.0], [980.0, 36.0], [995.0, 35.0], [992.0, 32.0], [996.0, 33.666666666666664], [1016.0, 23.0], [1017.0, 22.0], [993.0, 34.0], [1002.0, 30.714285714285715], [1004.0, 26.0], [1005.0, 23.0], [1003.0, 30.0], [1006.0, 22.333333333333332], [1007.0, 20.5], [1022.0, 27.72727272727273], [1008.0, 21.0], [1023.0, 28.714285714285715], [1021.0, 25.0], [1013.0, 20.2], [1011.0, 18.0], [1015.0, 20.833333333333332], [1009.0, 20.666666666666668], [1019.0, 23.0], [1072.0, 36.0], [1030.0, 28.333333333333332], [1026.0, 30.666666666666668], [1038.0, 14.5], [1076.0, 35.0], [1080.0, 27.333333333333332], [1082.0, 15.75], [1078.0, 32.2], [1074.0, 39.0], [1036.0, 22.0], [1056.0, 15.5], [1070.0, 34.5], [1068.0, 23.0], [1024.0, 29.0], [1046.0, 8.0], [1040.0, 13.0], [1042.0, 8.0], [1044.0, 8.0], [1032.0, 30.0], [1034.0, 26.0], [1126.0, 32.0], [1092.0, 12.0], [1114.0, 25.0], [1130.0, 33.0], [1134.0, 36.5], [1132.0, 36.0], [1128.0, 32.4], [1088.0, 10.0], [1116.0, 26.0], [1136.0, 37.5], [1142.0, 28.8], [1144.0, 25.75], [1148.0, 18.187500000000004], [1146.0, 19.666666666666668], [1140.0, 34.6], [1138.0, 37.6], [1210.0, 10.6], [1154.0, 22.5], [1158.0, 17.2], [1208.0, 9.0], [1184.0, 15.2], [1198.0, 8.5], [1196.0, 12.5], [1194.0, 12.0], [1190.0, 13.5], [1186.0, 13.0], [1156.0, 20.75], [1160.0, 18.0], [1168.0, 18.5], [1170.0, 18.875], [1172.0, 19.5], [1174.0, 20.5], [1176.0, 21.166666666666668], [1178.0, 22.0], [1180.0, 22.5], [1274.0, 18.333333333333332], [1224.0, 14.5], [1216.0, 12.5], [1264.0, 34.5], [1246.0, 26.0], [1250.0, 28.5], [1272.0, 22.25], [1270.0, 23.5], [1252.0, 28.0], [1258.0, 31.0], [1262.0, 33.37500000000001], [1266.0, 36.0], [1338.0, 27.0], [1282.0, 12.0], [1312.0, 30.375], [1336.0, 35.0], [1334.0, 31.5625], [1328.0, 31.0], [1332.0, 31.0], [1316.0, 32.0], [1324.0, 33.0], [1320.0, 32.0], [1308.0, 28.11111111111111], [1300.0, 23.5], [1280.0, 12.0], [1298.0, 22.0], [1370.0, 13.857142857142856], [1354.0, 33.0], [1350.0, 31.5], [1360.0, 34.0], [1364.0, 36.8], [1366.0, 37.0], [1372.0, 13.0], [1374.0, 14.0], [1344.0, 6.75], [1368.0, 18.0], [1362.0, 35.75], [1356.0, 33.0], [1396.0, 17.0], [1402.0, 23.0], [1406.0, 24.0], [1404.0, 23.0], [1388.0, 14.846153846153847], [1390.0, 19.0], [1412.0, 28.0], [1408.0, 26.0], [1438.0, 9.0], [1436.0, 10.666666666666666], [1430.0, 9.0], [1432.0, 9.0], [1428.0, 11.5], [1426.0, 13.8], [1410.0, 26.875], [1416.0, 25.0], [1418.0, 23.0], [1422.0, 16.0], [1458.0, 16.75], [1456.0, 15.0], [1448.0, 13.0], [1452.0, 14.0], [1446.0, 13.0], [1462.0, 18.8], [1466.0, 22.0], [1470.0, 24.0], [1460.0, 17.0], [1414.0, 28.22222222222222], [1474.0, 26.0], [1482.0, 30.0], [1494.0, 31.0], [1486.0, 34.333333333333336], [1520.0, 13.5], [1532.0, 24.0], [1522.0, 15.0], [1524.0, 15.5], [1506.0, 13.5], [1534.0, 26.0], [1508.0, 15.0], [1516.0, 13.0], [1514.0, 15.0], [1480.0, 30.0], [1488.0, 36.4], [1472.0, 25.0], [1496.0, 27.666666666666668], [1498.0, 23.5], [1500.0, 18.333333333333332], [1492.0, 32.666666666666664], [1490.0, 37.0], [1538.0, 29.0], [1546.0, 33.0], [1550.0, 17.157894736842103], [1594.0, 29.5], [1596.0, 30.0], [1598.0, 31.833333333333336], [1568.0, 13.0], [1572.0, 14.0], [1580.0, 18.5], [1574.0, 14.0], [1588.0, 24.0], [1586.0, 22.5], [1544.0, 32.5], [1548.0, 35.0], [1536.0, 27.0], [1566.0, 16.0], [1564.0, 19.250000000000004], [1558.0, 31.0], [1562.0, 23.428571428571427], [1560.0, 29.5], [1540.0, 29.0], [1552.0, 37.5], [1554.0, 34.75], [1556.0, 37.5], [1610.0, 21.333333333333332], [1600.0, 36.0], [1622.0, 14.0], [1620.0, 14.0], [1630.0, 14.0], [1624.0, 12.0], [1606.0, 27.5], [1608.0, 26.25], [1604.0, 35.25], [1612.0, 20.0], [1648.0, 30.0], [1644.0, 28.0], [1646.0, 29.0], [1652.0, 40.714285714285715], [1638.0, 23.0], [1662.0, 16.5], [1654.0, 44.4], [1656.0, 33.333333333333336], [1658.0, 36.5], [1660.0, 14.166666666666666], [1670.0, 22.25], [1674.0, 26.0], [1676.0, 29.4], [1672.0, 25.0], [1668.0, 20.0], [1666.0, 19.0], [1680.0, 19.727272727272727], [1678.0, 30.2], [1696.0, 15.0], [1712.0, 27.5], [1714.0, 28.625], [1702.0, 19.375], [1708.0, 24.0], [1704.0, 21.0], [1710.0, 26.0], [1686.0, 9.5], [1682.0, 16.0], [1784.0, 33.5], [1772.0, 44.0], [1758.0, 58.0], [1768.0, 56.0], [1776.0, 29.0], [1788.0, 48.0], [1760.0, 57.0], [1764.0, 71.0], [1782.0, 37.0], [1770.0, 36.0], [1780.0, 42.666666666666664], [1802.0, 68.0], [1804.0, 80.33333333333333], [1840.0, 108.0], [1844.0, 109.0], [1846.0, 101.5], [1848.0, 102.5], [1850.0, 84.4], [1852.0, 79.0], [1854.0, 11.999999999999998], [1800.0, 69.5], [1822.0, 8.5], [1808.0, 79.0], [1838.0, 107.5], [1810.0, 75.5], [1816.0, 78.0], [1812.0, 80.0], [1820.0, 85.0], [1830.0, 95.33333333333333], [1828.0, 86.0], [1824.0, 102.0], [1860.0, 78.28571428571429], [1858.0, 75.6], [1886.0, 67.0], [1882.0, 62.28571428571429], [1880.0, 58.23076923076923], [1878.0, 8.894736842105264], [1884.0, 67.0], [1862.0, 80.0], [1866.0, 83.0], [1864.0, 81.66666666666667], [1868.0, 84.0], [1870.0, 84.5], [1904.0, 62.0], [1916.0, 61.75], [1910.0, 61.0], [1908.0, 61.0], [1898.0, 65.2], [1902.0, 61.0], [1896.0, 69.25000000000001], [1892.0, 70.0], [1890.0, 70.5], [1876.0, 58.26315789473685], [1874.0, 66.25], [1872.0, 74.0], [1978.0, 43.0], [1982.0, 35.25], [1956.0, 65.66666666666667], [1962.0, 50.5], [1960.0, 69.0], [1958.0, 63.0], [1966.0, 46.0], [1964.0, 49.0], [1972.0, 39.666666666666664], [1976.0, 33.0], [1934.0, 60.0], [1952.0, 66.5], [1980.0, 34.25], [1922.0, 61.0], [1920.0, 64.0], [1950.0, 66.0], [1948.0, 65.0], [1946.0, 65.0], [1942.0, 63.333333333333336], [1938.0, 61.0], [1936.0, 11.047619047619047], [1954.0, 64.5], [1924.0, 59.333333333333336], [2032.0, 39.0], [2036.0, 45.0], [2034.0, 41.0], [2030.0, 14.115384615384615], [2024.0, 52.0], [2012.0, 50.666666666666664], [2014.0, 50.0], [1992.0, 39.0], [1988.0, 37.0], [1984.0, 36.0], [1986.0, 37.0], [1994.0, 40.0], [2010.0, 47.0], [2028.0, 40.0], [2004.0, 14.521739130434781], [2002.0, 42.333333333333336], [2164.0, 57.75], [2168.0, 60.77777777777778], [2116.0, 59.0], [2128.0, 65.33333333333333], [2120.0, 60.5], [2160.0, 64.55555555555556], [2140.0, 70.0], [2156.0, 71.5], [2148.0, 72.0], [2152.0, 73.0], [2144.0, 71.0], [2060.0, 51.333333333333336], [2052.0, 59.0], [2064.0, 48.0], [2096.0, 53.75], [2088.0, 56.0], [2080.0, 12.259259259259261], [2104.0, 54.0], [2108.0, 57.0], [2136.0, 69.0], [2284.0, 39.5], [2300.0, 51.0], [2296.0, 73.28301886792451], [2280.0, 68.0], [2276.0, 102.0], [2288.0, 111.55479452054792], [2292.0, 45.0], [2264.0, 32.0], [2260.0, 145.0], [2256.0, 145.0], [2268.0, 160.46913580246908], [2272.0, 31.0], [2196.0, 28.0], [2180.0, 19.785714285714285], [2176.0, 9.0], [2192.0, 27.0], [2188.0, 25.0], [2236.0, 17.0], [2216.0, 15.0], [2220.0, 12.0], [2228.0, 16.838709677419356], [2368.0, 52.0], [2384.0, 59.0], [2400.0, 174.88367761693155], [2332.0, 69.0], [2328.0, 66.0], [2320.0, 62.0], [2316.0, 56.0], [2308.0, 34.0], [2364.0, 51.375], [2360.0, 60.8], [2356.0, 62.0], [2348.0, 62.666666666666664], [2352.0, 63.0], [2336.0, 61.75], [2340.0, 63.0], [2344.0, 248.0], [2396.0, 55.5], [2392.0, 16.857142857142858], [2388.0, 58.333333333333336], [2380.0, 412.4482758620689], [2376.0, 56.0], [2372.0, 55.0], [2165.0, 58.5], [2169.0, 65.04827586206895], [2121.0, 61.8], [2117.0, 57.5], [2161.0, 62.0], [2157.0, 69.53333333333335], [2153.0, 77.0], [2141.0, 70.0], [2137.0, 68.0], [2145.0, 16.562500000000004], [2109.0, 56.5], [2057.0, 52.666666666666664], [2053.0, 39.0], [2097.0, 54.5], [2093.0, 52.0], [2101.0, 17.531249999999996], [2129.0, 66.4], [2133.0, 68.0], [2125.0, 64.0], [2281.0, 38.0], [2285.0, 84.75], [2293.0, 93.66666666666667], [2269.0, 32.0], [2297.0, 49.0], [2301.0, 49.45454545454545], [2261.0, 144.0], [2245.0, 16.162162162162165], [2265.0, 145.0], [2273.0, 104.25], [2277.0, 35.0], [2217.0, 14.0], [2197.0, 26.333333333333336], [2185.0, 22.5], [2193.0, 28.0], [2181.0, 14.437499999999998], [2205.0, 13.0], [2201.0, 13.0], [2373.0, 55.0], [2393.0, 55.0], [2397.0, 18.489361702127663], [2389.0, 59.5], [2377.0, 57.0], [2369.0, 52.666666666666664], [2361.0, 56.55555555555556], [2365.0, 50.333333333333336], [2353.0, 63.0], [2337.0, 62.0], [2341.0, 63.0], [2349.0, 63.0], [2333.0, 63.0], [2325.0, 64.0], [2317.0, 56.0], [2321.0, 10.0], [2305.0, 34.18518518518518], [2309.0, 12.0], [2329.0, 62.0], [1073.0, 36.75], [1035.0, 25.625], [1037.0, 21.5], [1039.0, 14.0], [1077.0, 33.0], [1079.0, 26.88888888888889], [1081.0, 22.5], [1083.0, 9.0], [1087.0, 10.5], [1085.0, 10.0], [1075.0, 36.33333333333333], [1069.0, 34.0], [1071.0, 35.0], [1057.0, 17.0], [1067.0, 23.0], [1033.0, 28.42857142857143], [1025.0, 29.8], [1055.0, 15.2], [1041.0, 10.499999999999998], [1031.0, 31.0], [1027.0, 30.8], [1029.0, 28.0], [1127.0, 32.0], [1109.0, 22.0], [1107.0, 21.0], [1131.0, 34.99999999999999], [1133.0, 36.0], [1129.0, 33.0], [1115.0, 25.0], [1093.0, 12.5], [1143.0, 23.0], [1145.0, 20.666666666666668], [1139.0, 33.333333333333336], [1141.0, 29.166666666666668], [1137.0, 37.5], [1091.0, 13.0], [1089.0, 9.0], [1111.0, 23.0], [1113.0, 25.0], [1205.0, 10.0], [1159.0, 16.0], [1167.0, 17.666666666666668], [1201.0, 15.0], [1207.0, 9.8], [1215.0, 12.333333333333334], [1193.0, 13.0], [1197.0, 9.5], [1195.0, 15.0], [1165.0, 17.0], [1163.0, 16.0], [1155.0, 21.0], [1173.0, 21.0], [1171.0, 20.5], [1175.0, 21.0], [1179.0, 22.0], [1181.0, 20.88235294117647], [1183.0, 14.0], [1221.0, 14.0], [1247.0, 26.5], [1265.0, 35.0], [1219.0, 13.0], [1243.0, 24.25], [1245.0, 25.5], [1217.0, 13.0], [1275.0, 17.199999999999992], [1277.0, 13.0], [1271.0, 22.666666666666668], [1273.0, 21.333333333333332], [1267.0, 29.714285714285715], [1269.0, 29.166666666666668], [1251.0, 28.5], [1259.0, 32.333333333333336], [1261.0, 33.0], [1263.0, 34.0], [1337.0, 41.42857142857142], [1291.0, 16.0], [1309.0, 28.0], [1297.0, 13.6], [1341.0, 28.0], [1343.0, 27.5], [1335.0, 30.5], [1313.0, 30.0], [1331.0, 32.0], [1315.0, 31.0], [1317.0, 32.5], [1323.0, 33.0], [1321.0, 35.0], [1327.0, 31.0], [1325.0, 31.5], [1311.0, 29.5], [1283.0, 14.0], [1345.0, 28.0], [1349.0, 31.0], [1347.0, 30.0], [1357.0, 34.0], [1361.0, 34.5], [1363.0, 36.25], [1365.0, 37.0], [1367.0, 29.642857142857142], [1369.0, 15.90909090909091], [1371.0, 12.5], [1351.0, 32.0], [1359.0, 33.0], [1395.0, 17.0], [1405.0, 23.0], [1407.0, 24.625], [1377.0, 18.0], [1403.0, 22.666666666666668], [1417.0, 23.6], [1409.0, 25.75], [1439.0, 10.0], [1433.0, 9.5], [1425.0, 14.0], [1431.0, 8.5], [1415.0, 29.5], [1421.0, 17.0], [1423.0, 13.666666666666666], [1457.0, 16.0], [1453.0, 15.0], [1455.0, 14.0], [1451.0, 14.0], [1449.0, 12.5], [1447.0, 13.0], [1471.0, 7.625], [1461.0, 18.0], [1419.0, 20.0], [1411.0, 28.0], [1413.0, 29.0], [1499.0, 21.75], [1475.0, 27.0], [1483.0, 31.0], [1507.0, 11.0], [1505.0, 13.0], [1533.0, 25.0], [1523.0, 15.0], [1525.0, 16.0], [1519.0, 13.0], [1517.0, 12.0], [1511.0, 8.0], [1489.0, 33.8], [1477.0, 28.0], [1473.0, 26.0], [1501.0, 15.833333333333332], [1497.0, 27.8], [1495.0, 30.0], [1493.0, 32.0], [1539.0, 28.5], [1545.0, 32.0], [1551.0, 38.5], [1585.0, 7.916666666666667], [1591.0, 26.5], [1575.0, 15.0], [1597.0, 30.5], [1595.0, 30.0], [1569.0, 13.5], [1599.0, 35.0], [1573.0, 14.25], [1577.0, 16.0], [1543.0, 31.0], [1547.0, 34.0], [1549.0, 35.0], [1555.0, 36.33333333333333], [1557.0, 33.6], [1561.0, 27.333333333333332], [1565.0, 9.5], [1567.0, 12.0], [1559.0, 31.0], [1607.0, 26.0], [1603.0, 36.0], [1601.0, 37.142857142857146], [1629.0, 14.0], [1625.0, 11.0], [1611.0, 21.25], [1605.0, 30.2], [1613.0, 16.5], [1623.0, 12.5], [1621.0, 13.0], [1639.0, 23.0], [1657.0, 33.5], [1653.0, 14.0], [1655.0, 54.408163265306115], [1647.0, 29.0], [1645.0, 28.0], [1671.0, 23.75], [1675.0, 28.333333333333332], [1665.0, 26.333333333333332], [1673.0, 26.0], [1669.0, 20.0], [1677.0, 30.0], [1679.0, 25.5], [1705.0, 22.0], [1707.0, 23.0], [1709.0, 25.0], [1711.0, 26.4], [1703.0, 21.0], [1713.0, 28.0], [1721.0, 8.75], [1691.0, 11.0], [1685.0, 8.0], [1689.0, 9.5], [1683.0, 9.2], [1681.0, 11.6], [1779.0, 42.0], [1761.0, 57.16666666666667], [1757.0, 62.111111111111114], [1753.0, 9.624999999999998], [1763.0, 54.375], [1767.0, 34.0], [1769.0, 38.0], [1777.0, 41.0], [1759.0, 72.0], [1781.0, 41.0], [1785.0, 5.999999999999999], [1845.0, 110.5], [1805.0, 58.5], [1813.0, 84.0], [1815.0, 79.33333333333333], [1825.0, 96.0], [1807.0, 76.0], [1841.0, 104.0], [1855.0, 83.66666666666667], [1847.0, 104.75], [1851.0, 84.25], [1849.0, 85.33333333333333], [1853.0, 78.4], [1843.0, 109.0], [1817.0, 79.0], [1831.0, 95.7], [1837.0, 104.0], [1839.0, 108.0], [1829.0, 81.0], [1835.0, 104.0], [1833.0, 100.0], [1863.0, 80.44444444444444], [1859.0, 77.0], [1861.0, 79.0], [1857.0, 74.0], [1885.0, 68.0], [1883.0, 65.0], [1887.0, 68.33333333333333], [1879.0, 56.2], [1877.0, 54.4], [1881.0, 61.0], [1867.0, 84.0], [1869.0, 85.0], [1865.0, 83.0], [1873.0, 67.44444444444444], [1875.0, 64.5], [1871.0, 76.10000000000001], [1889.0, 68.0], [1905.0, 62.666666666666664], [1907.0, 12.75], [1913.0, 62.0], [1919.0, 62.0], [1903.0, 61.4], [1901.0, 65.0], [1891.0, 72.0], [1895.0, 71.0], [1893.0, 70.0], [1971.0, 41.5], [1977.0, 33.5], [1979.0, 33.33333333333333], [1975.0, 34.666666666666664], [1973.0, 37.0], [1923.0, 60.0], [1953.0, 67.0], [1949.0, 66.0], [1945.0, 63.5], [1943.0, 64.0], [1939.0, 61.0], [1937.0, 60.75], [1947.0, 65.0], [1967.0, 43.0], [1965.0, 50.0], [1963.0, 15.7037037037037], [1961.0, 57.0], [1927.0, 57.0], [1929.0, 58.0], [1935.0, 60.0], [1931.0, 59.0], [1933.0, 59.5], [2035.0, 46.0], [2033.0, 48.0], [1999.0, 42.0], [1991.0, 38.0], [1997.0, 42.0], [1989.0, 37.0], [1987.0, 36.0], [1985.0, 13.931034482758621], [2039.0, 38.0], [2023.0, 53.0], [2017.0, 51.0], [2031.0, 41.5], [2011.0, 48.166666666666664], [2003.0, 43.4], [2007.0, 45.0], [2009.0, 44.666666666666664], [2027.0, 46.0], [2162.0, 59.625], [2166.0, 58.6], [2114.0, 57.6], [2118.0, 17.205128205128208], [2158.0, 66.0], [2146.0, 71.5], [2106.0, 55.666666666666664], [2054.0, 12.874999999999998], [2066.0, 59.5], [2070.0, 70.0], [2058.0, 64.0], [2102.0, 54.0], [2082.0, 55.6], [2098.0, 52.0], [2138.0, 69.0], [2154.0, 73.66666666666667], [2150.0, 76.33333333333333], [2142.0, 70.5], [2126.0, 65.0], [2134.0, 69.22222222222223], [2130.0, 66.0], [2294.0, 70.0], [2286.0, 41.5], [2298.0, 50.0], [2266.0, 33.0], [2270.0, 176.33333333333334], [2302.0, 51.0], [2278.0, 36.0], [2222.0, 13.25], [2218.0, 13.0], [2210.0, 15.74193548387097], [2262.0, 87.5], [2234.0, 17.666666666666668], [2198.0, 19.5], [2178.0, 10.0], [2190.0, 26.0], [2194.0, 28.666666666666668], [2182.0, 21.0], [2206.0, 12.0], [2274.0, 181.0], [2386.0, 19.97916666666666], [2394.0, 31.782608695652172], [2398.0, 27.274509803921575], [2390.0, 21.272727272727273], [2374.0, 55.5], [2382.0, 58.0], [2370.0, 53.16666666666667], [2322.0, 153.0], [2318.0, 56.0], [2314.0, 56.0], [2310.0, 56.0], [2306.0, 53.0], [2362.0, 55.0], [2350.0, 62.5], [2346.0, 62.666666666666664], [2342.0, 63.0], [2338.0, 35.5], [2366.0, 51.857142857142854], [2163.0, 16.24242424242424], [2159.0, 66.5], [2143.0, 71.5], [2155.0, 71.0], [2103.0, 54.0], [2095.0, 53.5], [2079.0, 64.0], [2075.0, 70.0], [2059.0, 51.75], [2055.0, 50.666666666666664], [2051.0, 46.333333333333336], [2107.0, 56.0], [2127.0, 20.65714285714286], [2123.0, 64.0], [2135.0, 68.25], [2131.0, 68.0], [2119.0, 59.0], [2275.0, 106.0], [2271.0, 127.5], [2287.0, 42.0], [2279.0, 152.54999999999993], [2295.0, 49.0], [2223.0, 12.0], [2219.0, 12.0], [2211.0, 13.0], [2235.0, 17.0], [2255.0, 73.06779661016948], [2263.0, 144.0], [2203.0, 14.0], [2207.0, 12.0], [2199.0, 17.43181818181818], [2195.0, 29.0], [2187.0, 23.0], [2183.0, 22.0], [2387.0, 60.0], [2399.0, 51.25], [2395.0, 56.0], [2391.0, 55.5], [2379.0, 57.8], [2383.0, 22.085106382978715], [2363.0, 50.0], [2359.0, 61.5], [2355.0, 62.5], [2347.0, 62.0], [2351.0, 63.0], [2343.0, 35.5], [2367.0, 51.666666666666664], [2307.0, 20.733333333333334], [2311.0, 56.0], [2327.0, 37.5], [2323.0, 11.0], [2335.0, 62.0], [2331.0, 62.5]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2393.0751890875085, 173.98184781138028]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 70843.53333333334, "minX": 1.6334205E12, "maxY": 8151111.6, "series": [{"data": [[1.6334208E12, 7652639.4], [1.6334205E12, 3391618.066666667], [1.63342116E12, 7693234.05], [1.63342086E12, 7924097.666666667], [1.63342056E12, 7938254.583333333], [1.63342122E12, 8100924.383333334], [1.63342092E12, 7919011.116666666], [1.63342062E12, 8035418.3], [1.63342128E12, 7907717.716666667], [1.63342098E12, 7881614.2], [1.6334214E12, 4857667.366666666], [1.63342068E12, 7917666.0], [1.63342134E12, 7904655.566666666], [1.63342104E12, 8151111.6], [1.63342074E12, 7916736.333333333], [1.6334211E12, 7919797.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6334208E12, 161246.85], [1.6334205E12, 70843.53333333334], [1.63342116E12, 161942.68333333332], [1.63342086E12, 166908.15], [1.63342056E12, 166221.33333333334], [1.63342122E12, 170562.66666666666], [1.63342092E12, 166799.6], [1.63342062E12, 169033.76666666666], [1.63342128E12, 166504.56666666668], [1.63342098E12, 166025.83333333334], [1.6334214E12, 102334.81666666667], [1.63342068E12, 166844.13333333333], [1.63342134E12, 166473.95], [1.63342104E12, 171737.23333333334], [1.63342074E12, 166846.91666666666], [1.6334211E12, 166813.51666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334214E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21.566702810909998, "minX": 1.6334205E12, "maxY": 348.055883727139, "series": [{"data": [[1.6334208E12, 136.99753163136742], [1.6334205E12, 234.0671912125582], [1.63342116E12, 205.0643830672184], [1.63342086E12, 306.6364166958517], [1.63342056E12, 235.26847536617709], [1.63342122E12, 302.8151762402102], [1.63342092E12, 348.055883727139], [1.63342062E12, 28.062039594843192], [1.63342128E12, 318.8360469392537], [1.63342098E12, 317.03158424140156], [1.6334214E12, 22.977099029020447], [1.63342068E12, 22.11265514480202], [1.63342134E12, 81.39424186186395], [1.63342104E12, 133.43120158179704], [1.63342074E12, 21.566702810909998], [1.6334211E12, 46.099144044182616]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334214E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21.501576445074797, "minX": 1.6334205E12, "maxY": 347.8090041383001, "series": [{"data": [[1.6334208E12, 136.86726045604334], [1.6334205E12, 233.8687336890884], [1.63342116E12, 204.66943952701013], [1.63342086E12, 306.3831940900853], [1.63342056E12, 235.07010652463396], [1.63342122E12, 302.4647030026104], [1.63342092E12, 347.8090041383001], [1.63342062E12, 27.88899302815049], [1.63342128E12, 318.5046638360464], [1.63342098E12, 316.79141659681324], [1.6334214E12, 22.789865912367098], [1.63342068E12, 22.00890831442678], [1.63342134E12, 81.13455718847752], [1.63342104E12, 133.23936015040252], [1.63342074E12, 21.501576445074797], [1.6334211E12, 45.86184572772918]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334214E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03228420472594088, "minX": 1.6334205E12, "maxY": 0.6449577377010796, "series": [{"data": [[1.6334208E12, 0.0788497056945096], [1.6334205E12, 0.6449577377010796], [1.63342116E12, 0.10224636062079923], [1.63342086E12, 0.15031600713725668], [1.63342056E12, 0.12007323568575104], [1.63342122E12, 0.06976174934725829], [1.63342092E12, 0.11840875717527712], [1.63342062E12, 0.04414956590370967], [1.63342128E12, 0.09852562602387102], [1.63342098E12, 0.09460184409052826], [1.6334214E12, 0.034351456469116255], [1.63342068E12, 0.04902909382089973], [1.63342134E12, 0.03820367490929765], [1.63342104E12, 0.03228420472594088], [1.63342074E12, 0.039903244640920654], [1.6334211E12, 0.04875444246074843]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334214E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.6334205E12, "maxY": 2431.0, "series": [{"data": [[1.6334208E12, 1222.0], [1.6334205E12, 948.0], [1.63342116E12, 1460.0], [1.63342086E12, 998.0], [1.63342056E12, 910.0], [1.63342122E12, 982.0], [1.63342092E12, 939.0], [1.63342062E12, 465.0], [1.63342128E12, 2431.0], [1.63342098E12, 923.0], [1.6334214E12, 438.0], [1.63342068E12, 71.0], [1.63342134E12, 878.0], [1.63342104E12, 911.0], [1.63342074E12, 65.0], [1.6334211E12, 1166.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6334208E12, 1158.0], [1.6334205E12, 861.9900000000016], [1.63342116E12, 916.9900000000016], [1.63342086E12, 882.0], [1.63342056E12, 818.0], [1.63342122E12, 853.0], [1.63342092E12, 865.0], [1.63342062E12, 40.0], [1.63342128E12, 847.0], [1.63342098E12, 849.0], [1.6334214E12, 135.0], [1.63342068E12, 40.0], [1.63342134E12, 44.0], [1.63342104E12, 42.0], [1.63342074E12, 40.0], [1.6334211E12, 44.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6334208E12, 1218.9978909301717], [1.6334205E12, 940.9994727325429], [1.63342116E12, 967.9994727325429], [1.63342086E12, 930.0], [1.63342056E12, 908.9989454650859], [1.63342122E12, 908.9989454650859], [1.63342092E12, 936.9952545928863], [1.63342062E12, 67.99947273254293], [1.63342128E12, 875.9989454650859], [1.63342098E12, 884.0], [1.6334214E12, 432.9963091278005], [1.63342068E12, 69.0], [1.63342134E12, 64.99947273254293], [1.63342104E12, 71.99947273254293], [1.63342074E12, 64.0], [1.6334211E12, 78.99947273254293]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.6334208E12, 1193.0], [1.6334205E12, 923.9993051910387], [1.63342116E12, 955.0], [1.63342086E12, 921.9993051910387], [1.63342056E12, 900.0], [1.63342122E12, 897.0], [1.63342092E12, 918.0], [1.63342062E12, 57.0], [1.63342128E12, 869.0], [1.63342098E12, 876.9993051910387], [1.6334214E12, 425.0], [1.63342068E12, 61.99930519103873], [1.63342134E12, 55.0], [1.63342104E12, 66.0], [1.63342074E12, 60.995831146232376], [1.6334211E12, 70.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.6334208E12, 3.0], [1.6334205E12, 5.0], [1.63342116E12, 4.0], [1.63342086E12, 4.0], [1.63342056E12, 4.0], [1.63342122E12, 4.0], [1.63342092E12, 4.0], [1.63342062E12, 4.0], [1.63342128E12, 5.0], [1.63342098E12, 5.0], [1.6334214E12, 4.0], [1.63342068E12, 4.0], [1.63342134E12, 5.0], [1.63342104E12, 4.0], [1.63342074E12, 5.0], [1.6334211E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6334208E12, 233.0], [1.6334205E12, 228.0], [1.63342116E12, 354.0], [1.63342086E12, 219.0], [1.63342056E12, 32.0], [1.63342122E12, 214.0], [1.63342092E12, 327.5], [1.63342062E12, 22.0], [1.63342128E12, 334.0], [1.63342098E12, 206.0], [1.6334214E12, 21.0], [1.63342068E12, 22.0], [1.63342134E12, 22.0], [1.63342104E12, 22.0], [1.63342074E12, 22.0], [1.6334211E12, 22.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334214E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 5.0, "maxY": 686.0, "series": [{"data": [[5.0, 55.0], [17.0, 10.0], [36.0, 21.5], [49.0, 96.0], [48.0, 28.5], [50.0, 18.0], [54.0, 15.0], [57.0, 20.0], [78.0, 36.5], [77.0, 28.0], [88.0, 19.0], [93.0, 30.0], [98.0, 16.0], [100.0, 23.0], [103.0, 25.0], [105.0, 21.0], [108.0, 19.5], [121.0, 20.0], [120.0, 18.0], [129.0, 33.0], [130.0, 18.0], [128.0, 23.0], [140.0, 23.5], [136.0, 20.0], [151.0, 25.0], [144.0, 22.0], [155.0, 16.0], [152.0, 16.0], [159.0, 19.0], [156.0, 88.5], [164.0, 23.0], [166.0, 20.0], [170.0, 25.0], [182.0, 94.5], [178.0, 26.0], [207.0, 22.0], [204.0, 24.0], [216.0, 20.5], [230.0, 130.5], [224.0, 25.0], [225.0, 101.0], [237.0, 20.0], [239.0, 22.0], [233.0, 16.0], [238.0, 104.5], [244.0, 22.0], [240.0, 23.0], [257.0, 25.0], [271.0, 21.0], [267.0, 68.0], [281.0, 19.0], [275.0, 23.0], [295.0, 136.0], [296.0, 85.0], [351.0, 24.0], [343.0, 21.0], [348.0, 22.0], [359.0, 21.0], [358.0, 22.0], [360.0, 22.0], [375.0, 21.0], [382.0, 22.0], [378.0, 24.0], [373.0, 21.0], [384.0, 22.0], [387.0, 22.0], [390.0, 21.5], [406.0, 21.0], [419.0, 20.0], [432.0, 23.0], [433.0, 21.0], [458.0, 23.0], [453.0, 132.0], [452.0, 22.0], [474.0, 24.0], [473.0, 23.0], [480.0, 107.0], [488.0, 180.5], [495.0, 21.0], [508.0, 171.0], [510.0, 158.0], [498.0, 31.0], [511.0, 22.0], [542.0, 21.0], [536.0, 178.0], [533.0, 176.0], [516.0, 158.0], [543.0, 170.0], [513.0, 163.0], [512.0, 153.0], [557.0, 22.0], [552.0, 168.0], [574.0, 21.0], [601.0, 31.0], [576.0, 22.0], [630.0, 255.0], [693.0, 145.0], [721.0, 22.0], [717.0, 238.0], [724.0, 172.5], [723.0, 174.0], [754.0, 20.0], [767.0, 25.0], [764.0, 22.0], [765.0, 22.0], [757.0, 21.0], [773.0, 230.0], [780.0, 20.0], [776.0, 20.0], [775.0, 21.0], [811.0, 263.0], [826.0, 243.0], [805.0, 22.0], [803.0, 20.0], [817.0, 35.0], [855.0, 238.0], [863.0, 21.0], [862.0, 22.0], [879.0, 22.0], [866.0, 22.0], [918.0, 23.0], [901.0, 22.0], [911.0, 22.0], [909.0, 252.0], [940.0, 63.5], [932.0, 223.5], [934.0, 21.0], [948.0, 24.0], [931.0, 217.0], [989.0, 22.0], [982.0, 22.0], [981.0, 23.0], [983.0, 21.0], [990.0, 22.0], [991.0, 21.0], [978.0, 21.0], [977.0, 22.0], [976.0, 21.0], [979.0, 22.0], [980.0, 22.0], [985.0, 22.0], [973.0, 22.0], [971.0, 22.0], [969.0, 227.0], [968.0, 23.0], [972.0, 22.0], [988.0, 22.0], [984.0, 22.0], [963.0, 23.0], [965.0, 22.0], [975.0, 22.0], [974.0, 22.0], [962.0, 21.0], [986.0, 22.0], [987.0, 22.0], [994.0, 22.0], [1010.0, 22.0], [1002.0, 22.0], [1001.0, 21.0], [1000.0, 22.0], [1016.0, 233.0], [995.0, 22.0], [996.0, 22.0], [999.0, 22.0], [997.0, 22.0], [998.0, 25.0], [993.0, 22.0], [1003.0, 22.0], [1005.0, 22.0], [1004.0, 22.0], [1006.0, 22.0], [1007.0, 22.0], [992.0, 22.0], [1012.0, 22.0], [1015.0, 23.0], [1014.0, 27.0], [1013.0, 22.0], [1011.0, 21.0], [1009.0, 22.0], [1020.0, 23.0], [1019.0, 24.0], [1017.0, 20.0], [1008.0, 22.0], [1082.0, 27.0], [1045.0, 43.0], [1060.0, 25.0], [1026.0, 233.0], [1043.0, 221.0], [1025.0, 22.0], [1135.0, 263.0], [1142.0, 26.0], [1107.0, 25.0], [1097.0, 24.0], [1150.0, 277.5], [1145.0, 275.5], [1103.0, 294.0], [1195.0, 24.0], [1202.0, 244.0], [1203.0, 275.0], [1245.0, 234.0], [1270.0, 259.0], [1239.0, 26.0], [1230.0, 27.0], [1228.0, 26.0], [1252.0, 304.5], [1257.0, 251.0], [1227.0, 303.0], [1223.0, 259.0], [1233.0, 287.0], [1282.0, 29.0], [1339.0, 24.0], [1295.0, 276.0], [1308.0, 260.0], [1383.0, 157.0], [1352.0, 284.0], [1377.0, 28.0], [1385.0, 31.0], [1366.0, 29.0], [1346.0, 250.0], [1442.0, 286.0], [1440.0, 251.0], [1421.0, 33.0], [1446.0, 28.0], [1469.0, 33.0], [1447.0, 242.0], [1455.0, 37.0], [1525.0, 98.0], [1487.0, 27.0], [1581.0, 32.0], [1597.0, 339.0], [1542.0, 379.0], [1560.0, 128.0], [1561.0, 65.0], [1660.0, 81.0], [1619.0, 318.0], [1638.0, 295.0], [1622.0, 89.0], [1627.0, 327.0], [1611.0, 118.0], [1640.0, 87.0], [1709.0, 98.0], [1699.0, 112.0], [1711.0, 296.0], [1778.0, 353.5], [1779.0, 164.0], [1745.0, 148.0], [1853.0, 367.0], [1838.0, 228.0], [1831.0, 324.0], [1846.0, 367.0], [1834.0, 448.0], [1805.0, 409.0], [1862.0, 28.0], [1870.0, 259.0], [1892.0, 242.5], [1859.0, 271.0], [1876.0, 236.5], [1959.0, 323.0], [1964.0, 291.0], [2014.0, 328.0], [2001.0, 302.0], [2000.0, 284.0], [2023.0, 369.0], [2117.0, 41.0], [2173.0, 481.0], [2158.0, 491.5], [2121.0, 461.0], [2098.0, 378.0], [2092.0, 396.0], [2103.0, 456.0], [2226.0, 535.0], [2198.0, 447.0], [2245.0, 436.0], [2206.0, 452.0], [2236.0, 422.0], [2289.0, 434.0], [2322.0, 595.0], [2421.0, 516.0], [2318.0, 552.5], [2307.0, 410.0], [2401.0, 427.0], [2430.0, 544.5], [2392.0, 520.0], [2446.0, 590.0], [2435.0, 429.0], [2450.0, 475.5], [2437.0, 620.0], [2491.0, 603.0], [2452.0, 409.0], [2546.0, 682.0], [2508.0, 435.5], [2481.0, 606.0], [2519.0, 419.0], [2517.0, 540.0], [2673.0, 520.0], [2679.0, 581.0], [2630.0, 562.0], [2657.0, 662.0], [2647.0, 606.0], [2619.0, 618.0], [2639.0, 582.0], [2613.0, 542.0], [2605.0, 595.0], [2618.0, 565.0], [2644.0, 627.5], [2811.0, 539.0], [2779.0, 589.0], [2774.0, 544.0], [2771.0, 547.0], [2797.0, 543.0], [2785.0, 614.0], [2747.0, 544.0], [2692.0, 572.0], [2770.0, 686.0], [2756.0, 523.0], [2754.0, 603.0], [2744.0, 597.0], [2737.0, 609.0], [2780.0, 586.0], [2783.0, 555.0], [2736.0, 594.0], [2727.0, 547.0], [2888.0, 603.0], [2924.0, 581.5], [2854.0, 558.0], [2932.0, 595.0], [2880.0, 536.0], [2849.0, 598.0], [2907.0, 553.0], [2903.0, 470.0], [2912.0, 611.0], [2833.0, 612.0], [2828.0, 569.5], [2871.0, 561.0], [2894.0, 568.0], [2898.0, 530.0], [2966.0, 593.5], [3065.0, 501.0], [2982.0, 508.0], [3047.0, 468.0], [3001.0, 527.0], [2959.0, 549.0], [3007.0, 609.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3065.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 5.0, "maxY": 686.0, "series": [{"data": [[5.0, 54.0], [17.0, 10.0], [36.0, 21.5], [49.0, 96.0], [48.0, 28.0], [50.0, 17.5], [54.0, 14.5], [57.0, 20.0], [78.0, 36.5], [77.0, 27.0], [88.0, 18.5], [93.0, 30.0], [98.0, 15.5], [100.0, 23.0], [103.0, 25.0], [105.0, 21.0], [108.0, 19.0], [121.0, 19.0], [120.0, 18.0], [129.0, 33.0], [130.0, 18.0], [128.0, 23.0], [140.0, 23.0], [136.0, 19.5], [151.0, 24.0], [144.0, 21.0], [155.0, 16.0], [152.0, 15.5], [159.0, 19.0], [156.0, 87.5], [164.0, 23.0], [166.0, 19.5], [170.0, 24.0], [182.0, 94.0], [178.0, 25.0], [207.0, 22.0], [204.0, 24.0], [216.0, 20.0], [230.0, 130.5], [224.0, 25.0], [225.0, 101.0], [237.0, 20.0], [239.0, 21.5], [233.0, 16.0], [238.0, 104.0], [244.0, 21.0], [240.0, 23.0], [257.0, 25.0], [271.0, 21.0], [267.0, 68.0], [281.0, 19.0], [275.0, 22.0], [295.0, 136.0], [296.0, 84.0], [351.0, 23.0], [343.0, 21.0], [348.0, 21.0], [359.0, 21.0], [358.0, 21.0], [360.0, 22.0], [375.0, 21.0], [382.0, 22.0], [378.0, 24.0], [373.0, 21.0], [384.0, 22.0], [387.0, 22.0], [390.0, 21.0], [406.0, 21.0], [419.0, 20.0], [432.0, 22.5], [433.0, 21.0], [458.0, 22.0], [453.0, 131.0], [452.0, 22.0], [474.0, 23.0], [473.0, 23.0], [480.0, 107.0], [488.0, 180.5], [495.0, 21.0], [508.0, 171.0], [510.0, 158.0], [498.0, 31.0], [511.0, 22.0], [542.0, 21.0], [536.0, 178.0], [533.0, 176.0], [516.0, 157.5], [543.0, 170.0], [513.0, 163.0], [512.0, 153.0], [557.0, 22.0], [552.0, 168.0], [574.0, 21.0], [601.0, 31.0], [576.0, 22.0], [630.0, 255.0], [693.0, 145.0], [721.0, 22.0], [717.0, 238.0], [724.0, 172.5], [723.0, 174.0], [754.0, 20.0], [767.0, 25.0], [764.0, 21.5], [765.0, 22.0], [757.0, 21.0], [773.0, 230.0], [780.0, 20.0], [776.0, 20.0], [775.0, 21.0], [811.0, 263.0], [826.0, 242.0], [805.0, 22.0], [803.0, 20.0], [817.0, 35.0], [855.0, 237.0], [863.0, 21.0], [862.0, 22.0], [879.0, 22.0], [866.0, 22.0], [918.0, 22.0], [901.0, 22.0], [911.0, 22.0], [909.0, 252.0], [940.0, 63.0], [932.0, 223.0], [934.0, 21.0], [948.0, 24.0], [931.0, 217.0], [989.0, 22.0], [982.0, 22.0], [981.0, 22.0], [983.0, 21.0], [990.0, 22.0], [991.0, 21.0], [978.0, 21.0], [977.0, 22.0], [976.0, 21.0], [979.0, 22.0], [980.0, 22.0], [985.0, 22.0], [973.0, 22.0], [971.0, 22.0], [969.0, 226.0], [968.0, 22.0], [972.0, 22.0], [988.0, 22.0], [984.0, 21.0], [963.0, 22.0], [965.0, 22.0], [975.0, 22.0], [974.0, 22.0], [962.0, 21.0], [986.0, 22.0], [987.0, 22.0], [994.0, 22.0], [1010.0, 22.0], [1002.0, 22.0], [1001.0, 21.0], [1000.0, 22.0], [1016.0, 232.5], [995.0, 22.0], [996.0, 22.0], [999.0, 22.0], [997.0, 22.0], [998.0, 25.0], [993.0, 22.0], [1003.0, 22.0], [1005.0, 22.0], [1004.0, 22.0], [1006.0, 22.0], [1007.0, 22.0], [992.0, 22.0], [1012.0, 22.0], [1015.0, 23.0], [1014.0, 27.0], [1013.0, 22.0], [1011.0, 21.0], [1009.0, 22.0], [1020.0, 23.0], [1019.0, 24.0], [1017.0, 20.0], [1008.0, 22.0], [1082.0, 27.0], [1045.0, 43.0], [1060.0, 24.0], [1026.0, 233.0], [1043.0, 221.0], [1025.0, 22.0], [1135.0, 262.0], [1142.0, 26.0], [1107.0, 25.0], [1097.0, 24.0], [1150.0, 277.0], [1145.0, 275.0], [1103.0, 293.0], [1195.0, 24.0], [1202.0, 244.0], [1203.0, 275.0], [1245.0, 234.0], [1270.0, 259.0], [1239.0, 26.0], [1230.0, 27.0], [1228.0, 26.0], [1252.0, 304.5], [1257.0, 250.0], [1227.0, 303.0], [1223.0, 259.0], [1233.0, 287.0], [1282.0, 29.0], [1339.0, 24.0], [1295.0, 275.0], [1308.0, 260.0], [1383.0, 156.0], [1352.0, 284.0], [1377.0, 27.0], [1385.0, 31.0], [1366.0, 29.0], [1346.0, 249.0], [1442.0, 286.0], [1440.0, 251.0], [1421.0, 33.0], [1446.0, 27.0], [1469.0, 33.0], [1447.0, 241.0], [1455.0, 36.0], [1525.0, 98.0], [1487.0, 27.0], [1581.0, 31.0], [1597.0, 339.0], [1542.0, 379.0], [1560.0, 128.0], [1561.0, 64.0], [1660.0, 81.0], [1619.0, 318.0], [1638.0, 294.0], [1622.0, 89.0], [1627.0, 326.0], [1611.0, 118.0], [1640.0, 86.0], [1709.0, 98.0], [1699.0, 112.0], [1711.0, 296.0], [1778.0, 353.0], [1779.0, 164.0], [1745.0, 148.0], [1853.0, 367.0], [1838.0, 228.0], [1831.0, 323.0], [1846.0, 367.0], [1834.0, 447.5], [1805.0, 409.0], [1862.0, 27.0], [1870.0, 258.5], [1892.0, 242.5], [1859.0, 271.0], [1876.0, 236.5], [1959.0, 322.0], [1964.0, 290.5], [2014.0, 328.0], [2001.0, 302.0], [2000.0, 284.0], [2023.0, 369.0], [2117.0, 41.0], [2173.0, 480.0], [2158.0, 491.5], [2121.0, 461.0], [2098.0, 378.0], [2092.0, 396.0], [2103.0, 456.0], [2226.0, 535.0], [2198.0, 446.5], [2245.0, 436.0], [2206.0, 452.0], [2236.0, 422.0], [2289.0, 433.0], [2322.0, 595.0], [2421.0, 516.0], [2318.0, 552.0], [2307.0, 409.0], [2401.0, 427.0], [2430.0, 544.5], [2392.0, 520.0], [2446.0, 589.0], [2435.0, 429.0], [2450.0, 475.5], [2437.0, 619.0], [2491.0, 602.5], [2452.0, 409.0], [2546.0, 681.5], [2508.0, 435.5], [2481.0, 605.0], [2519.0, 418.0], [2517.0, 540.0], [2673.0, 520.0], [2679.0, 581.0], [2630.0, 562.0], [2657.0, 661.0], [2647.0, 606.0], [2619.0, 618.0], [2639.0, 581.0], [2613.0, 542.0], [2605.0, 595.0], [2618.0, 565.0], [2644.0, 627.0], [2811.0, 539.0], [2779.0, 589.0], [2774.0, 544.0], [2771.0, 546.0], [2797.0, 543.0], [2785.0, 614.0], [2747.0, 544.0], [2692.0, 572.0], [2770.0, 686.0], [2756.0, 523.0], [2754.0, 602.5], [2744.0, 596.0], [2737.0, 609.0], [2780.0, 586.0], [2783.0, 554.0], [2736.0, 594.0], [2727.0, 546.0], [2888.0, 602.5], [2924.0, 581.0], [2854.0, 558.0], [2932.0, 594.5], [2880.0, 536.0], [2849.0, 598.0], [2907.0, 553.0], [2903.0, 470.0], [2912.0, 611.0], [2833.0, 611.0], [2828.0, 569.0], [2871.0, 561.0], [2894.0, 568.0], [2898.0, 530.0], [2966.0, 593.5], [3065.0, 501.0], [2982.0, 508.0], [3047.0, 468.0], [3001.0, 526.0], [2959.0, 548.0], [3007.0, 608.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3065.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 448.9, "minX": 1.6334205E12, "maxY": 1029.1666666666667, "series": [{"data": [[1.6334208E12, 965.55], [1.6334205E12, 448.9], [1.63342116E12, 996.65], [1.63342086E12, 999.45], [1.63342056E12, 980.95], [1.63342122E12, 994.55], [1.63342092E12, 998.8], [1.63342062E12, 1012.9666666666667], [1.63342128E12, 996.9833333333333], [1.63342098E12, 994.1666666666666], [1.6334214E12, 612.2666666666667], [1.63342068E12, 999.0666666666667], [1.63342134E12, 996.6166666666667], [1.63342104E12, 1029.1666666666667], [1.63342074E12, 999.0833333333334], [1.6334211E12, 998.7333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334214E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 427.8833333333333, "minX": 1.6334205E12, "maxY": 1028.3666666666666, "series": [{"data": [[1.6334208E12, 965.55], [1.6334205E12, 427.8833333333333], [1.63342116E12, 969.7166666666667], [1.63342086E12, 999.45], [1.63342056E12, 1001.3333333333334], [1.63342122E12, 1021.3333333333334], [1.63342092E12, 998.8], [1.63342062E12, 1013.6], [1.63342128E12, 997.0333333333333], [1.63342098E12, 994.1666666666666], [1.6334214E12, 612.7833333333333], [1.63342068E12, 999.0666666666667], [1.63342134E12, 996.85], [1.63342104E12, 1028.3666666666666], [1.63342074E12, 999.0833333333334], [1.6334211E12, 998.8833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334214E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 427.8833333333333, "minX": 1.6334205E12, "maxY": 1028.3666666666666, "series": [{"data": [[1.6334208E12, 965.55], [1.6334205E12, 427.8833333333333], [1.63342116E12, 969.7166666666667], [1.63342086E12, 999.45], [1.63342056E12, 1001.3333333333334], [1.63342122E12, 1021.3333333333334], [1.63342092E12, 998.8], [1.63342062E12, 1013.6], [1.63342128E12, 997.0333333333333], [1.63342098E12, 994.1666666666666], [1.6334214E12, 612.7833333333333], [1.63342068E12, 999.0666666666667], [1.63342134E12, 996.85], [1.63342104E12, 1028.3666666666666], [1.63342074E12, 999.0833333333334], [1.6334211E12, 998.8833333333333]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334214E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 427.8833333333333, "minX": 1.6334205E12, "maxY": 1028.3666666666666, "series": [{"data": [[1.6334208E12, 965.55], [1.6334205E12, 427.8833333333333], [1.63342116E12, 969.7166666666667], [1.63342086E12, 999.45], [1.63342056E12, 1001.3333333333334], [1.63342122E12, 1021.3333333333334], [1.63342092E12, 998.8], [1.63342062E12, 1013.6], [1.63342128E12, 997.0333333333333], [1.63342098E12, 994.1666666666666], [1.6334214E12, 612.7833333333333], [1.63342068E12, 999.0666666666667], [1.63342134E12, 996.85], [1.63342104E12, 1028.3666666666666], [1.63342074E12, 999.0833333333334], [1.6334211E12, 998.8833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334214E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

