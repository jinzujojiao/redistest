/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 12487.0, "series": [{"data": [[0.0, 35.0], [0.1, 36.0], [0.2, 37.0], [0.3, 37.0], [0.4, 37.0], [0.5, 37.0], [0.6, 37.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 38.0], [1.1, 38.0], [1.2, 38.0], [1.3, 38.0], [1.4, 38.0], [1.5, 38.0], [1.6, 38.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 39.0], [2.4, 39.0], [2.5, 39.0], [2.6, 39.0], [2.7, 39.0], [2.8, 39.0], [2.9, 39.0], [3.0, 39.0], [3.1, 39.0], [3.2, 39.0], [3.3, 39.0], [3.4, 39.0], [3.5, 39.0], [3.6, 39.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 40.0], [4.1, 40.0], [4.2, 40.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 41.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 41.0], [5.8, 41.0], [5.9, 41.0], [6.0, 41.0], [6.1, 41.0], [6.2, 41.0], [6.3, 41.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 42.0], [6.9, 42.0], [7.0, 42.0], [7.1, 42.0], [7.2, 42.0], [7.3, 42.0], [7.4, 42.0], [7.5, 42.0], [7.6, 42.0], [7.7, 42.0], [7.8, 42.0], [7.9, 42.0], [8.0, 42.0], [8.1, 42.0], [8.2, 42.0], [8.3, 42.0], [8.4, 42.0], [8.5, 43.0], [8.6, 43.0], [8.7, 43.0], [8.8, 43.0], [8.9, 43.0], [9.0, 43.0], [9.1, 43.0], [9.2, 43.0], [9.3, 43.0], [9.4, 43.0], [9.5, 43.0], [9.6, 43.0], [9.7, 43.0], [9.8, 43.0], [9.9, 43.0], [10.0, 43.0], [10.1, 43.0], [10.2, 43.0], [10.3, 44.0], [10.4, 44.0], [10.5, 44.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 44.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 44.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 45.0], [14.1, 45.0], [14.2, 45.0], [14.3, 46.0], [14.4, 46.0], [14.5, 46.0], [14.6, 46.0], [14.7, 46.0], [14.8, 46.0], [14.9, 46.0], [15.0, 46.0], [15.1, 46.0], [15.2, 46.0], [15.3, 46.0], [15.4, 46.0], [15.5, 46.0], [15.6, 46.0], [15.7, 46.0], [15.8, 46.0], [15.9, 46.0], [16.0, 46.0], [16.1, 46.0], [16.2, 46.0], [16.3, 46.0], [16.4, 46.0], [16.5, 46.0], [16.6, 47.0], [16.7, 47.0], [16.8, 47.0], [16.9, 47.0], [17.0, 47.0], [17.1, 47.0], [17.2, 47.0], [17.3, 47.0], [17.4, 47.0], [17.5, 47.0], [17.6, 47.0], [17.7, 47.0], [17.8, 47.0], [17.9, 47.0], [18.0, 47.0], [18.1, 47.0], [18.2, 47.0], [18.3, 47.0], [18.4, 47.0], [18.5, 47.0], [18.6, 47.0], [18.7, 47.0], [18.8, 48.0], [18.9, 48.0], [19.0, 48.0], [19.1, 48.0], [19.2, 48.0], [19.3, 48.0], [19.4, 48.0], [19.5, 48.0], [19.6, 48.0], [19.7, 48.0], [19.8, 48.0], [19.9, 48.0], [20.0, 48.0], [20.1, 48.0], [20.2, 48.0], [20.3, 48.0], [20.4, 48.0], [20.5, 48.0], [20.6, 48.0], [20.7, 48.0], [20.8, 48.0], [20.9, 49.0], [21.0, 49.0], [21.1, 49.0], [21.2, 49.0], [21.3, 49.0], [21.4, 49.0], [21.5, 49.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 49.0], [22.2, 49.0], [22.3, 49.0], [22.4, 49.0], [22.5, 49.0], [22.6, 49.0], [22.7, 49.0], [22.8, 49.0], [22.9, 49.0], [23.0, 49.0], [23.1, 49.0], [23.2, 50.0], [23.3, 50.0], [23.4, 50.0], [23.5, 50.0], [23.6, 50.0], [23.7, 50.0], [23.8, 50.0], [23.9, 50.0], [24.0, 50.0], [24.1, 50.0], [24.2, 50.0], [24.3, 50.0], [24.4, 50.0], [24.5, 50.0], [24.6, 50.0], [24.7, 50.0], [24.8, 50.0], [24.9, 50.0], [25.0, 50.0], [25.1, 50.0], [25.2, 50.0], [25.3, 50.0], [25.4, 51.0], [25.5, 51.0], [25.6, 51.0], [25.7, 51.0], [25.8, 51.0], [25.9, 51.0], [26.0, 51.0], [26.1, 51.0], [26.2, 51.0], [26.3, 51.0], [26.4, 51.0], [26.5, 51.0], [26.6, 51.0], [26.7, 51.0], [26.8, 51.0], [26.9, 51.0], [27.0, 51.0], [27.1, 51.0], [27.2, 51.0], [27.3, 51.0], [27.4, 51.0], [27.5, 52.0], [27.6, 52.0], [27.7, 52.0], [27.8, 52.0], [27.9, 52.0], [28.0, 52.0], [28.1, 52.0], [28.2, 52.0], [28.3, 52.0], [28.4, 52.0], [28.5, 52.0], [28.6, 52.0], [28.7, 52.0], [28.8, 52.0], [28.9, 52.0], [29.0, 52.0], [29.1, 52.0], [29.2, 52.0], [29.3, 52.0], [29.4, 52.0], [29.5, 52.0], [29.6, 52.0], [29.7, 53.0], [29.8, 53.0], [29.9, 53.0], [30.0, 53.0], [30.1, 53.0], [30.2, 53.0], [30.3, 53.0], [30.4, 53.0], [30.5, 53.0], [30.6, 53.0], [30.7, 53.0], [30.8, 53.0], [30.9, 53.0], [31.0, 53.0], [31.1, 53.0], [31.2, 53.0], [31.3, 53.0], [31.4, 53.0], [31.5, 53.0], [31.6, 53.0], [31.7, 53.0], [31.8, 53.0], [31.9, 53.0], [32.0, 54.0], [32.1, 54.0], [32.2, 54.0], [32.3, 54.0], [32.4, 54.0], [32.5, 54.0], [32.6, 54.0], [32.7, 54.0], [32.8, 54.0], [32.9, 54.0], [33.0, 54.0], [33.1, 54.0], [33.2, 54.0], [33.3, 54.0], [33.4, 54.0], [33.5, 54.0], [33.6, 54.0], [33.7, 54.0], [33.8, 54.0], [33.9, 54.0], [34.0, 54.0], [34.1, 54.0], [34.2, 54.0], [34.3, 54.0], [34.4, 54.0], [34.5, 54.0], [34.6, 55.0], [34.7, 55.0], [34.8, 55.0], [34.9, 55.0], [35.0, 55.0], [35.1, 55.0], [35.2, 55.0], [35.3, 55.0], [35.4, 55.0], [35.5, 55.0], [35.6, 55.0], [35.7, 55.0], [35.8, 55.0], [35.9, 55.0], [36.0, 55.0], [36.1, 55.0], [36.2, 55.0], [36.3, 55.0], [36.4, 55.0], [36.5, 55.0], [36.6, 55.0], [36.7, 55.0], [36.8, 55.0], [36.9, 55.0], [37.0, 55.0], [37.1, 55.0], [37.2, 55.0], [37.3, 55.0], [37.4, 55.0], [37.5, 56.0], [37.6, 56.0], [37.7, 56.0], [37.8, 56.0], [37.9, 56.0], [38.0, 56.0], [38.1, 56.0], [38.2, 56.0], [38.3, 56.0], [38.4, 56.0], [38.5, 56.0], [38.6, 56.0], [38.7, 56.0], [38.8, 56.0], [38.9, 56.0], [39.0, 56.0], [39.1, 56.0], [39.2, 56.0], [39.3, 56.0], [39.4, 56.0], [39.5, 56.0], [39.6, 56.0], [39.7, 56.0], [39.8, 56.0], [39.9, 56.0], [40.0, 56.0], [40.1, 56.0], [40.2, 56.0], [40.3, 57.0], [40.4, 57.0], [40.5, 57.0], [40.6, 57.0], [40.7, 57.0], [40.8, 57.0], [40.9, 57.0], [41.0, 57.0], [41.1, 57.0], [41.2, 57.0], [41.3, 57.0], [41.4, 57.0], [41.5, 57.0], [41.6, 57.0], [41.7, 57.0], [41.8, 57.0], [41.9, 57.0], [42.0, 57.0], [42.1, 57.0], [42.2, 57.0], [42.3, 57.0], [42.4, 57.0], [42.5, 57.0], [42.6, 57.0], [42.7, 57.0], [42.8, 57.0], [42.9, 57.0], [43.0, 57.0], [43.1, 58.0], [43.2, 58.0], [43.3, 58.0], [43.4, 58.0], [43.5, 58.0], [43.6, 58.0], [43.7, 58.0], [43.8, 58.0], [43.9, 58.0], [44.0, 58.0], [44.1, 58.0], [44.2, 58.0], [44.3, 58.0], [44.4, 58.0], [44.5, 58.0], [44.6, 58.0], [44.7, 58.0], [44.8, 58.0], [44.9, 58.0], [45.0, 58.0], [45.1, 58.0], [45.2, 58.0], [45.3, 58.0], [45.4, 58.0], [45.5, 58.0], [45.6, 58.0], [45.7, 58.0], [45.8, 59.0], [45.9, 59.0], [46.0, 59.0], [46.1, 59.0], [46.2, 59.0], [46.3, 59.0], [46.4, 59.0], [46.5, 59.0], [46.6, 59.0], [46.7, 59.0], [46.8, 59.0], [46.9, 59.0], [47.0, 59.0], [47.1, 59.0], [47.2, 59.0], [47.3, 59.0], [47.4, 59.0], [47.5, 59.0], [47.6, 59.0], [47.7, 59.0], [47.8, 59.0], [47.9, 59.0], [48.0, 59.0], [48.1, 59.0], [48.2, 60.0], [48.3, 60.0], [48.4, 60.0], [48.5, 60.0], [48.6, 60.0], [48.7, 60.0], [48.8, 60.0], [48.9, 60.0], [49.0, 60.0], [49.1, 60.0], [49.2, 60.0], [49.3, 60.0], [49.4, 60.0], [49.5, 60.0], [49.6, 60.0], [49.7, 60.0], [49.8, 60.0], [49.9, 60.0], [50.0, 60.0], [50.1, 60.0], [50.2, 60.0], [50.3, 60.0], [50.4, 61.0], [50.5, 61.0], [50.6, 61.0], [50.7, 61.0], [50.8, 61.0], [50.9, 61.0], [51.0, 61.0], [51.1, 61.0], [51.2, 61.0], [51.3, 61.0], [51.4, 61.0], [51.5, 61.0], [51.6, 61.0], [51.7, 61.0], [51.8, 61.0], [51.9, 61.0], [52.0, 61.0], [52.1, 61.0], [52.2, 61.0], [52.3, 61.0], [52.4, 62.0], [52.5, 62.0], [52.6, 62.0], [52.7, 62.0], [52.8, 62.0], [52.9, 62.0], [53.0, 62.0], [53.1, 62.0], [53.2, 62.0], [53.3, 62.0], [53.4, 62.0], [53.5, 62.0], [53.6, 62.0], [53.7, 62.0], [53.8, 62.0], [53.9, 62.0], [54.0, 62.0], [54.1, 62.0], [54.2, 63.0], [54.3, 63.0], [54.4, 63.0], [54.5, 63.0], [54.6, 63.0], [54.7, 63.0], [54.8, 63.0], [54.9, 63.0], [55.0, 63.0], [55.1, 63.0], [55.2, 63.0], [55.3, 63.0], [55.4, 63.0], [55.5, 63.0], [55.6, 63.0], [55.7, 63.0], [55.8, 64.0], [55.9, 64.0], [56.0, 64.0], [56.1, 64.0], [56.2, 64.0], [56.3, 64.0], [56.4, 64.0], [56.5, 64.0], [56.6, 64.0], [56.7, 64.0], [56.8, 64.0], [56.9, 64.0], [57.0, 64.0], [57.1, 64.0], [57.2, 64.0], [57.3, 65.0], [57.4, 65.0], [57.5, 65.0], [57.6, 65.0], [57.7, 65.0], [57.8, 65.0], [57.9, 65.0], [58.0, 65.0], [58.1, 65.0], [58.2, 65.0], [58.3, 65.0], [58.4, 65.0], [58.5, 66.0], [58.6, 66.0], [58.7, 66.0], [58.8, 66.0], [58.9, 66.0], [59.0, 66.0], [59.1, 66.0], [59.2, 66.0], [59.3, 66.0], [59.4, 66.0], [59.5, 67.0], [59.6, 67.0], [59.7, 67.0], [59.8, 67.0], [59.9, 67.0], [60.0, 67.0], [60.1, 67.0], [60.2, 67.0], [60.3, 67.0], [60.4, 68.0], [60.5, 68.0], [60.6, 68.0], [60.7, 68.0], [60.8, 68.0], [60.9, 68.0], [61.0, 68.0], [61.1, 68.0], [61.2, 69.0], [61.3, 69.0], [61.4, 69.0], [61.5, 69.0], [61.6, 69.0], [61.7, 69.0], [61.8, 70.0], [61.9, 70.0], [62.0, 70.0], [62.1, 70.0], [62.2, 70.0], [62.3, 70.0], [62.4, 71.0], [62.5, 71.0], [62.6, 71.0], [62.7, 71.0], [62.8, 72.0], [62.9, 72.0], [63.0, 72.0], [63.1, 72.0], [63.2, 73.0], [63.3, 73.0], [63.4, 73.0], [63.5, 74.0], [63.6, 74.0], [63.7, 74.0], [63.8, 75.0], [63.9, 75.0], [64.0, 76.0], [64.1, 76.0], [64.2, 77.0], [64.3, 77.0], [64.4, 78.0], [64.5, 79.0], [64.6, 80.0], [64.7, 81.0], [64.8, 82.0], [64.9, 83.0], [65.0, 85.0], [65.1, 87.0], [65.2, 90.0], [65.3, 93.0], [65.4, 96.0], [65.5, 100.0], [65.6, 104.0], [65.7, 107.0], [65.8, 110.0], [65.9, 113.0], [66.0, 118.0], [66.1, 123.0], [66.2, 127.0], [66.3, 132.0], [66.4, 136.0], [66.5, 139.0], [66.6, 142.0], [66.7, 147.0], [66.8, 153.0], [66.9, 158.0], [67.0, 163.0], [67.1, 168.0], [67.2, 171.0], [67.3, 174.0], [67.4, 178.0], [67.5, 181.0], [67.6, 186.0], [67.7, 191.0], [67.8, 195.0], [67.9, 200.0], [68.0, 203.0], [68.1, 206.0], [68.2, 209.0], [68.3, 212.0], [68.4, 215.0], [68.5, 218.0], [68.6, 221.0], [68.7, 225.0], [68.8, 228.0], [68.9, 231.0], [69.0, 235.0], [69.1, 238.0], [69.2, 240.0], [69.3, 243.0], [69.4, 246.0], [69.5, 248.0], [69.6, 252.0], [69.7, 255.0], [69.8, 258.0], [69.9, 262.0], [70.0, 265.0], [70.1, 268.0], [70.2, 271.0], [70.3, 274.0], [70.4, 277.0], [70.5, 280.0], [70.6, 283.0], [70.7, 286.0], [70.8, 289.0], [70.9, 292.0], [71.0, 296.0], [71.1, 299.0], [71.2, 302.0], [71.3, 305.0], [71.4, 308.0], [71.5, 310.0], [71.6, 314.0], [71.7, 317.0], [71.8, 320.0], [71.9, 324.0], [72.0, 327.0], [72.1, 330.0], [72.2, 333.0], [72.3, 337.0], [72.4, 340.0], [72.5, 344.0], [72.6, 347.0], [72.7, 351.0], [72.8, 354.0], [72.9, 357.0], [73.0, 360.0], [73.1, 363.0], [73.2, 367.0], [73.3, 370.0], [73.4, 373.0], [73.5, 376.0], [73.6, 380.0], [73.7, 383.0], [73.8, 386.0], [73.9, 389.0], [74.0, 393.0], [74.1, 396.0], [74.2, 399.0], [74.3, 402.0], [74.4, 405.0], [74.5, 408.0], [74.6, 411.0], [74.7, 415.0], [74.8, 418.0], [74.9, 421.0], [75.0, 424.0], [75.1, 427.0], [75.2, 430.0], [75.3, 433.0], [75.4, 437.0], [75.5, 440.0], [75.6, 443.0], [75.7, 446.0], [75.8, 449.0], [75.9, 453.0], [76.0, 456.0], [76.1, 459.0], [76.2, 462.0], [76.3, 466.0], [76.4, 469.0], [76.5, 472.0], [76.6, 476.0], [76.7, 479.0], [76.8, 483.0], [76.9, 486.0], [77.0, 489.0], [77.1, 492.0], [77.2, 495.0], [77.3, 498.0], [77.4, 501.0], [77.5, 504.0], [77.6, 508.0], [77.7, 511.0], [77.8, 514.0], [77.9, 517.0], [78.0, 521.0], [78.1, 524.0], [78.2, 528.0], [78.3, 531.0], [78.4, 535.0], [78.5, 538.0], [78.6, 541.0], [78.7, 544.0], [78.8, 547.0], [78.9, 549.0], [79.0, 553.0], [79.1, 556.0], [79.2, 559.0], [79.3, 562.0], [79.4, 565.0], [79.5, 569.0], [79.6, 572.0], [79.7, 575.0], [79.8, 578.0], [79.9, 582.0], [80.0, 585.0], [80.1, 588.0], [80.2, 592.0], [80.3, 595.0], [80.4, 598.0], [80.5, 601.0], [80.6, 604.0], [80.7, 607.0], [80.8, 610.0], [80.9, 614.0], [81.0, 616.0], [81.1, 619.0], [81.2, 622.0], [81.3, 625.0], [81.4, 629.0], [81.5, 632.0], [81.6, 635.0], [81.7, 638.0], [81.8, 641.0], [81.9, 645.0], [82.0, 648.0], [82.1, 651.0], [82.2, 654.0], [82.3, 658.0], [82.4, 661.0], [82.5, 664.0], [82.6, 668.0], [82.7, 671.0], [82.8, 674.0], [82.9, 678.0], [83.0, 681.0], [83.1, 684.0], [83.2, 687.0], [83.3, 691.0], [83.4, 694.0], [83.5, 697.0], [83.6, 700.0], [83.7, 703.0], [83.8, 707.0], [83.9, 710.0], [84.0, 713.0], [84.1, 717.0], [84.2, 720.0], [84.3, 723.0], [84.4, 726.0], [84.5, 729.0], [84.6, 733.0], [84.7, 736.0], [84.8, 739.0], [84.9, 742.0], [85.0, 745.0], [85.1, 749.0], [85.2, 752.0], [85.3, 755.0], [85.4, 758.0], [85.5, 761.0], [85.6, 764.0], [85.7, 767.0], [85.8, 770.0], [85.9, 774.0], [86.0, 777.0], [86.1, 780.0], [86.2, 784.0], [86.3, 787.0], [86.4, 790.0], [86.5, 794.0], [86.6, 797.0], [86.7, 800.0], [86.8, 804.0], [86.9, 807.0], [87.0, 811.0], [87.1, 814.0], [87.2, 818.0], [87.3, 822.0], [87.4, 825.0], [87.5, 829.0], [87.6, 832.0], [87.7, 835.0], [87.8, 839.0], [87.9, 842.0], [88.0, 846.0], [88.1, 849.0], [88.2, 852.0], [88.3, 856.0], [88.4, 859.0], [88.5, 862.0], [88.6, 866.0], [88.7, 869.0], [88.8, 873.0], [88.9, 876.0], [89.0, 880.0], [89.1, 883.0], [89.2, 887.0], [89.3, 890.0], [89.4, 893.0], [89.5, 897.0], [89.6, 900.0], [89.7, 904.0], [89.8, 907.0], [89.9, 911.0], [90.0, 914.0], [90.1, 918.0], [90.2, 921.0], [90.3, 925.0], [90.4, 928.0], [90.5, 932.0], [90.6, 935.0], [90.7, 939.0], [90.8, 942.0], [90.9, 946.0], [91.0, 949.0], [91.1, 953.0], [91.2, 957.0], [91.3, 961.0], [91.4, 965.0], [91.5, 969.0], [91.6, 973.0], [91.7, 976.0], [91.8, 980.0], [91.9, 984.0], [92.0, 987.0], [92.1, 991.0], [92.2, 994.0], [92.3, 998.0], [92.4, 1002.0], [92.5, 1006.0], [92.6, 1010.0], [92.7, 1014.0], [92.8, 1018.0], [92.9, 1021.0], [93.0, 1025.0], [93.1, 1029.0], [93.2, 1033.0], [93.3, 1037.0], [93.4, 1041.0], [93.5, 1045.0], [93.6, 1049.0], [93.7, 1053.0], [93.8, 1057.0], [93.9, 1062.0], [94.0, 1066.0], [94.1, 1069.0], [94.2, 1073.0], [94.3, 1077.0], [94.4, 1082.0], [94.5, 1086.0], [94.6, 1091.0], [94.7, 1095.0], [94.8, 1099.0], [94.9, 1104.0], [95.0, 1108.0], [95.1, 1113.0], [95.2, 1117.0], [95.3, 1122.0], [95.4, 1126.0], [95.5, 1130.0], [95.6, 1135.0], [95.7, 1140.0], [95.8, 1144.0], [95.9, 1149.0], [96.0, 1153.0], [96.1, 1158.0], [96.2, 1163.0], [96.3, 1168.0], [96.4, 1173.0], [96.5, 1177.0], [96.6, 1182.0], [96.7, 1188.0], [96.8, 1193.0], [96.9, 1200.0], [97.0, 1206.0], [97.1, 1211.0], [97.2, 1217.0], [97.3, 1222.0], [97.4, 1228.0], [97.5, 1235.0], [97.6, 1242.0], [97.7, 1251.0], [97.8, 1258.0], [97.9, 1264.0], [98.0, 1269.0], [98.1, 1274.0], [98.2, 1279.0], [98.3, 1285.0], [98.4, 1293.0], [98.5, 1302.0], [98.6, 1312.0], [98.7, 1321.0], [98.8, 1332.0], [98.9, 1346.0], [99.0, 1366.0], [99.1, 1391.0], [99.2, 1452.0], [99.3, 1534.0], [99.4, 1642.0], [99.5, 1745.0], [99.6, 1859.0], [99.7, 2188.0], [99.8, 2260.0], [99.9, 2655.0], [100.0, 12487.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 588507.0, "series": [{"data": [[0.0, 588507.0], [600.0, 28106.0], [700.0, 27871.0], [800.0, 26070.0], [900.0, 24794.0], [1000.0, 22163.0], [1100.0, 18795.0], [1200.0, 14182.0], [1300.0, 5839.0], [1400.0, 1297.0], [1500.0, 900.0], [1600.0, 716.0], [1700.0, 961.0], [1800.0, 733.0], [1900.0, 143.0], [2000.0, 138.0], [2100.0, 375.0], [2200.0, 1046.0], [2300.0, 142.0], [2400.0, 106.0], [2500.0, 217.0], [2600.0, 280.0], [2700.0, 156.0], [2800.0, 64.0], [2900.0, 15.0], [3000.0, 4.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 51.0], [3600.0, 117.0], [3800.0, 3.0], [3900.0, 3.0], [4000.0, 1.0], [4100.0, 1.0], [4400.0, 2.0], [4700.0, 4.0], [5100.0, 6.0], [5000.0, 4.0], [4900.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 4.0], [5600.0, 6.0], [5500.0, 4.0], [5700.0, 7.0], [5800.0, 3.0], [6000.0, 3.0], [5900.0, 2.0], [6100.0, 3.0], [6200.0, 2.0], [6300.0, 1.0], [6400.0, 4.0], [6500.0, 1.0], [9100.0, 1.0], [9500.0, 2.0], [9300.0, 1.0], [9800.0, 1.0], [9900.0, 2.0], [10700.0, 4.0], [10600.0, 3.0], [10500.0, 1.0], [11000.0, 4.0], [10900.0, 5.0], [11100.0, 11.0], [11200.0, 7.0], [11300.0, 25.0], [11400.0, 29.0], [11500.0, 29.0], [11600.0, 38.0], [11700.0, 43.0], [11800.0, 41.0], [11900.0, 44.0], [12000.0, 26.0], [12100.0, 19.0], [12200.0, 3.0], [12400.0, 4.0], [12300.0, 1.0], [100.0, 21660.0], [200.0, 29062.0], [300.0, 27812.0], [400.0, 28071.0], [500.0, 27842.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6567.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 695404.0, "series": [{"data": [[0.0, 695404.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 196684.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6567.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2071.4833176586544, "minX": 1.63352634E12, "maxY": 2400.0, "series": [{"data": [[1.63352682E12, 2400.0], [1.63352712E12, 2400.0], [1.63352718E12, 2400.0], [1.63352652E12, 2400.0], [1.63352706E12, 2400.0], [1.6335264E12, 2400.0], [1.63352646E12, 2400.0], [1.63352676E12, 2400.0], [1.63352634E12, 2378.9038426133], [1.63352664E12, 2400.0], [1.6335267E12, 2400.0], [1.633527E12, 2400.0], [1.63352658E12, 2400.0], [1.63352688E12, 2400.0], [1.63352694E12, 2400.0], [1.63352724E12, 2071.4833176586544]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63352724E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 38.33333333333333, "minX": 160.0, "maxY": 12172.0, "series": [{"data": [[160.0, 51.0], [166.0, 50.0], [171.0, 50.0], [176.0, 50.0], [189.0, 48.0], [208.0, 47.120000000000005], [212.0, 48.0], [218.0, 48.0], [220.0, 48.0], [237.0, 48.0], [235.0, 42.88], [241.0, 48.0], [254.0, 98.0], [250.0, 53.74285714285715], [253.0, 97.0], [270.0, 139.5816326530612], [271.0, 145.0], [263.0, 96.63414634146343], [265.0, 98.0], [267.0, 98.0], [274.0, 126.47005988023952], [511.0, 39.0], [510.0, 42.0], [502.0, 41.0], [500.0, 42.0], [530.0, 39.0], [529.0, 38.5], [526.0, 40.0], [521.0, 39.5], [514.0, 41.5], [513.0, 40.0], [512.0, 40.0], [918.0, 40.15384615384616], [945.0, 40.72727272727273], [971.0, 40.421052631578945], [1021.0, 40.72727272727272], [1000.0, 42.14814814814814], [1074.0, 41.192307692307686], [1047.0, 39.57142857142858], [1129.0, 41.09090909090909], [1096.0, 38.33333333333333], [1155.0, 41.666666666666664], [1180.0, 42.11764705882353], [1211.0, 43.50000000000001], [1212.0, 50.0], [1264.0, 1799.0], [1235.0, 1591.0], [1234.0, 43.666666666666664], [1236.0, 2174.5], [1245.0, 1624.0], [1216.0, 50.0], [1220.0, 50.0], [1225.0, 48.0], [1226.0, 49.0], [1230.0, 48.0], [1261.0, 1708.0], [1250.0, 41.42307692307692], [1278.0, 4676.666666666667], [1279.0, 1882.0], [1275.0, 2506.0], [1277.0, 2420.0], [1265.0, 4708.666666666667], [1266.0, 1719.0], [1269.0, 1830.5], [1271.0, 6608.5], [1272.0, 644.142857142857], [1273.0, 3215.0], [1281.0, 1765.0], [1282.0, 1738.0], [1297.0, 42.67857142857143], [1317.0, 40.041666666666664], [1341.0, 42.48275862068966], [1371.0, 1930.0], [1365.0, 1731.0], [1355.0, 2016.0], [1357.0, 5653.571428571428], [1392.0, 3038.5], [1393.0, 2649.0], [1394.0, 4228.5], [1398.0, 3179.5], [1402.0, 11196.0], [1403.0, 6035.0], [1404.0, 2113.0], [1405.0, 4215.5], [1379.0, 1877.0], [1381.0, 1925.0], [1382.0, 1729.5], [1384.0, 568.6399999999999], [1385.0, 2047.0], [1360.0, 119.20000000000002], [1361.0, 11116.0], [1362.0, 1924.5], [1367.0, 4856.666666666666], [1369.0, 1782.5], [1370.0, 1755.6666666666667], [1372.0, 1877.0], [1374.0, 4729.0], [1457.0, 140.89393939393935], [1435.0, 120.14814814814811], [1412.0, 6622.5], [1409.0, 40.68181818181818], [1458.0, 2123.0], [1459.0, 4560.0], [1460.0, 2143.3333333333335], [1461.0, 6712.5], [1463.0, 3179.6666666666665], [1468.0, 95.0], [1467.0, 96.0], [1462.0, 96.33333333333333], [1431.0, 5169.0], [1432.0, 2271.6666666666665], [1433.0, 1731.0], [1436.0, 1888.5], [1437.0, 7657.5], [1440.0, 2198.0], [1441.0, 2011.0], [1445.0, 8005.666666666666], [1446.0, 6711.0], [1447.0, 4119.666666666667], [1448.0, 2058.75], [1450.0, 5053.0], [1454.0, 2053.6666666666665], [1455.0, 2185.0], [1487.0, 3117.0], [1478.0, 2189.3333333333335], [1477.0, 10952.0], [1475.0, 191.0], [1476.0, 192.0], [1496.0, 5731.5], [1502.0, 289.0], [1472.0, 141.0657894736842], [1493.0, 9223.5], [1495.0, 512.4700000000005], [1483.0, 5186.666666666667], [1485.0, 2204.0], [1486.0, 1547.5], [1504.0, 6080.2], [1521.0, 5235.0], [1523.0, 384.0], [1520.0, 316.6043956043956], [1535.0, 6902.5], [1507.0, 2492.0], [1508.0, 11520.0], [1509.0, 2696.0], [1510.0, 4942.75], [1511.0, 8415.5], [1512.0, 8332.166666666666], [1513.0, 8557.25], [1515.0, 11511.5], [1516.0, 3017.0], [1517.0, 4886.428571428572], [1518.0, 11468.666666666666], [1488.0, 6978.75], [1489.0, 6719.0], [1490.0, 11404.0], [1492.0, 9230.5], [1547.0, 9127.2], [1538.0, 7173.0], [1537.0, 2361.0], [1567.0, 8383.75], [1539.0, 995.8764044943823], [1543.0, 434.0], [1544.0, 8976.833333333334], [1546.0, 5608.833333333333], [1545.0, 433.0], [1548.0, 11610.0], [1587.0, 608.1956521739132], [1593.0, 626.0], [1568.0, 11518.0], [1569.0, 686.0625000000001], [1570.0, 11698.666666666668], [1571.0, 10463.833333333332], [1573.0, 11380.0], [1574.0, 11394.0], [1575.0, 9374.0], [1576.0, 7821.333333333334], [1577.0, 10207.714285714286], [1580.0, 577.0], [1563.0, 11592.666666666666], [1562.0, 530.0], [1558.0, 529.0], [1556.0, 529.0], [1553.0, 472.28571428571433], [1555.0, 531.0], [1566.0, 11606.0], [1608.0, 5346.0], [1603.0, 9248.0], [1600.0, 8204.0], [1618.0, 715.314606741573], [1620.0, 739.0], [1619.0, 771.0], [1621.0, 723.0], [1601.0, 11509.5], [1602.0, 11274.714285714286], [1604.0, 9416.1], [1605.0, 11656.4], [1607.0, 9639.963855421685], [1606.0, 664.5512820512823], [1610.0, 11866.0], [1648.0, 11828.5], [1649.0, 11794.0], [1650.0, 11689.0], [1652.0, 11972.0], [1651.0, 820.6022727272729], [1653.0, 11690.5], [1654.0, 4722.0], [1656.0, 10815.6], [1657.0, 8883.666666666666], [1658.0, 12031.0], [1659.0, 7206.5], [1660.0, 5186.0], [1661.0, 8878.0], [1663.0, 7385.75], [1636.0, 780.0481927710844], [1640.0, 11952.0], [1641.0, 9560.333333333332], [1643.0, 11847.5], [1645.0, 9314.166666666666], [1676.0, 7745.5], [1671.0, 7027.166666666667], [1668.0, 9575.5], [1666.0, 865.1839080459773], [1693.0, 961.2282608695655], [1692.0, 914.0], [1680.0, 912.1363636363634], [1690.0, 914.0], [1695.0, 979.0], [1669.0, 11735.0], [1670.0, 2117.0], [1672.0, 7737.7692307692305], [1673.0, 867.0], [1674.0, 3538.0], [1675.0, 11927.0], [1701.0, 10893.8], [1725.0, 6364.5], [1722.0, 12051.0], [1724.0, 1558.1318681318687], [1713.0, 1101.9888888888888], [1719.0, 973.0], [1716.0, 974.0], [1720.0, 9252.368421052633], [1704.0, 11776.0], [1705.0, 3385.6666666666674], [1706.0, 3594.5], [1707.0, 1928.0], [1708.0, 1445.5000000000007], [1710.0, 11962.75], [1735.0, 10004.714285714286], [1731.0, 11977.0], [1728.0, 932.0], [1754.0, 830.4285714285713], [1748.0, 869.5913978494623], [1744.0, 891.0], [1752.0, 849.5], [1756.0, 816.5], [1732.0, 10477.666666666666], [1734.0, 9110.666666666666], [1733.0, 931.0], [1780.0, 9244.25], [1777.0, 691.0], [1738.0, 910.7840909090908], [1736.0, 931.0], [1743.0, 891.0], [1781.0, 7180.2], [1787.0, 2645.0], [1791.0, 762.7654320987652], [1775.0, 716.5802469135804], [1768.0, 753.1529411764706], [1761.0, 794.8210526315787], [1774.0, 735.0], [1789.0, 666.5], [1784.0, 680.9215686274514], [1796.0, 2588.0], [1792.0, 2630.0], [1822.0, 4845.0], [1821.0, 186.0], [1820.0, 187.33333333333334], [1823.0, 2459.0], [1816.0, 2250.0], [1815.0, 340.6111111111111], [1818.0, 220.63636363636363], [1817.0, 268.90607734806633], [1819.0, 564.913043478261], [1813.0, 504.34020618556735], [1812.0, 417.2857142857142], [1814.0, 4781.0], [1810.0, 587.8247422680411], [1811.0, 596.4117647058823], [1808.0, 2556.0], [1809.0, 552.7977528089889], [1794.0, 2602.2727272727275], [1795.0, 1276.3333333333333], [1798.0, 633.568181818182], [1800.0, 2574.75], [1801.0, 2559.0], [1803.0, 570.5952380952382], [1804.0, 549.0], [1805.0, 2566.6], [1806.0, 1551.5], [1840.0, 178.5], [1842.0, 705.0], [1851.0, 2405.0], [1850.0, 172.0], [1849.0, 174.0], [1848.0, 174.0], [1847.0, 175.0], [1846.0, 175.0], [1845.0, 176.33333333333334], [1843.0, 177.0], [1852.0, 2283.0], [1853.0, 978.6666666666667], [1855.0, 2411.0], [1824.0, 1270.0], [1825.0, 2385.3333333333335], [1826.0, 185.0], [1829.0, 2524.0], [1830.0, 1950.8333333333333], [1834.0, 182.0], [1831.0, 184.0], [1835.0, 2410.75], [1838.0, 890.6666666666667], [1839.0, 179.5], [1857.0, 2422.0], [1882.0, 3557.777777777778], [1856.0, 2437.9999999999995], [1887.0, 1295.5], [1885.0, 2368.0], [1883.0, 145.33333333333334], [1886.0, 364.81818181818176], [1858.0, 12172.0], [1859.0, 2603.0], [1860.0, 2402.0], [1907.0, 2268.0], [1911.0, 106.83333333333333], [1910.0, 109.0], [1916.0, 103.0], [1915.0, 105.0], [1906.0, 2413.0], [1905.0, 7504.5], [1904.0, 2488.0], [1888.0, 2519.0], [1889.0, 2537.0], [1891.0, 2527.25], [1894.0, 2374.5], [1893.0, 1729.3333333333335], [1892.0, 137.0], [1903.0, 2225.0], [1899.0, 2509.0], [1874.0, 4948.875], [1875.0, 2431.0], [1876.0, 2600.0], [1927.0, 2229.25], [1940.0, 2250.0], [1924.0, 2849.2352941176478], [1949.0, 2251.0], [1929.0, 2236.0], [1935.0, 2268.0], [1955.0, 2262.0], [1979.0, 2239.3333333333335], [1977.0, 2251.75], [1978.0, 2264.0], [1972.0, 2248.0], [1976.0, 2247.4285714285716], [1969.0, 2252.0], [1970.0, 2249.3333333333335], [1957.0, 2254.0], [1958.0, 2255.0], [1959.0, 2253.5], [1962.0, 2249.3333333333335], [1965.0, 2243.6666666666665], [1966.0, 2252.0], [1967.0, 2231.0], [1936.0, 2263.75], [1938.0, 2265.0], [1939.0, 384.7142857142857], [1941.0, 2249.0], [1943.0, 2243.0], [1995.0, 2216.0], [2004.0, 2171.4], [1985.0, 2203.0], [2013.0, 2184.0], [1998.0, 2210.25], [2032.0, 66.26797385620915], [2033.0, 53.51020408163266], [2034.0, 54.91052631578945], [2036.0, 46.666666666666664], [2037.0, 148.59374999999994], [2038.0, 446.51020408163254], [2039.0, 246.6376811594203], [2042.0, 112.35600907029482], [2041.0, 60.30708661417324], [2040.0, 55.42857142857143], [2043.0, 428.92653061224473], [2044.0, 656.8578993821701], [2045.0, 2205.833333333333], [2046.0, 2204.5], [2047.0, 2203.5], [2025.0, 49.98863636363636], [2027.0, 58.15277777777778], [2029.0, 63.88095238095236], [2030.0, 54.15625000000001], [2031.0, 48.0], [2000.0, 2258.6363636363635], [2002.0, 2218.795454545454], [2003.0, 2184.5], [2009.0, 2208.0], [2010.0, 2177.714285714286], [2158.0, 808.4555555555555], [2114.0, 1669.5], [2050.0, 243.1500000000001], [2052.0, 145.5333333333333], [2058.0, 89.4], [2056.0, 106.63636363636364], [2102.0, 887.835051546392], [2100.0, 864.0], [2098.0, 858.8636363636364], [2096.0, 875.0], [2084.0, 738.1348314606741], [2088.0, 786.4117647058823], [2068.0, 482.10857142857157], [2072.0, 573.9148936170214], [2154.0, 886.2528735632183], [2146.0, 970.2888888888887], [2116.0, 1040.2105263157896], [2118.0, 2320.6666666666665], [2120.0, 1086.111111111111], [2124.0, 2240.2333333333318], [2140.0, 1020.0], [2136.0, 1077.0106382978722], [2134.0, 1100.0], [2132.0, 1178.616504854369], [2130.0, 1217.0804597701153], [2174.0, 661.5], [2112.0, 976.4430379746835], [2170.0, 703.0], [2168.0, 702.0], [2276.0, 1729.8], [2226.0, 1313.0], [2224.0, 246.38461538461536], [2222.0, 256.5384615384615], [2228.0, 236.57142857142858], [2200.0, 1570.2], [2250.0, 2612.5], [2272.0, 2253.0], [2278.0, 1150.75], [2282.0, 177.9090909090909], [2284.0, 679.740740740741], [2294.0, 325.25], [2302.0, 2114.0], [2292.0, 2275.6666666666665], [2290.0, 1582.6], [2288.0, 1465.3333333333335], [2286.0, 170.0], [2256.0, 2385.5], [2260.0, 2313.0], [2258.0, 1242.0], [2264.0, 2186.0], [2268.0, 2126.6666666666665], [2266.0, 2156.625], [2254.0, 1643.6666666666665], [2252.0, 2457.6666666666665], [2208.0, 388.8095238095238], [2214.0, 321.7333333333334], [2212.0, 343.0], [2210.0, 345.5], [2218.0, 290.45454545454544], [2216.0, 299.4705882352941], [2220.0, 456.5833333333333], [2232.0, 2852.9148264984224], [2182.0, 602.5555555555558], [2180.0, 621.0], [2192.0, 483.9886363636364], [2196.0, 461.0], [2230.0, 232.7], [2306.0, 2111.0], [2304.0, 2114.5], [2360.0, 172.0], [2350.0, 182.0], [2348.0, 185.0], [2340.0, 200.625], [2338.0, 205.55555555555554], [2352.0, 181.0], [2356.0, 178.0], [2358.0, 173.66666666666666], [2312.0, 2137.0], [2308.0, 140.0], [2322.0, 1459.5], [2324.0, 1611.25], [2326.0, 1113.0], [2330.0, 678.875], [2328.0, 595.6], [2334.0, 209.5], [2400.0, 269.71012688201824], [2378.0, 2128.0], [2376.0, 1122.5], [2374.0, 2091.0], [2320.0, 888.3749999999999], [2382.0, 1888.5], [2380.0, 148.6], [2384.0, 633.0], [2390.0, 2468.8333333333335], [2394.0, 2294.0666666666666], [2398.0, 2379.484076433119], [2396.0, 2620.5], [2392.0, 2128.0], [2388.0, 1538.1428571428569], [2159.0, 788.5], [2113.0, 2327.0], [2055.0, 814.8333333333333], [2053.0, 137.66666666666666], [2059.0, 74.66666666666667], [2145.0, 991.0], [2079.0, 650.4040404040404], [2077.0, 625.0], [2071.0, 539.9302325581396], [2073.0, 601.7294117647059], [2065.0, 307.45057471264363], [2155.0, 851.126582278481], [2149.0, 929.0196078431374], [2161.0, 776.0000000000001], [2171.0, 683.8222222222219], [2165.0, 715.7741935483871], [2049.0, 2208.0], [2105.0, 932.0963855421685], [2103.0, 914.0], [2095.0, 825.4545454545454], [2097.0, 875.0], [2099.0, 864.0], [2081.0, 692.2758620689655], [2087.0, 768.0], [2051.0, 663.5], [2115.0, 2140.1428571428573], [2117.0, 1690.0], [2119.0, 2319.5], [2121.0, 2173.777777777778], [2123.0, 1233.4499999999996], [2125.0, 1154.0], [2133.0, 1119.873015873016], [2129.0, 1215.5], [2131.0, 1213.4999999999995], [2127.0, 1174.0222222222226], [2143.0, 997.621052631579], [2139.0, 1016.0], [2137.0, 1036.8124999999995], [2289.0, 2213.8], [2207.0, 2352.6666666666665], [2203.0, 2339.0], [2199.0, 444.5], [2189.0, 525.088888888889], [2185.0, 563.6739130434784], [2183.0, 584.0], [2177.0, 642.8295454545453], [2205.0, 463.02083333333326], [2251.0, 2459.3333333333335], [2247.0, 211.0], [2273.0, 1883.1666666666667], [2279.0, 826.8333333333334], [2281.0, 1256.888888888889], [2287.0, 167.0], [2283.0, 176.0], [2291.0, 1753.0], [2301.0, 2119.0], [2293.0, 164.5], [2297.0, 150.5], [2275.0, 1474.3333333333335], [2253.0, 2513.2], [2255.0, 2170.0], [2257.0, 2165.0], [2263.0, 2183.3333333333335], [2265.0, 2188.0], [2271.0, 2137.5], [2267.0, 2289.6666666666665], [2261.0, 2597.0], [2219.0, 494.6], [2217.0, 296.0], [2221.0, 273.99999999999994], [2225.0, 242.36363636363637], [2223.0, 251.22222222222226], [2229.0, 234.375], [2227.0, 238.0], [2231.0, 220.42857142857142], [2323.0, 1326.8], [2327.0, 557.6666666666666], [2317.0, 2121.0], [2363.0, 2635.0], [2361.0, 169.25], [2359.0, 1412.0], [2351.0, 1414.0], [2349.0, 183.0], [2343.0, 190.4], [2339.0, 204.75], [2353.0, 180.0], [2355.0, 178.0], [2357.0, 175.28571428571428], [2319.0, 2133.0], [2307.0, 141.0], [2313.0, 2126.0], [2325.0, 524.8], [2333.0, 907.25], [2329.0, 599.0], [2371.0, 2628.25], [2335.0, 440.75], [2377.0, 2108.0], [2375.0, 2133.0], [2381.0, 147.5], [2383.0, 2365.5], [2387.0, 1329.166666666667], [2391.0, 2245.1666666666665], [2399.0, 116.42857142857143], [2393.0, 2185.5], [2389.0, 2630.3333333333335], [2379.0, 2162.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2390.9447496536022, 282.30124908890355]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 62893.35, "minX": 1.63352634E12, "maxY": 8277565.0, "series": [{"data": [[1.63352682E12, 7957512.466666667], [1.63352712E12, 7985555.75], [1.63352718E12, 8041376.55], [1.63352652E12, 7981875.866666666], [1.63352706E12, 7859637.266666667], [1.6335264E12, 7707887.466666667], [1.63352646E12, 8277565.0], [1.63352676E12, 7747294.933333334], [1.63352634E12, 5061862.466666667], [1.63352664E12, 7981176.15], [1.6335267E12, 7979612.6], [1.633527E12, 8040795.266666667], [1.63352658E12, 7967671.733333333], [1.63352688E12, 8154017.266666667], [1.63352694E12, 7929155.066666666], [1.63352724E12, 2972830.6333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63352682E12, 168354.98333333334], [1.63352712E12, 168926.76666666666], [1.63352718E12, 170109.76666666666], [1.63352652E12, 168870.43333333332], [1.63352706E12, 166279.1], [1.6335264E12, 162108.8], [1.63352646E12, 175058.21666666667], [1.63352676E12, 163907.46666666667], [1.63352634E12, 106273.7], [1.63352664E12, 168847.9], [1.6335267E12, 168822.55], [1.633527E12, 170081.6], [1.63352658E12, 168557.78333333333], [1.63352688E12, 172512.38333333333], [1.63352694E12, 167755.03333333333], [1.63352724E12, 62893.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63352724E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 53.262175284048325, "minX": 1.63352634E12, "maxY": 983.5358354593457, "series": [{"data": [[1.63352682E12, 599.9608840407518], [1.63352712E12, 476.8901857471548], [1.63352718E12, 104.28882008146442], [1.63352652E12, 53.387163492010494], [1.63352706E12, 214.9573974319896], [1.6335264E12, 633.4090610750334], [1.63352646E12, 253.83885806192097], [1.63352676E12, 320.6129021171269], [1.63352634E12, 983.5358354593457], [1.63352664E12, 54.19200613885791], [1.6335267E12, 53.262175284048325], [1.633527E12, 57.8202503974561], [1.63352658E12, 163.9397423257513], [1.63352688E12, 433.98039087629104], [1.63352694E12, 75.09773666006231], [1.63352724E12, 346.5924134533567]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63352724E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 53.11547124480748, "minX": 1.63352634E12, "maxY": 983.3768443754809, "series": [{"data": [[1.63352682E12, 599.8341838015132], [1.63352712E12, 476.70957414879615], [1.63352718E12, 104.12777759380025], [1.63352652E12, 53.24380358274682], [1.63352706E12, 214.76730358776206], [1.6335264E12, 633.26944866658], [1.63352646E12, 253.7048813831935], [1.63352676E12, 320.48778182567844], [1.63352634E12, 983.3768443754809], [1.63352664E12, 54.03204550762337], [1.6335267E12, 53.11547124480748], [1.633527E12, 57.589013645998776], [1.63352658E12, 163.77883795932692], [1.63352688E12, 433.83737979003416], [1.63352694E12, 74.91378152389267], [1.63352724E12, 346.4487437861082]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63352724E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63352634E12, "maxY": 84.9375345203968, "series": [{"data": [[1.63352682E12, 1.3266968931421574], [1.63352712E12, 0.38966885650448163], [1.63352718E12, 0.3716594363678499], [1.63352652E12, 0.5892684391366673], [1.63352706E12, 0.41372768235253665], [1.6335264E12, 0.47545599005112243], [1.63352646E12, 0.838536389223965], [1.63352676E12, 0.5905107231234533], [1.63352634E12, 84.9375345203968], [1.63352664E12, 0.47486070797050567], [1.6335267E12, 0.44284832407361213], [1.633527E12, 0.4516759406465313], [1.63352658E12, 0.7423758835619884], [1.63352688E12, 0.7549104445932068], [1.63352694E12, 0.6104301689109791], [1.63352724E12, 0.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63352724E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.63352634E12, "maxY": 12487.0, "series": [{"data": [[1.63352682E12, 1403.0], [1.63352712E12, 1457.0], [1.63352718E12, 1279.0], [1.63352652E12, 229.0], [1.63352706E12, 1882.0], [1.6335264E12, 1402.0], [1.63352646E12, 4414.0], [1.63352676E12, 1828.0], [1.63352634E12, 12487.0], [1.63352664E12, 181.0], [1.6335267E12, 178.0], [1.633527E12, 383.0], [1.63352658E12, 1504.0], [1.63352688E12, 1369.0], [1.63352694E12, 1398.0], [1.63352724E12, 1484.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63352682E12, 1321.0], [1.63352712E12, 1269.0], [1.63352718E12, 97.0], [1.63352652E12, 80.0], [1.63352706E12, 1320.0], [1.6335264E12, 1338.0], [1.63352646E12, 84.0], [1.63352676E12, 1344.0], [1.63352634E12, 1409.0], [1.63352664E12, 83.0], [1.6335267E12, 74.0], [1.633527E12, 82.0], [1.63352658E12, 99.9900000000016], [1.63352688E12, 91.0], [1.63352694E12, 92.0], [1.63352724E12, 1207.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63352682E12, 1375.9973636627146], [1.63352712E12, 1329.999472732543], [1.63352718E12, 150.0], [1.63352652E12, 133.0], [1.63352706E12, 1880.9984181976288], [1.6335264E12, 1398.999472732543], [1.63352646E12, 120.0], [1.63352676E12, 1394.0], [1.63352634E12, 1490.999472732543], [1.63352664E12, 103.0], [1.6335267E12, 84.99947273254293], [1.633527E12, 134.0], [1.63352658E12, 137.0], [1.63352688E12, 154.99841819762878], [1.63352694E12, 616.0], [1.63352724E12, 1240.9957818603434]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63352682E12, 1364.0], [1.63352712E12, 1323.0], [1.63352718E12, 142.0], [1.63352652E12, 131.99930519103873], [1.63352706E12, 1862.0], [1.6335264E12, 1384.997220764155], [1.63352646E12, 116.0], [1.63352676E12, 1387.9993051910387], [1.63352634E12, 1483.9993051910387], [1.63352664E12, 98.0], [1.6335267E12, 81.0], [1.633527E12, 123.99930519103873], [1.63352658E12, 128.99930519103873], [1.63352688E12, 131.99930519103873], [1.63352694E12, 614.9993051910387], [1.63352724E12, 1225.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63352682E12, 36.0], [1.63352712E12, 35.0], [1.63352718E12, 36.0], [1.63352652E12, 35.0], [1.63352706E12, 35.0], [1.6335264E12, 36.0], [1.63352646E12, 36.0], [1.63352676E12, 35.0], [1.63352634E12, 36.0], [1.63352664E12, 36.0], [1.6335267E12, 35.0], [1.633527E12, 35.0], [1.63352658E12, 35.0], [1.63352688E12, 36.0], [1.63352694E12, 36.0], [1.63352724E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63352682E12, 527.0], [1.63352712E12, 97.0], [1.63352718E12, 55.0], [1.63352652E12, 53.0], [1.63352706E12, 480.5], [1.6335264E12, 676.0], [1.63352646E12, 52.0], [1.63352676E12, 575.0], [1.63352634E12, 581.0], [1.63352664E12, 54.0], [1.6335267E12, 53.0], [1.633527E12, 55.0], [1.63352658E12, 54.0], [1.63352688E12, 56.0], [1.63352694E12, 54.0], [1.63352724E12, 260.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63352724E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 4.0, "maxY": 2604.0, "series": [{"data": [[4.0, 71.5], [5.0, 73.0], [6.0, 73.0], [11.0, 78.0], [15.0, 106.0], [18.0, 191.5], [21.0, 78.0], [33.0, 1799.0], [34.0, 138.0], [42.0, 224.5], [61.0, 143.0], [68.0, 168.0], [71.0, 169.0], [77.0, 57.0], [96.0, 52.0], [127.0, 166.0], [128.0, 176.0], [140.0, 85.0], [138.0, 186.0], [146.0, 159.0], [145.0, 50.0], [150.0, 41.0], [198.0, 58.0], [231.0, 54.0], [246.0, 53.0], [243.0, 59.0], [241.0, 56.0], [280.0, 47.0], [299.0, 51.0], [305.0, 230.0], [314.0, 54.0], [333.0, 56.0], [359.0, 110.0], [355.0, 58.0], [392.0, 245.0], [386.0, 55.0], [387.0, 294.0], [407.0, 231.0], [411.0, 251.0], [423.0, 55.0], [433.0, 55.0], [454.0, 2308.0], [467.0, 72.0], [489.0, 1134.0], [494.0, 173.5], [481.0, 54.0], [502.0, 292.0], [503.0, 326.0], [511.0, 289.0], [504.0, 53.0], [525.0, 287.0], [519.0, 286.0], [517.0, 286.0], [535.0, 53.0], [512.0, 290.0], [555.0, 287.0], [569.0, 229.0], [580.0, 204.0], [591.0, 530.0], [599.0, 261.0], [597.0, 290.0], [579.0, 269.0], [608.0, 270.0], [616.0, 51.0], [614.0, 54.0], [629.0, 281.0], [666.0, 117.0], [699.0, 65.0], [688.0, 326.5], [675.0, 172.5], [689.0, 53.0], [714.0, 602.5], [733.0, 55.0], [707.0, 52.0], [704.0, 319.5], [755.0, 56.0], [765.0, 305.0], [739.0, 386.0], [781.0, 261.0], [793.0, 47.0], [824.0, 416.5], [806.0, 61.0], [807.0, 442.0], [839.0, 82.0], [841.0, 424.0], [874.0, 446.5], [880.0, 124.0], [883.0, 52.0], [867.0, 51.0], [881.0, 71.0], [897.0, 54.0], [909.0, 56.0], [912.0, 53.0], [944.0, 55.0], [941.0, 53.0], [932.0, 54.0], [928.0, 442.5], [950.0, 55.0], [953.0, 53.0], [967.0, 54.0], [989.0, 56.0], [975.0, 55.0], [976.0, 55.0], [991.0, 54.0], [990.0, 54.0], [984.0, 53.0], [987.0, 53.0], [988.0, 52.0], [986.0, 53.0], [985.0, 54.0], [965.0, 56.0], [966.0, 53.0], [961.0, 54.0], [962.0, 54.5], [964.0, 55.0], [970.0, 54.0], [971.0, 54.0], [968.0, 55.0], [969.0, 55.0], [973.0, 54.0], [974.0, 53.0], [972.0, 55.0], [977.0, 54.0], [980.0, 54.0], [978.0, 54.0], [979.0, 52.0], [983.0, 53.0], [982.0, 54.0], [981.0, 55.0], [999.0, 54.0], [1010.0, 54.0], [1009.0, 55.0], [1011.0, 54.0], [1003.0, 53.0], [1005.0, 54.0], [1004.0, 54.0], [1006.0, 53.0], [1007.0, 55.0], [1000.0, 54.0], [1001.0, 54.0], [1002.0, 55.0], [992.0, 54.0], [997.0, 54.0], [998.0, 54.0], [996.0, 54.0], [995.0, 54.0], [993.0, 55.0], [994.0, 54.0], [1013.0, 54.0], [1015.0, 54.0], [1014.0, 55.0], [1012.0, 53.0], [1017.0, 54.0], [1021.0, 54.0], [1023.0, 57.0], [1020.0, 52.0], [1019.0, 56.0], [1016.0, 54.0], [1008.0, 53.0], [1055.0, 2604.0], [1044.0, 382.0], [1042.0, 1751.0], [1050.0, 54.0], [1038.0, 55.0], [1045.0, 55.0], [1046.0, 53.0], [1048.0, 54.0], [1077.0, 55.0], [1082.0, 60.0], [1079.0, 407.0], [1062.0, 57.0], [1058.0, 54.0], [1057.0, 59.0], [1026.0, 54.0], [1029.0, 347.0], [1030.0, 56.0], [1033.0, 56.0], [1025.0, 55.0], [1090.0, 2228.0], [1094.0, 55.0], [1113.0, 56.0], [1099.0, 59.0], [1165.0, 487.0], [1226.0, 465.5], [1249.0, 1740.0], [1237.0, 389.0], [1238.0, 377.0], [1269.0, 481.0], [1267.0, 477.0], [1273.0, 174.0], [1266.0, 431.5], [1278.0, 487.0], [1337.0, 1540.0], [1308.0, 484.0], [1304.0, 174.0], [1301.0, 425.0], [1286.0, 62.5], [1375.0, 468.0], [1366.0, 489.0], [1344.0, 102.0], [1363.0, 95.0], [1410.0, 131.0], [1471.0, 540.0], [1440.0, 146.0], [1468.0, 154.0], [1441.0, 284.0], [1445.0, 576.0], [1480.0, 515.0], [1495.0, 527.0], [1507.0, 184.0], [1482.0, 204.5], [1590.0, 495.5], [1564.0, 996.0], [1554.0, 537.0], [1566.0, 232.5], [1560.0, 234.0], [1599.0, 556.0], [1541.0, 931.0], [1543.0, 226.0], [1598.0, 277.5], [1572.0, 473.5], [1571.0, 492.0], [1656.0, 328.0], [1640.0, 424.0], [1628.0, 1335.0], [1647.0, 846.0], [1644.0, 861.5], [1618.0, 300.0], [1642.0, 544.0], [1613.0, 301.0], [1622.0, 285.5], [1639.0, 325.0], [1659.0, 318.0], [1677.0, 973.0], [1721.0, 821.0], [1668.0, 470.5], [1692.0, 531.0], [1703.0, 530.0], [1688.0, 632.0], [1698.0, 599.0], [1678.0, 324.5], [1683.0, 358.0], [1717.0, 527.0], [1782.0, 576.0], [1728.0, 585.0], [1738.0, 659.0], [1733.0, 591.0], [1746.0, 484.5], [1768.0, 385.0], [1771.0, 1117.0], [1788.0, 672.0], [1841.0, 890.0], [1816.0, 990.0], [1819.0, 633.0], [1810.0, 627.0], [1814.0, 814.5], [1850.0, 1181.0], [1838.0, 596.0], [1836.0, 933.0], [1831.0, 605.0], [1837.0, 807.0], [1828.0, 941.0], [1826.0, 564.0], [1855.0, 882.0], [1851.0, 957.0], [1824.0, 856.0], [1830.0, 810.0], [1795.0, 383.0], [1840.0, 847.0], [1796.0, 691.0], [1797.0, 1005.0], [1800.0, 1259.0], [1807.0, 455.0], [1820.0, 1084.0], [1822.0, 571.0], [1848.0, 1067.0], [1847.0, 855.0], [1843.0, 639.0], [1844.0, 605.0], [1861.0, 807.0], [1877.0, 1070.0], [1889.0, 1092.0], [1873.0, 933.0], [1872.0, 897.0], [1874.0, 1154.0], [1875.0, 762.0], [1876.0, 735.0], [1892.0, 1028.5], [1890.0, 1042.0], [1868.0, 846.0], [1870.0, 1107.0], [1904.0, 848.0], [1871.0, 1141.0], [1909.0, 720.0], [1888.0, 874.0], [1866.0, 918.5], [1862.0, 855.5], [1864.0, 909.0], [1894.0, 561.0], [1899.0, 993.0], [1898.0, 1019.0], [1896.0, 670.0], [1903.0, 1124.0], [1900.0, 1025.0], [1886.0, 976.0], [1887.0, 774.0], [1856.0, 1036.0], [1858.0, 523.0], [1857.0, 884.0], [1880.0, 915.0], [1879.0, 881.0], [1882.0, 1069.0], [1881.0, 731.0], [1884.0, 640.5], [1893.0, 727.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1909.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 41.0, "minX": 4.0, "maxY": 2604.0, "series": [{"data": [[4.0, 71.0], [5.0, 73.0], [6.0, 73.0], [11.0, 78.0], [15.0, 105.0], [18.0, 191.5], [21.0, 78.0], [33.0, 1799.0], [34.0, 138.0], [42.0, 224.5], [61.0, 143.0], [68.0, 168.0], [71.0, 169.0], [77.0, 57.0], [96.0, 52.0], [127.0, 166.0], [128.0, 176.0], [140.0, 85.0], [138.0, 186.0], [146.0, 157.5], [145.0, 49.0], [150.0, 41.0], [198.0, 58.0], [231.0, 54.0], [246.0, 53.0], [243.0, 59.0], [241.0, 56.0], [280.0, 47.0], [299.0, 50.0], [305.0, 230.0], [314.0, 54.0], [333.0, 56.0], [359.0, 109.0], [355.0, 58.0], [392.0, 244.0], [386.0, 55.0], [387.0, 293.0], [407.0, 231.0], [411.0, 251.0], [423.0, 55.0], [433.0, 54.0], [454.0, 2308.0], [467.0, 72.0], [489.0, 1134.0], [494.0, 173.5], [481.0, 54.0], [502.0, 292.0], [503.0, 326.0], [511.0, 289.0], [504.0, 53.0], [525.0, 287.0], [519.0, 286.0], [517.0, 286.0], [535.0, 53.0], [512.0, 289.5], [555.0, 286.0], [569.0, 229.0], [580.0, 204.0], [591.0, 530.0], [599.0, 260.0], [597.0, 290.0], [579.0, 269.0], [608.0, 270.0], [616.0, 51.0], [614.0, 54.0], [629.0, 281.0], [666.0, 117.0], [699.0, 65.0], [688.0, 326.5], [675.0, 172.0], [689.0, 53.0], [714.0, 602.5], [733.0, 55.0], [707.0, 52.0], [704.0, 319.5], [755.0, 56.0], [765.0, 305.0], [739.0, 386.0], [781.0, 260.5], [793.0, 47.0], [824.0, 416.5], [806.0, 61.0], [807.0, 442.0], [839.0, 82.0], [841.0, 423.0], [874.0, 446.0], [880.0, 124.0], [883.0, 52.0], [867.0, 51.0], [881.0, 71.0], [897.0, 54.0], [909.0, 56.0], [912.0, 53.0], [944.0, 55.0], [941.0, 53.0], [932.0, 54.0], [928.0, 442.5], [950.0, 54.5], [953.0, 52.0], [967.0, 54.0], [989.0, 56.0], [975.0, 55.0], [976.0, 55.0], [991.0, 54.0], [990.0, 54.0], [984.0, 53.0], [987.0, 53.0], [988.0, 52.0], [986.0, 53.0], [985.0, 54.0], [965.0, 56.0], [966.0, 53.0], [961.0, 54.0], [962.0, 54.0], [964.0, 55.0], [970.0, 54.0], [971.0, 54.0], [968.0, 55.0], [969.0, 55.0], [973.0, 54.0], [974.0, 52.0], [972.0, 55.0], [977.0, 54.0], [980.0, 54.0], [978.0, 53.0], [979.0, 52.0], [983.0, 52.0], [982.0, 54.0], [981.0, 55.0], [999.0, 54.0], [1010.0, 54.0], [1009.0, 54.0], [1011.0, 54.0], [1003.0, 53.0], [1005.0, 54.0], [1004.0, 54.0], [1006.0, 53.0], [1007.0, 54.0], [1000.0, 54.0], [1001.0, 54.0], [1002.0, 55.0], [992.0, 54.0], [997.0, 54.0], [998.0, 54.0], [996.0, 54.0], [995.0, 54.0], [993.0, 55.0], [994.0, 54.0], [1013.0, 54.0], [1015.0, 53.0], [1014.0, 54.0], [1012.0, 53.0], [1017.0, 53.0], [1021.0, 54.0], [1023.0, 57.0], [1020.0, 52.0], [1019.0, 56.0], [1016.0, 54.0], [1008.0, 52.0], [1055.0, 2604.0], [1044.0, 382.0], [1042.0, 1751.0], [1050.0, 54.0], [1038.0, 55.0], [1045.0, 55.0], [1046.0, 53.0], [1048.0, 54.0], [1077.0, 55.0], [1082.0, 60.0], [1079.0, 407.0], [1062.0, 57.0], [1058.0, 54.0], [1057.0, 59.0], [1026.0, 54.0], [1029.0, 346.0], [1030.0, 56.0], [1033.0, 56.0], [1025.0, 54.0], [1090.0, 2228.0], [1094.0, 55.0], [1113.0, 56.0], [1099.0, 59.0], [1165.0, 486.0], [1226.0, 465.0], [1249.0, 1740.0], [1237.0, 389.0], [1238.0, 377.0], [1269.0, 481.0], [1267.0, 477.0], [1273.0, 174.0], [1266.0, 431.0], [1278.0, 487.0], [1337.0, 1540.0], [1308.0, 484.0], [1304.0, 174.0], [1301.0, 425.0], [1286.0, 62.0], [1375.0, 468.0], [1366.0, 489.0], [1344.0, 102.0], [1363.0, 95.0], [1410.0, 130.5], [1471.0, 540.0], [1440.0, 146.0], [1468.0, 153.5], [1441.0, 284.0], [1445.0, 575.0], [1480.0, 515.0], [1495.0, 527.0], [1507.0, 184.0], [1482.0, 204.5], [1590.0, 495.5], [1564.0, 995.0], [1554.0, 536.5], [1566.0, 232.5], [1560.0, 234.0], [1599.0, 556.0], [1541.0, 931.0], [1543.0, 225.0], [1598.0, 277.0], [1572.0, 473.5], [1571.0, 492.0], [1656.0, 328.0], [1640.0, 423.5], [1628.0, 1335.0], [1647.0, 846.0], [1644.0, 861.5], [1618.0, 299.5], [1642.0, 544.0], [1613.0, 301.0], [1622.0, 285.0], [1639.0, 324.0], [1659.0, 318.0], [1677.0, 973.0], [1721.0, 821.0], [1668.0, 470.5], [1692.0, 531.0], [1703.0, 530.0], [1688.0, 632.0], [1698.0, 599.0], [1678.0, 324.0], [1683.0, 358.0], [1717.0, 527.0], [1782.0, 576.0], [1728.0, 585.0], [1738.0, 659.0], [1733.0, 591.0], [1746.0, 484.5], [1768.0, 385.0], [1771.0, 1117.0], [1788.0, 672.0], [1841.0, 890.0], [1816.0, 989.0], [1819.0, 633.0], [1810.0, 627.0], [1814.0, 814.0], [1850.0, 1181.0], [1838.0, 596.0], [1836.0, 933.0], [1831.0, 605.0], [1837.0, 807.0], [1828.0, 941.0], [1826.0, 563.5], [1855.0, 882.0], [1851.0, 957.0], [1824.0, 856.0], [1830.0, 809.0], [1795.0, 383.0], [1840.0, 847.0], [1796.0, 690.0], [1797.0, 1005.0], [1800.0, 1258.5], [1807.0, 455.0], [1820.0, 1083.0], [1822.0, 570.5], [1848.0, 1067.0], [1847.0, 854.5], [1843.0, 639.0], [1844.0, 605.0], [1861.0, 807.0], [1877.0, 1070.0], [1889.0, 1092.0], [1873.0, 933.0], [1872.0, 897.0], [1874.0, 1154.0], [1875.0, 762.0], [1876.0, 735.0], [1892.0, 1028.0], [1890.0, 1042.0], [1868.0, 846.0], [1870.0, 1107.0], [1904.0, 847.5], [1871.0, 1141.0], [1909.0, 720.0], [1888.0, 874.0], [1866.0, 918.0], [1862.0, 855.5], [1864.0, 909.0], [1894.0, 561.0], [1899.0, 993.0], [1898.0, 1019.0], [1896.0, 669.5], [1903.0, 1124.0], [1900.0, 1025.0], [1886.0, 976.0], [1887.0, 774.0], [1856.0, 1036.0], [1858.0, 522.5], [1857.0, 884.0], [1880.0, 915.0], [1879.0, 880.0], [1882.0, 1068.5], [1881.0, 731.0], [1884.0, 640.0], [1893.0, 727.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1909.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 371.3666666666667, "minX": 1.63352634E12, "maxY": 1037.6166666666666, "series": [{"data": [[1.63352682E12, 997.5333333333333], [1.63352712E12, 988.95], [1.63352718E12, 1007.35], [1.63352652E12, 999.0666666666667], [1.63352706E12, 993.8], [1.6335264E12, 952.2], [1.63352646E12, 1037.6166666666666], [1.63352676E12, 992.5666666666667], [1.63352634E12, 646.4166666666666], [1.63352664E12, 999.75], [1.6335267E12, 999.05], [1.633527E12, 998.0333333333333], [1.63352658E12, 996.6166666666667], [1.63352688E12, 996.4], [1.63352694E12, 1000.8666666666667], [1.63352724E12, 371.3666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63352724E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 372.15, "minX": 1.63352634E12, "maxY": 1036.25, "series": [{"data": [[1.63352682E12, 996.1833333333333], [1.63352712E12, 999.5666666666667], [1.63352718E12, 1006.5666666666667], [1.63352652E12, 999.2333333333333], [1.63352706E12, 983.9], [1.6335264E12, 964.9333333333333], [1.63352646E12, 1036.25], [1.63352676E12, 969.8666666666667], [1.63352634E12, 633.6833333333333], [1.63352664E12, 999.1], [1.6335267E12, 998.95], [1.633527E12, 1006.4], [1.63352658E12, 997.3833333333333], [1.63352688E12, 1020.7833333333333], [1.63352694E12, 992.6333333333333], [1.63352724E12, 372.15]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63352724E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 372.15, "minX": 1.63352634E12, "maxY": 1036.25, "series": [{"data": [[1.63352682E12, 996.1833333333333], [1.63352712E12, 999.5666666666667], [1.63352718E12, 1006.5666666666667], [1.63352652E12, 999.2333333333333], [1.63352706E12, 983.9], [1.6335264E12, 964.9333333333333], [1.63352646E12, 1036.25], [1.63352676E12, 969.8666666666667], [1.63352634E12, 633.6833333333333], [1.63352664E12, 999.1], [1.6335267E12, 998.95], [1.633527E12, 1006.4], [1.63352658E12, 997.3833333333333], [1.63352688E12, 1020.7833333333333], [1.63352694E12, 992.6333333333333], [1.63352724E12, 372.15]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63352724E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 372.15, "minX": 1.63352634E12, "maxY": 1036.25, "series": [{"data": [[1.63352682E12, 996.1833333333333], [1.63352712E12, 999.5666666666667], [1.63352718E12, 1006.5666666666667], [1.63352652E12, 999.2333333333333], [1.63352706E12, 983.9], [1.6335264E12, 964.9333333333333], [1.63352646E12, 1036.25], [1.63352676E12, 969.8666666666667], [1.63352634E12, 633.6833333333333], [1.63352664E12, 999.1], [1.6335267E12, 998.95], [1.633527E12, 1006.4], [1.63352658E12, 997.3833333333333], [1.63352688E12, 1020.7833333333333], [1.63352694E12, 992.6333333333333], [1.63352724E12, 372.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63352724E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

