/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 1301.0, "series": [{"data": [[0.0, 3.0], [0.1, 20.0], [0.2, 36.0], [0.3, 61.0], [0.4, 83.0], [0.5, 95.0], [0.6, 105.0], [0.7, 114.0], [0.8, 121.0], [0.9, 127.0], [1.0, 133.0], [1.1, 139.0], [1.2, 145.0], [1.3, 149.0], [1.4, 153.0], [1.5, 156.0], [1.6, 158.0], [1.7, 160.0], [1.8, 161.0], [1.9, 162.0], [2.0, 163.0], [2.1, 164.0], [2.2, 165.0], [2.3, 166.0], [2.4, 167.0], [2.5, 168.0], [2.6, 168.0], [2.7, 169.0], [2.8, 169.0], [2.9, 170.0], [3.0, 170.0], [3.1, 171.0], [3.2, 171.0], [3.3, 172.0], [3.4, 172.0], [3.5, 172.0], [3.6, 173.0], [3.7, 173.0], [3.8, 173.0], [3.9, 174.0], [4.0, 174.0], [4.1, 174.0], [4.2, 175.0], [4.3, 175.0], [4.4, 175.0], [4.5, 175.0], [4.6, 176.0], [4.7, 176.0], [4.8, 176.0], [4.9, 176.0], [5.0, 176.0], [5.1, 177.0], [5.2, 177.0], [5.3, 177.0], [5.4, 177.0], [5.5, 178.0], [5.6, 178.0], [5.7, 178.0], [5.8, 178.0], [5.9, 178.0], [6.0, 179.0], [6.1, 179.0], [6.2, 179.0], [6.3, 179.0], [6.4, 179.0], [6.5, 179.0], [6.6, 180.0], [6.7, 180.0], [6.8, 180.0], [6.9, 180.0], [7.0, 180.0], [7.1, 180.0], [7.2, 181.0], [7.3, 181.0], [7.4, 181.0], [7.5, 181.0], [7.6, 181.0], [7.7, 181.0], [7.8, 181.0], [7.9, 182.0], [8.0, 182.0], [8.1, 182.0], [8.2, 182.0], [8.3, 182.0], [8.4, 182.0], [8.5, 182.0], [8.6, 182.0], [8.7, 183.0], [8.8, 183.0], [8.9, 183.0], [9.0, 183.0], [9.1, 183.0], [9.2, 183.0], [9.3, 183.0], [9.4, 183.0], [9.5, 184.0], [9.6, 184.0], [9.7, 184.0], [9.8, 184.0], [9.9, 184.0], [10.0, 184.0], [10.1, 184.0], [10.2, 184.0], [10.3, 184.0], [10.4, 185.0], [10.5, 185.0], [10.6, 185.0], [10.7, 185.0], [10.8, 185.0], [10.9, 185.0], [11.0, 185.0], [11.1, 185.0], [11.2, 185.0], [11.3, 186.0], [11.4, 186.0], [11.5, 186.0], [11.6, 186.0], [11.7, 186.0], [11.8, 186.0], [11.9, 186.0], [12.0, 186.0], [12.1, 186.0], [12.2, 186.0], [12.3, 186.0], [12.4, 187.0], [12.5, 187.0], [12.6, 187.0], [12.7, 187.0], [12.8, 187.0], [12.9, 187.0], [13.0, 187.0], [13.1, 187.0], [13.2, 187.0], [13.3, 187.0], [13.4, 187.0], [13.5, 188.0], [13.6, 188.0], [13.7, 188.0], [13.8, 188.0], [13.9, 188.0], [14.0, 188.0], [14.1, 188.0], [14.2, 188.0], [14.3, 188.0], [14.4, 188.0], [14.5, 188.0], [14.6, 188.0], [14.7, 189.0], [14.8, 189.0], [14.9, 189.0], [15.0, 189.0], [15.1, 189.0], [15.2, 189.0], [15.3, 189.0], [15.4, 189.0], [15.5, 189.0], [15.6, 189.0], [15.7, 189.0], [15.8, 189.0], [15.9, 190.0], [16.0, 190.0], [16.1, 190.0], [16.2, 190.0], [16.3, 190.0], [16.4, 190.0], [16.5, 190.0], [16.6, 190.0], [16.7, 190.0], [16.8, 190.0], [16.9, 190.0], [17.0, 190.0], [17.1, 190.0], [17.2, 190.0], [17.3, 191.0], [17.4, 191.0], [17.5, 191.0], [17.6, 191.0], [17.7, 191.0], [17.8, 191.0], [17.9, 191.0], [18.0, 191.0], [18.1, 191.0], [18.2, 191.0], [18.3, 191.0], [18.4, 191.0], [18.5, 191.0], [18.6, 191.0], [18.7, 191.0], [18.8, 192.0], [18.9, 192.0], [19.0, 192.0], [19.1, 192.0], [19.2, 192.0], [19.3, 192.0], [19.4, 192.0], [19.5, 192.0], [19.6, 192.0], [19.7, 192.0], [19.8, 192.0], [19.9, 192.0], [20.0, 192.0], [20.1, 192.0], [20.2, 193.0], [20.3, 193.0], [20.4, 193.0], [20.5, 193.0], [20.6, 193.0], [20.7, 193.0], [20.8, 193.0], [20.9, 193.0], [21.0, 193.0], [21.1, 193.0], [21.2, 193.0], [21.3, 193.0], [21.4, 193.0], [21.5, 193.0], [21.6, 193.0], [21.7, 193.0], [21.8, 194.0], [21.9, 194.0], [22.0, 194.0], [22.1, 194.0], [22.2, 194.0], [22.3, 194.0], [22.4, 194.0], [22.5, 194.0], [22.6, 194.0], [22.7, 194.0], [22.8, 194.0], [22.9, 194.0], [23.0, 194.0], [23.1, 194.0], [23.2, 194.0], [23.3, 195.0], [23.4, 195.0], [23.5, 195.0], [23.6, 195.0], [23.7, 195.0], [23.8, 195.0], [23.9, 195.0], [24.0, 195.0], [24.1, 195.0], [24.2, 195.0], [24.3, 195.0], [24.4, 195.0], [24.5, 195.0], [24.6, 195.0], [24.7, 195.0], [24.8, 196.0], [24.9, 196.0], [25.0, 196.0], [25.1, 196.0], [25.2, 196.0], [25.3, 196.0], [25.4, 196.0], [25.5, 196.0], [25.6, 196.0], [25.7, 196.0], [25.8, 196.0], [25.9, 196.0], [26.0, 196.0], [26.1, 196.0], [26.2, 196.0], [26.3, 196.0], [26.4, 197.0], [26.5, 197.0], [26.6, 197.0], [26.7, 197.0], [26.8, 197.0], [26.9, 197.0], [27.0, 197.0], [27.1, 197.0], [27.2, 197.0], [27.3, 197.0], [27.4, 197.0], [27.5, 197.0], [27.6, 197.0], [27.7, 197.0], [27.8, 197.0], [27.9, 197.0], [28.0, 198.0], [28.1, 198.0], [28.2, 198.0], [28.3, 198.0], [28.4, 198.0], [28.5, 198.0], [28.6, 198.0], [28.7, 198.0], [28.8, 198.0], [28.9, 198.0], [29.0, 198.0], [29.1, 198.0], [29.2, 198.0], [29.3, 198.0], [29.4, 198.0], [29.5, 198.0], [29.6, 198.0], [29.7, 199.0], [29.8, 199.0], [29.9, 199.0], [30.0, 199.0], [30.1, 199.0], [30.2, 199.0], [30.3, 199.0], [30.4, 199.0], [30.5, 199.0], [30.6, 199.0], [30.7, 199.0], [30.8, 199.0], [30.9, 199.0], [31.0, 199.0], [31.1, 199.0], [31.2, 199.0], [31.3, 199.0], [31.4, 200.0], [31.5, 200.0], [31.6, 200.0], [31.7, 200.0], [31.8, 200.0], [31.9, 200.0], [32.0, 200.0], [32.1, 200.0], [32.2, 200.0], [32.3, 200.0], [32.4, 200.0], [32.5, 200.0], [32.6, 200.0], [32.7, 200.0], [32.8, 200.0], [32.9, 200.0], [33.0, 200.0], [33.1, 201.0], [33.2, 201.0], [33.3, 201.0], [33.4, 201.0], [33.5, 201.0], [33.6, 201.0], [33.7, 201.0], [33.8, 201.0], [33.9, 201.0], [34.0, 201.0], [34.1, 201.0], [34.2, 201.0], [34.3, 201.0], [34.4, 201.0], [34.5, 201.0], [34.6, 201.0], [34.7, 201.0], [34.8, 202.0], [34.9, 202.0], [35.0, 202.0], [35.1, 202.0], [35.2, 202.0], [35.3, 202.0], [35.4, 202.0], [35.5, 202.0], [35.6, 202.0], [35.7, 202.0], [35.8, 202.0], [35.9, 202.0], [36.0, 202.0], [36.1, 202.0], [36.2, 202.0], [36.3, 202.0], [36.4, 202.0], [36.5, 203.0], [36.6, 203.0], [36.7, 203.0], [36.8, 203.0], [36.9, 203.0], [37.0, 203.0], [37.1, 203.0], [37.2, 203.0], [37.3, 203.0], [37.4, 203.0], [37.5, 203.0], [37.6, 203.0], [37.7, 203.0], [37.8, 203.0], [37.9, 203.0], [38.0, 203.0], [38.1, 203.0], [38.2, 204.0], [38.3, 204.0], [38.4, 204.0], [38.5, 204.0], [38.6, 204.0], [38.7, 204.0], [38.8, 204.0], [38.9, 204.0], [39.0, 204.0], [39.1, 204.0], [39.2, 204.0], [39.3, 204.0], [39.4, 204.0], [39.5, 204.0], [39.6, 204.0], [39.7, 204.0], [39.8, 204.0], [39.9, 205.0], [40.0, 205.0], [40.1, 205.0], [40.2, 205.0], [40.3, 205.0], [40.4, 205.0], [40.5, 205.0], [40.6, 205.0], [40.7, 205.0], [40.8, 205.0], [40.9, 205.0], [41.0, 205.0], [41.1, 205.0], [41.2, 205.0], [41.3, 205.0], [41.4, 205.0], [41.5, 205.0], [41.6, 206.0], [41.7, 206.0], [41.8, 206.0], [41.9, 206.0], [42.0, 206.0], [42.1, 206.0], [42.2, 206.0], [42.3, 206.0], [42.4, 206.0], [42.5, 206.0], [42.6, 206.0], [42.7, 206.0], [42.8, 206.0], [42.9, 206.0], [43.0, 206.0], [43.1, 206.0], [43.2, 206.0], [43.3, 207.0], [43.4, 207.0], [43.5, 207.0], [43.6, 207.0], [43.7, 207.0], [43.8, 207.0], [43.9, 207.0], [44.0, 207.0], [44.1, 207.0], [44.2, 207.0], [44.3, 207.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 207.0], [44.9, 207.0], [45.0, 208.0], [45.1, 208.0], [45.2, 208.0], [45.3, 208.0], [45.4, 208.0], [45.5, 208.0], [45.6, 208.0], [45.7, 208.0], [45.8, 208.0], [45.9, 208.0], [46.0, 208.0], [46.1, 208.0], [46.2, 208.0], [46.3, 208.0], [46.4, 208.0], [46.5, 208.0], [46.6, 209.0], [46.7, 209.0], [46.8, 209.0], [46.9, 209.0], [47.0, 209.0], [47.1, 209.0], [47.2, 209.0], [47.3, 209.0], [47.4, 209.0], [47.5, 209.0], [47.6, 209.0], [47.7, 209.0], [47.8, 209.0], [47.9, 209.0], [48.0, 209.0], [48.1, 209.0], [48.2, 210.0], [48.3, 210.0], [48.4, 210.0], [48.5, 210.0], [48.6, 210.0], [48.7, 210.0], [48.8, 210.0], [48.9, 210.0], [49.0, 210.0], [49.1, 210.0], [49.2, 210.0], [49.3, 210.0], [49.4, 210.0], [49.5, 210.0], [49.6, 210.0], [49.7, 210.0], [49.8, 211.0], [49.9, 211.0], [50.0, 211.0], [50.1, 211.0], [50.2, 211.0], [50.3, 211.0], [50.4, 211.0], [50.5, 211.0], [50.6, 211.0], [50.7, 211.0], [50.8, 211.0], [50.9, 211.0], [51.0, 211.0], [51.1, 211.0], [51.2, 211.0], [51.3, 212.0], [51.4, 212.0], [51.5, 212.0], [51.6, 212.0], [51.7, 212.0], [51.8, 212.0], [51.9, 212.0], [52.0, 212.0], [52.1, 212.0], [52.2, 212.0], [52.3, 212.0], [52.4, 212.0], [52.5, 212.0], [52.6, 212.0], [52.7, 212.0], [52.8, 212.0], [52.9, 213.0], [53.0, 213.0], [53.1, 213.0], [53.2, 213.0], [53.3, 213.0], [53.4, 213.0], [53.5, 213.0], [53.6, 213.0], [53.7, 213.0], [53.8, 213.0], [53.9, 213.0], [54.0, 213.0], [54.1, 213.0], [54.2, 213.0], [54.3, 214.0], [54.4, 214.0], [54.5, 214.0], [54.6, 214.0], [54.7, 214.0], [54.8, 214.0], [54.9, 214.0], [55.0, 214.0], [55.1, 214.0], [55.2, 214.0], [55.3, 214.0], [55.4, 214.0], [55.5, 214.0], [55.6, 214.0], [55.7, 214.0], [55.8, 215.0], [55.9, 215.0], [56.0, 215.0], [56.1, 215.0], [56.2, 215.0], [56.3, 215.0], [56.4, 215.0], [56.5, 215.0], [56.6, 215.0], [56.7, 215.0], [56.8, 215.0], [56.9, 215.0], [57.0, 215.0], [57.1, 215.0], [57.2, 215.0], [57.3, 216.0], [57.4, 216.0], [57.5, 216.0], [57.6, 216.0], [57.7, 216.0], [57.8, 216.0], [57.9, 216.0], [58.0, 216.0], [58.1, 216.0], [58.2, 216.0], [58.3, 216.0], [58.4, 216.0], [58.5, 216.0], [58.6, 216.0], [58.7, 217.0], [58.8, 217.0], [58.9, 217.0], [59.0, 217.0], [59.1, 217.0], [59.2, 217.0], [59.3, 217.0], [59.4, 217.0], [59.5, 217.0], [59.6, 217.0], [59.7, 217.0], [59.8, 217.0], [59.9, 217.0], [60.0, 217.0], [60.1, 217.0], [60.2, 218.0], [60.3, 218.0], [60.4, 218.0], [60.5, 218.0], [60.6, 218.0], [60.7, 218.0], [60.8, 218.0], [60.9, 218.0], [61.0, 218.0], [61.1, 218.0], [61.2, 218.0], [61.3, 218.0], [61.4, 218.0], [61.5, 218.0], [61.6, 219.0], [61.7, 219.0], [61.8, 219.0], [61.9, 219.0], [62.0, 219.0], [62.1, 219.0], [62.2, 219.0], [62.3, 219.0], [62.4, 219.0], [62.5, 219.0], [62.6, 219.0], [62.7, 219.0], [62.8, 219.0], [62.9, 220.0], [63.0, 220.0], [63.1, 220.0], [63.2, 220.0], [63.3, 220.0], [63.4, 220.0], [63.5, 220.0], [63.6, 220.0], [63.7, 220.0], [63.8, 220.0], [63.9, 220.0], [64.0, 220.0], [64.1, 220.0], [64.2, 220.0], [64.3, 221.0], [64.4, 221.0], [64.5, 221.0], [64.6, 221.0], [64.7, 221.0], [64.8, 221.0], [64.9, 221.0], [65.0, 221.0], [65.1, 221.0], [65.2, 221.0], [65.3, 221.0], [65.4, 221.0], [65.5, 221.0], [65.6, 222.0], [65.7, 222.0], [65.8, 222.0], [65.9, 222.0], [66.0, 222.0], [66.1, 222.0], [66.2, 222.0], [66.3, 222.0], [66.4, 222.0], [66.5, 222.0], [66.6, 222.0], [66.7, 222.0], [66.8, 222.0], [66.9, 223.0], [67.0, 223.0], [67.1, 223.0], [67.2, 223.0], [67.3, 223.0], [67.4, 223.0], [67.5, 223.0], [67.6, 223.0], [67.7, 223.0], [67.8, 223.0], [67.9, 223.0], [68.0, 223.0], [68.1, 224.0], [68.2, 224.0], [68.3, 224.0], [68.4, 224.0], [68.5, 224.0], [68.6, 224.0], [68.7, 224.0], [68.8, 224.0], [68.9, 224.0], [69.0, 224.0], [69.1, 224.0], [69.2, 224.0], [69.3, 225.0], [69.4, 225.0], [69.5, 225.0], [69.6, 225.0], [69.7, 225.0], [69.8, 225.0], [69.9, 225.0], [70.0, 225.0], [70.1, 225.0], [70.2, 225.0], [70.3, 225.0], [70.4, 226.0], [70.5, 226.0], [70.6, 226.0], [70.7, 226.0], [70.8, 226.0], [70.9, 226.0], [71.0, 226.0], [71.1, 226.0], [71.2, 226.0], [71.3, 226.0], [71.4, 226.0], [71.5, 226.0], [71.6, 227.0], [71.7, 227.0], [71.8, 227.0], [71.9, 227.0], [72.0, 227.0], [72.1, 227.0], [72.2, 227.0], [72.3, 227.0], [72.4, 227.0], [72.5, 227.0], [72.6, 227.0], [72.7, 228.0], [72.8, 228.0], [72.9, 228.0], [73.0, 228.0], [73.1, 228.0], [73.2, 228.0], [73.3, 228.0], [73.4, 228.0], [73.5, 228.0], [73.6, 228.0], [73.7, 228.0], [73.8, 229.0], [73.9, 229.0], [74.0, 229.0], [74.1, 229.0], [74.2, 229.0], [74.3, 229.0], [74.4, 229.0], [74.5, 229.0], [74.6, 229.0], [74.7, 229.0], [74.8, 230.0], [74.9, 230.0], [75.0, 230.0], [75.1, 230.0], [75.2, 230.0], [75.3, 230.0], [75.4, 230.0], [75.5, 230.0], [75.6, 230.0], [75.7, 230.0], [75.8, 231.0], [75.9, 231.0], [76.0, 231.0], [76.1, 231.0], [76.2, 231.0], [76.3, 231.0], [76.4, 231.0], [76.5, 231.0], [76.6, 231.0], [76.7, 231.0], [76.8, 232.0], [76.9, 232.0], [77.0, 232.0], [77.1, 232.0], [77.2, 232.0], [77.3, 232.0], [77.4, 232.0], [77.5, 232.0], [77.6, 232.0], [77.7, 232.0], [77.8, 233.0], [77.9, 233.0], [78.0, 233.0], [78.1, 233.0], [78.2, 233.0], [78.3, 233.0], [78.4, 233.0], [78.5, 233.0], [78.6, 233.0], [78.7, 234.0], [78.8, 234.0], [78.9, 234.0], [79.0, 234.0], [79.1, 234.0], [79.2, 234.0], [79.3, 234.0], [79.4, 234.0], [79.5, 234.0], [79.6, 235.0], [79.7, 235.0], [79.8, 235.0], [79.9, 235.0], [80.0, 235.0], [80.1, 235.0], [80.2, 235.0], [80.3, 235.0], [80.4, 236.0], [80.5, 236.0], [80.6, 236.0], [80.7, 236.0], [80.8, 236.0], [80.9, 236.0], [81.0, 236.0], [81.1, 236.0], [81.2, 237.0], [81.3, 237.0], [81.4, 237.0], [81.5, 237.0], [81.6, 237.0], [81.7, 237.0], [81.8, 237.0], [81.9, 237.0], [82.0, 238.0], [82.1, 238.0], [82.2, 238.0], [82.3, 238.0], [82.4, 238.0], [82.5, 238.0], [82.6, 238.0], [82.7, 238.0], [82.8, 239.0], [82.9, 239.0], [83.0, 239.0], [83.1, 239.0], [83.2, 239.0], [83.3, 239.0], [83.4, 239.0], [83.5, 239.0], [83.6, 240.0], [83.7, 240.0], [83.8, 240.0], [83.9, 240.0], [84.0, 240.0], [84.1, 240.0], [84.2, 240.0], [84.3, 241.0], [84.4, 241.0], [84.5, 241.0], [84.6, 241.0], [84.7, 241.0], [84.8, 241.0], [84.9, 241.0], [85.0, 241.0], [85.1, 242.0], [85.2, 242.0], [85.3, 242.0], [85.4, 242.0], [85.5, 242.0], [85.6, 242.0], [85.7, 242.0], [85.8, 243.0], [85.9, 243.0], [86.0, 243.0], [86.1, 243.0], [86.2, 243.0], [86.3, 243.0], [86.4, 244.0], [86.5, 244.0], [86.6, 244.0], [86.7, 244.0], [86.8, 244.0], [86.9, 244.0], [87.0, 244.0], [87.1, 245.0], [87.2, 245.0], [87.3, 245.0], [87.4, 245.0], [87.5, 245.0], [87.6, 245.0], [87.7, 246.0], [87.8, 246.0], [87.9, 246.0], [88.0, 246.0], [88.1, 246.0], [88.2, 246.0], [88.3, 247.0], [88.4, 247.0], [88.5, 247.0], [88.6, 247.0], [88.7, 247.0], [88.8, 248.0], [88.9, 248.0], [89.0, 248.0], [89.1, 248.0], [89.2, 248.0], [89.3, 248.0], [89.4, 249.0], [89.5, 249.0], [89.6, 249.0], [89.7, 249.0], [89.8, 249.0], [89.9, 250.0], [90.0, 250.0], [90.1, 250.0], [90.2, 250.0], [90.3, 250.0], [90.4, 251.0], [90.5, 251.0], [90.6, 251.0], [90.7, 251.0], [90.8, 251.0], [90.9, 252.0], [91.0, 252.0], [91.1, 252.0], [91.2, 252.0], [91.3, 253.0], [91.4, 253.0], [91.5, 253.0], [91.6, 253.0], [91.7, 253.0], [91.8, 254.0], [91.9, 254.0], [92.0, 254.0], [92.1, 254.0], [92.2, 255.0], [92.3, 255.0], [92.4, 255.0], [92.5, 255.0], [92.6, 255.0], [92.7, 256.0], [92.8, 256.0], [92.9, 256.0], [93.0, 256.0], [93.1, 257.0], [93.2, 257.0], [93.3, 257.0], [93.4, 257.0], [93.5, 258.0], [93.6, 258.0], [93.7, 258.0], [93.8, 258.0], [93.9, 259.0], [94.0, 259.0], [94.1, 259.0], [94.2, 260.0], [94.3, 260.0], [94.4, 260.0], [94.5, 260.0], [94.6, 261.0], [94.7, 261.0], [94.8, 261.0], [94.9, 262.0], [95.0, 262.0], [95.1, 262.0], [95.2, 263.0], [95.3, 263.0], [95.4, 263.0], [95.5, 264.0], [95.6, 264.0], [95.7, 265.0], [95.8, 265.0], [95.9, 265.0], [96.0, 266.0], [96.1, 266.0], [96.2, 267.0], [96.3, 267.0], [96.4, 268.0], [96.5, 268.0], [96.6, 269.0], [96.7, 269.0], [96.8, 270.0], [96.9, 270.0], [97.0, 271.0], [97.1, 272.0], [97.2, 272.0], [97.3, 273.0], [97.4, 273.0], [97.5, 274.0], [97.6, 275.0], [97.7, 276.0], [97.8, 276.0], [97.9, 277.0], [98.0, 278.0], [98.1, 279.0], [98.2, 279.0], [98.3, 280.0], [98.4, 281.0], [98.5, 282.0], [98.6, 283.0], [98.7, 284.0], [98.8, 285.0], [98.9, 287.0], [99.0, 289.0], [99.1, 291.0], [99.2, 293.0], [99.3, 297.0], [99.4, 301.0], [99.5, 305.0], [99.6, 312.0], [99.7, 323.0], [99.8, 494.0], [99.9, 834.0], [100.0, 1301.0]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1711547.0, "series": [{"data": [[0.0, 13565.0], [600.0, 821.0], [700.0, 326.0], [800.0, 802.0], [200.0, 1711547.0], [900.0, 844.0], [1000.0, 529.0], [1100.0, 447.0], [1200.0, 103.0], [300.0, 10539.0], [1300.0, 2.0], [400.0, 345.0], [100.0, 773565.0], [500.0, 1102.0]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4961.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2509576.0, "series": [{"data": [[0.0, 2509576.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4961.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 468.2922730067733, "minX": 1.63387698E12, "maxY": 600.0, "series": [{"data": [[1.6338774E12, 600.0], [1.6338771E12, 600.0], [1.63387704E12, 600.0], [1.6338777E12, 600.0], [1.63387764E12, 600.0], [1.63387734E12, 600.0], [1.63387728E12, 600.0], [1.63387698E12, 575.1741691888726], [1.63387788E12, 468.2922730067733], [1.63387758E12, 600.0], [1.63387752E12, 600.0], [1.63387722E12, 600.0], [1.63387716E12, 600.0], [1.63387782E12, 600.0], [1.63387776E12, 600.0], [1.63387746E12, 600.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63387788E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 2.0, "maxY": 1019.3333333333334, "series": [{"data": [[2.0, 4.0], [3.0, 3.0], [4.0, 3.344827586206897], [5.0, 4.25], [6.0, 6.0], [7.0, 5.666666666666667], [8.0, 5.259259259259259], [9.0, 6.0], [10.0, 6.631578947368422], [12.0, 19.666666666666668], [13.0, 22.0], [14.0, 16.533333333333335], [15.0, 9.296296296296298], [16.0, 8.958333333333334], [20.0, 15.0], [21.0, 15.588235294117649], [22.0, 12.666666666666668], [23.0, 14.853658536585366], [24.0, 12.372093023255815], [25.0, 15.206896551724137], [26.0, 15.25], [27.0, 16.456790123456788], [28.0, 18.428571428571427], [29.0, 15.971973762671446], [30.0, 18.75], [31.0, 21.25], [33.0, 22.6], [32.0, 22.299999999999997], [35.0, 21.0], [36.0, 19.5], [39.0, 17.666666666666668], [38.0, 18.5], [41.0, 17.81308411214952], [40.0, 18.625], [43.0, 10.285714285714286], [42.0, 26.028571428571425], [45.0, 32.666666666666664], [44.0, 25.75], [47.0, 22.714285714285715], [46.0, 27.400000000000002], [49.0, 25.01333333333334], [48.0, 22.02857142857143], [51.0, 27.097560975609767], [50.0, 21.037037037037027], [53.0, 23.4], [52.0, 23.42914979757086], [55.0, 26.5], [54.0, 32.94186046511628], [57.0, 30.6], [56.0, 27.374999999999996], [59.0, 31.0], [58.0, 30.0], [61.0, 35.333333333333336], [60.0, 32.3], [63.0, 35.666666666666664], [62.0, 33.0], [67.0, 39.166666666666664], [66.0, 38.5], [65.0, 37.125], [64.0, 35.307692307692314], [71.0, 21.333333333333332], [70.0, 26.489795918367335], [69.0, 34.142857142857146], [68.0, 38.375], [75.0, 35.92682926829268], [74.0, 40.91666666666667], [73.0, 30.45210727969352], [72.0, 25.195121951219498], [79.0, 32.48], [78.0, 32.0], [77.0, 32.857142857142854], [76.0, 33.0], [83.0, 44.666666666666664], [82.0, 39.535211267605625], [81.0, 30.94835680751173], [80.0, 31.0], [87.0, 50.27777777777778], [86.0, 48.0], [85.0, 49.333333333333336], [84.0, 47.31578947368421], [91.0, 50.35833333333333], [90.0, 52.333333333333336], [89.0, 52.22222222222222], [95.0, 46.66666666666667], [94.0, 41.39591605218373], [93.0, 39.07142857142858], [92.0, 45.0], [99.0, 44.0], [98.0, 44.666666666666664], [96.0, 44.8], [103.0, 47.0], [102.0, 45.5], [101.0, 46.81818181818182], [100.0, 45.5], [107.0, 44.0], [106.0, 45.0], [105.0, 46.0], [104.0, 48.0], [110.0, 43.86666666666666], [109.0, 43.166666666666664], [108.0, 43.0], [115.0, 45.083333333333336], [114.0, 45.166666666666664], [112.0, 45.0], [119.0, 43.333333333333336], [118.0, 43.333333333333336], [117.0, 44.714285714285715], [116.0, 45.0], [123.0, 41.375], [122.0, 42.285714285714285], [121.0, 42.0], [120.0, 42.4], [127.0, 68.91891891891892], [126.0, 60.193548387096776], [125.0, 49.30215827338129], [124.0, 44.5], [135.0, 35.90909090909091], [134.0, 33.625], [133.0, 40.49079754601229], [132.0, 68.36641221374049], [131.0, 74.14285714285715], [130.0, 74.24418604651166], [129.0, 72.9], [128.0, 70.21052631578947], [142.0, 36.714285714285715], [141.0, 35.5], [140.0, 36.0], [139.0, 36.43750000000001], [138.0, 35.5], [137.0, 35.333333333333336], [136.0, 35.25], [151.0, 43.800000000000004], [150.0, 39.333333333333336], [149.0, 38.285714285714285], [145.0, 41.42105263157894], [144.0, 37.666666666666664], [159.0, 58.6], [158.0, 58.57142857142857], [157.0, 57.5], [156.0, 57.29411764705883], [155.0, 57.15384615384615], [154.0, 52.111111111111114], [153.0, 49.5], [152.0, 46.2], [167.0, 71.5], [166.0, 72.66666666666666], [165.0, 70.83999999999999], [164.0, 67.11111111111111], [163.0, 64.55555555555556], [162.0, 63.41176470588235], [161.0, 60.166666666666664], [160.0, 59.8235294117647], [175.0, 69.66666666666667], [174.0, 71.33333333333333], [172.0, 72.0], [171.0, 73.0], [170.0, 75.57142857142858], [169.0, 78.16666666666667], [168.0, 78.22222222222223], [183.0, 72.5], [182.0, 74.65384615384616], [181.0, 73.87499999999999], [180.0, 74.875], [179.0, 72.61538461538463], [178.0, 72.25], [177.0, 73.0], [176.0, 69.84999999999998], [191.0, 63.4], [190.0, 63.55555555555556], [189.0, 62.6], [188.0, 61.74999999999999], [186.0, 60.0], [185.0, 62.9], [184.0, 71.6774193548387], [199.0, 80.81818181818181], [198.0, 81.3], [197.0, 80.75], [196.0, 79.33333333333333], [195.0, 77.58823529411767], [194.0, 71.83333333333333], [193.0, 64.58823529411764], [192.0, 63.66666666666667], [207.0, 107.71428571428571], [206.0, 108.0], [205.0, 108.5], [204.0, 99.0], [203.0, 85.66666666666667], [202.0, 87.11111111111113], [201.0, 83.66666666666667], [200.0, 82.00000000000001], [215.0, 590.6910994764405], [214.0, 95.0], [213.0, 96.1], [212.0, 99.0], [211.0, 100.5], [210.0, 100.16666666666667], [209.0, 104.66666666666667], [208.0, 107.5], [216.0, 102.36666666666667], [219.0, 69.5483870967742], [220.0, 64.17999999999999], [221.0, 67.3478260869565], [223.0, 118.86538461538461], [222.0, 93.34969939879763], [218.0, 90.60000000000002], [217.0, 93.16666666666667], [224.0, 116.4], [228.0, 81.16666666666666], [227.0, 92.09836065573772], [230.0, 86.10396039603961], [231.0, 91.42307692307692], [229.0, 64.33333333333333], [226.0, 99.6086956521739], [225.0, 113.71942446043163], [232.0, 88.39735099337746], [233.0, 101.62244897959188], [234.0, 115.74074074074076], [235.0, 99.90629370629372], [237.0, 97.89743589743587], [239.0, 115.58295964125561], [238.0, 98.9], [236.0, 79.8125], [240.0, 86.70967741935482], [241.0, 94.66101694915257], [242.0, 100.21052631578948], [243.0, 112.91603053435114], [245.0, 116.97222222222221], [246.0, 141.48745519713253], [247.0, 90.80120481927713], [244.0, 101.89473684210526], [248.0, 100.1860465116279], [249.0, 95.51785714285712], [250.0, 89.43181818181819], [252.0, 191.53588516746407], [254.0, 99.26666666666667], [255.0, 116.00000000000001], [253.0, 102.54216867469879], [251.0, 104.44827586206897], [257.0, 48.199999999999996], [256.0, 105.14285714285714], [263.0, 107.3076923076923], [258.0, 87.81343283582086], [259.0, 182.56554307116104], [267.0, 110.99019607843137], [266.0, 107.06249999999999], [265.0, 108.62499999999999], [264.0, 108.0], [268.0, 120.25675675675677], [270.0, 101.6], [271.0, 81.25], [262.0, 106.33333333333333], [261.0, 106.19999999999999], [260.0, 106.32142857142858], [274.0, 70.21739130434781], [273.0, 148.6763485477178], [272.0, 90.28571428571429], [275.0, 86.68181818181819], [284.0, 83.63636363636363], [285.0, 84.85964912280703], [287.0, 93.66666666666666], [286.0, 89.72307692307692], [276.0, 84.45454545454547], [277.0, 90.21052631578948], [278.0, 90.3], [279.0, 72.4375], [280.0, 73.2], [281.0, 81.8157894736842], [283.0, 83.3061224489796], [282.0, 82.38000000000001], [302.0, 148.33333333333334], [289.0, 107.61666666666663], [291.0, 122.41666666666667], [290.0, 117.24999999999999], [301.0, 109.87809110629075], [300.0, 95.96170839469816], [293.0, 140.0590909090909], [292.0, 137.91666666666669], [294.0, 146.88405797101453], [295.0, 118.3085106382979], [288.0, 100.12195121951218], [296.0, 135.10469314079424], [298.0, 153.25170068027205], [297.0, 142.76923076923077], [299.0, 952.2650602409644], [303.0, 125.29213483146067], [311.0, 174.53333333333336], [307.0, 131.08928571428567], [306.0, 164.77777777777777], [305.0, 162.89473684210532], [304.0, 128.72139303482584], [308.0, 116.99999999999997], [309.0, 138.5333333333334], [310.0, 146.06410256410257], [312.0, 162.38461538461536], [313.0, 153.425], [314.0, 163.74766355140187], [315.0, 169.28571428571428], [316.0, 178.37931034482762], [317.0, 164.46666666666667], [318.0, 161.1714285714286], [319.0, 163.0666666666667], [332.0, 136.99999999999997], [320.0, 163.8181818181818], [322.0, 151.28571428571428], [321.0, 150.51428571428576], [323.0, 147.53333333333333], [325.0, 139.89999999999998], [324.0, 146.36363636363637], [327.0, 134.92899408284026], [326.0, 126.0], [328.0, 149.86666666666667], [329.0, 152.69718309859155], [330.0, 151.03571428571422], [331.0, 147.33333333333334], [333.0, 127.61538461538463], [334.0, 131.54545454545456], [335.0, 129.1111111111111], [338.0, 121.18333333333332], [336.0, 124.38000000000001], [337.0, 121.8205128205128], [339.0, 125.24999999999999], [348.0, 131.41860465116278], [350.0, 132.94117647058826], [349.0, 138.948717948718], [351.0, 125.86206896551728], [341.0, 159.5212765957447], [340.0, 161.98859315589365], [342.0, 170.96551724137927], [343.0, 176.8210526315789], [344.0, 159.99999999999997], [345.0, 138.95614035087715], [346.0, 142.10491803278688], [347.0, 145.8243243243243], [353.0, 133.10909090909087], [352.0, 152.91386271870817], [355.0, 127.66792452830184], [354.0, 117.66666666666666], [364.0, 184.8523489932886], [365.0, 183.60891089108904], [366.0, 189.7702702702703], [367.0, 177.09090909090912], [360.0, 124.45205479452044], [356.0, 120.12500000000001], [357.0, 121.69747899159658], [358.0, 126.86792452830193], [359.0, 119.6730769230769], [361.0, 123.15340909090912], [362.0, 115.96874999999997], [363.0, 120.42556917688255], [369.0, 188.776], [368.0, 168.35714285714286], [370.0, 172.51851851851853], [371.0, 183.6271186440678], [372.0, 176.1666666666666], [373.0, 167.57142857142858], [374.0, 189.6351351351352], [375.0, 110.9217391304347], [376.0, 121.34285714285711], [382.0, 155.29729729729732], [381.0, 152.72151898734185], [380.0, 146.88372093023253], [383.0, 154.01470588235296], [377.0, 293.29051987767537], [378.0, 131.16363636363636], [379.0, 132.25], [385.0, 144.50356859635215], [384.0, 137.88333333333335], [386.0, 135.36645962732928], [387.0, 155.95895522388062], [388.0, 153.0], [389.0, 168.3030303030303], [390.0, 172.6315789473684], [391.0, 163.325], [392.0, 101.0], [399.0, 151.86538461538467], [397.0, 128.95348837209303], [396.0, 154.57142857142856], [398.0, 138.39784946236554], [393.0, 101.5], [394.0, 125.36], [395.0, 151.23809523809533], [414.0, 229.63333333333335], [406.0, 174.31313131313127], [405.0, 165.22222222222223], [404.0, 159.39204545454552], [407.0, 203.2166666666666], [401.0, 159.3125], [400.0, 158.26666666666668], [403.0, 162.225], [402.0, 159.93103448275863], [409.0, 222.72], [410.0, 187.94831013916505], [411.0, 144.12499999999986], [412.0, 157.06854838709683], [415.0, 123.80000000000001], [413.0, 134.68055555555554], [408.0, 214.04301075268813], [430.0, 160.63636363636363], [431.0, 161.33333333333334], [429.0, 168.0], [428.0, 151.01612903225808], [427.0, 143.09375], [426.0, 224.97222222222223], [425.0, 136.5], [424.0, 136.5], [423.0, 136.5], [417.0, 126.78571428571429], [416.0, 122.46153846153845], [419.0, 144.0], [418.0, 143.0], [422.0, 137.66666666666669], [421.0, 123.57172557172554], [420.0, 140.8717948717948], [445.0, 158.69206349206354], [441.0, 154.29411764705884], [440.0, 253.50000000000003], [442.0, 166.44000000000003], [443.0, 239.6153846153846], [444.0, 219.7428571428573], [435.0, 157.09523809523807], [434.0, 167.0], [433.0, 164.0], [432.0, 163.10000000000002], [447.0, 162.26315789473685], [446.0, 207.125], [439.0, 140.0], [438.0, 140.0], [436.0, 138.02702702702703], [449.0, 237.25], [448.0, 161.375], [450.0, 253.0], [460.0, 253.0], [461.0, 192.0], [462.0, 166.0], [463.0, 198.66666666666669], [452.0, 192.75], [453.0, 190.5], [454.0, 222.5], [455.0, 147.71428571428572], [456.0, 228.8], [457.0, 252.0], [458.0, 154.8], [459.0, 138.0], [465.0, 239.8181818181818], [464.0, 170.66666666666666], [466.0, 236.42105263157887], [467.0, 189.33613445378154], [468.0, 170.3], [469.0, 168.7], [470.0, 173.8571428571429], [471.0, 128.0], [472.0, 168.88068181818178], [479.0, 498.3707865168539], [477.0, 32.0], [478.0, 235.83333333333334], [473.0, 171.12080536912745], [474.0, 181.82692307692298], [475.0, 791.3389423076916], [481.0, 388.6], [480.0, 304.8], [482.0, 1008.0], [483.0, 1009.0], [484.0, 1013.0], [485.0, 482.8], [487.0, 1019.3333333333334], [486.0, 131.5], [493.0, 352.00000000000006], [494.0, 130.0], [489.0, 574.0], [488.0, 127.0], [491.0, 126.75], [490.0, 145.5], [495.0, 315.0], [509.0, 123.42857142857143], [496.0, 831.6], [500.0, 415.0], [501.0, 142.0], [503.0, 134.0], [502.0, 149.0], [504.0, 518.8333333333334], [505.0, 519.8571428571428], [506.0, 589.5], [507.0, 76.0], [508.0, 131.7037037037037], [499.0, 132.66666666666666], [498.0, 132.33333333333334], [497.0, 130.0], [510.0, 119.4], [511.0, 126.57142857142857], [518.0, 212.22466960352435], [513.0, 114.0], [512.0, 128.6], [527.0, 189.86363636363637], [525.0, 178.60000000000002], [526.0, 210.71551724137927], [523.0, 167.5], [522.0, 144.33333333333334], [524.0, 164.33333333333334], [515.0, 125.71428571428571], [514.0, 137.75], [516.0, 122.0], [517.0, 168.88424437299034], [519.0, 177.55555555555554], [536.0, 163.85714285714283], [543.0, 222.75], [541.0, 159.39999999999998], [540.0, 159.0], [538.0, 158.33333333333334], [537.0, 156.0], [528.0, 192.0], [529.0, 199.48059701492525], [530.0, 188.44000000000003], [531.0, 160.33333333333334], [532.0, 153.4], [533.0, 170.75], [534.0, 186.66666666666666], [535.0, 172.5], [520.0, 154.61538461538458], [521.0, 150.85714285714283], [547.0, 194.73725490196082], [544.0, 203.0], [558.0, 180.59999999999997], [559.0, 190.90000000000003], [556.0, 164.32835820895528], [557.0, 157.27272727272725], [554.0, 157.0], [555.0, 155.3], [545.0, 197.1148648648649], [546.0, 190.33333333333334], [548.0, 189.07623318385646], [549.0, 166.8421052631579], [550.0, 151.73648648648657], [551.0, 159.07407407407413], [561.0, 177.28571428571428], [560.0, 155.33333333333334], [574.0, 154.34042553191492], [575.0, 167.8540145985401], [572.0, 130.7051282051282], [573.0, 155.33333333333334], [570.0, 799.2692889561266], [571.0, 104.96774193548386], [568.0, 172.99999999999997], [569.0, 192.33333333333334], [562.0, 186.61538461538458], [563.0, 186.60000000000002], [564.0, 201.78571428571425], [566.0, 185.16666666666669], [565.0, 159.4], [567.0, 190.7058823529412], [552.0, 162.75], [553.0, 164.0], [577.0, 194.7922077922078], [576.0, 177.39393939393943], [591.0, 186.79069767441857], [589.0, 188.5252525252525], [588.0, 197.0], [590.0, 189.6129032258064], [578.0, 206.60000000000002], [579.0, 172.0], [580.0, 187.78571428571428], [582.0, 271.4166666666667], [581.0, 168.0], [583.0, 182.43165467625906], [592.0, 192.29999999999998], [600.0, 215.35928485729255], [593.0, 188.81818181818184], [594.0, 192.0], [595.0, 188.51020408163274], [597.0, 193.0], [596.0, 190.625], [598.0, 190.17857142857142], [599.0, 187.0], [584.0, 174.63414634146343], [585.0, 194.86428571428573], [586.0, 218.14035087719296], [587.0, 205.16666666666663]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}, {"data": [[595.1913409903839, 214.30530988408572]], "isOverall": false, "label": "AuthzUser-http2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.63387698E12, "maxY": 2.23446171E7, "series": [{"data": [[1.6338774E12, 2.21860503E7], [1.6338771E12, 2.20381512E7], [1.63387704E12, 2.15981415E7], [1.6338777E12, 2.18624634E7], [1.63387764E12, 2.21540472E7], [1.63387734E12, 2.20356489E7], [1.63387728E12, 2.22673092E7], [1.63387698E12, 1.30105113E7], [1.63387788E12, 9638464.5], [1.63387758E12, 2.205975E7], [1.63387752E12, 2.23446171E7], [1.63387722E12, 2.19121143E7], [1.63387716E12, 2.16003804E7], [1.63387782E12, 2.20351221E7], [1.63387776E12, 2.22424179E7], [1.63387746E12, 2.21793336E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6338774E12, 0.0], [1.6338771E12, 0.0], [1.63387704E12, 0.0], [1.6338777E12, 0.0], [1.63387764E12, 0.0], [1.63387734E12, 0.0], [1.63387728E12, 0.0], [1.63387698E12, 0.0], [1.63387788E12, 0.0], [1.63387758E12, 0.0], [1.63387752E12, 0.0], [1.63387722E12, 0.0], [1.63387716E12, 0.0], [1.63387782E12, 0.0], [1.63387776E12, 0.0], [1.63387746E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63387788E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 164.8657375145224, "minX": 1.63387698E12, "maxY": 233.94025650629132, "series": [{"data": [[1.6338774E12, 213.6461394167098], [1.6338771E12, 215.12923100827055], [1.63387704E12, 219.31424738558937], [1.6338777E12, 216.7302924061132], [1.63387764E12, 213.91499025062856], [1.63387734E12, 215.0334335423172], [1.63387728E12, 212.8250431758499], [1.63387698E12, 233.94025650629132], [1.63387788E12, 164.8657375145224], [1.63387758E12, 214.71862686567505], [1.63387752E12, 212.11038352499], [1.63387722E12, 216.08678378882325], [1.63387716E12, 219.44530278272157], [1.63387782E12, 215.02951952328948], [1.63387776E12, 213.06982775465585], [1.63387746E12, 213.55142273526258]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63387788E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 164.76879141900778, "minX": 1.63387698E12, "maxY": 233.63148731134007, "series": [{"data": [[1.6338774E12, 213.55052564719068], [1.6338771E12, 215.0352225462547], [1.63387704E12, 219.21977499313934], [1.6338777E12, 216.6300044577791], [1.63387764E12, 213.81734198887324], [1.63387734E12, 214.9350693593589], [1.63387728E12, 212.72856585204326], [1.63387698E12, 233.63148731134007], [1.63387788E12, 164.76879141900778], [1.63387758E12, 214.62277014925434], [1.63387752E12, 212.01151694830307], [1.63387722E12, 215.98294856923138], [1.63387716E12, 219.34391995707767], [1.63387782E12, 214.93130240926], [1.63387776E12, 212.97863068206223], [1.63387746E12, 213.45584532801143]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63387788E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.7481953852349324E-4, "minX": 1.63387698E12, "maxY": 6.5922724189940585, "series": [{"data": [[1.6338774E12, 5.40190788263018E-4], [1.6338771E12, 5.378400344217665E-4], [1.63387704E12, 6.097746882526827E-4], [1.6338777E12, 5.843303092733898E-4], [1.63387764E12, 5.706948209444996E-4], [1.63387734E12, 6.395046528445955E-4], [1.63387728E12, 5.737064988525966E-4], [1.63387698E12, 6.5922724189940585], [1.63387788E12, 6.012160961945673E-4], [1.63387758E12, 4.776119402985024E-4], [1.63387752E12, 5.540394782598441E-4], [1.63387722E12, 4.7481953852349324E-4], [1.63387716E12, 5.121576470014296E-4], [1.63387782E12, 6.096358322425669E-4], [1.63387776E12, 4.914528649333431E-4], [1.63387746E12, 5.284784570804265E-4]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63387788E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.63387698E12, "maxY": 1301.0, "series": [{"data": [[1.6338774E12, 375.0], [1.6338771E12, 421.0], [1.63387704E12, 657.0], [1.6338777E12, 369.0], [1.63387764E12, 378.0], [1.63387734E12, 358.0], [1.63387728E12, 358.0], [1.63387698E12, 1301.0], [1.63387788E12, 441.0], [1.63387758E12, 340.0], [1.63387752E12, 362.0], [1.63387722E12, 620.0], [1.63387716E12, 362.0], [1.63387782E12, 364.0], [1.63387776E12, 388.0], [1.63387746E12, 328.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6338774E12, 301.0], [1.6338771E12, 329.0], [1.63387704E12, 282.0], [1.6338777E12, 316.0], [1.63387764E12, 257.0], [1.63387734E12, 294.0], [1.63387728E12, 271.0], [1.63387698E12, 280.0], [1.63387788E12, 177.9900000000016], [1.63387758E12, 275.0], [1.63387752E12, 257.0], [1.63387722E12, 291.0], [1.63387716E12, 259.0], [1.63387782E12, 257.0], [1.63387776E12, 254.0], [1.63387746E12, 270.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6338774E12, 318.9978909301717], [1.6338771E12, 353.0], [1.63387704E12, 290.0], [1.6338777E12, 369.0], [1.63387764E12, 267.99894546508585], [1.63387734E12, 306.99894546508585], [1.63387728E12, 326.9994727325429], [1.63387698E12, 300.9994727325429], [1.63387788E12, 199.0], [1.63387758E12, 285.9994727325429], [1.63387752E12, 309.9994727325429], [1.63387722E12, 308.0], [1.63387716E12, 319.0], [1.63387782E12, 270.9994727325429], [1.63387776E12, 266.99894546508585], [1.63387746E12, 282.0]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.6338774E12, 310.0], [1.6338771E12, 348.0], [1.63387704E12, 288.0], [1.6338777E12, 339.0], [1.63387764E12, 263.99930519103873], [1.63387734E12, 303.0], [1.63387728E12, 319.0], [1.63387698E12, 293.0], [1.63387788E12, 194.0], [1.63387758E12, 282.0], [1.63387752E12, 304.0], [1.63387722E12, 303.0], [1.63387716E12, 310.99930519103873], [1.63387782E12, 267.99930519103873], [1.63387776E12, 259.0], [1.63387746E12, 277.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.6338774E12, 73.0], [1.6338771E12, 107.0], [1.63387704E12, 134.0], [1.6338777E12, 120.0], [1.63387764E12, 105.0], [1.63387734E12, 116.0], [1.63387728E12, 77.0], [1.63387698E12, 4.0], [1.63387788E12, 3.0], [1.63387758E12, 110.0], [1.63387752E12, 87.0], [1.63387722E12, 112.0], [1.63387716E12, 127.0], [1.63387782E12, 108.0], [1.63387776E12, 104.0], [1.63387746E12, 96.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6338774E12, 203.0], [1.6338771E12, 213.0], [1.63387704E12, 217.0], [1.6338777E12, 225.0], [1.63387764E12, 208.0], [1.63387734E12, 224.0], [1.63387728E12, 209.0], [1.63387698E12, 211.0], [1.63387788E12, 92.0], [1.63387758E12, 227.0], [1.63387752E12, 200.0], [1.63387722E12, 219.0], [1.63387716E12, 206.0], [1.63387782E12, 208.0], [1.63387776E12, 199.0], [1.63387746E12, 214.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63387788E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 168.0, "maxY": 1175.0, "series": [{"data": [[168.0, 1175.0], [724.0, 122.5], [1123.0, 156.0], [1165.0, 189.0], [1207.0, 275.0], [1339.0, 194.0], [1393.0, 145.0], [1372.0, 196.0], [1523.0, 176.0], [1544.0, 90.0], [1557.0, 15.0], [1653.0, 238.0], [1771.0, 190.0], [1804.0, 190.0], [1819.0, 260.0], [1928.0, 225.0], [2058.0, 22.0], [2290.0, 261.0], [2230.0, 264.0], [2218.0, 255.0], [2284.0, 39.0], [2328.0, 261.0], [2374.0, 200.0], [2320.0, 232.0], [2392.0, 251.0], [2390.0, 97.0], [2312.0, 252.0], [2336.0, 259.0], [2338.0, 171.0], [2356.0, 251.0], [2308.0, 261.0], [2426.0, 246.0], [2416.0, 239.0], [2430.0, 249.0], [2372.0, 239.0], [2458.0, 247.0], [2532.0, 237.0], [2536.0, 226.0], [2488.0, 229.0], [2486.0, 235.0], [2534.0, 224.0], [2530.0, 238.0], [2528.0, 219.0], [2460.0, 241.0], [2462.0, 240.0], [2456.0, 242.0], [2454.0, 226.0], [2452.0, 241.0], [2450.0, 238.0], [2444.0, 242.0], [2434.0, 242.0], [2492.0, 232.0], [2442.0, 247.0], [2480.0, 243.0], [2470.0, 249.0], [2472.0, 246.0], [2478.0, 230.0], [2474.0, 240.0], [2518.0, 194.5], [2520.0, 237.0], [2522.0, 233.0], [2510.0, 240.5], [2516.0, 237.0], [2550.0, 242.0], [2504.0, 244.0], [2500.0, 250.0], [2542.0, 231.0], [2548.0, 237.0], [2546.0, 233.0], [2582.0, 233.0], [2590.0, 235.0], [2606.0, 221.0], [2608.0, 238.0], [2604.0, 241.0], [2610.0, 228.0], [2602.0, 233.0], [2596.0, 230.0], [2592.0, 230.0], [2600.0, 228.0], [2598.0, 224.0], [2576.0, 235.0], [2578.0, 229.0], [2572.0, 234.0], [2574.0, 231.0], [2640.0, 217.0], [2648.0, 218.0], [2646.0, 231.0], [2642.0, 216.0], [2636.0, 235.0], [2654.0, 222.0], [2652.0, 237.0], [2612.0, 231.0], [2614.0, 228.0], [2620.0, 221.0], [2618.0, 233.0], [2568.0, 228.0], [2564.0, 222.0], [2560.0, 231.0], [2562.0, 230.0], [2660.0, 222.0], [2656.0, 232.0], [2664.0, 221.0], [2662.0, 221.0], [2666.0, 221.0], [2670.0, 231.0], [2672.0, 230.0], [2632.0, 232.0], [2682.0, 219.0], [2686.0, 218.0], [2684.0, 223.0], [2678.0, 224.0], [2676.0, 212.0], [2634.0, 237.0], [2794.0, 206.5], [2728.0, 217.0], [2730.0, 220.0], [2732.0, 216.0], [2726.0, 222.0], [2724.0, 219.0], [2720.0, 216.0], [2722.0, 216.0], [2774.0, 215.0], [2772.0, 211.0], [2776.0, 202.0], [2754.0, 218.0], [2758.0, 215.0], [2760.0, 219.0], [2768.0, 213.0], [2764.0, 215.0], [2762.0, 204.0], [2766.0, 222.0], [2770.0, 216.0], [2780.0, 208.0], [2782.0, 213.0], [2778.0, 213.0], [2812.0, 217.0], [2808.0, 216.0], [2810.0, 214.0], [2752.0, 215.0], [2814.0, 217.0], [2718.0, 224.0], [2788.0, 213.0], [2784.0, 214.0], [2790.0, 212.0], [2708.0, 218.0], [2716.0, 218.0], [2710.0, 233.0], [2802.0, 210.0], [2796.0, 208.0], [2798.0, 210.5], [2804.0, 203.0], [2806.0, 212.0], [2688.0, 223.0], [2692.0, 218.0], [2694.0, 222.0], [2700.0, 226.0], [2704.0, 217.5], [2702.0, 221.0], [2742.0, 212.0], [2744.0, 212.0], [2736.0, 217.0], [2746.0, 213.0], [2748.0, 216.0], [2750.0, 213.0], [2934.0, 196.0], [2926.0, 205.0], [2896.0, 203.0], [2892.0, 203.0], [2888.0, 206.0], [2890.0, 199.0], [2880.0, 207.0], [2882.0, 206.0], [2940.0, 201.0], [2938.0, 202.0], [2942.0, 200.5], [2886.0, 204.0], [2884.0, 208.0], [2872.0, 206.0], [2870.0, 205.0], [2868.0, 207.0], [2876.0, 208.0], [2878.0, 210.0], [2874.0, 209.0], [2852.0, 200.0], [2854.0, 200.0], [2848.0, 211.0], [2850.0, 212.0], [2856.0, 208.0], [2862.0, 207.0], [2860.0, 214.0], [2864.0, 206.0], [2866.0, 204.0], [2820.0, 208.0], [2826.0, 211.0], [2828.0, 212.0], [2824.0, 202.0], [2830.0, 207.0], [2836.0, 208.0], [2840.0, 208.0], [2834.0, 209.0], [2846.0, 210.0], [2912.0, 204.0], [2910.0, 198.0], [2908.0, 207.0], [2902.0, 204.0], [2906.0, 210.0], [2904.0, 206.0], [2920.0, 204.0], [2922.0, 204.0], [2916.0, 202.0], [2918.0, 205.0], [2914.0, 206.0], [2924.0, 202.0], [3044.0, 195.0], [2944.0, 200.0], [3000.0, 197.0], [3002.0, 200.0], [3004.0, 199.0], [3040.0, 199.0], [2962.0, 204.0], [2966.0, 204.0], [2972.0, 200.0], [2964.0, 202.0], [3046.0, 198.0], [3042.0, 195.0], [3054.0, 196.0], [3052.0, 196.0], [3058.0, 201.0], [3060.0, 189.5], [3048.0, 196.0], [3068.0, 189.0], [3008.0, 200.0], [3014.0, 202.0], [3018.0, 195.0], [3022.0, 197.0], [3020.0, 199.0], [3024.0, 199.0], [2986.0, 205.0], [2996.0, 200.0], [2992.0, 200.0], [2994.0, 202.0], [2980.0, 201.0], [2982.0, 196.0], [2978.0, 201.0], [2976.0, 202.0], [2998.0, 201.0], [2950.0, 204.0], [3038.0, 200.0], [3036.0, 195.0], [3034.0, 198.0], [3030.0, 198.0], [3028.0, 203.0], [2956.0, 203.0], [2954.0, 204.0], [2952.0, 192.0], [2958.0, 206.0], [3090.0, 193.0], [3086.0, 193.0], [3148.0, 191.0], [3116.0, 193.0], [3112.0, 203.0], [3076.0, 194.0], [3080.0, 198.0], [3088.0, 196.0], [3094.0, 194.0], [3178.0, 195.0], [3326.0, 184.0], [2123.0, 253.0], [2061.0, 209.0], [2283.0, 260.0], [2203.0, 280.0], [2295.0, 250.0], [2379.0, 253.0], [2321.0, 255.0], [2331.0, 251.0], [2403.0, 251.0], [2407.0, 248.0], [2317.0, 262.0], [2357.0, 258.0], [2371.0, 149.0], [2529.0, 230.0], [2493.0, 234.0], [2481.0, 238.0], [2483.0, 238.0], [2475.0, 250.0], [2477.0, 249.0], [2485.0, 230.0], [2491.0, 236.0], [2439.0, 249.0], [2531.0, 230.0], [2463.0, 246.0], [2459.0, 241.0], [2443.0, 243.0], [2441.0, 238.0], [2471.0, 241.0], [2469.0, 237.0], [2465.0, 248.0], [2467.0, 226.0], [2513.0, 229.0], [2517.0, 230.0], [2515.0, 231.0], [2519.0, 237.0], [2527.0, 238.0], [2553.0, 222.0], [2501.0, 235.0], [2503.0, 237.0], [2499.0, 239.0], [2559.0, 232.0], [2549.0, 236.0], [2551.0, 235.0], [2537.0, 229.0], [2541.0, 229.0], [2539.0, 235.0], [2583.0, 225.0], [2571.0, 230.0], [2569.0, 234.0], [2597.0, 231.0], [2595.0, 232.0], [2585.0, 231.0], [2575.0, 234.0], [2577.0, 225.0], [2579.0, 237.0], [2645.0, 224.0], [2647.0, 229.0], [2637.0, 224.0], [2651.0, 208.0], [2655.0, 218.0], [2565.0, 227.0], [2613.0, 230.0], [2619.0, 234.0], [2615.0, 239.0], [2611.0, 224.0], [2607.0, 233.0], [2601.0, 238.0], [2599.0, 238.0], [2663.0, 226.0], [2659.0, 224.0], [2657.0, 222.0], [2591.0, 231.0], [2661.0, 229.0], [2665.0, 231.0], [2667.0, 235.0], [2669.0, 223.0], [2671.0, 228.0], [2679.0, 226.0], [2675.0, 233.0], [2687.0, 213.0], [2629.0, 226.0], [2627.0, 208.0], [2681.0, 234.0], [2685.0, 220.0], [2805.0, 217.0], [2707.0, 207.0], [2725.0, 214.0], [2723.0, 215.5], [2771.0, 200.0], [2773.0, 224.0], [2775.0, 218.0], [2755.0, 204.0], [2761.0, 213.0], [2757.0, 210.0], [2759.0, 218.0], [2763.0, 214.0], [2769.0, 222.0], [2765.0, 211.0], [2783.0, 213.0], [2781.0, 211.0], [2779.0, 211.0], [2777.0, 209.0], [2813.0, 203.0], [2815.0, 176.5], [2753.0, 215.0], [2807.0, 210.0], [2785.0, 208.0], [2791.0, 215.0], [2793.0, 208.0], [2717.0, 223.0], [2713.0, 219.0], [2711.0, 184.0], [2715.0, 217.0], [2801.0, 209.0], [2803.0, 216.0], [2795.0, 212.0], [2797.0, 207.0], [2749.0, 215.0], [2689.0, 218.0], [2705.0, 222.0], [2703.0, 218.0], [2701.0, 210.0], [2697.0, 212.0], [2699.0, 218.0], [2743.0, 221.0], [2741.0, 213.0], [2739.0, 221.0], [2733.0, 214.0], [2731.0, 216.0], [2735.0, 217.0], [2737.0, 214.0], [2745.0, 214.0], [2747.0, 212.0], [2935.0, 198.0], [2829.0, 206.0], [2827.0, 211.0], [2895.0, 208.0], [2893.0, 207.0], [2891.0, 206.0], [2887.0, 213.0], [2889.0, 207.0], [2931.0, 201.0], [2933.0, 203.0], [2927.0, 204.0], [2943.0, 200.0], [2883.0, 210.0], [2885.0, 205.0], [2881.0, 208.0], [2937.0, 202.0], [2939.0, 204.0], [2941.0, 202.0], [2871.0, 206.0], [2867.0, 209.0], [2869.0, 208.0], [2877.0, 207.0], [2873.0, 204.0], [2875.0, 206.0], [2851.0, 201.0], [2849.0, 203.0], [2853.0, 209.0], [2857.0, 209.0], [2861.0, 206.0], [2865.0, 209.0], [2863.0, 209.0], [2859.0, 208.0], [2825.0, 211.0], [2823.0, 216.0], [2821.0, 204.0], [2819.0, 207.0], [2879.0, 205.0], [2817.0, 207.0], [2897.0, 212.0], [2845.0, 208.0], [2831.0, 204.0], [2835.0, 206.0], [2839.0, 217.0], [2841.0, 207.0], [2913.0, 205.0], [2847.0, 209.0], [2905.0, 205.0], [2903.0, 205.0], [2909.0, 206.0], [2899.0, 206.0], [2901.0, 209.0], [2911.0, 206.0], [2915.0, 204.0], [2923.0, 204.0], [2921.0, 209.0], [2917.0, 207.0], [2919.0, 201.0], [2925.0, 207.0], [3047.0, 197.0], [2961.0, 203.0], [3001.0, 202.0], [3007.0, 197.0], [3003.0, 200.0], [3027.0, 198.0], [2963.0, 203.0], [2973.0, 197.0], [2969.0, 203.0], [2971.0, 202.0], [2965.0, 204.0], [2967.0, 196.0], [3043.0, 195.0], [2975.0, 200.0], [3041.0, 201.0], [3055.0, 195.0], [3051.0, 201.0], [3061.0, 192.0], [3065.0, 197.0], [3063.0, 197.0], [3071.0, 198.0], [3069.0, 199.0], [3067.0, 189.0], [3013.0, 193.0], [3011.0, 200.0], [3009.0, 201.0], [3017.0, 200.0], [3019.0, 197.0], [3025.0, 199.0], [2997.0, 201.0], [2993.0, 199.0], [2985.0, 199.0], [2979.0, 200.0], [2983.0, 196.0], [2981.0, 199.0], [2947.0, 195.0], [2945.0, 201.0], [2949.0, 202.0], [3037.0, 194.0], [3031.0, 196.0], [2953.0, 201.0], [2959.0, 203.0], [2957.0, 202.0], [2951.0, 202.0], [2999.0, 196.0], [3101.0, 195.0], [3159.0, 196.0], [3127.0, 188.0], [3135.0, 190.0], [3083.0, 198.0], [3093.0, 195.0], [3113.0, 202.0], [3129.0, 188.0], [3139.0, 192.0], [3169.0, 190.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3326.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 168.0, "maxY": 1158.0, "series": [{"data": [[168.0, 1158.0], [724.0, 122.0], [1123.0, 156.0], [1165.0, 189.0], [1207.0, 275.0], [1339.0, 193.0], [1393.0, 144.0], [1372.0, 196.0], [1523.0, 176.0], [1544.0, 89.0], [1557.0, 15.0], [1653.0, 238.0], [1771.0, 190.0], [1804.0, 190.0], [1819.0, 260.0], [1928.0, 224.0], [2058.0, 22.0], [2290.0, 261.0], [2230.0, 264.0], [2218.0, 255.0], [2284.0, 38.5], [2328.0, 261.0], [2374.0, 200.0], [2320.0, 232.0], [2392.0, 251.0], [2390.0, 97.0], [2312.0, 252.0], [2336.0, 259.0], [2338.0, 171.0], [2356.0, 251.0], [2308.0, 261.0], [2426.0, 246.0], [2416.0, 239.0], [2430.0, 249.0], [2372.0, 239.0], [2458.0, 247.0], [2532.0, 237.0], [2536.0, 226.0], [2488.0, 229.0], [2486.0, 235.0], [2534.0, 224.0], [2530.0, 238.0], [2528.0, 219.0], [2460.0, 241.0], [2462.0, 240.0], [2456.0, 242.0], [2454.0, 226.0], [2452.0, 241.0], [2450.0, 238.0], [2444.0, 242.0], [2434.0, 242.0], [2492.0, 232.0], [2442.0, 247.0], [2480.0, 243.0], [2470.0, 249.0], [2472.0, 246.0], [2478.0, 230.0], [2474.0, 240.0], [2518.0, 194.5], [2520.0, 237.0], [2522.0, 233.0], [2510.0, 240.0], [2516.0, 237.0], [2550.0, 242.0], [2504.0, 244.0], [2500.0, 249.5], [2542.0, 231.0], [2548.0, 237.0], [2546.0, 233.0], [2582.0, 233.0], [2590.0, 235.0], [2606.0, 221.0], [2608.0, 238.0], [2604.0, 240.0], [2610.0, 228.0], [2602.0, 233.0], [2596.0, 230.0], [2592.0, 230.0], [2600.0, 228.0], [2598.0, 224.0], [2576.0, 235.0], [2578.0, 229.0], [2572.0, 234.0], [2574.0, 231.0], [2640.0, 217.0], [2648.0, 218.0], [2646.0, 231.0], [2642.0, 216.0], [2636.0, 235.0], [2654.0, 222.0], [2652.0, 237.0], [2612.0, 231.0], [2614.0, 228.0], [2620.0, 221.0], [2618.0, 233.0], [2568.0, 228.0], [2564.0, 222.0], [2560.0, 231.0], [2562.0, 230.0], [2660.0, 221.0], [2656.0, 232.0], [2664.0, 221.0], [2662.0, 221.0], [2666.0, 221.0], [2670.0, 231.0], [2672.0, 230.0], [2632.0, 232.0], [2682.0, 219.0], [2686.0, 218.0], [2684.0, 223.0], [2678.0, 224.0], [2676.0, 212.0], [2634.0, 237.0], [2794.0, 206.0], [2728.0, 217.0], [2730.0, 220.0], [2732.0, 215.0], [2726.0, 222.0], [2724.0, 219.0], [2720.0, 216.0], [2722.0, 216.0], [2774.0, 215.0], [2772.0, 211.0], [2776.0, 202.0], [2754.0, 218.0], [2758.0, 215.0], [2760.0, 219.0], [2768.0, 213.0], [2764.0, 215.0], [2762.0, 204.0], [2766.0, 222.0], [2770.0, 216.0], [2780.0, 208.0], [2782.0, 212.0], [2778.0, 213.0], [2812.0, 217.0], [2808.0, 216.0], [2810.0, 214.0], [2752.0, 215.0], [2814.0, 217.0], [2718.0, 223.0], [2788.0, 212.0], [2784.0, 214.0], [2790.0, 212.0], [2708.0, 218.0], [2716.0, 218.0], [2710.0, 233.0], [2802.0, 210.0], [2796.0, 207.0], [2798.0, 210.0], [2804.0, 203.0], [2806.0, 212.0], [2688.0, 223.0], [2692.0, 218.0], [2694.0, 222.0], [2700.0, 226.0], [2704.0, 217.0], [2702.0, 221.0], [2742.0, 212.0], [2744.0, 212.0], [2736.0, 217.0], [2746.0, 212.5], [2748.0, 216.0], [2750.0, 213.0], [2934.0, 196.0], [2926.0, 205.0], [2896.0, 203.0], [2892.0, 203.0], [2888.0, 206.0], [2890.0, 199.0], [2880.0, 207.0], [2882.0, 206.0], [2940.0, 201.0], [2938.0, 202.0], [2942.0, 200.0], [2886.0, 204.0], [2884.0, 208.0], [2872.0, 206.0], [2870.0, 205.0], [2868.0, 207.0], [2876.0, 208.0], [2878.0, 210.0], [2874.0, 209.0], [2852.0, 200.0], [2854.0, 200.0], [2848.0, 211.0], [2850.0, 212.0], [2856.0, 208.0], [2862.0, 207.0], [2860.0, 214.0], [2864.0, 206.0], [2866.0, 204.0], [2820.0, 208.0], [2826.0, 211.0], [2828.0, 211.0], [2824.0, 202.0], [2830.0, 207.0], [2836.0, 208.0], [2840.0, 208.0], [2834.0, 209.0], [2846.0, 210.0], [2912.0, 204.0], [2910.0, 198.0], [2908.0, 207.0], [2902.0, 204.0], [2906.0, 210.0], [2904.0, 206.0], [2920.0, 204.0], [2922.0, 204.0], [2916.0, 202.0], [2918.0, 205.0], [2914.0, 206.0], [2924.0, 202.0], [3044.0, 195.0], [2944.0, 200.0], [3000.0, 197.0], [3002.0, 200.0], [3004.0, 199.0], [3040.0, 199.0], [2962.0, 204.0], [2966.0, 204.0], [2972.0, 200.0], [2964.0, 202.0], [3046.0, 198.0], [3042.0, 195.0], [3054.0, 196.0], [3052.0, 196.0], [3058.0, 201.0], [3060.0, 189.0], [3048.0, 196.0], [3068.0, 189.0], [3008.0, 200.0], [3014.0, 202.0], [3018.0, 194.0], [3022.0, 197.0], [3020.0, 199.0], [3024.0, 199.0], [2986.0, 205.0], [2996.0, 200.0], [2992.0, 200.0], [2994.0, 202.0], [2980.0, 201.0], [2982.0, 196.0], [2978.0, 201.0], [2976.0, 202.0], [2998.0, 201.0], [2950.0, 204.0], [3038.0, 200.0], [3036.0, 195.0], [3034.0, 198.0], [3030.0, 198.0], [3028.0, 203.0], [2956.0, 203.0], [2954.0, 203.0], [2952.0, 192.0], [2958.0, 205.5], [3090.0, 193.0], [3086.0, 193.0], [3148.0, 191.0], [3116.0, 193.0], [3112.0, 203.0], [3076.0, 194.0], [3080.0, 198.0], [3088.0, 195.0], [3094.0, 194.0], [3178.0, 194.0], [3326.0, 184.0], [2123.0, 253.0], [2061.0, 209.0], [2283.0, 260.0], [2203.0, 279.0], [2295.0, 250.0], [2379.0, 253.0], [2321.0, 255.0], [2331.0, 251.0], [2403.0, 251.0], [2407.0, 248.0], [2317.0, 262.0], [2357.0, 258.0], [2371.0, 149.0], [2529.0, 230.0], [2493.0, 234.0], [2481.0, 238.0], [2483.0, 238.0], [2475.0, 250.0], [2477.0, 248.0], [2485.0, 230.0], [2491.0, 236.0], [2439.0, 249.0], [2531.0, 230.0], [2463.0, 245.0], [2459.0, 241.0], [2443.0, 243.0], [2441.0, 238.0], [2471.0, 241.0], [2469.0, 237.0], [2465.0, 248.0], [2467.0, 226.0], [2513.0, 229.0], [2517.0, 230.0], [2515.0, 231.0], [2519.0, 237.0], [2527.0, 238.0], [2553.0, 222.0], [2501.0, 235.0], [2503.0, 237.0], [2499.0, 239.0], [2559.0, 232.0], [2549.0, 236.0], [2551.0, 235.0], [2537.0, 229.0], [2541.0, 229.0], [2539.0, 235.0], [2583.0, 225.0], [2571.0, 230.0], [2569.0, 234.0], [2597.0, 231.0], [2595.0, 232.0], [2585.0, 231.0], [2575.0, 234.0], [2577.0, 225.0], [2579.0, 237.0], [2645.0, 224.0], [2647.0, 229.0], [2637.0, 224.0], [2651.0, 208.0], [2655.0, 218.0], [2565.0, 227.0], [2613.0, 230.0], [2619.0, 234.0], [2615.0, 239.0], [2611.0, 224.0], [2607.0, 233.0], [2601.0, 238.0], [2599.0, 238.0], [2663.0, 226.0], [2659.0, 224.0], [2657.0, 222.0], [2591.0, 231.0], [2661.0, 229.0], [2665.0, 231.0], [2667.0, 235.0], [2669.0, 223.0], [2671.0, 228.0], [2679.0, 226.0], [2675.0, 233.0], [2687.0, 213.0], [2629.0, 226.0], [2627.0, 208.0], [2681.0, 234.0], [2685.0, 220.0], [2805.0, 217.0], [2707.0, 207.0], [2725.0, 214.0], [2723.0, 215.0], [2771.0, 200.0], [2773.0, 224.0], [2775.0, 217.0], [2755.0, 204.0], [2761.0, 213.0], [2757.0, 209.0], [2759.0, 218.0], [2763.0, 214.0], [2769.0, 222.0], [2765.0, 211.0], [2783.0, 213.0], [2781.0, 211.0], [2779.0, 211.0], [2777.0, 208.0], [2813.0, 202.0], [2815.0, 176.5], [2753.0, 215.0], [2807.0, 210.0], [2785.0, 208.0], [2791.0, 215.0], [2793.0, 208.0], [2717.0, 222.0], [2713.0, 219.0], [2711.0, 184.0], [2715.0, 217.0], [2801.0, 209.0], [2803.0, 216.0], [2795.0, 212.0], [2797.0, 207.0], [2749.0, 215.0], [2689.0, 217.0], [2705.0, 222.0], [2703.0, 218.0], [2701.0, 210.0], [2697.0, 212.0], [2699.0, 218.0], [2743.0, 221.0], [2741.0, 213.0], [2739.0, 221.0], [2733.0, 214.0], [2731.0, 216.0], [2735.0, 217.0], [2737.0, 214.0], [2745.0, 213.0], [2747.0, 212.0], [2935.0, 198.0], [2829.0, 206.0], [2827.0, 211.0], [2895.0, 208.0], [2893.0, 207.0], [2891.0, 206.0], [2887.0, 213.0], [2889.0, 207.0], [2931.0, 201.0], [2933.0, 203.0], [2927.0, 204.0], [2943.0, 200.0], [2883.0, 210.0], [2885.0, 205.0], [2881.0, 208.0], [2937.0, 202.0], [2939.0, 204.0], [2941.0, 202.0], [2871.0, 206.0], [2867.0, 209.0], [2869.0, 208.0], [2877.0, 207.0], [2873.0, 204.0], [2875.0, 206.0], [2851.0, 201.0], [2849.0, 203.0], [2853.0, 208.0], [2857.0, 209.0], [2861.0, 206.0], [2865.0, 209.0], [2863.0, 209.0], [2859.0, 207.0], [2825.0, 211.0], [2823.0, 216.0], [2821.0, 204.0], [2819.0, 207.0], [2879.0, 205.0], [2817.0, 207.0], [2897.0, 212.0], [2845.0, 208.0], [2831.0, 204.0], [2835.0, 206.0], [2839.0, 217.0], [2841.0, 207.0], [2913.0, 205.0], [2847.0, 209.0], [2905.0, 205.0], [2903.0, 205.0], [2909.0, 206.0], [2899.0, 206.0], [2901.0, 209.0], [2911.0, 206.0], [2915.0, 204.0], [2923.0, 203.0], [2921.0, 209.0], [2917.0, 207.0], [2919.0, 201.0], [2925.0, 207.0], [3047.0, 197.0], [2961.0, 203.0], [3001.0, 201.0], [3007.0, 197.0], [3003.0, 199.0], [3027.0, 197.0], [2963.0, 203.0], [2973.0, 197.0], [2969.0, 203.0], [2971.0, 202.0], [2965.0, 203.0], [2967.0, 196.0], [3043.0, 195.0], [2975.0, 200.0], [3041.0, 201.0], [3055.0, 195.0], [3051.0, 201.0], [3061.0, 192.0], [3065.0, 197.0], [3063.0, 197.0], [3071.0, 198.0], [3069.0, 199.0], [3067.0, 189.0], [3013.0, 193.0], [3011.0, 200.0], [3009.0, 201.0], [3017.0, 200.0], [3019.0, 197.0], [3025.0, 199.0], [2997.0, 201.0], [2993.0, 199.0], [2985.0, 199.0], [2979.0, 200.0], [2983.0, 196.0], [2981.0, 198.0], [2947.0, 195.0], [2945.0, 201.0], [2949.0, 202.0], [3037.0, 194.0], [3031.0, 196.0], [2953.0, 201.0], [2959.0, 203.0], [2957.0, 202.0], [2951.0, 202.0], [2999.0, 196.0], [3101.0, 195.0], [3159.0, 196.0], [3127.0, 188.0], [3135.0, 189.0], [3083.0, 198.0], [3093.0, 195.0], [3113.0, 202.0], [3129.0, 188.0], [3139.0, 192.0], [3169.0, 190.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3326.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1209.7833333333333, "minX": 1.63387698E12, "maxY": 2827.7166666666667, "series": [{"data": [[1.6338774E12, 2807.65], [1.6338771E12, 2788.9333333333334], [1.63387704E12, 2733.25], [1.6338777E12, 2766.7], [1.63387764E12, 2803.616666666667], [1.63387734E12, 2788.616666666667], [1.63387728E12, 2817.9333333333334], [1.63387698E12, 1656.4833333333333], [1.63387788E12, 1209.7833333333333], [1.63387758E12, 2791.65], [1.63387752E12, 2827.7166666666667], [1.63387722E12, 2772.983333333333], [1.63387716E12, 2733.5333333333333], [1.63387782E12, 2788.516666666667], [1.63387776E12, 2814.7833333333333], [1.63387746E12, 2806.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63387788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1219.75, "minX": 1.63387698E12, "maxY": 2827.7166666666667, "series": [{"data": [[1.6338774E12, 2807.65], [1.6338771E12, 2788.9333333333334], [1.63387704E12, 2733.25], [1.6338777E12, 2766.7], [1.63387764E12, 2803.6], [1.63387734E12, 2788.616666666667], [1.63387728E12, 2817.9333333333334], [1.63387698E12, 1646.4833333333333], [1.63387788E12, 1219.75], [1.63387758E12, 2791.6666666666665], [1.63387752E12, 2827.7166666666667], [1.63387722E12, 2772.983333333333], [1.63387716E12, 2733.5333333333333], [1.63387782E12, 2788.55], [1.63387776E12, 2814.7833333333333], [1.63387746E12, 2806.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63387788E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1219.75, "minX": 1.63387698E12, "maxY": 2827.7166666666667, "series": [{"data": [[1.6338774E12, 2807.65], [1.6338771E12, 2788.9333333333334], [1.63387704E12, 2733.25], [1.6338777E12, 2766.7], [1.63387764E12, 2803.6], [1.63387734E12, 2788.616666666667], [1.63387728E12, 2817.9333333333334], [1.63387698E12, 1646.4833333333333], [1.63387788E12, 1219.75], [1.63387758E12, 2791.6666666666665], [1.63387752E12, 2827.7166666666667], [1.63387722E12, 2772.983333333333], [1.63387716E12, 2733.5333333333333], [1.63387782E12, 2788.55], [1.63387776E12, 2814.7833333333333], [1.63387746E12, 2806.8]], "isOverall": false, "label": "AuthzUser-http2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63387788E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1219.75, "minX": 1.63387698E12, "maxY": 2827.7166666666667, "series": [{"data": [[1.6338774E12, 2807.65], [1.6338771E12, 2788.9333333333334], [1.63387704E12, 2733.25], [1.6338777E12, 2766.7], [1.63387764E12, 2803.6], [1.63387734E12, 2788.616666666667], [1.63387728E12, 2817.9333333333334], [1.63387698E12, 1646.4833333333333], [1.63387788E12, 1219.75], [1.63387758E12, 2791.6666666666665], [1.63387752E12, 2827.7166666666667], [1.63387722E12, 2772.983333333333], [1.63387716E12, 2733.5333333333333], [1.63387782E12, 2788.55], [1.63387776E12, 2814.7833333333333], [1.63387746E12, 2806.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63387788E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

