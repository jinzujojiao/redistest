/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 8668.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 12.0], [9.1, 12.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 12.0], [10.7, 12.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 13.0], [12.8, 13.0], [12.9, 13.0], [13.0, 13.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 16.0], [18.9, 16.0], [19.0, 16.0], [19.1, 16.0], [19.2, 16.0], [19.3, 16.0], [19.4, 16.0], [19.5, 16.0], [19.6, 16.0], [19.7, 16.0], [19.8, 16.0], [19.9, 16.0], [20.0, 16.0], [20.1, 16.0], [20.2, 16.0], [20.3, 16.0], [20.4, 16.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 17.0], [21.3, 17.0], [21.4, 17.0], [21.5, 17.0], [21.6, 17.0], [21.7, 17.0], [21.8, 17.0], [21.9, 17.0], [22.0, 17.0], [22.1, 17.0], [22.2, 17.0], [22.3, 17.0], [22.4, 17.0], [22.5, 17.0], [22.6, 17.0], [22.7, 17.0], [22.8, 17.0], [22.9, 17.0], [23.0, 17.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 18.0], [23.7, 18.0], [23.8, 18.0], [23.9, 18.0], [24.0, 18.0], [24.1, 18.0], [24.2, 18.0], [24.3, 18.0], [24.4, 18.0], [24.5, 18.0], [24.6, 18.0], [24.7, 18.0], [24.8, 18.0], [24.9, 18.0], [25.0, 18.0], [25.1, 18.0], [25.2, 18.0], [25.3, 18.0], [25.4, 18.0], [25.5, 18.0], [25.6, 18.0], [25.7, 19.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 19.0], [26.5, 19.0], [26.6, 19.0], [26.7, 19.0], [26.8, 19.0], [26.9, 19.0], [27.0, 19.0], [27.1, 19.0], [27.2, 19.0], [27.3, 19.0], [27.4, 19.0], [27.5, 19.0], [27.6, 19.0], [27.7, 19.0], [27.8, 19.0], [27.9, 19.0], [28.0, 19.0], [28.1, 19.0], [28.2, 19.0], [28.3, 19.0], [28.4, 19.0], [28.5, 20.0], [28.6, 20.0], [28.7, 20.0], [28.8, 20.0], [28.9, 20.0], [29.0, 20.0], [29.1, 20.0], [29.2, 20.0], [29.3, 20.0], [29.4, 20.0], [29.5, 20.0], [29.6, 20.0], [29.7, 20.0], [29.8, 20.0], [29.9, 20.0], [30.0, 20.0], [30.1, 20.0], [30.2, 20.0], [30.3, 20.0], [30.4, 20.0], [30.5, 20.0], [30.6, 20.0], [30.7, 20.0], [30.8, 20.0], [30.9, 20.0], [31.0, 20.0], [31.1, 20.0], [31.2, 20.0], [31.3, 21.0], [31.4, 21.0], [31.5, 21.0], [31.6, 21.0], [31.7, 21.0], [31.8, 21.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 21.0], [32.8, 21.0], [32.9, 21.0], [33.0, 21.0], [33.1, 21.0], [33.2, 21.0], [33.3, 21.0], [33.4, 21.0], [33.5, 21.0], [33.6, 21.0], [33.7, 21.0], [33.8, 21.0], [33.9, 21.0], [34.0, 21.0], [34.1, 21.0], [34.2, 22.0], [34.3, 22.0], [34.4, 22.0], [34.5, 22.0], [34.6, 22.0], [34.7, 22.0], [34.8, 22.0], [34.9, 22.0], [35.0, 22.0], [35.1, 22.0], [35.2, 22.0], [35.3, 22.0], [35.4, 22.0], [35.5, 22.0], [35.6, 22.0], [35.7, 22.0], [35.8, 22.0], [35.9, 22.0], [36.0, 22.0], [36.1, 22.0], [36.2, 22.0], [36.3, 22.0], [36.4, 22.0], [36.5, 22.0], [36.6, 22.0], [36.7, 22.0], [36.8, 22.0], [36.9, 22.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 23.0], [37.6, 23.0], [37.7, 23.0], [37.8, 23.0], [37.9, 23.0], [38.0, 23.0], [38.1, 23.0], [38.2, 23.0], [38.3, 23.0], [38.4, 23.0], [38.5, 23.0], [38.6, 23.0], [38.7, 23.0], [38.8, 23.0], [38.9, 23.0], [39.0, 23.0], [39.1, 23.0], [39.2, 23.0], [39.3, 23.0], [39.4, 23.0], [39.5, 23.0], [39.6, 23.0], [39.7, 23.0], [39.8, 23.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 25.0], [42.8, 25.0], [42.9, 25.0], [43.0, 25.0], [43.1, 25.0], [43.2, 25.0], [43.3, 25.0], [43.4, 25.0], [43.5, 25.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 25.0], [45.3, 25.0], [45.4, 25.0], [45.5, 26.0], [45.6, 26.0], [45.7, 26.0], [45.8, 26.0], [45.9, 26.0], [46.0, 26.0], [46.1, 26.0], [46.2, 26.0], [46.3, 26.0], [46.4, 26.0], [46.5, 26.0], [46.6, 26.0], [46.7, 26.0], [46.8, 26.0], [46.9, 26.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 26.0], [47.5, 26.0], [47.6, 26.0], [47.7, 26.0], [47.8, 26.0], [47.9, 26.0], [48.0, 26.0], [48.1, 26.0], [48.2, 26.0], [48.3, 27.0], [48.4, 27.0], [48.5, 27.0], [48.6, 27.0], [48.7, 27.0], [48.8, 27.0], [48.9, 27.0], [49.0, 27.0], [49.1, 27.0], [49.2, 27.0], [49.3, 27.0], [49.4, 27.0], [49.5, 27.0], [49.6, 27.0], [49.7, 27.0], [49.8, 27.0], [49.9, 27.0], [50.0, 27.0], [50.1, 27.0], [50.2, 27.0], [50.3, 27.0], [50.4, 27.0], [50.5, 27.0], [50.6, 27.0], [50.7, 27.0], [50.8, 27.0], [50.9, 28.0], [51.0, 28.0], [51.1, 28.0], [51.2, 28.0], [51.3, 28.0], [51.4, 28.0], [51.5, 28.0], [51.6, 28.0], [51.7, 28.0], [51.8, 28.0], [51.9, 28.0], [52.0, 28.0], [52.1, 28.0], [52.2, 28.0], [52.3, 28.0], [52.4, 28.0], [52.5, 28.0], [52.6, 28.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 28.0], [53.2, 28.0], [53.3, 28.0], [53.4, 28.0], [53.5, 29.0], [53.6, 29.0], [53.7, 29.0], [53.8, 29.0], [53.9, 29.0], [54.0, 29.0], [54.1, 29.0], [54.2, 29.0], [54.3, 29.0], [54.4, 29.0], [54.5, 29.0], [54.6, 29.0], [54.7, 29.0], [54.8, 29.0], [54.9, 29.0], [55.0, 29.0], [55.1, 29.0], [55.2, 29.0], [55.3, 29.0], [55.4, 29.0], [55.5, 29.0], [55.6, 29.0], [55.7, 29.0], [55.8, 29.0], [55.9, 30.0], [56.0, 30.0], [56.1, 30.0], [56.2, 30.0], [56.3, 30.0], [56.4, 30.0], [56.5, 30.0], [56.6, 30.0], [56.7, 30.0], [56.8, 30.0], [56.9, 30.0], [57.0, 30.0], [57.1, 30.0], [57.2, 30.0], [57.3, 30.0], [57.4, 30.0], [57.5, 30.0], [57.6, 30.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 31.0], [58.2, 31.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 31.0], [59.7, 31.0], [59.8, 31.0], [59.9, 31.0], [60.0, 31.0], [60.1, 32.0], [60.2, 32.0], [60.3, 32.0], [60.4, 32.0], [60.5, 32.0], [60.6, 32.0], [60.7, 32.0], [60.8, 32.0], [60.9, 32.0], [61.0, 32.0], [61.1, 32.0], [61.2, 32.0], [61.3, 32.0], [61.4, 32.0], [61.5, 32.0], [61.6, 32.0], [61.7, 32.0], [61.8, 32.0], [61.9, 33.0], [62.0, 33.0], [62.1, 33.0], [62.2, 33.0], [62.3, 33.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 33.0], [63.0, 33.0], [63.1, 33.0], [63.2, 33.0], [63.3, 33.0], [63.4, 34.0], [63.5, 34.0], [63.6, 34.0], [63.7, 34.0], [63.8, 34.0], [63.9, 34.0], [64.0, 34.0], [64.1, 34.0], [64.2, 34.0], [64.3, 34.0], [64.4, 34.0], [64.5, 34.0], [64.6, 34.0], [64.7, 34.0], [64.8, 35.0], [64.9, 35.0], [65.0, 35.0], [65.1, 35.0], [65.2, 35.0], [65.3, 35.0], [65.4, 35.0], [65.5, 35.0], [65.6, 35.0], [65.7, 35.0], [65.8, 35.0], [65.9, 35.0], [66.0, 36.0], [66.1, 36.0], [66.2, 36.0], [66.3, 36.0], [66.4, 36.0], [66.5, 36.0], [66.6, 36.0], [66.7, 36.0], [66.8, 36.0], [66.9, 37.0], [67.0, 37.0], [67.1, 37.0], [67.2, 37.0], [67.3, 37.0], [67.4, 37.0], [67.5, 37.0], [67.6, 37.0], [67.7, 38.0], [67.8, 38.0], [67.9, 38.0], [68.0, 38.0], [68.1, 38.0], [68.2, 38.0], [68.3, 38.0], [68.4, 39.0], [68.5, 39.0], [68.6, 39.0], [68.7, 39.0], [68.8, 39.0], [68.9, 40.0], [69.0, 40.0], [69.1, 40.0], [69.2, 40.0], [69.3, 41.0], [69.4, 41.0], [69.5, 41.0], [69.6, 42.0], [69.7, 42.0], [69.8, 42.0], [69.9, 43.0], [70.0, 43.0], [70.1, 44.0], [70.2, 44.0], [70.3, 45.0], [70.4, 46.0], [70.5, 46.0], [70.6, 47.0], [70.7, 49.0], [70.8, 50.0], [70.9, 51.0], [71.0, 52.0], [71.1, 53.0], [71.2, 55.0], [71.3, 56.0], [71.4, 57.0], [71.5, 58.0], [71.6, 60.0], [71.7, 61.0], [71.8, 62.0], [71.9, 63.0], [72.0, 65.0], [72.1, 66.0], [72.2, 67.0], [72.3, 68.0], [72.4, 69.0], [72.5, 71.0], [72.6, 72.0], [72.7, 73.0], [72.8, 74.0], [72.9, 76.0], [73.0, 77.0], [73.1, 79.0], [73.2, 80.0], [73.3, 81.0], [73.4, 83.0], [73.5, 84.0], [73.6, 85.0], [73.7, 87.0], [73.8, 88.0], [73.9, 89.0], [74.0, 90.0], [74.1, 92.0], [74.2, 93.0], [74.3, 94.0], [74.4, 96.0], [74.5, 97.0], [74.6, 98.0], [74.7, 100.0], [74.8, 101.0], [74.9, 103.0], [75.0, 104.0], [75.1, 106.0], [75.2, 107.0], [75.3, 109.0], [75.4, 110.0], [75.5, 112.0], [75.6, 113.0], [75.7, 114.0], [75.8, 116.0], [75.9, 117.0], [76.0, 119.0], [76.1, 120.0], [76.2, 121.0], [76.3, 122.0], [76.4, 124.0], [76.5, 125.0], [76.6, 126.0], [76.7, 127.0], [76.8, 129.0], [76.9, 130.0], [77.0, 131.0], [77.1, 132.0], [77.2, 133.0], [77.3, 134.0], [77.4, 136.0], [77.5, 137.0], [77.6, 138.0], [77.7, 139.0], [77.8, 140.0], [77.9, 141.0], [78.0, 143.0], [78.1, 144.0], [78.2, 145.0], [78.3, 146.0], [78.4, 148.0], [78.5, 149.0], [78.6, 150.0], [78.7, 152.0], [78.8, 153.0], [78.9, 154.0], [79.0, 155.0], [79.1, 157.0], [79.2, 158.0], [79.3, 159.0], [79.4, 160.0], [79.5, 162.0], [79.6, 163.0], [79.7, 164.0], [79.8, 165.0], [79.9, 167.0], [80.0, 168.0], [80.1, 169.0], [80.2, 170.0], [80.3, 171.0], [80.4, 172.0], [80.5, 174.0], [80.6, 175.0], [80.7, 176.0], [80.8, 177.0], [80.9, 178.0], [81.0, 179.0], [81.1, 180.0], [81.2, 181.0], [81.3, 183.0], [81.4, 184.0], [81.5, 185.0], [81.6, 186.0], [81.7, 187.0], [81.8, 188.0], [81.9, 189.0], [82.0, 191.0], [82.1, 192.0], [82.2, 193.0], [82.3, 194.0], [82.4, 196.0], [82.5, 197.0], [82.6, 198.0], [82.7, 200.0], [82.8, 201.0], [82.9, 202.0], [83.0, 203.0], [83.1, 204.0], [83.2, 205.0], [83.3, 206.0], [83.4, 207.0], [83.5, 209.0], [83.6, 210.0], [83.7, 211.0], [83.8, 212.0], [83.9, 213.0], [84.0, 214.0], [84.1, 216.0], [84.2, 217.0], [84.3, 218.0], [84.4, 219.0], [84.5, 220.0], [84.6, 221.0], [84.7, 223.0], [84.8, 224.0], [84.9, 225.0], [85.0, 226.0], [85.1, 227.0], [85.2, 228.0], [85.3, 229.0], [85.4, 231.0], [85.5, 232.0], [85.6, 233.0], [85.7, 234.0], [85.8, 235.0], [85.9, 237.0], [86.0, 238.0], [86.1, 239.0], [86.2, 240.0], [86.3, 242.0], [86.4, 243.0], [86.5, 244.0], [86.6, 246.0], [86.7, 247.0], [86.8, 248.0], [86.9, 249.0], [87.0, 251.0], [87.1, 252.0], [87.2, 253.0], [87.3, 254.0], [87.4, 256.0], [87.5, 257.0], [87.6, 258.0], [87.7, 260.0], [87.8, 261.0], [87.9, 262.0], [88.0, 264.0], [88.1, 265.0], [88.2, 266.0], [88.3, 267.0], [88.4, 268.0], [88.5, 269.0], [88.6, 271.0], [88.7, 272.0], [88.8, 273.0], [88.9, 275.0], [89.0, 276.0], [89.1, 277.0], [89.2, 279.0], [89.3, 280.0], [89.4, 282.0], [89.5, 283.0], [89.6, 284.0], [89.7, 286.0], [89.8, 287.0], [89.9, 289.0], [90.0, 290.0], [90.1, 291.0], [90.2, 293.0], [90.3, 294.0], [90.4, 296.0], [90.5, 297.0], [90.6, 298.0], [90.7, 300.0], [90.8, 301.0], [90.9, 303.0], [91.0, 304.0], [91.1, 306.0], [91.2, 307.0], [91.3, 308.0], [91.4, 309.0], [91.5, 311.0], [91.6, 312.0], [91.7, 313.0], [91.8, 315.0], [91.9, 316.0], [92.0, 318.0], [92.1, 319.0], [92.2, 320.0], [92.3, 322.0], [92.4, 323.0], [92.5, 325.0], [92.6, 326.0], [92.7, 327.0], [92.8, 329.0], [92.9, 330.0], [93.0, 332.0], [93.1, 333.0], [93.2, 334.0], [93.3, 335.0], [93.4, 337.0], [93.5, 338.0], [93.6, 340.0], [93.7, 341.0], [93.8, 343.0], [93.9, 344.0], [94.0, 345.0], [94.1, 347.0], [94.2, 348.0], [94.3, 349.0], [94.4, 350.0], [94.5, 352.0], [94.6, 353.0], [94.7, 354.0], [94.8, 356.0], [94.9, 357.0], [95.0, 359.0], [95.1, 360.0], [95.2, 361.0], [95.3, 363.0], [95.4, 364.0], [95.5, 366.0], [95.6, 367.0], [95.7, 368.0], [95.8, 370.0], [95.9, 371.0], [96.0, 373.0], [96.1, 374.0], [96.2, 376.0], [96.3, 377.0], [96.4, 379.0], [96.5, 380.0], [96.6, 382.0], [96.7, 383.0], [96.8, 385.0], [96.9, 386.0], [97.0, 388.0], [97.1, 390.0], [97.2, 391.0], [97.3, 393.0], [97.4, 395.0], [97.5, 397.0], [97.6, 399.0], [97.7, 402.0], [97.8, 404.0], [97.9, 406.0], [98.0, 408.0], [98.1, 411.0], [98.2, 413.0], [98.3, 415.0], [98.4, 417.0], [98.5, 419.0], [98.6, 422.0], [98.7, 425.0], [98.8, 427.0], [98.9, 431.0], [99.0, 434.0], [99.1, 438.0], [99.2, 443.0], [99.3, 448.0], [99.4, 453.0], [99.5, 459.0], [99.6, 465.0], [99.7, 474.0], [99.8, 486.0], [99.9, 509.0], [100.0, 8668.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 673015.0, "series": [{"data": [[0.0, 673015.0], [600.0, 7.0], [700.0, 5.0], [800.0, 4.0], [900.0, 19.0], [1000.0, 10.0], [1100.0, 5.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 8.0], [1500.0, 6.0], [1600.0, 3.0], [1900.0, 2.0], [2000.0, 4.0], [2100.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2800.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4200.0, 2.0], [4100.0, 1.0], [4300.0, 2.0], [4400.0, 2.0], [4500.0, 2.0], [4600.0, 2.0], [4700.0, 1.0], [5000.0, 2.0], [5100.0, 4.0], [4900.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5600.0, 2.0], [5400.0, 1.0], [5500.0, 1.0], [5800.0, 4.0], [5700.0, 5.0], [6100.0, 2.0], [5900.0, 2.0], [6000.0, 1.0], [6200.0, 12.0], [6300.0, 4.0], [6400.0, 11.0], [6500.0, 10.0], [6600.0, 8.0], [6700.0, 10.0], [6800.0, 8.0], [6900.0, 9.0], [7000.0, 6.0], [7100.0, 18.0], [7200.0, 11.0], [7300.0, 9.0], [7400.0, 10.0], [7500.0, 12.0], [7600.0, 23.0], [7700.0, 12.0], [7800.0, 20.0], [7900.0, 14.0], [8000.0, 15.0], [8100.0, 30.0], [8200.0, 33.0], [8300.0, 4.0], [8400.0, 4.0], [8600.0, 1.0], [100.0, 72215.0], [200.0, 71900.0], [300.0, 62491.0], [400.0, 20271.0], [500.0, 873.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 363.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 899929.0, "series": [{"data": [[0.0, 899929.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 899.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 363.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1052.3736933476205, "minX": 1.63353534E12, "maxY": 1200.0, "series": [{"data": [[1.63353618E12, 1200.0], [1.63353552E12, 1200.0], [1.63353558E12, 1200.0], [1.63353588E12, 1200.0], [1.63353594E12, 1200.0], [1.63353624E12, 1052.3736933476205], [1.63353534E12, 1110.5229501978], [1.63353564E12, 1200.0], [1.6335357E12, 1200.0], [1.633536E12, 1200.0], [1.63353606E12, 1200.0], [1.6335354E12, 1200.0], [1.63353546E12, 1200.0], [1.63353576E12, 1200.0], [1.63353582E12, 1200.0], [1.63353612E12, 1200.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353624E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 6413.363636363636, "series": [{"data": [[2.0, 4.0], [3.0, 7.0], [4.0, 7.0], [5.0, 5.5], [7.0, 5.5], [44.0, 12.0], [72.0, 10.176470588235293], [103.0, 16.842105263157894], [132.0, 12.925925925925924], [153.0, 10.055555555555555], [183.0, 16.416666666666668], [207.0, 11.93939393939394], [222.0, 15.424242424242424], [237.0, 16.542857142857144], [250.0, 13.625], [266.0, 38.08974358974358], [270.0, 67.0], [269.0, 49.0], [268.0, 49.0], [271.0, 48.0], [287.0, 39.75], [286.0, 38.0], [281.0, 40.5], [277.0, 55.44604316546764], [276.0, 86.34306569343067], [273.0, 99.0], [294.0, 38.0], [289.0, 42.0], [314.0, 38.0], [312.0, 37.0], [310.0, 39.0], [308.0, 40.0], [348.0, 5476.0], [350.0, 5492.222222222223], [349.0, 6232.0], [351.0, 36.0], [346.0, 35.0], [344.0, 40.0], [340.0, 36.0], [354.0, 5121.6], [352.0, 6402.0], [355.0, 6413.363636363636], [356.0, 4386.666666666667], [357.0, 4207.375], [358.0, 167.25], [360.0, 961.1052631578948], [361.0, 1613.5555555555559], [367.0, 153.0], [366.0, 35.5], [381.0, 19.0], [369.0, 70.0], [374.0, 3514.5], [377.0, 1521.7999999999997], [379.0, 1166.6140939597315], [378.0, 42.0], [380.0, 29.0], [370.0, 33.0], [382.0, 578.8571428571428], [383.0, 37.0], [375.0, 32.0], [387.0, 76.66666666666667], [384.0, 2230.242236024845], [390.0, 196.75], [392.0, 1051.375], [393.0, 113.5], [394.0, 211.0], [395.0, 134.33333333333334], [396.0, 97.57142857142857], [397.0, 28.0], [398.0, 3923.5], [399.0, 30.0], [386.0, 171.0], [385.0, 147.33333333333334], [401.0, 1141.8654822335025], [400.0, 358.30578512396687], [402.0, 1411.0], [403.0, 1207.2264150943397], [404.0, 2294.933333333334], [405.0, 2793.436681222709], [406.0, 573.4496124031009], [407.0, 255.80672268907563], [408.0, 1089.0], [410.0, 40.0], [412.0, 1417.633333333333], [413.0, 643.8611111111109], [415.0, 317.4], [414.0, 362.75], [416.0, 20.75], [418.0, 26.166666666666664], [419.0, 33.392857142857146], [428.0, 24.076923076923077], [429.0, 44.51724137931034], [430.0, 15.23076923076923], [431.0, 20.142857142857142], [417.0, 22.0], [420.0, 41.06451612903226], [421.0, 35.283333333333324], [422.0, 63.583333333333336], [423.0, 19.90909090909091], [425.0, 45.46153846153847], [427.0, 25.727272727272727], [426.0, 28.0], [424.0, 30.4], [433.0, 55.5], [434.0, 15.714285714285714], [435.0, 26.0], [445.0, 13.4], [446.0, 18.099999999999998], [447.0, 41.60526315789475], [432.0, 27.57894736842105], [436.0, 26.125000000000004], [437.0, 43.42857142857144], [438.0, 11.571428571428571], [439.0, 35.0], [441.0, 34.285714285714285], [442.0, 25.125000000000004], [443.0, 39.233333333333334], [440.0, 105.5], [449.0, 20.833333333333336], [448.0, 12.166666666666666], [450.0, 28.72222222222222], [451.0, 69.72727272727273], [452.0, 7.166666666666666], [453.0, 12.0], [455.0, 41.36363636363636], [454.0, 18.307692307692307], [456.0, 37.77777777777778], [463.0, 22.309523809523817], [460.0, 19.333333333333332], [461.0, 24.34615384615385], [458.0, 12.875], [459.0, 26.842105263157897], [457.0, 15.941176470588239], [465.0, 51.41304347826085], [464.0, 131.0], [466.0, 41.230769230769226], [476.0, 27.636363636363633], [477.0, 57.75862068965516], [479.0, 16.0], [478.0, 22.0], [468.0, 34.349999999999994], [469.0, 98.33333333333334], [470.0, 29.466666666666665], [471.0, 17.749999999999996], [472.0, 35.137931034482754], [475.0, 21.562500000000004], [474.0, 11.0], [473.0, 45.6], [492.0, 76.66666666666667], [480.0, 34.413043478260875], [482.0, 24.8125], [481.0, 25.333333333333332], [484.0, 31.214285714285715], [485.0, 23.0], [486.0, 37.0], [487.0, 39.5], [489.0, 59.55555555555555], [491.0, 81.75], [490.0, 133.0], [494.0, 17.0], [493.0, 22.0], [495.0, 13.5], [498.0, 24.0], [496.0, 19.625000000000004], [501.0, 37.290322580645174], [499.0, 26.666666666666664], [509.0, 11.0], [508.0, 27.2], [497.0, 23.0], [500.0, 29.0], [510.0, 16.0], [507.0, 36.333333333333336], [505.0, 29.0], [511.0, 22.0], [504.0, 21.0], [506.0, 24.0], [503.0, 30.333333333333332], [502.0, 43.0], [518.0, 25.5], [526.0, 22.0], [514.0, 21.2], [513.0, 19.5], [527.0, 19.6], [516.0, 24.125], [517.0, 21.0], [521.0, 35.833333333333336], [522.0, 27.0], [523.0, 28.0], [524.0, 30.0], [519.0, 29.5], [536.0, 21.4], [538.0, 31.86111111111111], [537.0, 20.0], [539.0, 21.0], [540.0, 28.0], [541.0, 30.0], [529.0, 19.0], [530.0, 23.57142857142857], [532.0, 14.5], [533.0, 16.2], [534.0, 19.0], [535.0, 19.5], [531.0, 17.0], [520.0, 32.375], [571.0, 30.333333333333336], [545.0, 12.0], [549.0, 18.666666666666668], [550.0, 19.0], [547.0, 17.0], [548.0, 18.0], [558.0, 37.0], [553.0, 27.8], [552.0, 26.0], [555.0, 25.8], [554.0, 18.0], [557.0, 17.5], [559.0, 43.333333333333336], [544.0, 30.0], [551.0, 25.0], [560.0, 40.142857142857146], [574.0, 37.83333333333333], [572.0, 32.0], [573.0, 32.5], [575.0, 39.2], [568.0, 20.22222222222222], [561.0, 44.31250000000001], [567.0, 17.666666666666668], [562.0, 13.666666666666666], [564.0, 11.714285714285714], [563.0, 23.0], [565.0, 15.5], [577.0, 39.08333333333333], [576.0, 37.666666666666664], [578.0, 21.0], [580.0, 6.666666666666667], [582.0, 14.5], [583.0, 17.77777777777778], [592.0, 28.0], [606.0, 28.0], [602.0, 21.375], [603.0, 23.0], [605.0, 24.25], [597.0, 12.0], [598.0, 13.0], [593.0, 29.0], [589.0, 25.333333333333332], [587.0, 23.0], [585.0, 21.666666666666668], [586.0, 21.5], [590.0, 28.0], [591.0, 33.09523809523809], [614.0, 12.5], [622.0, 32.0], [609.0, 37.5], [608.0, 32.69230769230769], [610.0, 36.77272727272727], [611.0, 11.0], [615.0, 21.413793103448274], [632.0, 12.4], [626.0, 19.0], [624.0, 9.0], [635.0, 15.25], [636.0, 22.0], [637.0, 23.0], [639.0, 29.083333333333332], [633.0, 13.0], [634.0, 15.083333333333332], [628.0, 24.0], [629.0, 19.0], [616.0, 24.714285714285715], [617.0, 29.444444444444446], [618.0, 38.5], [620.0, 27.0], [619.0, 21.5], [652.0, 18.0], [641.0, 39.8], [642.0, 31.35], [640.0, 34.666666666666664], [649.0, 10.375], [648.0, 8.333333333333334], [656.0, 24.555555555555557], [664.0, 33.42857142857142], [665.0, 19.75], [670.0, 11.25], [671.0, 15.799999999999999], [657.0, 28.0], [658.0, 29.6], [663.0, 37.21428571428571], [659.0, 30.5], [646.0, 20.5], [651.0, 15.0], [654.0, 19.333333333333332], [655.0, 21.666666666666668], [675.0, 23.22222222222222], [673.0, 19.0], [677.0, 27.1875], [678.0, 29.46153846153846], [674.0, 20.333333333333332], [679.0, 16.0], [696.0, 36.37500000000001], [689.0, 14.0], [698.0, 30.0], [702.0, 15.253731343283583], [683.0, 28.5], [682.0, 20.333333333333332], [687.0, 9.666666666666668], [684.0, 22.0], [691.0, 17.833333333333336], [695.0, 26.11111111111111], [692.0, 20.555555555555557], [694.0, 24.0], [711.0, 14.52173913043478], [717.0, 37.75], [709.0, 13.0], [710.0, 14.5], [704.0, 22.0], [720.0, 38.78571428571429], [731.0, 23.338983050847457], [732.0, 24.0], [733.0, 26.0], [735.0, 27.4], [728.0, 13.2], [729.0, 14.0], [730.0, 16.0], [727.0, 11.428571428571427], [726.0, 33.0], [723.0, 21.0], [724.0, 19.0], [722.0, 18.04878048780488], [725.0, 40.33333333333333], [721.0, 34.333333333333336], [712.0, 17.875], [713.0, 20.0], [719.0, 29.5], [716.0, 24.5], [715.0, 16.093023255813954], [737.0, 31.333333333333332], [736.0, 16.560000000000002], [750.0, 21.73913043478261], [739.0, 24.333333333333332], [753.0, 15.307692307692308], [748.0, 12.0], [740.0, 20.5], [744.0, 18.06818181818182], [745.0, 14.0], [746.0, 18.0], [754.0, 17.2], [755.0, 15.46511627906977], [743.0, 16.5], [741.0, 24.644444444444446], [765.0, 14.617021276595743], [760.0, 14.600000000000005], [763.0, 22.67021276595745], [767.0, 44.0], [752.0, 17.37777777777778], [766.0, 16.76086956521739], [774.0, 28.8], [769.0, 48.913043478260875], [768.0, 19.81818181818182], [783.0, 20.434782608695656], [781.0, 19.5], [782.0, 15.729166666666668], [770.0, 54.6], [772.0, 48.636363636363626], [773.0, 23.5], [771.0, 60.0], [780.0, 41.0], [776.0, 35.25], [777.0, 36.5], [779.0, 40.111111111111114], [778.0, 38.0], [775.0, 21.86915887850468], [792.0, 21.272727272727273], [793.0, 27.222222222222225], [786.0, 21.835051546391753], [787.0, 17.5], [788.0, 25.591836734693874], [785.0, 16.0], [798.0, 23.34375], [797.0, 35.5], [796.0, 25.5], [795.0, 32.333333333333336], [794.0, 28.5], [790.0, 14.647058823529413], [791.0, 18.021276595744684], [789.0, 22.435643564356432], [824.0, 18.58333333333334], [815.0, 21.406779661016945], [812.0, 17.375], [810.0, 20.606382978723403], [803.0, 17.471698113207545], [811.0, 15.0], [809.0, 11.0], [808.0, 14.446808510638302], [813.0, 18.04255319148936], [805.0, 17.0], [807.0, 16.297872340425535], [806.0, 19.361702127659566], [816.0, 27.666666666666668], [827.0, 15.82978723404255], [830.0, 14.0], [829.0, 21.755102040816322], [828.0, 8.5], [831.0, 17.3103448275862], [826.0, 20.229166666666664], [817.0, 28.288461538461544], [818.0, 31.5], [820.0, 31.13333333333333], [821.0, 24.0], [823.0, 22.0], [819.0, 18.000000000000007], [802.0, 21.77083333333333], [801.0, 22.57999999999999], [800.0, 19.440559440559447], [849.0, 18.020000000000003], [832.0, 18.0], [846.0, 21.262295081967213], [847.0, 19.82105263157894], [856.0, 46.111111111111114], [839.0, 17.25531914893617], [835.0, 20.045454545454543], [833.0, 15.847826086956523], [857.0, 25.25], [852.0, 23.75], [853.0, 30.25], [851.0, 138.30755395683457], [850.0, 184.25447042640963], [855.0, 36.16666666666667], [854.0, 36.333333333333336], [848.0, 27.77551020408163], [863.0, 18.833333333333332], [862.0, 19.77685950413223], [861.0, 18.872340425531913], [860.0, 20.92857142857143], [859.0, 19.86206896551724], [858.0, 29.47058823529412], [845.0, 19.26153846153847], [842.0, 22.108695652173914], [840.0, 16.80851063829787], [868.0, 22.979591836734702], [877.0, 20.308219178082187], [865.0, 17.65625], [864.0, 20.578947368421048], [879.0, 48.5625], [878.0, 17.914893617021274], [869.0, 21.643835616438352], [888.0, 32.82978723404256], [870.0, 30.000000000000004], [890.0, 146.8042299349241], [889.0, 23.760416666666664], [880.0, 23.602787456445995], [895.0, 8.0], [881.0, 64.33333333333334], [882.0, 71.15384615384616], [883.0, 21.75396825396826], [887.0, 20.062500000000004], [886.0, 19.45360824742268], [885.0, 18.03472222222222], [884.0, 23.969696969696976], [867.0, 18.903846153846153], [866.0, 24.58947368421053], [872.0, 18.300000000000008], [873.0, 16.434782608695656], [874.0, 21.299999999999997], [876.0, 27.166666666666668], [875.0, 17.617021276595743], [920.0, 32.500000000000014], [916.0, 19.0], [899.0, 11.0], [900.0, 12.0], [914.0, 19.0], [913.0, 83.0], [926.0, 9.833333333333334], [927.0, 16.235294117647058], [924.0, 86.0], [925.0, 9.0], [919.0, 34.265306122448976], [917.0, 79.5], [903.0, 14.0], [922.0, 79.38461538461537], [921.0, 42.0], [930.0, 29.0], [929.0, 27.833333333333336], [931.0, 47.785714285714285], [928.0, 21.5], [932.0, 121.0], [938.0, 19.0], [941.0, 18.959999999999997], [935.0, 31.0], [944.0, 33.36363636363637], [948.0, 40.0], [949.0, 24.0], [946.0, 45.0], [953.0, 18.0], [934.0, 30.0], [942.0, 25.0], [943.0, 26.0], [975.0, 36.4], [966.0, 20.0], [967.0, 21.461538461538463], [989.0, 24.470588235294116], [988.0, 18.0], [986.0, 11.0], [990.0, 28.0], [984.0, 9.0], [964.0, 18.6], [961.0, 66.0], [968.0, 26.0], [972.0, 32.0], [971.0, 64.0], [976.0, 23.0], [978.0, 28.0], [979.0, 25.0], [981.0, 19.333333333333332], [980.0, 16.5], [973.0, 33.285714285714285], [974.0, 34.0], [992.0, 29.0], [995.0, 32.8], [996.0, 37.25], [994.0, 29.0], [999.0, 50.5], [1014.0, 33.0], [1016.0, 36.05882352941177], [1019.0, 9.0], [1012.0, 30.5], [1022.0, 13.5], [1023.0, 50.0], [1011.0, 29.0], [1020.0, 9.8], [1015.0, 34.0], [1000.0, 42.81818181818182], [1002.0, 37.0], [1003.0, 26.565217391304348], [1004.0, 24.571428571428573], [1006.0, 26.0], [1007.0, 27.0], [1028.0, 33.72727272727273], [1024.0, 16.0], [1053.0, 32.5], [1054.0, 26.0], [1055.0, 21.42857142857143], [1051.0, 29.11764705882353], [1050.0, 25.6], [1052.0, 32.0], [1049.0, 23.0], [1047.0, 20.0], [1025.0, 20.000000000000004], [1027.0, 25.57142857142857], [1029.0, 34.46666666666667], [1030.0, 37.0], [1031.0, 27.636363636363637], [1044.0, 18.25], [1041.0, 10.6], [1043.0, 13.333333333333334], [1045.0, 19.25], [1036.0, 18.0], [1033.0, 15.0], [1038.0, 17.0], [1072.0, 23.666666666666668], [1073.0, 24.2], [1074.0, 30.80769230769231], [1075.0, 22.0], [1079.0, 17.0], [1081.0, 16.5], [1082.0, 18.0], [1083.0, 16.0], [1076.0, 19.666666666666668], [1078.0, 17.0], [1085.0, 12.0], [1086.0, 11.0], [1087.0, 29.236842105263158], [1059.0, 17.0], [1058.0, 14.0], [1056.0, 18.0], [1061.0, 15.0], [1063.0, 8.8], [1062.0, 34.25], [1065.0, 9.5], [1068.0, 15.5], [1070.0, 21.0], [1069.0, 19.666666666666668], [1067.0, 13.5], [1032.0, 20.5], [1096.0, 14.0], [1088.0, 34.0], [1104.0, 17.0], [1099.0, 10.636363636363635], [1097.0, 24.0], [1090.0, 34.0], [1091.0, 35.0], [1094.0, 15.0], [1095.0, 34.0], [1093.0, 32.0], [1105.0, 19.875], [1107.0, 20.333333333333332], [1108.0, 31.0], [1106.0, 19.0], [1109.0, 27.28571428571429], [1111.0, 29.09090909090909], [1110.0, 29.0], [1112.0, 33.0], [1113.0, 28.0], [1116.0, 36.55555555555555], [1118.0, 30.0], [1101.0, 26.5], [1103.0, 18.8], [1102.0, 30.0], [1138.0, 32.0], [1139.0, 42.0], [1148.0, 20.6], [1150.0, 27.0], [1147.0, 25.4], [1145.0, 29.0], [1144.0, 32.0], [1142.0, 25.5], [1141.0, 34.0], [1137.0, 20.75], [1136.0, 37.0], [1120.0, 24.444444444444443], [1122.0, 20.0], [1124.0, 23.5], [1125.0, 13.5], [1126.0, 16.0], [1127.0, 16.0], [1135.0, 27.888888888888893], [1134.0, 25.5], [1130.0, 19.5], [1132.0, 21.0], [1133.0, 24.333333333333332], [1128.0, 24.0], [1129.0, 18.8], [1165.0, 40.5], [1157.0, 15.0], [1154.0, 18.666666666666668], [1152.0, 12.0], [1183.0, 7.75], [1182.0, 132.22222222222223], [1181.0, 18.2], [1178.0, 16.0], [1179.0, 16.5], [1170.0, 19.0], [1173.0, 8.0], [1176.0, 12.624999999999998], [1160.0, 23.81818181818182], [1159.0, 10.0], [1155.0, 13.333333333333332], [1156.0, 18.428571428571427], [1163.0, 36.8], [1164.0, 35.5], [1161.0, 30.818181818181817], [1166.0, 35.77272727272728], [1200.0, 85.29026075092094], [1184.0, 20.083333333333332], [1186.0, 21.0], [1185.0, 23.0], [1187.0, 10.200000000000001], [1188.0, 25.142857142857142], [1189.0, 42.4], [1190.0, 32.0], [1192.0, 19.75], [1193.0, 20.565217391304348], [1195.0, 16.659090909090914], [1191.0, 12.304347826086953], [1196.0, 17.0], [1198.0, 10.0], [1199.0, 23.489361702127663], [1197.0, 10.0], [1.0, 4.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[1191.9007990537566, 87.63531815120263]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 75353.18333333333, "minX": 1.63353534E12, "maxY": 8105556.733333333, "series": [{"data": [[1.63353618E12, 8105556.733333333], [1.63353552E12, 8054300.4], [1.63353558E12, 7885087.933333334], [1.63353588E12, 7966964.933333334], [1.63353594E12, 7971491.466666667], [1.63353624E12, 3604318.7333333334], [1.63353534E12, 4913418.8], [1.63353564E12, 8059359.466666667], [1.6335357E12, 7964134.95], [1.633536E12, 7844216.0], [1.63353606E12, 8065749.866666666], [1.6335354E12, 7969095.066666666], [1.63353546E12, 7882292.133333334], [1.63353576E12, 7956271.6], [1.63353582E12, 7976873.933333334], [1.63353612E12, 7760075.733333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63353618E12, 169457.68333333332], [1.63353552E12, 168386.1], [1.63353558E12, 164848.48333333334], [1.63353588E12, 166560.23333333334], [1.63353594E12, 166654.86666666667], [1.63353624E12, 75353.18333333333], [1.63353534E12, 101921.5], [1.63353564E12, 168491.86666666667], [1.6335357E12, 166493.43333333332], [1.633536E12, 163994.0], [1.63353606E12, 168625.46666666667], [1.6335354E12, 165607.13333333333], [1.63353546E12, 164736.11666666667], [1.63353576E12, 166332.0], [1.63353582E12, 166766.2], [1.63353612E12, 162234.93333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353624E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 56.28500396458375, "minX": 1.63353534E12, "maxY": 156.96474827941194, "series": [{"data": [[1.63353618E12, 94.5494144506673], [1.63353552E12, 91.15701345498995], [1.63353558E12, 88.43076637344562], [1.63353588E12, 73.0946492430067], [1.63353594E12, 90.16008083372307], [1.63353624E12, 78.93716987404397], [1.63353534E12, 156.96474827941194], [1.63353564E12, 56.28500396458375], [1.6335357E12, 73.76818014644522], [1.633536E12, 90.26150712830972], [1.63353606E12, 88.24414036709311], [1.6335354E12, 96.89480102910167], [1.63353546E12, 89.06264567780279], [1.63353576E12, 89.45254350736298], [1.63353582E12, 92.67110621536816], [1.63353612E12, 73.93249039253423]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353624E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 56.165323113519555, "minX": 1.63353534E12, "maxY": 155.14623638432766, "series": [{"data": [[1.63353618E12, 94.39395233480603], [1.63353552E12, 91.0155377037258], [1.63353558E12, 88.28546102284393], [1.63353588E12, 72.94181344206538], [1.63353594E12, 89.99266818090778], [1.63353624E12, 78.78269862963086], [1.63353534E12, 155.14623638432766], [1.63353564E12, 56.165323113519555], [1.6335357E12, 73.62683473202003], [1.633536E12, 90.0934826883909], [1.63353606E12, 88.08165522250194], [1.6335354E12, 96.74100370877713], [1.63353546E12, 88.91931560990493], [1.63353576E12, 89.31400602409566], [1.63353582E12, 92.52722144335384], [1.63353612E12, 73.77063889651386]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353624E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63353534E12, "maxY": 61.39394678371989, "series": [{"data": [[1.63353618E12, 0.5382619121922392], [1.63353552E12, 0.36591292274124965], [1.63353558E12, 0.3470207844395275], [1.63353588E12, 0.2949099294809678], [1.63353594E12, 0.40273231344779625], [1.63353624E12, 0.0], [1.63353534E12, 61.39394678371989], [1.63353564E12, 0.3130533897185136], [1.6335357E12, 0.4041592831589097], [1.633536E12, 0.5664799728445352], [1.63353606E12, 0.5334081605704489], [1.6335354E12, 0.3560092218249825], [1.63353546E12, 0.5550957673208805], [1.63353576E12, 0.40835006693440784], [1.63353582E12, 0.3314139795714017], [1.63353612E12, 0.344633543782595]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353624E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.63353534E12, "maxY": 8668.0, "series": [{"data": [[1.63353618E12, 527.0], [1.63353552E12, 498.0], [1.63353558E12, 565.0], [1.63353588E12, 473.0], [1.63353594E12, 516.0], [1.63353624E12, 480.0], [1.63353534E12, 8668.0], [1.63353564E12, 443.0], [1.6335357E12, 466.0], [1.633536E12, 558.0], [1.63353606E12, 489.0], [1.6335354E12, 507.0], [1.63353546E12, 499.0], [1.63353576E12, 475.0], [1.63353582E12, 519.0], [1.63353612E12, 489.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63353618E12, 467.0], [1.63353552E12, 466.0], [1.63353558E12, 504.0], [1.63353588E12, 413.0], [1.63353594E12, 454.0], [1.63353624E12, 424.0], [1.63353534E12, 445.0], [1.63353564E12, 43.0], [1.6335357E12, 426.0], [1.633536E12, 452.0], [1.63353606E12, 453.0], [1.6335354E12, 436.0], [1.63353546E12, 405.0], [1.63353576E12, 406.0], [1.63353582E12, 455.9900000000016], [1.63353612E12, 437.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63353618E12, 515.0], [1.63353552E12, 496.9994727325429], [1.63353558E12, 563.0], [1.63353588E12, 471.9994727325429], [1.63353594E12, 485.0], [1.63353624E12, 478.9984181976288], [1.63353534E12, 491.0], [1.63353564E12, 59.0], [1.6335357E12, 463.9994727325429], [1.633536E12, 554.9989454650859], [1.63353606E12, 488.9994727325429], [1.6335354E12, 471.9994727325429], [1.63353546E12, 426.0], [1.63353576E12, 447.0], [1.63353582E12, 488.9994727325429], [1.63353612E12, 487.9978909301717]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63353618E12, 507.0], [1.63353552E12, 491.0], [1.63353558E12, 547.0], [1.63353588E12, 460.99930519103873], [1.63353594E12, 481.0], [1.63353624E12, 467.0], [1.63353534E12, 487.0], [1.63353564E12, 55.0], [1.6335357E12, 458.0], [1.633536E12, 549.0], [1.63353606E12, 485.0], [1.6335354E12, 465.0], [1.63353546E12, 417.0], [1.63353576E12, 442.0], [1.63353582E12, 482.99930519103873], [1.63353612E12, 457.99930519103873]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63353618E12, 4.0], [1.63353552E12, 4.0], [1.63353558E12, 5.0], [1.63353588E12, 5.0], [1.63353594E12, 4.0], [1.63353624E12, 4.0], [1.63353534E12, 4.0], [1.63353564E12, 5.0], [1.6335357E12, 5.0], [1.633536E12, 5.0], [1.63353606E12, 5.0], [1.6335354E12, 5.0], [1.63353546E12, 4.0], [1.63353576E12, 5.0], [1.63353582E12, 4.0], [1.63353612E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63353618E12, 28.0], [1.63353552E12, 28.0], [1.63353558E12, 25.0], [1.63353588E12, 27.0], [1.63353594E12, 27.0], [1.63353624E12, 24.0], [1.63353534E12, 27.0], [1.63353564E12, 22.0], [1.6335357E12, 27.0], [1.633536E12, 28.0], [1.63353606E12, 29.0], [1.6335354E12, 30.0], [1.63353546E12, 26.0], [1.63353576E12, 29.0], [1.63353582E12, 24.0], [1.63353612E12, 27.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353624E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 3.0, "maxY": 6276.0, "series": [{"data": [[3.0, 6.0], [6.0, 7.0], [8.0, 26.0], [13.0, 11.0], [22.0, 13.0], [23.0, 29.0], [24.0, 11.0], [31.0, 15.0], [35.0, 18.0], [41.0, 18.0], [47.0, 122.0], [52.0, 23.0], [53.0, 21.0], [59.0, 24.0], [69.0, 25.0], [75.0, 6276.0], [91.0, 22.0], [111.0, 28.0], [122.0, 18.0], [126.0, 53.0], [132.0, 25.0], [138.0, 54.0], [151.0, 26.0], [148.0, 22.0], [144.0, 25.0], [153.0, 21.0], [157.0, 21.0], [161.0, 21.0], [163.0, 24.0], [164.0, 22.0], [162.0, 69.0], [174.0, 20.5], [168.0, 21.0], [169.0, 20.0], [178.0, 26.0], [176.0, 72.0], [187.0, 122.0], [189.0, 20.0], [199.0, 66.0], [206.0, 23.0], [211.0, 21.5], [210.0, 22.0], [214.0, 19.0], [209.0, 66.0], [216.0, 20.0], [223.0, 46.0], [220.0, 120.5], [224.0, 64.0], [237.0, 146.0], [235.0, 13.0], [245.0, 140.0], [271.0, 96.0], [266.0, 38.0], [321.0, 22.0], [332.0, 24.0], [329.0, 21.0], [349.0, 25.0], [337.0, 23.0], [344.0, 19.0], [336.0, 22.0], [338.0, 23.0], [365.0, 34.0], [361.0, 20.0], [353.0, 21.0], [358.0, 114.5], [356.0, 84.0], [383.0, 21.0], [379.0, 103.0], [375.0, 22.0], [387.0, 23.0], [396.0, 20.0], [399.0, 111.0], [389.0, 21.0], [410.0, 21.0], [415.0, 93.0], [422.0, 21.0], [428.0, 71.0], [425.0, 21.0], [423.0, 18.0], [424.0, 166.5], [435.0, 24.0], [442.0, 114.0], [450.0, 23.0], [461.0, 20.0], [479.0, 20.0], [476.0, 117.0], [486.0, 20.0], [482.0, 129.0], [485.0, 23.0], [491.0, 20.0], [480.0, 21.0], [497.0, 21.0], [499.0, 24.0], [522.0, 22.0], [517.0, 21.0], [542.0, 21.0], [535.0, 22.0], [530.0, 50.0], [558.0, 121.5], [569.0, 21.0], [546.0, 23.0], [544.0, 20.0], [584.0, 22.0], [627.0, 23.0], [624.0, 22.0], [615.0, 21.0], [630.0, 21.0], [626.0, 144.0], [614.0, 23.0], [612.0, 191.0], [657.0, 33.0], [655.0, 22.0], [664.0, 21.0], [658.0, 21.0], [650.0, 21.0], [642.0, 22.0], [679.0, 20.0], [674.0, 21.0], [685.0, 21.0], [703.0, 20.0], [688.0, 22.0], [677.0, 22.0], [692.0, 20.5], [712.0, 20.0], [728.0, 161.0], [726.0, 23.0], [720.0, 20.0], [716.0, 21.0], [723.0, 23.0], [729.0, 21.0], [727.0, 22.0], [739.0, 21.0], [761.0, 22.0], [783.0, 82.0], [798.0, 165.0], [799.0, 191.0], [821.0, 199.0], [829.0, 236.0], [849.0, 139.5], [855.0, 184.0], [856.0, 37.0], [857.0, 21.0], [865.0, 206.0], [866.0, 24.0], [892.0, 22.0], [873.0, 24.0], [869.0, 23.0], [902.0, 182.0], [914.0, 22.0], [904.0, 230.0], [919.0, 23.0], [913.0, 21.0], [926.0, 18.0], [955.0, 21.0], [943.0, 22.0], [953.0, 24.0], [937.0, 24.0], [941.0, 23.0], [958.0, 23.0], [957.0, 19.0], [945.0, 23.0], [947.0, 22.0], [929.0, 27.0], [946.0, 22.0], [985.0, 21.0], [970.0, 22.0], [971.0, 20.0], [978.0, 21.0], [972.0, 21.0], [973.0, 21.0], [974.0, 21.0], [975.0, 22.0], [962.0, 22.0], [960.0, 23.0], [984.0, 21.0], [966.0, 26.0], [965.0, 23.0], [963.0, 22.0], [988.0, 22.0], [986.0, 21.0], [987.0, 22.0], [989.0, 22.0], [968.0, 22.0], [980.0, 22.0], [981.0, 22.0], [979.0, 21.0], [982.0, 23.0], [983.0, 22.0], [990.0, 22.0], [991.0, 22.0], [976.0, 22.0], [977.0, 23.0], [999.0, 22.0], [993.0, 21.0], [1005.0, 22.0], [1007.0, 22.0], [992.0, 21.0], [1004.0, 22.0], [1011.0, 21.0], [1013.0, 22.0], [1014.0, 22.0], [1015.0, 23.0], [1012.0, 22.0], [1003.0, 22.0], [1002.0, 22.0], [1001.0, 22.0], [1000.0, 22.0], [1008.0, 22.0], [1022.0, 21.0], [1019.0, 20.0], [1016.0, 23.0], [1017.0, 22.0], [1018.0, 23.0], [1010.0, 22.0], [1009.0, 21.0], [998.0, 22.0], [997.0, 22.0], [994.0, 22.0], [995.0, 22.0], [996.0, 22.0], [1006.0, 22.0], [1065.0, 280.0], [1048.0, 21.0], [1046.0, 22.0], [1025.0, 37.0], [1050.0, 23.0], [1074.0, 24.0], [1118.0, 228.0], [1116.0, 157.5], [1111.0, 24.0], [1090.0, 24.0], [1152.0, 28.0], [1158.0, 28.0], [1190.0, 91.0], [1170.0, 218.5], [1198.0, 213.0], [1156.0, 24.0], [1268.0, 27.0], [1221.0, 43.5], [1262.0, 313.5], [1251.0, 244.0], [1245.0, 27.0], [1253.0, 244.0], [1243.0, 26.0], [1217.0, 28.0], [1216.0, 126.0], [1332.0, 301.0], [1335.0, 30.0], [1294.0, 334.5], [1299.0, 32.0], [1287.0, 228.0], [1319.0, 29.0], [1325.0, 139.0], [1288.0, 235.0], [1399.0, 284.0], [1393.0, 57.0], [1376.0, 37.0], [1381.0, 27.0], [1380.0, 101.0], [1372.0, 33.0], [1355.0, 24.0], [1362.0, 26.0], [1388.0, 28.0], [1409.0, 27.0], [1437.0, 264.0], [1464.0, 372.5], [1415.0, 265.0], [1428.0, 28.0], [1425.0, 198.0], [1463.0, 163.0], [1442.0, 187.0], [1435.0, 34.0], [1502.0, 268.0], [1514.0, 30.0], [1478.0, 31.0], [1583.0, 39.0], [1594.0, 66.0], [1567.0, 71.0], [1581.0, 365.0], [1596.0, 183.0], [1563.0, 65.0], [1645.0, 111.0], [1630.0, 45.0], [1611.0, 224.0], [1660.0, 94.0], [1656.0, 79.0], [1626.0, 96.0], [1664.0, 128.0], [1679.0, 270.0], [1694.0, 45.0], [1669.0, 107.0], [1702.0, 122.0], [1676.0, 116.0], [1682.0, 262.5], [1714.0, 255.0], [1724.0, 97.5], [1672.0, 226.5], [1781.0, 174.0], [1729.0, 142.0], [1782.0, 271.0], [1783.0, 243.0], [1786.0, 146.5], [1762.0, 245.0], [1777.0, 266.0], [1757.0, 161.0], [1767.0, 190.0], [1802.0, 219.0], [1850.0, 235.0], [1809.0, 88.0], [1831.0, 221.0], [1833.0, 160.0], [1855.0, 255.0], [1800.0, 216.0], [1805.0, 236.0], [1807.0, 170.0], [1846.0, 234.5], [1844.0, 158.0], [1792.0, 211.0], [1823.0, 236.0], [1904.0, 228.0], [1905.0, 177.0], [1899.0, 91.0], [1918.0, 208.5], [1879.0, 202.0], [1889.0, 259.0], [1862.0, 223.0], [1870.0, 275.0], [1856.0, 255.5], [1968.0, 237.5], [1921.0, 206.0], [1940.0, 232.0], [1974.0, 235.0], [1965.0, 217.0], [1964.0, 234.5], [1983.0, 225.0], [1977.0, 203.0], [1954.0, 212.0], [1957.0, 258.0], [1972.0, 170.0], [1925.0, 239.0], [1951.0, 207.0], [1923.0, 76.0], [1935.0, 216.0], [1942.0, 230.0], [2012.0, 195.0], [2027.0, 218.0], [2031.0, 238.0], [2007.0, 186.0], [2004.0, 264.0], [2000.0, 101.0], [2010.0, 295.0], [2011.0, 109.0], [1998.0, 197.0], [2034.0, 208.0], [2033.0, 75.0], [1990.0, 190.0], [1992.0, 193.0], [1997.0, 216.0], [1995.0, 217.0], [1994.0, 93.0], [1993.0, 185.5], [2035.0, 196.0], [2043.0, 205.0], [2042.0, 278.0], [2016.0, 275.0], [2025.0, 257.0], [2026.0, 204.0], [2021.0, 183.0], [2017.0, 223.0], [2015.0, 87.0], [2014.0, 226.0], [1987.0, 211.0], [2072.0, 202.5], [2102.0, 240.0], [2112.0, 243.0], [2080.0, 198.5], [2116.0, 247.0], [2122.0, 222.0], [2096.0, 262.0], [2068.0, 210.0], [2126.0, 212.0], [2048.0, 241.0], [2052.0, 250.0], [2062.0, 213.5], [2060.0, 169.0], [2054.0, 202.0], [2232.0, 257.5], [2067.0, 113.0], [2123.0, 207.0], [2113.0, 232.0], [2083.0, 259.0], [2149.0, 232.0], [2141.0, 227.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2232.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 3.0, "maxY": 6258.0, "series": [{"data": [[3.0, 6.0], [6.0, 7.0], [8.0, 25.5], [13.0, 11.0], [22.0, 12.0], [23.0, 28.0], [24.0, 10.0], [31.0, 15.0], [35.0, 18.0], [41.0, 18.0], [47.0, 122.0], [52.0, 22.5], [53.0, 21.0], [59.0, 24.0], [69.0, 25.0], [75.0, 6258.0], [91.0, 22.0], [111.0, 28.0], [122.0, 18.0], [126.0, 53.0], [132.0, 25.0], [138.0, 54.0], [151.0, 26.0], [148.0, 21.5], [144.0, 24.5], [153.0, 21.0], [157.0, 21.0], [161.0, 21.0], [163.0, 24.0], [164.0, 22.0], [162.0, 69.0], [174.0, 20.0], [168.0, 21.0], [169.0, 20.0], [178.0, 26.0], [176.0, 71.5], [187.0, 122.0], [189.0, 20.0], [199.0, 66.0], [206.0, 23.0], [211.0, 21.0], [210.0, 21.5], [214.0, 19.0], [209.0, 66.0], [216.0, 19.5], [223.0, 46.0], [220.0, 120.5], [224.0, 64.0], [237.0, 146.0], [235.0, 13.0], [245.0, 140.0], [271.0, 95.0], [266.0, 38.0], [321.0, 22.0], [332.0, 24.0], [329.0, 21.0], [349.0, 25.0], [337.0, 23.0], [344.0, 19.0], [336.0, 22.0], [338.0, 22.5], [365.0, 34.0], [361.0, 20.0], [353.0, 21.0], [358.0, 114.5], [356.0, 84.0], [383.0, 21.0], [379.0, 103.0], [375.0, 22.0], [387.0, 23.0], [396.0, 20.0], [399.0, 111.0], [389.0, 21.0], [410.0, 21.0], [415.0, 93.0], [422.0, 20.5], [428.0, 70.0], [425.0, 21.0], [423.0, 18.0], [424.0, 166.5], [435.0, 24.0], [442.0, 114.0], [450.0, 23.0], [461.0, 20.0], [479.0, 20.0], [476.0, 117.0], [486.0, 20.0], [482.0, 129.0], [485.0, 22.0], [491.0, 20.0], [480.0, 21.0], [497.0, 21.0], [499.0, 24.0], [522.0, 22.0], [517.0, 21.0], [542.0, 21.0], [535.0, 22.0], [530.0, 50.0], [558.0, 121.0], [569.0, 21.0], [546.0, 23.0], [544.0, 19.5], [584.0, 22.0], [627.0, 23.0], [624.0, 22.0], [615.0, 21.0], [630.0, 20.5], [626.0, 144.0], [614.0, 23.0], [612.0, 190.5], [657.0, 33.0], [655.0, 22.0], [664.0, 21.0], [658.0, 21.0], [650.0, 21.0], [642.0, 22.0], [679.0, 20.0], [674.0, 21.0], [685.0, 21.0], [703.0, 20.0], [688.0, 22.0], [677.0, 21.0], [692.0, 20.0], [712.0, 20.0], [728.0, 160.0], [726.0, 23.0], [720.0, 20.0], [716.0, 21.0], [723.0, 23.0], [729.0, 21.0], [727.0, 22.0], [739.0, 20.0], [761.0, 22.0], [783.0, 82.0], [798.0, 165.0], [799.0, 190.0], [821.0, 199.0], [829.0, 236.0], [849.0, 121.0], [855.0, 184.0], [856.0, 37.0], [857.0, 21.0], [865.0, 205.0], [866.0, 24.0], [892.0, 22.0], [873.0, 23.0], [869.0, 23.0], [902.0, 182.0], [914.0, 22.0], [904.0, 230.0], [919.0, 23.0], [913.0, 21.0], [926.0, 17.5], [955.0, 21.0], [943.0, 22.0], [953.0, 24.0], [937.0, 24.0], [941.0, 23.0], [958.0, 23.0], [957.0, 19.0], [945.0, 23.0], [947.0, 22.0], [929.0, 27.0], [946.0, 21.0], [985.0, 21.0], [970.0, 22.0], [971.0, 20.0], [978.0, 20.0], [972.0, 21.0], [973.0, 20.0], [974.0, 21.0], [975.0, 22.0], [962.0, 22.0], [960.0, 23.0], [984.0, 21.0], [966.0, 26.0], [965.0, 23.0], [963.0, 22.0], [988.0, 22.0], [986.0, 21.0], [987.0, 22.0], [989.0, 22.0], [968.0, 22.0], [980.0, 22.0], [981.0, 21.0], [979.0, 21.0], [982.0, 23.0], [983.0, 21.0], [990.0, 22.0], [991.0, 22.0], [976.0, 22.0], [977.0, 23.0], [999.0, 22.0], [993.0, 21.0], [1005.0, 22.0], [1007.0, 22.0], [992.0, 21.0], [1004.0, 22.0], [1011.0, 21.0], [1013.0, 21.5], [1014.0, 22.0], [1015.0, 22.0], [1012.0, 22.0], [1003.0, 21.0], [1002.0, 22.0], [1001.0, 22.0], [1000.0, 22.0], [1008.0, 22.0], [1022.0, 21.0], [1019.0, 20.0], [1016.0, 23.0], [1017.0, 22.0], [1018.0, 22.0], [1010.0, 22.0], [1009.0, 21.0], [998.0, 22.0], [997.0, 22.0], [994.0, 22.0], [995.0, 22.0], [996.0, 22.0], [1006.0, 22.0], [1065.0, 280.0], [1048.0, 21.0], [1046.0, 22.0], [1025.0, 37.0], [1050.0, 23.0], [1074.0, 24.0], [1118.0, 228.0], [1116.0, 157.0], [1111.0, 23.0], [1090.0, 24.0], [1152.0, 28.0], [1158.0, 28.0], [1190.0, 90.5], [1170.0, 218.0], [1198.0, 213.0], [1156.0, 24.0], [1268.0, 27.0], [1221.0, 43.0], [1262.0, 313.5], [1251.0, 244.0], [1245.0, 27.0], [1253.0, 244.0], [1243.0, 26.0], [1217.0, 28.0], [1216.0, 126.0], [1332.0, 301.0], [1335.0, 29.0], [1294.0, 334.5], [1299.0, 32.0], [1287.0, 228.0], [1319.0, 29.0], [1325.0, 138.0], [1288.0, 235.0], [1399.0, 284.0], [1393.0, 42.0], [1376.0, 37.0], [1381.0, 27.0], [1380.0, 101.0], [1372.0, 33.0], [1355.0, 24.0], [1362.0, 26.0], [1388.0, 28.0], [1409.0, 27.0], [1437.0, 264.0], [1464.0, 372.0], [1415.0, 265.0], [1428.0, 28.0], [1425.0, 197.0], [1463.0, 163.0], [1442.0, 187.0], [1435.0, 33.0], [1502.0, 268.0], [1514.0, 30.0], [1478.0, 31.0], [1583.0, 39.0], [1594.0, 66.0], [1567.0, 71.0], [1581.0, 365.0], [1596.0, 183.0], [1563.0, 65.0], [1645.0, 110.0], [1630.0, 45.0], [1611.0, 224.0], [1660.0, 94.0], [1656.0, 78.5], [1626.0, 96.0], [1664.0, 127.5], [1679.0, 270.0], [1694.0, 45.0], [1669.0, 107.0], [1702.0, 122.0], [1676.0, 115.5], [1682.0, 261.5], [1714.0, 255.0], [1724.0, 97.5], [1672.0, 226.0], [1781.0, 174.0], [1729.0, 142.0], [1782.0, 271.0], [1783.0, 243.0], [1786.0, 146.5], [1762.0, 245.0], [1777.0, 266.0], [1757.0, 161.0], [1767.0, 190.0], [1802.0, 219.0], [1850.0, 235.0], [1809.0, 88.0], [1831.0, 221.0], [1833.0, 160.0], [1855.0, 255.0], [1800.0, 216.0], [1805.0, 236.0], [1807.0, 170.0], [1846.0, 234.0], [1844.0, 158.0], [1792.0, 211.0], [1823.0, 236.0], [1904.0, 228.0], [1905.0, 177.0], [1899.0, 91.0], [1918.0, 208.0], [1879.0, 201.5], [1889.0, 259.0], [1862.0, 223.0], [1870.0, 274.0], [1856.0, 255.0], [1968.0, 237.0], [1921.0, 206.0], [1940.0, 232.0], [1974.0, 234.5], [1965.0, 217.0], [1964.0, 234.5], [1983.0, 225.0], [1977.0, 203.0], [1954.0, 212.0], [1957.0, 258.0], [1972.0, 170.0], [1925.0, 239.0], [1951.0, 206.0], [1923.0, 76.0], [1935.0, 216.0], [1942.0, 230.0], [2012.0, 195.0], [2027.0, 218.0], [2031.0, 237.0], [2007.0, 185.0], [2004.0, 264.0], [2000.0, 100.0], [2010.0, 294.5], [2011.0, 108.0], [1998.0, 197.0], [2034.0, 208.0], [2033.0, 75.0], [1990.0, 190.0], [1992.0, 193.0], [1997.0, 216.0], [1995.0, 217.0], [1994.0, 92.0], [1993.0, 185.0], [2035.0, 196.0], [2043.0, 205.0], [2042.0, 278.0], [2016.0, 275.0], [2025.0, 256.0], [2026.0, 204.0], [2021.0, 183.0], [2017.0, 223.0], [2015.0, 86.0], [2014.0, 226.0], [1987.0, 211.0], [2072.0, 202.5], [2102.0, 240.0], [2112.0, 243.0], [2080.0, 198.5], [2116.0, 247.0], [2122.0, 222.0], [2096.0, 262.0], [2068.0, 210.0], [2126.0, 211.0], [2048.0, 241.0], [2052.0, 250.0], [2062.0, 213.0], [2060.0, 169.0], [2054.0, 202.0], [2232.0, 257.0], [2067.0, 112.0], [2123.0, 206.0], [2113.0, 232.0], [2083.0, 259.0], [2149.0, 231.0], [2141.0, 227.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2232.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 450.48333333333335, "minX": 1.63353534E12, "maxY": 1010.0, "series": [{"data": [[1.63353618E12, 996.95], [1.63353552E12, 997.6333333333333], [1.63353558E12, 986.3166666666667], [1.63353588E12, 997.2833333333333], [1.63353594E12, 997.6166666666667], [1.63353624E12, 450.48333333333335], [1.63353534E12, 615.1], [1.63353564E12, 1009.3666666666667], [1.6335357E12, 996.65], [1.633536E12, 982.0], [1.63353606E12, 1010.0], [1.6335354E12, 998.25], [1.63353546E12, 997.6166666666667], [1.63353576E12, 996.6833333333333], [1.63353582E12, 998.2], [1.63353612E12, 989.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353624E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 451.21666666666664, "minX": 1.63353534E12, "maxY": 1014.7166666666667, "series": [{"data": [[1.63353618E12, 1014.7166666666667], [1.63353552E12, 1008.3], [1.63353558E12, 987.1166666666667], [1.63353588E12, 997.3666666666667], [1.63353594E12, 997.9333333333333], [1.63353624E12, 451.21666666666664], [1.63353534E12, 615.1], [1.63353564E12, 1008.9333333333333], [1.6335357E12, 996.9666666666667], [1.633536E12, 982.0], [1.63353606E12, 1009.7333333333333], [1.6335354E12, 997.6333333333333], [1.63353546E12, 986.7666666666667], [1.63353576E12, 996.0], [1.63353582E12, 998.6], [1.63353612E12, 971.4666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353624E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 451.21666666666664, "minX": 1.63353534E12, "maxY": 1014.7166666666667, "series": [{"data": [[1.63353618E12, 1014.7166666666667], [1.63353552E12, 1008.3], [1.63353558E12, 987.1166666666667], [1.63353588E12, 997.3666666666667], [1.63353594E12, 997.9333333333333], [1.63353624E12, 451.21666666666664], [1.63353534E12, 615.1], [1.63353564E12, 1008.9333333333333], [1.6335357E12, 996.9666666666667], [1.633536E12, 982.0], [1.63353606E12, 1009.7333333333333], [1.6335354E12, 997.6333333333333], [1.63353546E12, 986.7666666666667], [1.63353576E12, 996.0], [1.63353582E12, 998.6], [1.63353612E12, 971.4666666666667]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353624E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 451.21666666666664, "minX": 1.63353534E12, "maxY": 1014.7166666666667, "series": [{"data": [[1.63353618E12, 1014.7166666666667], [1.63353552E12, 1008.3], [1.63353558E12, 987.1166666666667], [1.63353588E12, 997.3666666666667], [1.63353594E12, 997.9333333333333], [1.63353624E12, 451.21666666666664], [1.63353534E12, 615.1], [1.63353564E12, 1008.9333333333333], [1.6335357E12, 996.9666666666667], [1.633536E12, 982.0], [1.63353606E12, 1009.7333333333333], [1.6335354E12, 997.6333333333333], [1.63353546E12, 986.7666666666667], [1.63353576E12, 996.0], [1.63353582E12, 998.6], [1.63353612E12, 971.4666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353624E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

