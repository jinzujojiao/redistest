/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1070.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 6.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 12.0], [10.7, 12.0], [10.8, 12.0], [10.9, 12.0], [11.0, 12.0], [11.1, 12.0], [11.2, 12.0], [11.3, 12.0], [11.4, 12.0], [11.5, 12.0], [11.6, 12.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 13.0], [12.8, 13.0], [12.9, 13.0], [13.0, 13.0], [13.1, 13.0], [13.2, 13.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 13.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 14.0], [15.6, 14.0], [15.7, 14.0], [15.8, 14.0], [15.9, 14.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 15.0], [18.1, 15.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 16.0], [18.9, 16.0], [19.0, 16.0], [19.1, 16.0], [19.2, 16.0], [19.3, 16.0], [19.4, 16.0], [19.5, 16.0], [19.6, 16.0], [19.7, 16.0], [19.8, 16.0], [19.9, 16.0], [20.0, 16.0], [20.1, 16.0], [20.2, 16.0], [20.3, 16.0], [20.4, 16.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 17.0], [21.3, 17.0], [21.4, 17.0], [21.5, 17.0], [21.6, 17.0], [21.7, 17.0], [21.8, 17.0], [21.9, 17.0], [22.0, 17.0], [22.1, 17.0], [22.2, 17.0], [22.3, 17.0], [22.4, 17.0], [22.5, 17.0], [22.6, 17.0], [22.7, 17.0], [22.8, 17.0], [22.9, 17.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 18.0], [23.7, 18.0], [23.8, 18.0], [23.9, 18.0], [24.0, 18.0], [24.1, 18.0], [24.2, 18.0], [24.3, 18.0], [24.4, 18.0], [24.5, 18.0], [24.6, 18.0], [24.7, 18.0], [24.8, 18.0], [24.9, 18.0], [25.0, 18.0], [25.1, 18.0], [25.2, 18.0], [25.3, 18.0], [25.4, 18.0], [25.5, 19.0], [25.6, 19.0], [25.7, 19.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 19.0], [26.5, 19.0], [26.6, 19.0], [26.7, 19.0], [26.8, 19.0], [26.9, 19.0], [27.0, 19.0], [27.1, 19.0], [27.2, 19.0], [27.3, 19.0], [27.4, 19.0], [27.5, 19.0], [27.6, 19.0], [27.7, 19.0], [27.8, 19.0], [27.9, 19.0], [28.0, 19.0], [28.1, 19.0], [28.2, 20.0], [28.3, 20.0], [28.4, 20.0], [28.5, 20.0], [28.6, 20.0], [28.7, 20.0], [28.8, 20.0], [28.9, 20.0], [29.0, 20.0], [29.1, 20.0], [29.2, 20.0], [29.3, 20.0], [29.4, 20.0], [29.5, 20.0], [29.6, 20.0], [29.7, 20.0], [29.8, 20.0], [29.9, 20.0], [30.0, 20.0], [30.1, 20.0], [30.2, 20.0], [30.3, 20.0], [30.4, 20.0], [30.5, 20.0], [30.6, 20.0], [30.7, 20.0], [30.8, 20.0], [30.9, 21.0], [31.0, 21.0], [31.1, 21.0], [31.2, 21.0], [31.3, 21.0], [31.4, 21.0], [31.5, 21.0], [31.6, 21.0], [31.7, 21.0], [31.8, 21.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 21.0], [32.8, 21.0], [32.9, 21.0], [33.0, 21.0], [33.1, 21.0], [33.2, 21.0], [33.3, 21.0], [33.4, 21.0], [33.5, 21.0], [33.6, 21.0], [33.7, 21.0], [33.8, 22.0], [33.9, 22.0], [34.0, 22.0], [34.1, 22.0], [34.2, 22.0], [34.3, 22.0], [34.4, 22.0], [34.5, 22.0], [34.6, 22.0], [34.7, 22.0], [34.8, 22.0], [34.9, 22.0], [35.0, 22.0], [35.1, 22.0], [35.2, 22.0], [35.3, 22.0], [35.4, 22.0], [35.5, 22.0], [35.6, 22.0], [35.7, 22.0], [35.8, 22.0], [35.9, 22.0], [36.0, 22.0], [36.1, 22.0], [36.2, 22.0], [36.3, 22.0], [36.4, 22.0], [36.5, 22.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 23.0], [37.6, 23.0], [37.7, 23.0], [37.8, 23.0], [37.9, 23.0], [38.0, 23.0], [38.1, 23.0], [38.2, 23.0], [38.3, 23.0], [38.4, 23.0], [38.5, 23.0], [38.6, 23.0], [38.7, 23.0], [38.8, 23.0], [38.9, 23.0], [39.0, 23.0], [39.1, 23.0], [39.2, 23.0], [39.3, 23.0], [39.4, 23.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 25.0], [42.5, 25.0], [42.6, 25.0], [42.7, 25.0], [42.8, 25.0], [42.9, 25.0], [43.0, 25.0], [43.1, 25.0], [43.2, 25.0], [43.3, 25.0], [43.4, 25.0], [43.5, 25.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 26.0], [45.3, 26.0], [45.4, 26.0], [45.5, 26.0], [45.6, 26.0], [45.7, 26.0], [45.8, 26.0], [45.9, 26.0], [46.0, 26.0], [46.1, 26.0], [46.2, 26.0], [46.3, 26.0], [46.4, 26.0], [46.5, 26.0], [46.6, 26.0], [46.7, 26.0], [46.8, 26.0], [46.9, 26.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 26.0], [47.5, 26.0], [47.6, 26.0], [47.7, 26.0], [47.8, 26.0], [47.9, 26.0], [48.0, 26.0], [48.1, 27.0], [48.2, 27.0], [48.3, 27.0], [48.4, 27.0], [48.5, 27.0], [48.6, 27.0], [48.7, 27.0], [48.8, 27.0], [48.9, 27.0], [49.0, 27.0], [49.1, 27.0], [49.2, 27.0], [49.3, 27.0], [49.4, 27.0], [49.5, 27.0], [49.6, 27.0], [49.7, 27.0], [49.8, 27.0], [49.9, 27.0], [50.0, 27.0], [50.1, 27.0], [50.2, 27.0], [50.3, 27.0], [50.4, 27.0], [50.5, 27.0], [50.6, 27.0], [50.7, 27.0], [50.8, 28.0], [50.9, 28.0], [51.0, 28.0], [51.1, 28.0], [51.2, 28.0], [51.3, 28.0], [51.4, 28.0], [51.5, 28.0], [51.6, 28.0], [51.7, 28.0], [51.8, 28.0], [51.9, 28.0], [52.0, 28.0], [52.1, 28.0], [52.2, 28.0], [52.3, 28.0], [52.4, 28.0], [52.5, 28.0], [52.6, 28.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 28.0], [53.2, 28.0], [53.3, 28.0], [53.4, 28.0], [53.5, 29.0], [53.6, 29.0], [53.7, 29.0], [53.8, 29.0], [53.9, 29.0], [54.0, 29.0], [54.1, 29.0], [54.2, 29.0], [54.3, 29.0], [54.4, 29.0], [54.5, 29.0], [54.6, 29.0], [54.7, 29.0], [54.8, 29.0], [54.9, 29.0], [55.0, 29.0], [55.1, 29.0], [55.2, 29.0], [55.3, 29.0], [55.4, 29.0], [55.5, 29.0], [55.6, 29.0], [55.7, 29.0], [55.8, 29.0], [55.9, 29.0], [56.0, 30.0], [56.1, 30.0], [56.2, 30.0], [56.3, 30.0], [56.4, 30.0], [56.5, 30.0], [56.6, 30.0], [56.7, 30.0], [56.8, 30.0], [56.9, 30.0], [57.0, 30.0], [57.1, 30.0], [57.2, 30.0], [57.3, 30.0], [57.4, 30.0], [57.5, 30.0], [57.6, 30.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 30.0], [58.2, 30.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 31.0], [59.7, 31.0], [59.8, 31.0], [59.9, 31.0], [60.0, 31.0], [60.1, 31.0], [60.2, 31.0], [60.3, 31.0], [60.4, 31.0], [60.5, 32.0], [60.6, 32.0], [60.7, 32.0], [60.8, 32.0], [60.9, 32.0], [61.0, 32.0], [61.1, 32.0], [61.2, 32.0], [61.3, 32.0], [61.4, 32.0], [61.5, 32.0], [61.6, 32.0], [61.7, 32.0], [61.8, 32.0], [61.9, 32.0], [62.0, 32.0], [62.1, 32.0], [62.2, 32.0], [62.3, 32.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 33.0], [63.0, 33.0], [63.1, 33.0], [63.2, 33.0], [63.3, 33.0], [63.4, 33.0], [63.5, 33.0], [63.6, 33.0], [63.7, 33.0], [63.8, 33.0], [63.9, 33.0], [64.0, 33.0], [64.1, 33.0], [64.2, 34.0], [64.3, 34.0], [64.4, 34.0], [64.5, 34.0], [64.6, 34.0], [64.7, 34.0], [64.8, 34.0], [64.9, 34.0], [65.0, 34.0], [65.1, 34.0], [65.2, 34.0], [65.3, 34.0], [65.4, 34.0], [65.5, 34.0], [65.6, 35.0], [65.7, 35.0], [65.8, 35.0], [65.9, 35.0], [66.0, 35.0], [66.1, 35.0], [66.2, 35.0], [66.3, 35.0], [66.4, 35.0], [66.5, 35.0], [66.6, 35.0], [66.7, 35.0], [66.8, 36.0], [66.9, 36.0], [67.0, 36.0], [67.1, 36.0], [67.2, 36.0], [67.3, 36.0], [67.4, 36.0], [67.5, 36.0], [67.6, 36.0], [67.7, 36.0], [67.8, 37.0], [67.9, 37.0], [68.0, 37.0], [68.1, 37.0], [68.2, 37.0], [68.3, 37.0], [68.4, 37.0], [68.5, 38.0], [68.6, 38.0], [68.7, 38.0], [68.8, 38.0], [68.9, 38.0], [69.0, 38.0], [69.1, 39.0], [69.2, 39.0], [69.3, 39.0], [69.4, 39.0], [69.5, 40.0], [69.6, 40.0], [69.7, 40.0], [69.8, 40.0], [69.9, 41.0], [70.0, 41.0], [70.1, 42.0], [70.2, 42.0], [70.3, 43.0], [70.4, 44.0], [70.5, 45.0], [70.6, 46.0], [70.7, 48.0], [70.8, 49.0], [70.9, 51.0], [71.0, 53.0], [71.1, 54.0], [71.2, 55.0], [71.3, 57.0], [71.4, 58.0], [71.5, 60.0], [71.6, 61.0], [71.7, 63.0], [71.8, 64.0], [71.9, 66.0], [72.0, 68.0], [72.1, 69.0], [72.2, 71.0], [72.3, 73.0], [72.4, 74.0], [72.5, 76.0], [72.6, 78.0], [72.7, 80.0], [72.8, 82.0], [72.9, 84.0], [73.0, 85.0], [73.1, 87.0], [73.2, 89.0], [73.3, 91.0], [73.4, 92.0], [73.5, 94.0], [73.6, 96.0], [73.7, 98.0], [73.8, 100.0], [73.9, 102.0], [74.0, 104.0], [74.1, 106.0], [74.2, 107.0], [74.3, 109.0], [74.4, 111.0], [74.5, 113.0], [74.6, 115.0], [74.7, 117.0], [74.8, 118.0], [74.9, 120.0], [75.0, 122.0], [75.1, 123.0], [75.2, 125.0], [75.3, 126.0], [75.4, 128.0], [75.5, 129.0], [75.6, 130.0], [75.7, 132.0], [75.8, 133.0], [75.9, 135.0], [76.0, 136.0], [76.1, 137.0], [76.2, 139.0], [76.3, 140.0], [76.4, 141.0], [76.5, 143.0], [76.6, 144.0], [76.7, 146.0], [76.8, 147.0], [76.9, 149.0], [77.0, 150.0], [77.1, 152.0], [77.2, 153.0], [77.3, 155.0], [77.4, 156.0], [77.5, 157.0], [77.6, 159.0], [77.7, 160.0], [77.8, 161.0], [77.9, 163.0], [78.0, 164.0], [78.1, 165.0], [78.2, 166.0], [78.3, 167.0], [78.4, 169.0], [78.5, 170.0], [78.6, 171.0], [78.7, 172.0], [78.8, 173.0], [78.9, 175.0], [79.0, 176.0], [79.1, 177.0], [79.2, 178.0], [79.3, 179.0], [79.4, 181.0], [79.5, 182.0], [79.6, 183.0], [79.7, 184.0], [79.8, 186.0], [79.9, 187.0], [80.0, 188.0], [80.1, 190.0], [80.2, 191.0], [80.3, 192.0], [80.4, 194.0], [80.5, 195.0], [80.6, 196.0], [80.7, 198.0], [80.8, 199.0], [80.9, 200.0], [81.0, 201.0], [81.1, 203.0], [81.2, 204.0], [81.3, 205.0], [81.4, 206.0], [81.5, 208.0], [81.6, 209.0], [81.7, 210.0], [81.8, 211.0], [81.9, 213.0], [82.0, 214.0], [82.1, 215.0], [82.2, 216.0], [82.3, 218.0], [82.4, 219.0], [82.5, 220.0], [82.6, 221.0], [82.7, 223.0], [82.8, 224.0], [82.9, 225.0], [83.0, 227.0], [83.1, 228.0], [83.2, 229.0], [83.3, 231.0], [83.4, 232.0], [83.5, 233.0], [83.6, 234.0], [83.7, 236.0], [83.8, 237.0], [83.9, 238.0], [84.0, 239.0], [84.1, 241.0], [84.2, 242.0], [84.3, 243.0], [84.4, 245.0], [84.5, 246.0], [84.6, 247.0], [84.7, 248.0], [84.8, 250.0], [84.9, 251.0], [85.0, 252.0], [85.1, 254.0], [85.2, 255.0], [85.3, 256.0], [85.4, 257.0], [85.5, 259.0], [85.6, 260.0], [85.7, 261.0], [85.8, 262.0], [85.9, 264.0], [86.0, 265.0], [86.1, 266.0], [86.2, 268.0], [86.3, 269.0], [86.4, 270.0], [86.5, 271.0], [86.6, 272.0], [86.7, 274.0], [86.8, 275.0], [86.9, 276.0], [87.0, 277.0], [87.1, 279.0], [87.2, 280.0], [87.3, 281.0], [87.4, 282.0], [87.5, 284.0], [87.6, 285.0], [87.7, 286.0], [87.8, 288.0], [87.9, 289.0], [88.0, 290.0], [88.1, 292.0], [88.2, 293.0], [88.3, 294.0], [88.4, 295.0], [88.5, 297.0], [88.6, 298.0], [88.7, 299.0], [88.8, 301.0], [88.9, 302.0], [89.0, 303.0], [89.1, 304.0], [89.2, 306.0], [89.3, 307.0], [89.4, 308.0], [89.5, 309.0], [89.6, 310.0], [89.7, 312.0], [89.8, 313.0], [89.9, 314.0], [90.0, 315.0], [90.1, 316.0], [90.2, 318.0], [90.3, 319.0], [90.4, 320.0], [90.5, 322.0], [90.6, 323.0], [90.7, 325.0], [90.8, 326.0], [90.9, 327.0], [91.0, 329.0], [91.1, 330.0], [91.2, 331.0], [91.3, 332.0], [91.4, 334.0], [91.5, 335.0], [91.6, 336.0], [91.7, 337.0], [91.8, 339.0], [91.9, 340.0], [92.0, 341.0], [92.1, 343.0], [92.2, 344.0], [92.3, 345.0], [92.4, 347.0], [92.5, 348.0], [92.6, 349.0], [92.7, 350.0], [92.8, 352.0], [92.9, 353.0], [93.0, 354.0], [93.1, 355.0], [93.2, 357.0], [93.3, 358.0], [93.4, 359.0], [93.5, 361.0], [93.6, 362.0], [93.7, 364.0], [93.8, 365.0], [93.9, 366.0], [94.0, 368.0], [94.1, 369.0], [94.2, 371.0], [94.3, 372.0], [94.4, 373.0], [94.5, 375.0], [94.6, 376.0], [94.7, 377.0], [94.8, 379.0], [94.9, 380.0], [95.0, 381.0], [95.1, 383.0], [95.2, 384.0], [95.3, 385.0], [95.4, 387.0], [95.5, 388.0], [95.6, 389.0], [95.7, 391.0], [95.8, 392.0], [95.9, 394.0], [96.0, 395.0], [96.1, 397.0], [96.2, 398.0], [96.3, 399.0], [96.4, 401.0], [96.5, 403.0], [96.6, 404.0], [96.7, 406.0], [96.8, 407.0], [96.9, 409.0], [97.0, 411.0], [97.1, 412.0], [97.2, 414.0], [97.3, 416.0], [97.4, 417.0], [97.5, 419.0], [97.6, 421.0], [97.7, 423.0], [97.8, 425.0], [97.9, 427.0], [98.0, 429.0], [98.1, 431.0], [98.2, 433.0], [98.3, 435.0], [98.4, 438.0], [98.5, 441.0], [98.6, 444.0], [98.7, 447.0], [98.8, 450.0], [98.9, 453.0], [99.0, 456.0], [99.1, 459.0], [99.2, 463.0], [99.3, 467.0], [99.4, 471.0], [99.5, 476.0], [99.6, 484.0], [99.7, 493.0], [99.8, 505.0], [99.9, 533.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 662825.0, "series": [{"data": [[0.0, 662825.0], [300.0, 68128.0], [600.0, 220.0], [100.0, 63392.0], [200.0, 70657.0], [400.0, 31093.0], [500.0, 1881.0], [1000.0, 29.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2055.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 896170.0, "series": [{"data": [[0.0, 896170.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2055.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1166.7885154775822, "minX": 1.63342248E12, "maxY": 1200.0, "series": [{"data": [[1.63342254E12, 1200.0], [1.63342284E12, 1200.0], [1.63342314E12, 1200.0], [1.63342248E12, 1166.7885154775822], [1.63342278E12, 1200.0], [1.63342308E12, 1200.0], [1.63342338E12, 1191.8901948374819], [1.63342272E12, 1200.0], [1.63342302E12, 1200.0], [1.63342332E12, 1200.0], [1.63342266E12, 1200.0], [1.63342296E12, 1200.0], [1.63342326E12, 1200.0], [1.6334226E12, 1200.0], [1.6334229E12, 1200.0], [1.6334232E12, 1200.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63342338E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 324.0, "maxY": 302.5, "series": [{"data": [[324.0, 90.0], [325.0, 121.11764705882354], [338.0, 163.0], [339.0, 197.0], [340.0, 177.33333333333334], [344.0, 196.0], [345.0, 201.625], [346.0, 190.5], [348.0, 198.46666666666667], [349.0, 199.8421052631579], [351.0, 218.875], [353.0, 232.16666666666669], [352.0, 230.13953488372096], [367.0, 225.25], [366.0, 241.33333333333334], [364.0, 250.6], [361.0, 237.25], [360.0, 235.33333333333334], [357.0, 243.0], [355.0, 253.0], [354.0, 239.5], [369.0, 284.0], [368.0, 247.75], [370.0, 249.66666666666666], [372.0, 276.0], [373.0, 252.0], [374.0, 243.5714285714286], [375.0, 231.0], [376.0, 276.73584905660374], [382.0, 174.0], [383.0, 123.33333333333333], [377.0, 302.5], [381.0, 266.7567567567568], [385.0, 199.42857142857142], [384.0, 178.33333333333331], [387.0, 215.72727272727272], [386.0, 258.6923076923077], [388.0, 172.60000000000002], [390.0, 157.23809523809524], [392.0, 166.33333333333334], [399.0, 141.8], [396.0, 141.66666666666669], [398.0, 143.41666666666666], [393.0, 139.66666666666666], [394.0, 138.20000000000002], [391.0, 139.0], [389.0, 197.08333333333331], [401.0, 145.6], [403.0, 139.63636363636363], [404.0, 134.57142857142856], [408.0, 128.72727272727275], [414.0, 90.94117647058822], [413.0, 97.0], [415.0, 90.0], [407.0, 133.0], [405.0, 135.5], [412.0, 103.62499999999999], [410.0, 124.3], [411.0, 99.5], [409.0, 126.33333333333333], [406.0, 143.0], [419.0, 93.33333333333334], [417.0, 89.5], [418.0, 92.39999999999999], [420.0, 86.14285714285715], [426.0, 88.5], [421.0, 97.8], [427.0, 90.0], [422.0, 87.83333333333333], [424.0, 89.0], [428.0, 90.71428571428571], [431.0, 99.75], [430.0, 79.0], [429.0, 102.07692307692308], [425.0, 88.33333333333333], [435.0, 87.25], [433.0, 81.75], [432.0, 98.25], [439.0, 81.0], [434.0, 82.6], [446.0, 90.42857142857143], [447.0, 93.0], [444.0, 84.0], [445.0, 86.5], [438.0, 80.25], [436.0, 81.0], [437.0, 81.0], [443.0, 84.2], [441.0, 82.77777777777779], [442.0, 83.0], [440.0, 84.5], [460.0, 84.0], [453.0, 102.0], [454.0, 97.0], [455.0, 101.49999999999999], [456.0, 95.125], [458.0, 83.0], [461.0, 85.25], [462.0, 86.22222222222223], [463.0, 80.47058823529412], [459.0, 83.5], [464.0, 69.0], [469.0, 71.66666666666667], [466.0, 65.18181818181819], [467.0, 70.75000000000001], [478.0, 72.60000000000001], [479.0, 75.16666666666667], [477.0, 82.5], [468.0, 72.0], [465.0, 74.0], [470.0, 75.66666666666667], [471.0, 75.0], [475.0, 77.5], [473.0, 78.0], [474.0, 77.0], [472.0, 77.5], [480.0, 82.33333333333333], [481.0, 83.0], [484.0, 83.25], [482.0, 83.25], [483.0, 86.0], [487.0, 53.07692307692309], [486.0, 64.5], [488.0, 48.857142857142854], [489.0, 51.0], [485.0, 71.2], [495.0, 57.23404255319149], [497.0, 39.666666666666664], [496.0, 44.5], [503.0, 32.0], [502.0, 30.0], [498.0, 33.0], [499.0, 31.5], [504.0, 33.5], [506.0, 36.0], [500.0, 30.0], [501.0, 31.0], [507.0, 37.333333333333336], [505.0, 34.666666666666664], [508.0, 36.6], [509.0, 39.0], [510.0, 39.0], [515.0, 39.0], [513.0, 46.72727272727273], [518.0, 27.22222222222222], [537.0, 9.0], [538.0, 10.0], [543.0, 18.0], [514.0, 43.5], [520.0, 22.75], [522.0, 25.0], [523.0, 28.0], [524.0, 12.714285714285714], [525.0, 28.315789473684212], [526.0, 29.2], [527.0, 32.0], [521.0, 24.333333333333332], [530.0, 5.0], [529.0, 5.0], [533.0, 6.5], [528.0, 14.25], [546.0, 22.4], [549.0, 25.5], [544.0, 20.0], [555.0, 21.555555555555557], [559.0, 7.0], [558.0, 9.0], [545.0, 22.0], [547.0, 24.0], [548.0, 24.0], [553.0, 30.833333333333336], [551.0, 27.5], [562.0, 8.0], [574.0, 29.0], [572.0, 26.666666666666668], [573.0, 28.0], [568.0, 23.5], [570.0, 24.0], [571.0, 25.0], [566.0, 11.470588235294118], [567.0, 20.75], [565.0, 19.285714285714285], [563.0, 7.0], [554.0, 31.5], [552.0, 29.749999999999996], [550.0, 25.0], [580.0, 36.0], [584.0, 9.0], [583.0, 21.0], [601.0, 9.461538461538462], [592.0, 8.75], [594.0, 7.666666666666667], [595.0, 9.0], [596.0, 10.0], [599.0, 13.0], [587.0, 10.0], [589.0, 10.25], [590.0, 7.666666666666667], [591.0, 10.0], [582.0, 13.0], [581.0, 27.2], [577.0, 31.0], [579.0, 32.666666666666664], [578.0, 31.0], [614.0, 25.0], [627.0, 34.16666666666667], [628.0, 33.0], [629.0, 35.0], [630.0, 35.666666666666664], [631.0, 36.0], [618.0, 27.5], [611.0, 22.0], [622.0, 30.0], [623.0, 30.166666666666664], [609.0, 21.0], [624.0, 31.333333333333332], [639.0, 16.428571428571427], [635.0, 38.0], [633.0, 37.0], [625.0, 33.0], [619.0, 29.0], [621.0, 30.0], [643.0, 35.0], [652.0, 36.666666666666664], [650.0, 37.333333333333336], [653.0, 34.625], [645.0, 37.333333333333336], [644.0, 36.0], [656.0, 30.07142857142857], [657.0, 28.0], [670.0, 32.4], [666.0, 29.0], [665.0, 30.0], [671.0, 33.0], [655.0, 32.0], [642.0, 35.0], [646.0, 37.0], [654.0, 35.0], [673.0, 33.0], [676.0, 35.0], [678.0, 36.0], [679.0, 37.57142857142857], [699.0, 16.75], [701.0, 17.0], [700.0, 17.0], [691.0, 17.666666666666668], [693.0, 17.28571428571429], [695.0, 23.5], [692.0, 29.666666666666668], [690.0, 18.0], [688.0, 26.142857142857146], [675.0, 34.0], [677.0, 13.777777777777779], [681.0, 38.5], [682.0, 38.5], [672.0, 33.0], [687.0, 35.578947368421055], [686.0, 41.5], [684.0, 40.4], [685.0, 41.0], [710.0, 15.826086956521745], [721.0, 38.0], [713.0, 32.0], [712.0, 32.0], [714.0, 32.5], [708.0, 27.8], [709.0, 29.0], [722.0, 39.5], [723.0, 40.0], [724.0, 40.333333333333336], [725.0, 41.0], [727.0, 42.0], [726.0, 41.0], [715.0, 34.0], [720.0, 37.0], [729.0, 45.0], [728.0, 42.0], [735.0, 42.666666666666664], [734.0, 47.0], [733.0, 44.0], [732.0, 47.0], [731.0, 48.0], [719.0, 37.0], [738.0, 12.95238095238095], [745.0, 26.0], [744.0, 33.285714285714285], [742.0, 33.857142857142854], [756.0, 34.0], [757.0, 35.25], [758.0, 37.0], [754.0, 32.0], [767.0, 14.760000000000002], [766.0, 42.6], [764.0, 41.5], [765.0, 42.333333333333336], [762.0, 39.5], [760.0, 37.666666666666664], [761.0, 38.666666666666664], [763.0, 41.0], [740.0, 41.0], [739.0, 40.0], [736.0, 41.5], [746.0, 26.25], [747.0, 27.0], [749.0, 26.0], [751.0, 30.5], [741.0, 34.0], [737.0, 42.0], [769.0, 36.76923076923077], [768.0, 43.16666666666667], [792.0, 13.666666666666668], [774.0, 24.0], [775.0, 25.0], [791.0, 22.666666666666668], [790.0, 23.0], [785.0, 22.0], [796.0, 26.0], [797.0, 26.0], [798.0, 28.0], [799.0, 30.25], [786.0, 23.0], [794.0, 23.0], [783.0, 23.0], [770.0, 33.0], [771.0, 30.5], [772.0, 30.0], [773.0, 29.5], [782.0, 24.5], [780.0, 24.0], [777.0, 24.0], [776.0, 25.0], [778.0, 24.0], [802.0, 32.5], [805.0, 37.2], [804.0, 35.699999999999996], [807.0, 36.66666666666666], [816.0, 8.0], [819.0, 9.0], [821.0, 9.25], [825.0, 19.333333333333332], [828.0, 20.0], [806.0, 37.111111111111114], [801.0, 33.0], [800.0, 32.0], [809.0, 28.444444444444446], [811.0, 11.999999999999998], [812.0, 6.0], [810.0, 20.75], [838.0, 28.0], [832.0, 22.0], [834.0, 23.6], [847.0, 30.439999999999998], [835.0, 25.0], [841.0, 30.4], [842.0, 31.0], [843.0, 32.25], [844.0, 31.0], [845.0, 32.0], [837.0, 27.0], [846.0, 32.6], [839.0, 28.5], [860.0, 10.0], [863.0, 12.333333333333334], [861.0, 12.0], [848.0, 16.000000000000004], [850.0, 5.0], [849.0, 11.0], [854.0, 7.0], [855.0, 6.0], [853.0, 6.0], [852.0, 10.000000000000002], [866.0, 13.0], [869.0, 16.333333333333332], [881.0, 25.333333333333336], [894.0, 27.0], [889.0, 30.666666666666664], [890.0, 30.75], [891.0, 27.0], [892.0, 26.0], [888.0, 31.0], [872.0, 17.5], [873.0, 18.0], [874.0, 19.0], [875.0, 22.0], [876.0, 20.5], [879.0, 10.318181818181817], [882.0, 26.0], [885.0, 29.2], [883.0, 27.75], [902.0, 21.2], [916.0, 18.5], [898.0, 28.666666666666668], [905.0, 14.0], [906.0, 20.0], [904.0, 19.0], [899.0, 28.0], [913.0, 16.666666666666668], [903.0, 21.0], [920.0, 9.0], [919.0, 49.1551724137931], [917.0, 20.0], [918.0, 22.0], [901.0, 23.8], [900.0, 26.4], [930.0, 18.0], [934.0, 22.0], [942.0, 26.0], [935.0, 21.5], [940.0, 26.0], [937.0, 24.0], [939.0, 24.0], [945.0, 17.46153846153846], [957.0, 7.4], [958.0, 6.5], [952.0, 15.0], [953.0, 14.11111111111111], [954.0, 8.0], [956.0, 7.75], [947.0, 31.749999999999996], [948.0, 32.0], [949.0, 29.5], [950.0, 26.6], [951.0, 20.333333333333332], [932.0, 21.0], [933.0, 22.0], [943.0, 29.75], [928.0, 16.794117647058822], [965.0, 6.0], [963.0, 7.0], [973.0, 15.0], [960.0, 14.90625], [966.0, 7.0], [986.0, 24.5], [985.0, 23.333333333333332], [988.0, 25.0], [990.0, 26.0], [991.0, 26.666666666666668], [977.0, 13.068965517241377], [989.0, 26.0], [969.0, 11.333333333333334], [978.0, 17.571428571428573], [972.0, 14.0], [980.0, 18.0], [981.0, 19.0], [982.0, 21.0], [983.0, 21.0], [994.0, 27.25], [992.0, 28.25], [995.0, 26.0], [996.0, 15.111111111111109], [997.0, 21.666666666666668], [999.0, 22.333333333333332], [1012.0, 11.333333333333334], [1015.0, 11.0], [1013.0, 13.4375], [1009.0, 12.25], [1018.0, 11.0], [1017.0, 11.0], [1016.0, 12.0], [1019.0, 11.5], [1022.0, 12.5], [1010.0, 12.0], [1000.0, 17.75], [1001.0, 16.0], [1002.0, 12.777777777777779], [1004.0, 10.0], [1005.0, 10.0], [1030.0, 18.0], [1032.0, 18.0], [1034.0, 19.666666666666668], [1031.0, 19.0], [1033.0, 18.0], [1026.0, 14.0], [1029.0, 14.464285714285717], [1050.0, 27.333333333333332], [1049.0, 18.290322580645167], [1046.0, 25.0], [1047.0, 24.666666666666668], [1040.0, 21.0], [1038.0, 21.0], [1084.0, 17.749999999999996], [1068.0, 15.71875], [1037.0, 20.0], [1042.0, 22.0], [1096.0, 23.589743589743584], [1106.0, 73.5], [1104.0, 71.0], [1105.0, 73.0], [1108.0, 73.5], [1100.0, 70.33333333333333], [1102.0, 70.75], [1120.0, 71.0], [1150.0, 75.0], [1151.0, 67.0], [1146.0, 66.83333333333333], [1138.0, 69.5], [1139.0, 38.35616438356165], [1143.0, 14.0], [1145.0, 71.0], [1148.0, 75.5], [1136.0, 63.333333333333336], [1124.0, 59.672131147540966], [1132.0, 72.0], [1133.0, 59.5], [1135.0, 50.0], [1134.0, 54.0], [1131.0, 51.0], [1130.0, 55.0], [1128.0, 56.666666666666664], [1129.0, 54.0], [1125.0, 72.0], [1123.0, 69.6], [1122.0, 81.33333333333333], [1121.0, 70.0], [1097.0, 69.0], [1099.0, 70.0], [1095.0, 67.0], [1116.0, 78.25], [1117.0, 77.2], [1119.0, 70.66666666666667], [1109.0, 19.22222222222222], [1111.0, 77.66666666666667], [1112.0, 78.0], [1110.0, 77.0], [1114.0, 78.0], [1107.0, 75.0], [1154.0, 86.0], [1158.0, 79.1], [1156.0, 72.5], [1155.0, 85.0], [1153.0, 35.333333333333336], [1152.0, 42.833333333333336], [1171.0, 96.0], [1168.0, 91.0], [1170.0, 88.0], [1169.0, 90.0], [1183.0, 109.0], [1182.0, 109.0], [1175.0, 101.0], [1173.0, 98.0], [1177.0, 101.0], [1178.0, 98.5], [1181.0, 174.32499999999996], [1179.0, 99.0], [1162.0, 85.5], [1184.0, 106.5], [1188.0, 85.25], [1190.0, 88.0], [1191.0, 26.291666666666686], [1199.0, 67.83333333333333], [1198.0, 28.178571428571427], [1195.0, 74.0], [1194.0, 75.0], [1193.0, 75.66666666666667], [1197.0, 27.916666666666668], [1196.0, 81.0], [1189.0, 85.5], [1187.0, 91.25], [1186.0, 86.0], [1185.0, 19.933333333333326], [1163.0, 87.8], [1164.0, 99.0], [1165.0, 89.0], [1200.0, 91.15822322948264]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[1198.3502084667252, 91.05583790253012]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 61570.11666666667, "minX": 1.63342248E12, "maxY": 8057785.0, "series": [{"data": [[1.63342254E12, 7938844.333333333], [1.63342284E12, 7827987.533333333], [1.63342314E12, 7997712.6], [1.63342248E12, 5180715.083333333], [1.63342278E12, 8057785.0], [1.63342308E12, 7743805.65], [1.63342338E12, 2921455.066666667], [1.63342272E12, 7752373.8], [1.63342302E12, 7890117.266666667], [1.63342332E12, 7896665.35], [1.63342266E12, 7991626.983333333], [1.63342296E12, 7911872.583333333], [1.63342326E12, 7868166.866666666], [1.6334226E12, 7810707.066666666], [1.6334229E12, 7987335.233333333], [1.6334232E12, 7857042.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63342254E12, 166254.53333333333], [1.63342284E12, 164976.51666666666], [1.63342314E12, 168553.1], [1.63342248E12, 108318.03333333334], [1.63342278E12, 169819.51666666666], [1.63342308E12, 163200.75], [1.63342338E12, 61570.11666666667], [1.63342272E12, 163381.66666666666], [1.63342302E12, 166279.11666666667], [1.63342332E12, 166423.85], [1.63342266E12, 168416.71666666667], [1.63342296E12, 166724.45], [1.63342326E12, 165822.65], [1.6334226E12, 164572.58333333334], [1.6334229E12, 168305.38333333333], [1.6334232E12, 165588.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63342338E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 49.326286842238666, "minX": 1.63342248E12, "maxY": 108.31799765168897, "series": [{"data": [[1.63342254E12, 103.05791120282215], [1.63342284E12, 49.326286842238666], [1.63342314E12, 97.4808778361241], [1.63342248E12, 63.45568361466662], [1.63342278E12, 101.60985363774856], [1.63342308E12, 90.38456553253258], [1.63342338E12, 86.25722164459108], [1.63342272E12, 98.90863713798976], [1.63342302E12, 93.10870256607662], [1.63342332E12, 91.9553459435059], [1.63342266E12, 100.71106777504129], [1.63342296E12, 87.67669988814907], [1.63342326E12, 71.49918592745534], [1.6334226E12, 102.4119596834206], [1.6334229E12, 108.31799765168897], [1.6334232E12, 97.4047030743122]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63342338E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 49.24589610784025, "minX": 1.63342248E12, "maxY": 108.18983280689321, "series": [{"data": [[1.63342254E12, 102.8982560074547], [1.63342284E12, 49.24589610784025], [1.63342314E12, 97.3768453383535], [1.63342248E12, 63.31210158600616], [1.63342278E12, 101.52183960795193], [1.63342308E12, 90.26854267928795], [1.63342338E12, 86.17363591157701], [1.63342272E12, 98.8248551959117], [1.63342302E12, 92.98366281113496], [1.63342332E12, 91.84436305253097], [1.63342266E12, 100.616602488886], [1.63342296E12, 87.54184404267029], [1.63342326E12, 71.39335649663496], [1.6334226E12, 102.2851248055194], [1.6334229E12, 108.18983280689321], [1.6334232E12, 97.29704334963807]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63342338E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63342248E12, "maxY": 0.7224233770207559, "series": [{"data": [[1.63342254E12, 0.026293017373360785], [1.63342284E12, 0.021088860020582814], [1.63342314E12, 0.01988176624062883], [1.63342248E12, 0.7224233770207559], [1.63342278E12, 0.02910855063674929], [1.63342308E12, 0.0275773855205934], [1.63342338E12, 0.0], [1.63342272E12, 0.021073253833049605], [1.63342302E12, 0.03290872265278409], [1.63342332E12, 0.018798187078754903], [1.63342266E12, 0.021269563205473754], [1.63342296E12, 0.02171916996377341], [1.63342326E12, 0.024976081373684886], [1.6334226E12, 0.04434147331394115], [1.6334229E12, 0.03163604491557687], [1.6334232E12, 0.02746541609937279]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63342338E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.63342248E12, "maxY": 1070.0, "series": [{"data": [[1.63342254E12, 494.0], [1.63342284E12, 474.0], [1.63342314E12, 522.0], [1.63342248E12, 1070.0], [1.63342278E12, 503.0], [1.63342308E12, 516.0], [1.63342338E12, 446.0], [1.63342272E12, 497.0], [1.63342302E12, 506.0], [1.63342332E12, 563.0], [1.63342266E12, 560.0], [1.63342296E12, 536.0], [1.63342326E12, 493.0], [1.6334226E12, 506.0], [1.6334229E12, 654.0], [1.6334232E12, 491.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63342254E12, 446.0], [1.63342284E12, 40.0], [1.63342314E12, 455.0], [1.63342248E12, 439.0], [1.63342278E12, 463.0], [1.63342308E12, 459.0], [1.63342338E12, 417.0], [1.63342272E12, 457.9900000000016], [1.63342302E12, 371.0], [1.63342332E12, 488.0], [1.63342266E12, 466.0], [1.63342296E12, 447.0], [1.63342326E12, 400.9900000000016], [1.6334226E12, 457.0], [1.6334229E12, 608.0], [1.6334232E12, 412.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63342254E12, 484.0], [1.63342284E12, 63.99947273254293], [1.63342314E12, 503.9984181976288], [1.63342248E12, 460.9994727325429], [1.63342278E12, 484.9994727325429], [1.63342308E12, 514.9994727325429], [1.63342338E12, 445.9994727325429], [1.63342272E12, 496.0], [1.63342302E12, 405.99894546508585], [1.63342332E12, 533.9994727325429], [1.63342266E12, 512.0], [1.63342296E12, 522.9973636627146], [1.63342326E12, 441.9984181976288], [1.6334226E12, 504.9994727325429], [1.6334229E12, 651.9994727325429], [1.6334232E12, 453.0]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63342254E12, 477.0], [1.63342284E12, 60.0], [1.63342314E12, 494.0], [1.63342248E12, 458.0], [1.63342278E12, 480.0], [1.63342308E12, 510.0], [1.63342338E12, 442.0], [1.63342272E12, 488.99930519103873], [1.63342302E12, 402.0], [1.63342332E12, 529.0], [1.63342266E12, 507.99930519103873], [1.63342296E12, 511.0], [1.63342326E12, 432.0], [1.6334226E12, 497.99930519103873], [1.6334229E12, 650.0], [1.6334232E12, 448.99930519103873]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63342254E12, 4.0], [1.63342284E12, 5.0], [1.63342314E12, 4.0], [1.63342248E12, 5.0], [1.63342278E12, 5.0], [1.63342308E12, 5.0], [1.63342338E12, 4.0], [1.63342272E12, 4.0], [1.63342302E12, 5.0], [1.63342332E12, 4.0], [1.63342266E12, 5.0], [1.63342296E12, 4.0], [1.63342326E12, 4.0], [1.6334226E12, 5.0], [1.6334229E12, 4.0], [1.6334232E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63342254E12, 29.0], [1.63342284E12, 22.0], [1.63342314E12, 29.0], [1.63342248E12, 27.0], [1.63342278E12, 29.0], [1.63342308E12, 27.0], [1.63342338E12, 27.0], [1.63342272E12, 29.0], [1.63342302E12, 26.0], [1.63342332E12, 25.0], [1.63342266E12, 28.0], [1.63342296E12, 26.0], [1.63342326E12, 26.0], [1.6334226E12, 28.0], [1.6334229E12, 27.0], [1.6334232E12, 28.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63342338E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.5, "minX": 1.0, "maxY": 413.0, "series": [{"data": [[2.0, 5.5], [11.0, 7.0], [12.0, 12.0], [13.0, 13.0], [16.0, 16.5], [21.0, 23.0], [22.0, 17.5], [27.0, 15.0], [29.0, 14.0], [41.0, 17.0], [44.0, 23.0], [47.0, 20.0], [59.0, 18.0], [66.0, 26.5], [70.0, 34.0], [78.0, 14.5], [76.0, 20.0], [80.0, 35.5], [88.0, 23.0], [94.0, 38.0], [92.0, 18.5], [99.0, 26.0], [96.0, 46.5], [102.0, 23.0], [106.0, 22.5], [105.0, 22.0], [109.0, 19.0], [110.0, 22.0], [111.0, 18.0], [112.0, 58.5], [118.0, 55.5], [116.0, 22.0], [123.0, 20.0], [120.0, 24.0], [121.0, 59.0], [134.0, 24.0], [132.0, 42.5], [136.0, 23.0], [138.0, 20.0], [142.0, 19.0], [140.0, 22.5], [150.0, 25.0], [148.0, 19.5], [166.0, 70.0], [170.0, 24.0], [186.0, 21.0], [201.0, 73.0], [208.0, 22.5], [211.0, 23.0], [220.0, 127.5], [228.0, 88.5], [231.0, 131.0], [238.0, 25.0], [235.0, 80.0], [243.0, 146.0], [250.0, 32.0], [248.0, 66.5], [252.0, 89.0], [268.0, 20.0], [266.0, 23.0], [264.0, 88.0], [257.0, 79.5], [282.0, 25.0], [279.0, 97.0], [283.0, 87.0], [293.0, 22.0], [301.0, 82.0], [299.0, 107.0], [294.0, 102.0], [291.0, 99.0], [306.0, 20.0], [318.0, 21.0], [314.0, 65.0], [312.0, 102.5], [329.0, 24.0], [335.0, 21.0], [323.0, 103.0], [333.0, 93.0], [321.0, 23.0], [343.0, 24.0], [339.0, 96.0], [337.0, 58.0], [359.0, 24.0], [358.0, 37.0], [362.0, 26.0], [377.0, 123.0], [372.0, 110.5], [373.0, 119.0], [378.0, 12.0], [385.0, 22.0], [411.0, 143.0], [401.0, 147.0], [444.0, 105.0], [436.0, 22.0], [450.0, 142.0], [477.0, 130.0], [470.0, 131.0], [471.0, 160.0], [467.0, 25.0], [493.0, 120.0], [484.0, 22.0], [495.0, 131.0], [501.0, 23.0], [499.0, 20.0], [575.0, 21.0], [557.0, 160.0], [563.0, 23.0], [573.0, 25.0], [549.0, 23.0], [605.0, 19.0], [596.0, 24.5], [580.0, 20.0], [623.0, 44.5], [637.0, 20.0], [629.0, 36.0], [639.0, 20.0], [631.0, 20.0], [613.0, 20.0], [612.0, 24.0], [633.0, 159.0], [646.0, 22.0], [667.0, 37.0], [665.0, 22.0], [664.0, 22.0], [668.0, 22.0], [671.0, 22.0], [650.0, 23.0], [649.0, 20.0], [651.0, 22.0], [659.0, 20.0], [661.0, 21.0], [660.0, 24.0], [656.0, 23.0], [652.0, 22.0], [657.0, 23.0], [658.0, 22.0], [642.0, 22.0], [644.0, 22.0], [700.0, 21.0], [676.0, 22.0], [695.0, 22.0], [673.0, 22.0], [680.0, 22.0], [693.0, 20.0], [679.0, 21.0], [691.0, 182.0], [674.0, 22.0], [701.0, 23.0], [730.0, 24.0], [733.0, 22.0], [705.0, 23.0], [717.0, 21.0], [721.0, 19.0], [713.0, 23.0], [744.0, 22.0], [740.0, 25.0], [741.0, 170.0], [767.0, 21.0], [742.0, 21.0], [765.0, 22.0], [758.0, 22.0], [786.0, 22.0], [788.0, 20.0], [769.0, 20.0], [803.0, 23.0], [805.0, 23.0], [802.0, 143.0], [817.0, 22.0], [811.0, 21.0], [827.0, 22.0], [804.0, 22.0], [810.0, 23.0], [823.0, 23.0], [836.0, 204.0], [858.0, 22.0], [833.0, 24.0], [850.0, 21.0], [832.0, 21.0], [841.0, 22.0], [859.0, 20.0], [853.0, 21.0], [837.0, 22.0], [839.0, 22.0], [881.0, 23.0], [872.0, 21.0], [889.0, 21.0], [898.0, 20.0], [901.0, 184.0], [921.0, 25.0], [903.0, 19.0], [904.0, 22.0], [916.0, 23.0], [910.0, 23.0], [957.0, 23.0], [956.0, 21.0], [959.0, 23.0], [958.0, 23.0], [938.0, 267.5], [945.0, 21.0], [946.0, 22.0], [933.0, 24.0], [954.0, 21.0], [988.0, 23.0], [991.0, 22.0], [972.0, 21.0], [974.0, 22.0], [975.0, 24.0], [968.0, 22.0], [969.0, 22.0], [971.0, 22.0], [982.0, 21.0], [983.0, 21.0], [984.0, 22.0], [990.0, 21.0], [989.0, 21.0], [979.0, 21.0], [977.0, 22.0], [976.0, 22.0], [980.0, 21.0], [981.0, 23.0], [985.0, 22.0], [987.0, 22.0], [986.0, 22.0], [1006.0, 22.0], [1003.0, 22.0], [1008.0, 22.0], [1000.0, 22.0], [1011.0, 22.0], [1010.0, 21.0], [1009.0, 22.0], [1002.0, 22.0], [1004.0, 22.0], [1005.0, 22.0], [1012.0, 22.0], [1013.0, 22.0], [1015.0, 22.0], [1014.0, 21.0], [998.0, 23.0], [999.0, 22.0], [1007.0, 22.0], [992.0, 22.0], [996.0, 23.0], [994.0, 22.0], [993.0, 21.0], [995.0, 22.0], [997.0, 23.0], [1001.0, 22.0], [1030.0, 23.0], [1024.0, 27.0], [1043.0, 23.0], [1026.0, 23.5], [1039.0, 247.0], [1076.0, 236.0], [1067.0, 23.0], [1037.0, 24.0], [1051.0, 22.0], [1028.0, 24.0], [1118.0, 24.0], [1089.0, 23.0], [1100.0, 23.0], [1202.0, 163.0], [1164.0, 282.0], [1200.0, 27.0], [1185.0, 26.0], [1210.0, 28.0], [1225.0, 27.0], [1277.0, 22.0], [1268.0, 28.0], [1248.0, 26.5], [1223.0, 245.0], [1282.0, 29.0], [1341.0, 290.0], [1337.0, 140.0], [1344.0, 29.0], [1360.0, 316.0], [1350.0, 29.0], [1399.0, 278.0], [1394.0, 203.5], [1410.0, 278.0], [1466.0, 305.0], [1435.0, 291.0], [1504.0, 33.0], [1519.0, 281.0], [1494.0, 225.0], [1477.0, 200.0], [1510.0, 36.0], [1581.0, 154.0], [1586.0, 56.0], [1642.0, 85.0], [1653.0, 288.0], [1697.0, 124.0], [1687.0, 130.0], [1682.0, 86.0], [1706.0, 231.0], [1695.0, 120.0], [1732.0, 321.0], [1739.0, 166.0], [1757.0, 271.0], [1746.0, 240.0], [1742.0, 190.0], [1784.0, 178.0], [1828.0, 238.0], [1823.0, 232.0], [1840.0, 208.0], [1802.0, 289.5], [1832.0, 264.0], [1831.0, 297.0], [1854.0, 236.0], [1838.0, 214.0], [1847.0, 269.0], [1830.0, 207.0], [1855.0, 232.0], [1827.0, 225.0], [1891.0, 242.0], [1898.0, 36.0], [1900.0, 245.0], [1903.0, 234.0], [1892.0, 196.0], [1878.0, 220.5], [1874.0, 268.0], [1876.0, 188.0], [1857.0, 220.0], [1885.0, 259.0], [1860.0, 253.5], [1866.0, 300.0], [1867.0, 295.0], [1911.0, 220.0], [1868.0, 136.0], [1972.0, 222.0], [1920.0, 281.0], [1976.0, 242.0], [1940.0, 234.5], [1939.0, 274.0], [1949.0, 204.0], [1923.0, 225.0], [1970.0, 204.0], [1966.0, 205.0], [1965.0, 214.0], [1962.0, 271.0], [1960.0, 202.0], [1959.0, 220.0], [1963.0, 291.0], [1922.0, 271.0], [1977.0, 238.0], [1995.0, 227.0], [2032.0, 279.0], [2033.0, 245.0], [2034.0, 212.0], [2037.0, 249.0], [2036.0, 168.5], [2040.0, 214.5], [2044.0, 198.0], [2043.0, 222.0], [2024.0, 249.5], [2026.0, 256.0], [2031.0, 207.0], [1989.0, 246.0], [1990.0, 169.0], [1984.0, 213.0], [2014.0, 175.0], [2008.0, 246.5], [2001.0, 209.0], [1991.0, 272.0], [1998.0, 269.0], [1999.0, 214.0], [1996.0, 208.0], [2018.0, 226.0], [1994.0, 213.0], [1992.0, 228.0], [2070.0, 234.0], [2076.0, 235.0], [2106.0, 242.0], [2060.0, 292.0], [2054.0, 268.0], [2068.0, 229.0], [2072.0, 206.0], [2140.0, 177.5], [2142.0, 209.0], [2090.0, 413.0], [2136.0, 269.0], [2114.0, 173.5], [2078.0, 182.0], [2126.0, 183.0], [2180.0, 216.0], [2196.0, 228.0], [2198.0, 205.0], [2178.0, 263.0], [2176.0, 192.0], [2061.0, 201.0], [2065.0, 189.0], [2073.0, 278.0], [2075.0, 226.0], [2097.0, 232.0], [2137.0, 236.0], [2131.0, 227.0], [2091.0, 215.0], [2093.0, 241.0], [2095.0, 273.0], [2133.0, 215.0], [2157.0, 228.0], [2115.0, 237.0], [2163.0, 186.0], [2159.0, 234.0], [2123.0, 209.0], [2077.0, 214.0], [2079.0, 213.0], [2149.0, 220.0], [2145.0, 249.0], [2183.0, 196.0], [2177.0, 216.0], [2189.0, 273.0], [1.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2198.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.5, "minX": 1.0, "maxY": 413.0, "series": [{"data": [[2.0, 5.5], [11.0, 7.0], [12.0, 12.0], [13.0, 13.0], [16.0, 16.5], [21.0, 23.0], [22.0, 17.0], [27.0, 15.0], [29.0, 14.0], [41.0, 17.0], [44.0, 23.0], [47.0, 20.0], [59.0, 18.0], [66.0, 26.5], [70.0, 34.0], [78.0, 14.5], [76.0, 20.0], [80.0, 35.0], [88.0, 23.0], [94.0, 37.5], [92.0, 18.0], [99.0, 26.0], [96.0, 46.0], [102.0, 23.0], [106.0, 22.5], [105.0, 22.0], [109.0, 19.0], [110.0, 22.0], [111.0, 17.0], [112.0, 58.5], [118.0, 55.5], [116.0, 22.0], [123.0, 20.0], [120.0, 24.0], [121.0, 59.0], [134.0, 24.0], [132.0, 42.0], [136.0, 23.0], [138.0, 20.0], [142.0, 19.0], [140.0, 22.5], [150.0, 25.0], [148.0, 19.5], [166.0, 70.0], [170.0, 24.0], [186.0, 21.0], [201.0, 72.0], [208.0, 22.0], [211.0, 22.0], [220.0, 127.5], [228.0, 88.5], [231.0, 130.0], [238.0, 25.0], [235.0, 79.0], [243.0, 146.0], [250.0, 32.0], [248.0, 66.5], [252.0, 88.5], [268.0, 19.5], [266.0, 23.0], [264.0, 88.0], [257.0, 79.5], [282.0, 25.0], [279.0, 97.0], [283.0, 87.0], [293.0, 22.0], [301.0, 82.0], [299.0, 107.0], [294.0, 102.0], [291.0, 99.0], [306.0, 20.0], [318.0, 21.0], [314.0, 65.0], [312.0, 102.5], [329.0, 24.0], [335.0, 21.0], [323.0, 103.0], [333.0, 93.0], [321.0, 22.0], [343.0, 24.0], [339.0, 96.0], [337.0, 58.0], [359.0, 23.0], [358.0, 37.0], [362.0, 26.0], [377.0, 123.0], [372.0, 110.5], [373.0, 119.0], [378.0, 11.0], [385.0, 22.0], [411.0, 143.0], [401.0, 147.0], [444.0, 105.0], [436.0, 22.0], [450.0, 142.0], [477.0, 130.0], [470.0, 130.5], [471.0, 154.0], [467.0, 25.0], [493.0, 120.0], [484.0, 22.0], [495.0, 130.0], [501.0, 23.0], [499.0, 20.0], [575.0, 21.0], [557.0, 160.0], [563.0, 23.0], [573.0, 25.0], [549.0, 23.0], [605.0, 19.0], [596.0, 24.0], [580.0, 20.0], [623.0, 43.0], [637.0, 20.0], [629.0, 36.0], [639.0, 19.0], [631.0, 20.0], [613.0, 20.0], [612.0, 24.0], [633.0, 159.0], [646.0, 22.0], [667.0, 37.0], [665.0, 21.0], [664.0, 22.0], [668.0, 22.0], [671.0, 22.0], [650.0, 22.0], [649.0, 20.0], [651.0, 22.0], [659.0, 20.0], [661.0, 21.0], [660.0, 23.0], [656.0, 23.0], [652.0, 22.0], [657.0, 23.0], [658.0, 22.0], [642.0, 22.0], [644.0, 22.0], [700.0, 21.0], [676.0, 22.0], [695.0, 22.0], [673.0, 22.0], [680.0, 22.0], [693.0, 20.0], [679.0, 21.0], [691.0, 182.0], [674.0, 22.0], [701.0, 23.0], [730.0, 24.0], [733.0, 22.0], [705.0, 23.0], [717.0, 21.0], [721.0, 19.0], [713.0, 23.0], [744.0, 22.0], [740.0, 25.0], [741.0, 170.0], [767.0, 21.0], [742.0, 21.0], [765.0, 22.0], [758.0, 22.0], [786.0, 22.0], [788.0, 20.0], [769.0, 20.0], [803.0, 23.0], [805.0, 23.0], [802.0, 143.0], [817.0, 22.0], [811.0, 21.0], [827.0, 22.0], [804.0, 22.0], [810.0, 23.0], [823.0, 23.0], [836.0, 204.0], [858.0, 22.0], [833.0, 24.0], [850.0, 21.0], [832.0, 21.0], [841.0, 22.0], [859.0, 20.0], [853.0, 21.0], [837.0, 21.0], [839.0, 22.0], [881.0, 23.0], [872.0, 21.0], [889.0, 21.0], [898.0, 20.0], [901.0, 184.0], [921.0, 24.0], [903.0, 19.0], [904.0, 22.0], [916.0, 23.0], [910.0, 23.0], [957.0, 23.0], [956.0, 21.0], [959.0, 22.0], [958.0, 23.0], [938.0, 267.0], [945.0, 21.0], [946.0, 22.0], [933.0, 24.0], [954.0, 21.0], [988.0, 23.0], [991.0, 22.0], [972.0, 21.0], [974.0, 22.0], [975.0, 24.0], [968.0, 22.0], [969.0, 22.0], [971.0, 22.0], [982.0, 21.0], [983.0, 21.0], [984.0, 22.0], [990.0, 21.0], [989.0, 21.0], [979.0, 21.0], [977.0, 22.0], [976.0, 22.0], [980.0, 21.0], [981.0, 23.0], [985.0, 22.0], [987.0, 22.0], [986.0, 22.0], [1006.0, 22.0], [1003.0, 22.0], [1008.0, 22.0], [1000.0, 22.0], [1011.0, 22.0], [1010.0, 21.0], [1009.0, 22.0], [1002.0, 22.0], [1004.0, 22.0], [1005.0, 22.0], [1012.0, 22.0], [1013.0, 22.0], [1015.0, 22.0], [1014.0, 21.0], [998.0, 22.0], [999.0, 22.0], [1007.0, 22.0], [992.0, 22.0], [996.0, 23.0], [994.0, 21.0], [993.0, 21.0], [995.0, 22.0], [997.0, 22.0], [1001.0, 22.0], [1030.0, 23.0], [1024.0, 27.0], [1043.0, 22.0], [1026.0, 23.0], [1039.0, 247.0], [1076.0, 235.5], [1067.0, 23.0], [1037.0, 24.0], [1051.0, 22.0], [1028.0, 24.0], [1118.0, 24.0], [1089.0, 23.0], [1100.0, 23.0], [1202.0, 163.0], [1164.0, 281.5], [1200.0, 27.0], [1185.0, 25.0], [1210.0, 28.0], [1225.0, 27.0], [1277.0, 22.0], [1268.0, 28.0], [1248.0, 26.0], [1223.0, 245.0], [1282.0, 29.0], [1341.0, 290.0], [1337.0, 139.0], [1344.0, 29.0], [1360.0, 316.0], [1350.0, 29.0], [1399.0, 278.0], [1394.0, 203.5], [1410.0, 278.0], [1466.0, 305.0], [1435.0, 291.0], [1504.0, 32.0], [1519.0, 281.0], [1494.0, 225.0], [1477.0, 200.0], [1510.0, 36.0], [1581.0, 153.0], [1586.0, 56.0], [1642.0, 85.0], [1653.0, 288.0], [1697.0, 124.0], [1687.0, 130.0], [1682.0, 86.0], [1706.0, 231.0], [1695.0, 120.0], [1732.0, 321.0], [1739.0, 166.0], [1757.0, 271.0], [1746.0, 240.0], [1742.0, 190.0], [1784.0, 178.0], [1828.0, 238.0], [1823.0, 232.0], [1840.0, 208.0], [1802.0, 289.0], [1832.0, 264.0], [1831.0, 297.0], [1854.0, 236.0], [1838.0, 213.5], [1847.0, 269.0], [1830.0, 207.0], [1855.0, 232.0], [1827.0, 225.0], [1891.0, 242.0], [1898.0, 36.0], [1900.0, 245.0], [1903.0, 234.0], [1892.0, 195.0], [1878.0, 220.5], [1874.0, 268.0], [1876.0, 187.5], [1857.0, 220.0], [1885.0, 259.0], [1860.0, 253.0], [1866.0, 300.0], [1867.0, 294.0], [1911.0, 220.0], [1868.0, 135.5], [1972.0, 222.0], [1920.0, 281.0], [1976.0, 242.0], [1940.0, 234.5], [1939.0, 274.0], [1949.0, 204.0], [1923.0, 225.0], [1970.0, 203.5], [1966.0, 205.0], [1965.0, 214.0], [1962.0, 270.5], [1960.0, 201.5], [1959.0, 220.0], [1963.0, 291.0], [1922.0, 271.0], [1977.0, 237.0], [1995.0, 226.0], [2032.0, 279.0], [2033.0, 245.0], [2034.0, 212.0], [2037.0, 248.0], [2036.0, 168.0], [2040.0, 214.0], [2044.0, 198.0], [2043.0, 222.0], [2024.0, 249.5], [2026.0, 256.0], [2031.0, 207.0], [1989.0, 246.0], [1990.0, 169.0], [1984.0, 213.0], [2014.0, 175.0], [2008.0, 246.5], [2001.0, 209.0], [1991.0, 272.0], [1998.0, 269.0], [1999.0, 214.0], [1996.0, 207.5], [2018.0, 226.0], [1994.0, 213.0], [1992.0, 228.0], [2070.0, 234.0], [2076.0, 235.0], [2106.0, 242.0], [2060.0, 292.0], [2054.0, 268.0], [2068.0, 229.0], [2072.0, 206.0], [2140.0, 177.5], [2142.0, 209.0], [2090.0, 413.0], [2136.0, 269.0], [2114.0, 173.0], [2078.0, 182.0], [2126.0, 182.0], [2180.0, 216.0], [2196.0, 228.0], [2198.0, 205.0], [2178.0, 262.5], [2176.0, 191.5], [2061.0, 201.0], [2065.0, 189.0], [2073.0, 278.0], [2075.0, 226.0], [2097.0, 232.0], [2137.0, 235.0], [2131.0, 227.0], [2091.0, 215.0], [2093.0, 241.0], [2095.0, 273.0], [2133.0, 215.0], [2157.0, 228.0], [2115.0, 237.0], [2163.0, 186.0], [2159.0, 234.0], [2123.0, 209.0], [2077.0, 214.0], [2079.0, 213.0], [2149.0, 220.0], [2145.0, 249.0], [2183.0, 196.0], [2177.0, 216.0], [2189.0, 273.0], [1.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2198.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 368.68333333333334, "minX": 1.63342248E12, "maxY": 1016.45, "series": [{"data": [[1.63342254E12, 1001.7333333333333], [1.63342284E12, 987.0833333333334], [1.63342314E12, 997.9833333333333], [1.63342248E12, 653.6333333333333], [1.63342278E12, 1016.45], [1.63342308E12, 988.2333333333333], [1.63342338E12, 368.68333333333334], [1.63342272E12, 979.2333333333333], [1.63342302E12, 996.3666666666667], [1.63342332E12, 996.55], [1.63342266E12, 1008.8166666666667], [1.63342296E12, 997.6666666666666], [1.63342326E12, 992.95], [1.6334226E12, 985.3333333333334], [1.6334229E12, 1008.6166666666667], [1.6334232E12, 991.0833333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63342338E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 368.68333333333334, "minX": 1.63342248E12, "maxY": 1016.8833333333333, "series": [{"data": [[1.63342254E12, 1001.5333333333333], [1.63342284E12, 987.8833333333333], [1.63342314E12, 1009.3], [1.63342248E12, 653.6333333333333], [1.63342278E12, 1016.8833333333333], [1.63342308E12, 977.25], [1.63342338E12, 368.68333333333334], [1.63342272E12, 978.3333333333334], [1.63342302E12, 995.6833333333333], [1.63342332E12, 996.55], [1.63342266E12, 1008.4833333333333], [1.63342296E12, 998.35], [1.63342326E12, 992.95], [1.6334226E12, 985.5333333333333], [1.6334229E12, 1007.8166666666667], [1.6334232E12, 991.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63342338E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 368.68333333333334, "minX": 1.63342248E12, "maxY": 1016.8833333333333, "series": [{"data": [[1.63342254E12, 1001.5333333333333], [1.63342284E12, 987.8833333333333], [1.63342314E12, 1009.3], [1.63342248E12, 653.6333333333333], [1.63342278E12, 1016.8833333333333], [1.63342308E12, 977.25], [1.63342338E12, 368.68333333333334], [1.63342272E12, 978.3333333333334], [1.63342302E12, 995.6833333333333], [1.63342332E12, 996.55], [1.63342266E12, 1008.4833333333333], [1.63342296E12, 998.35], [1.63342326E12, 992.95], [1.6334226E12, 985.5333333333333], [1.6334229E12, 1007.8166666666667], [1.6334232E12, 991.55]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63342338E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 368.68333333333334, "minX": 1.63342248E12, "maxY": 1016.8833333333333, "series": [{"data": [[1.63342254E12, 1001.5333333333333], [1.63342284E12, 987.8833333333333], [1.63342314E12, 1009.3], [1.63342248E12, 653.6333333333333], [1.63342278E12, 1016.8833333333333], [1.63342308E12, 977.25], [1.63342338E12, 368.68333333333334], [1.63342272E12, 978.3333333333334], [1.63342302E12, 995.6833333333333], [1.63342332E12, 996.55], [1.63342266E12, 1008.4833333333333], [1.63342296E12, 998.35], [1.63342326E12, 992.95], [1.6334226E12, 985.5333333333333], [1.6334229E12, 1007.8166666666667], [1.6334232E12, 991.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63342338E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

