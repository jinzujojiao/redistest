/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 17960.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 9.0], [1.3, 9.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 11.0], [4.6, 11.0], [4.7, 11.0], [4.8, 11.0], [4.9, 11.0], [5.0, 11.0], [5.1, 11.0], [5.2, 11.0], [5.3, 11.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 12.0], [6.2, 12.0], [6.3, 12.0], [6.4, 12.0], [6.5, 12.0], [6.6, 12.0], [6.7, 12.0], [6.8, 12.0], [6.9, 12.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 14.0], [8.9, 14.0], [9.0, 14.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 16.0], [11.7, 16.0], [11.8, 16.0], [11.9, 16.0], [12.0, 16.0], [12.1, 16.0], [12.2, 16.0], [12.3, 16.0], [12.4, 16.0], [12.5, 16.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 17.0], [13.4, 17.0], [13.5, 17.0], [13.6, 17.0], [13.7, 17.0], [13.8, 17.0], [13.9, 17.0], [14.0, 17.0], [14.1, 17.0], [14.2, 17.0], [14.3, 17.0], [14.4, 17.0], [14.5, 17.0], [14.6, 17.0], [14.7, 17.0], [14.8, 17.0], [14.9, 17.0], [15.0, 17.0], [15.1, 18.0], [15.2, 18.0], [15.3, 18.0], [15.4, 18.0], [15.5, 18.0], [15.6, 18.0], [15.7, 18.0], [15.8, 18.0], [15.9, 18.0], [16.0, 18.0], [16.1, 18.0], [16.2, 18.0], [16.3, 18.0], [16.4, 18.0], [16.5, 18.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 19.0], [17.1, 19.0], [17.2, 19.0], [17.3, 19.0], [17.4, 19.0], [17.5, 19.0], [17.6, 19.0], [17.7, 19.0], [17.8, 19.0], [17.9, 19.0], [18.0, 19.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 20.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 20.0], [20.1, 20.0], [20.2, 20.0], [20.3, 20.0], [20.4, 20.0], [20.5, 20.0], [20.6, 20.0], [20.7, 20.0], [20.8, 20.0], [20.9, 21.0], [21.0, 21.0], [21.1, 21.0], [21.2, 21.0], [21.3, 21.0], [21.4, 21.0], [21.5, 21.0], [21.6, 21.0], [21.7, 21.0], [21.8, 21.0], [21.9, 21.0], [22.0, 21.0], [22.1, 21.0], [22.2, 21.0], [22.3, 21.0], [22.4, 21.0], [22.5, 21.0], [22.6, 21.0], [22.7, 21.0], [22.8, 21.0], [22.9, 22.0], [23.0, 22.0], [23.1, 22.0], [23.2, 22.0], [23.3, 22.0], [23.4, 22.0], [23.5, 22.0], [23.6, 22.0], [23.7, 22.0], [23.8, 22.0], [23.9, 22.0], [24.0, 22.0], [24.1, 22.0], [24.2, 22.0], [24.3, 22.0], [24.4, 22.0], [24.5, 22.0], [24.6, 22.0], [24.7, 22.0], [24.8, 22.0], [24.9, 22.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 23.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 23.0], [26.6, 23.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 24.0], [27.4, 24.0], [27.5, 24.0], [27.6, 24.0], [27.7, 24.0], [27.8, 24.0], [27.9, 24.0], [28.0, 24.0], [28.1, 24.0], [28.2, 24.0], [28.3, 24.0], [28.4, 24.0], [28.5, 24.0], [28.6, 24.0], [28.7, 24.0], [28.8, 24.0], [28.9, 24.0], [29.0, 24.0], [29.1, 25.0], [29.2, 25.0], [29.3, 25.0], [29.4, 25.0], [29.5, 25.0], [29.6, 25.0], [29.7, 25.0], [29.8, 25.0], [29.9, 25.0], [30.0, 25.0], [30.1, 25.0], [30.2, 25.0], [30.3, 25.0], [30.4, 25.0], [30.5, 25.0], [30.6, 25.0], [30.7, 25.0], [30.8, 25.0], [30.9, 25.0], [31.0, 25.0], [31.1, 26.0], [31.2, 26.0], [31.3, 26.0], [31.4, 26.0], [31.5, 26.0], [31.6, 26.0], [31.7, 26.0], [31.8, 26.0], [31.9, 26.0], [32.0, 26.0], [32.1, 26.0], [32.2, 26.0], [32.3, 26.0], [32.4, 26.0], [32.5, 26.0], [32.6, 26.0], [32.7, 26.0], [32.8, 26.0], [32.9, 26.0], [33.0, 26.0], [33.1, 26.0], [33.2, 27.0], [33.3, 27.0], [33.4, 27.0], [33.5, 27.0], [33.6, 27.0], [33.7, 27.0], [33.8, 27.0], [33.9, 27.0], [34.0, 27.0], [34.1, 27.0], [34.2, 27.0], [34.3, 27.0], [34.4, 27.0], [34.5, 27.0], [34.6, 27.0], [34.7, 27.0], [34.8, 27.0], [34.9, 27.0], [35.0, 27.0], [35.1, 27.0], [35.2, 27.0], [35.3, 28.0], [35.4, 28.0], [35.5, 28.0], [35.6, 28.0], [35.7, 28.0], [35.8, 28.0], [35.9, 28.0], [36.0, 28.0], [36.1, 28.0], [36.2, 28.0], [36.3, 28.0], [36.4, 28.0], [36.5, 28.0], [36.6, 28.0], [36.7, 28.0], [36.8, 28.0], [36.9, 28.0], [37.0, 28.0], [37.1, 28.0], [37.2, 28.0], [37.3, 29.0], [37.4, 29.0], [37.5, 29.0], [37.6, 29.0], [37.7, 29.0], [37.8, 29.0], [37.9, 29.0], [38.0, 29.0], [38.1, 29.0], [38.2, 29.0], [38.3, 29.0], [38.4, 29.0], [38.5, 29.0], [38.6, 29.0], [38.7, 29.0], [38.8, 29.0], [38.9, 29.0], [39.0, 29.0], [39.1, 29.0], [39.2, 29.0], [39.3, 30.0], [39.4, 30.0], [39.5, 30.0], [39.6, 30.0], [39.7, 30.0], [39.8, 30.0], [39.9, 30.0], [40.0, 30.0], [40.1, 30.0], [40.2, 30.0], [40.3, 30.0], [40.4, 30.0], [40.5, 30.0], [40.6, 30.0], [40.7, 30.0], [40.8, 30.0], [40.9, 30.0], [41.0, 30.0], [41.1, 30.0], [41.2, 31.0], [41.3, 31.0], [41.4, 31.0], [41.5, 31.0], [41.6, 31.0], [41.7, 31.0], [41.8, 31.0], [41.9, 31.0], [42.0, 31.0], [42.1, 31.0], [42.2, 31.0], [42.3, 31.0], [42.4, 31.0], [42.5, 31.0], [42.6, 31.0], [42.7, 31.0], [42.8, 31.0], [42.9, 32.0], [43.0, 32.0], [43.1, 32.0], [43.2, 32.0], [43.3, 32.0], [43.4, 32.0], [43.5, 32.0], [43.6, 32.0], [43.7, 32.0], [43.8, 32.0], [43.9, 32.0], [44.0, 32.0], [44.1, 32.0], [44.2, 32.0], [44.3, 32.0], [44.4, 32.0], [44.5, 33.0], [44.6, 33.0], [44.7, 33.0], [44.8, 33.0], [44.9, 33.0], [45.0, 33.0], [45.1, 33.0], [45.2, 33.0], [45.3, 33.0], [45.4, 33.0], [45.5, 33.0], [45.6, 33.0], [45.7, 33.0], [45.8, 34.0], [45.9, 34.0], [46.0, 34.0], [46.1, 34.0], [46.2, 34.0], [46.3, 34.0], [46.4, 34.0], [46.5, 34.0], [46.6, 34.0], [46.7, 34.0], [46.8, 34.0], [46.9, 35.0], [47.0, 35.0], [47.1, 35.0], [47.2, 35.0], [47.3, 35.0], [47.4, 35.0], [47.5, 35.0], [47.6, 35.0], [47.7, 36.0], [47.8, 36.0], [47.9, 36.0], [48.0, 36.0], [48.1, 36.0], [48.2, 36.0], [48.3, 36.0], [48.4, 37.0], [48.5, 37.0], [48.6, 37.0], [48.7, 37.0], [48.8, 37.0], [48.9, 37.0], [49.0, 38.0], [49.1, 38.0], [49.2, 38.0], [49.3, 38.0], [49.4, 39.0], [49.5, 39.0], [49.6, 39.0], [49.7, 39.0], [49.8, 40.0], [49.9, 40.0], [50.0, 41.0], [50.1, 41.0], [50.2, 41.0], [50.3, 42.0], [50.4, 43.0], [50.5, 43.0], [50.6, 44.0], [50.7, 45.0], [50.8, 46.0], [50.9, 47.0], [51.0, 49.0], [51.1, 51.0], [51.2, 52.0], [51.3, 54.0], [51.4, 56.0], [51.5, 58.0], [51.6, 60.0], [51.7, 62.0], [51.8, 64.0], [51.9, 66.0], [52.0, 68.0], [52.1, 70.0], [52.2, 71.0], [52.3, 73.0], [52.4, 75.0], [52.5, 78.0], [52.6, 80.0], [52.7, 82.0], [52.8, 84.0], [52.9, 86.0], [53.0, 88.0], [53.1, 90.0], [53.2, 92.0], [53.3, 94.0], [53.4, 97.0], [53.5, 99.0], [53.6, 102.0], [53.7, 104.0], [53.8, 105.0], [53.9, 107.0], [54.0, 109.0], [54.1, 111.0], [54.2, 113.0], [54.3, 114.0], [54.4, 116.0], [54.5, 118.0], [54.6, 119.0], [54.7, 121.0], [54.8, 122.0], [54.9, 124.0], [55.0, 126.0], [55.1, 127.0], [55.2, 129.0], [55.3, 130.0], [55.4, 132.0], [55.5, 134.0], [55.6, 135.0], [55.7, 137.0], [55.8, 139.0], [55.9, 140.0], [56.0, 142.0], [56.1, 143.0], [56.2, 145.0], [56.3, 146.0], [56.4, 148.0], [56.5, 150.0], [56.6, 151.0], [56.7, 153.0], [56.8, 155.0], [56.9, 156.0], [57.0, 158.0], [57.1, 159.0], [57.2, 161.0], [57.3, 162.0], [57.4, 164.0], [57.5, 165.0], [57.6, 167.0], [57.7, 168.0], [57.8, 170.0], [57.9, 171.0], [58.0, 173.0], [58.1, 175.0], [58.2, 176.0], [58.3, 178.0], [58.4, 179.0], [58.5, 181.0], [58.6, 182.0], [58.7, 184.0], [58.8, 185.0], [58.9, 187.0], [59.0, 188.0], [59.1, 190.0], [59.2, 191.0], [59.3, 193.0], [59.4, 194.0], [59.5, 196.0], [59.6, 198.0], [59.7, 199.0], [59.8, 201.0], [59.9, 203.0], [60.0, 204.0], [60.1, 206.0], [60.2, 208.0], [60.3, 209.0], [60.4, 211.0], [60.5, 212.0], [60.6, 214.0], [60.7, 215.0], [60.8, 217.0], [60.9, 218.0], [61.0, 220.0], [61.1, 221.0], [61.2, 223.0], [61.3, 224.0], [61.4, 225.0], [61.5, 227.0], [61.6, 228.0], [61.7, 229.0], [61.8, 230.0], [61.9, 232.0], [62.0, 233.0], [62.1, 235.0], [62.2, 236.0], [62.3, 238.0], [62.4, 240.0], [62.5, 242.0], [62.6, 243.0], [62.7, 245.0], [62.8, 246.0], [62.9, 248.0], [63.0, 249.0], [63.1, 251.0], [63.2, 252.0], [63.3, 254.0], [63.4, 255.0], [63.5, 257.0], [63.6, 258.0], [63.7, 260.0], [63.8, 261.0], [63.9, 262.0], [64.0, 264.0], [64.1, 265.0], [64.2, 267.0], [64.3, 269.0], [64.4, 270.0], [64.5, 272.0], [64.6, 273.0], [64.7, 275.0], [64.8, 276.0], [64.9, 278.0], [65.0, 279.0], [65.1, 280.0], [65.2, 282.0], [65.3, 283.0], [65.4, 285.0], [65.5, 286.0], [65.6, 287.0], [65.7, 289.0], [65.8, 291.0], [65.9, 292.0], [66.0, 294.0], [66.1, 295.0], [66.2, 296.0], [66.3, 298.0], [66.4, 299.0], [66.5, 301.0], [66.6, 302.0], [66.7, 304.0], [66.8, 305.0], [66.9, 307.0], [67.0, 308.0], [67.1, 310.0], [67.2, 312.0], [67.3, 313.0], [67.4, 315.0], [67.5, 316.0], [67.6, 318.0], [67.7, 319.0], [67.8, 321.0], [67.9, 322.0], [68.0, 324.0], [68.1, 325.0], [68.2, 327.0], [68.3, 328.0], [68.4, 330.0], [68.5, 331.0], [68.6, 333.0], [68.7, 334.0], [68.8, 336.0], [68.9, 338.0], [69.0, 339.0], [69.1, 341.0], [69.2, 343.0], [69.3, 344.0], [69.4, 346.0], [69.5, 347.0], [69.6, 349.0], [69.7, 351.0], [69.8, 352.0], [69.9, 354.0], [70.0, 355.0], [70.1, 357.0], [70.2, 358.0], [70.3, 360.0], [70.4, 362.0], [70.5, 363.0], [70.6, 365.0], [70.7, 366.0], [70.8, 368.0], [70.9, 369.0], [71.0, 371.0], [71.1, 373.0], [71.2, 374.0], [71.3, 376.0], [71.4, 378.0], [71.5, 379.0], [71.6, 381.0], [71.7, 382.0], [71.8, 384.0], [71.9, 386.0], [72.0, 388.0], [72.1, 389.0], [72.2, 391.0], [72.3, 393.0], [72.4, 394.0], [72.5, 396.0], [72.6, 398.0], [72.7, 400.0], [72.8, 401.0], [72.9, 403.0], [73.0, 405.0], [73.1, 406.0], [73.2, 408.0], [73.3, 409.0], [73.4, 411.0], [73.5, 412.0], [73.6, 414.0], [73.7, 416.0], [73.8, 417.0], [73.9, 419.0], [74.0, 421.0], [74.1, 422.0], [74.2, 424.0], [74.3, 426.0], [74.4, 427.0], [74.5, 429.0], [74.6, 430.0], [74.7, 432.0], [74.8, 434.0], [74.9, 435.0], [75.0, 437.0], [75.1, 439.0], [75.2, 441.0], [75.3, 443.0], [75.4, 445.0], [75.5, 447.0], [75.6, 449.0], [75.7, 450.0], [75.8, 452.0], [75.9, 454.0], [76.0, 455.0], [76.1, 457.0], [76.2, 459.0], [76.3, 460.0], [76.4, 462.0], [76.5, 463.0], [76.6, 465.0], [76.7, 467.0], [76.8, 468.0], [76.9, 470.0], [77.0, 472.0], [77.1, 474.0], [77.2, 476.0], [77.3, 477.0], [77.4, 479.0], [77.5, 481.0], [77.6, 483.0], [77.7, 485.0], [77.8, 487.0], [77.9, 489.0], [78.0, 490.0], [78.1, 492.0], [78.2, 494.0], [78.3, 496.0], [78.4, 497.0], [78.5, 499.0], [78.6, 501.0], [78.7, 502.0], [78.8, 504.0], [78.9, 506.0], [79.0, 508.0], [79.1, 509.0], [79.2, 511.0], [79.3, 513.0], [79.4, 515.0], [79.5, 517.0], [79.6, 519.0], [79.7, 521.0], [79.8, 523.0], [79.9, 524.0], [80.0, 526.0], [80.1, 528.0], [80.2, 530.0], [80.3, 532.0], [80.4, 534.0], [80.5, 536.0], [80.6, 538.0], [80.7, 540.0], [80.8, 542.0], [80.9, 544.0], [81.0, 546.0], [81.1, 548.0], [81.2, 550.0], [81.3, 552.0], [81.4, 554.0], [81.5, 556.0], [81.6, 558.0], [81.7, 560.0], [81.8, 562.0], [81.9, 563.0], [82.0, 565.0], [82.1, 567.0], [82.2, 569.0], [82.3, 571.0], [82.4, 573.0], [82.5, 575.0], [82.6, 577.0], [82.7, 579.0], [82.8, 581.0], [82.9, 583.0], [83.0, 585.0], [83.1, 587.0], [83.2, 589.0], [83.3, 591.0], [83.4, 593.0], [83.5, 595.0], [83.6, 597.0], [83.7, 599.0], [83.8, 600.0], [83.9, 602.0], [84.0, 604.0], [84.1, 606.0], [84.2, 608.0], [84.3, 610.0], [84.4, 611.0], [84.5, 613.0], [84.6, 615.0], [84.7, 617.0], [84.8, 619.0], [84.9, 621.0], [85.0, 623.0], [85.1, 625.0], [85.2, 627.0], [85.3, 630.0], [85.4, 632.0], [85.5, 634.0], [85.6, 636.0], [85.7, 638.0], [85.8, 640.0], [85.9, 642.0], [86.0, 644.0], [86.1, 646.0], [86.2, 648.0], [86.3, 650.0], [86.4, 652.0], [86.5, 654.0], [86.6, 656.0], [86.7, 658.0], [86.8, 660.0], [86.9, 662.0], [87.0, 665.0], [87.1, 667.0], [87.2, 669.0], [87.3, 671.0], [87.4, 673.0], [87.5, 675.0], [87.6, 677.0], [87.7, 679.0], [87.8, 681.0], [87.9, 683.0], [88.0, 685.0], [88.1, 687.0], [88.2, 689.0], [88.3, 691.0], [88.4, 694.0], [88.5, 696.0], [88.6, 698.0], [88.7, 700.0], [88.8, 702.0], [88.9, 704.0], [89.0, 706.0], [89.1, 708.0], [89.2, 710.0], [89.3, 712.0], [89.4, 714.0], [89.5, 717.0], [89.6, 719.0], [89.7, 721.0], [89.8, 723.0], [89.9, 725.0], [90.0, 727.0], [90.1, 729.0], [90.2, 731.0], [90.3, 733.0], [90.4, 736.0], [90.5, 738.0], [90.6, 740.0], [90.7, 742.0], [90.8, 744.0], [90.9, 746.0], [91.0, 748.0], [91.1, 751.0], [91.2, 753.0], [91.3, 755.0], [91.4, 757.0], [91.5, 759.0], [91.6, 761.0], [91.7, 763.0], [91.8, 765.0], [91.9, 767.0], [92.0, 769.0], [92.1, 771.0], [92.2, 773.0], [92.3, 776.0], [92.4, 778.0], [92.5, 780.0], [92.6, 782.0], [92.7, 785.0], [92.8, 787.0], [92.9, 789.0], [93.0, 792.0], [93.1, 794.0], [93.2, 796.0], [93.3, 798.0], [93.4, 801.0], [93.5, 803.0], [93.6, 805.0], [93.7, 808.0], [93.8, 810.0], [93.9, 813.0], [94.0, 815.0], [94.1, 818.0], [94.2, 820.0], [94.3, 823.0], [94.4, 826.0], [94.5, 828.0], [94.6, 831.0], [94.7, 834.0], [94.8, 837.0], [94.9, 840.0], [95.0, 843.0], [95.1, 846.0], [95.2, 849.0], [95.3, 852.0], [95.4, 854.0], [95.5, 857.0], [95.6, 860.0], [95.7, 863.0], [95.8, 867.0], [95.9, 870.0], [96.0, 873.0], [96.1, 876.0], [96.2, 879.0], [96.3, 882.0], [96.4, 885.0], [96.5, 888.0], [96.6, 891.0], [96.7, 894.0], [96.8, 897.0], [96.9, 900.0], [97.0, 903.0], [97.1, 907.0], [97.2, 910.0], [97.3, 914.0], [97.4, 917.0], [97.5, 921.0], [97.6, 924.0], [97.7, 928.0], [97.8, 932.0], [97.9, 936.0], [98.0, 940.0], [98.1, 945.0], [98.2, 950.0], [98.3, 955.0], [98.4, 960.0], [98.5, 966.0], [98.6, 973.0], [98.7, 980.0], [98.8, 988.0], [98.9, 998.0], [99.0, 1009.0], [99.1, 1018.0], [99.2, 1030.0], [99.3, 1045.0], [99.4, 1061.0], [99.5, 1078.0], [99.6, 1109.0], [99.7, 1162.0], [99.8, 1570.0], [99.9, 4164.0], [100.0, 17960.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 482765.0, "series": [{"data": [[0.0, 482765.0], [100.0, 55933.0], [200.0, 60494.0], [300.0, 56734.0], [400.0, 52645.0], [500.0, 47082.0], [600.0, 44493.0], [700.0, 42201.0], [800.0, 31732.0], [900.0, 18351.0], [1000.0, 5954.0], [1100.0, 1459.0], [1200.0, 254.0], [1300.0, 54.0], [1400.0, 96.0], [1500.0, 310.0], [1600.0, 81.0], [1700.0, 19.0], [1800.0, 23.0], [1900.0, 26.0], [2000.0, 21.0], [2100.0, 72.0], [2200.0, 42.0], [2300.0, 32.0], [2400.0, 92.0], [2500.0, 90.0], [2600.0, 78.0], [2800.0, 7.0], [2700.0, 41.0], [2900.0, 14.0], [3000.0, 41.0], [3100.0, 7.0], [3200.0, 24.0], [3300.0, 11.0], [3400.0, 15.0], [3500.0, 12.0], [3600.0, 12.0], [3700.0, 7.0], [3800.0, 5.0], [3900.0, 6.0], [4000.0, 19.0], [4300.0, 11.0], [4100.0, 38.0], [4200.0, 8.0], [4600.0, 7.0], [4500.0, 11.0], [4400.0, 16.0], [4700.0, 6.0], [4800.0, 5.0], [4900.0, 7.0], [5000.0, 4.0], [5100.0, 6.0], [5200.0, 10.0], [5300.0, 12.0], [5600.0, 15.0], [5400.0, 7.0], [5500.0, 19.0], [5700.0, 14.0], [5800.0, 3.0], [6000.0, 24.0], [6100.0, 22.0], [5900.0, 21.0], [6300.0, 12.0], [6200.0, 12.0], [6500.0, 17.0], [6600.0, 5.0], [6400.0, 18.0], [6900.0, 4.0], [6800.0, 5.0], [6700.0, 3.0], [7100.0, 12.0], [7000.0, 4.0], [7200.0, 13.0], [7300.0, 3.0], [7400.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7900.0, 2.0], [7800.0, 2.0], [7700.0, 1.0], [8100.0, 4.0], [8200.0, 5.0], [8500.0, 1.0], [8400.0, 1.0], [8600.0, 4.0], [8700.0, 3.0], [8300.0, 1.0], [8800.0, 1.0], [9200.0, 3.0], [9000.0, 5.0], [9100.0, 3.0], [8900.0, 2.0], [9400.0, 17.0], [9300.0, 5.0], [9600.0, 3.0], [9700.0, 6.0], [9500.0, 10.0], [9800.0, 17.0], [9900.0, 3.0], [10000.0, 4.0], [10100.0, 5.0], [10200.0, 5.0], [10300.0, 5.0], [10700.0, 2.0], [10400.0, 1.0], [11000.0, 6.0], [10800.0, 2.0], [10900.0, 3.0], [11200.0, 1.0], [11500.0, 4.0], [11700.0, 4.0], [11600.0, 4.0], [11400.0, 3.0], [11900.0, 1.0], [11800.0, 6.0], [12100.0, 1.0], [12200.0, 2.0], [12300.0, 2.0], [12400.0, 3.0], [12500.0, 3.0], [12600.0, 1.0], [12700.0, 3.0], [13100.0, 6.0], [13000.0, 3.0], [13200.0, 6.0], [12800.0, 1.0], [13300.0, 2.0], [13500.0, 9.0], [13600.0, 9.0], [13700.0, 14.0], [13800.0, 3.0], [13400.0, 3.0], [13900.0, 4.0], [14000.0, 5.0], [14200.0, 10.0], [14300.0, 19.0], [14100.0, 11.0], [14400.0, 13.0], [14500.0, 8.0], [14600.0, 18.0], [14700.0, 12.0], [14800.0, 14.0], [14900.0, 19.0], [15000.0, 14.0], [15100.0, 20.0], [15200.0, 13.0], [15300.0, 12.0], [15500.0, 31.0], [15400.0, 13.0], [15600.0, 11.0], [15700.0, 2.0], [15800.0, 3.0], [16100.0, 4.0], [16300.0, 7.0], [16200.0, 1.0], [15900.0, 1.0], [16500.0, 6.0], [16600.0, 14.0], [16400.0, 4.0], [16700.0, 9.0], [16800.0, 8.0], [16900.0, 3.0], [17000.0, 2.0], [17100.0, 6.0], [17200.0, 1.0], [17400.0, 1.0], [17800.0, 1.0], [17900.0, 3.0], [17700.0, 1.0], [17500.0, 1.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2032.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 709051.0, "series": [{"data": [[0.0, 709051.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 191199.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2032.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1964.1397192501336, "minX": 1.63912434E12, "maxY": 2400.0, "series": [{"data": [[1.63912512E12, 2400.0], [1.63912482E12, 2400.0], [1.63912452E12, 2400.0], [1.63912518E12, 2400.0], [1.63912488E12, 2400.0], [1.63912458E12, 2400.0], [1.63912524E12, 1964.1397192501336], [1.63912494E12, 2400.0], [1.63912464E12, 2400.0], [1.63912434E12, 2275.3284142565394], [1.639125E12, 2400.0], [1.6391247E12, 2400.0], [1.6391244E12, 2400.0], [1.63912506E12, 2400.0], [1.63912476E12, 2400.0], [1.63912446E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912524E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.75, "minX": 50.0, "maxY": 15626.0, "series": [{"data": [[50.0, 8.384615384615385], [85.0, 14.100000000000001], [133.0, 18.580000000000002], [147.0, 18.048780487804876], [154.0, 22.18918918918919], [166.0, 17.666666666666668], [178.0, 17.969696969696972], [193.0, 17.400000000000002], [206.0, 18.63888888888889], [218.0, 18.270270270270274], [229.0, 18.02941176470588], [243.0, 19.263157894736846], [253.0, 19.785714285714285], [263.0, 18.17948717948718], [259.0, 18.840909090909093], [284.0, 22.374999999999996], [279.0, 24.372093023255808], [272.0, 16.34146341463415], [303.0, 95.04166666666669], [302.0, 33.602941176470594], [301.0, 20.425531914893615], [299.0, 17.652173913043477], [292.0, 18.073170731707318], [306.0, 92.85813148788935], [305.0, 132.0], [304.0, 130.0], [328.0, 7.5], [342.0, 22.874999999999996], [343.0, 18.0], [339.0, 14.137931034482758], [346.0, 21.317073170731707], [367.0, 22.56818181818182], [353.0, 18.833333333333336], [359.0, 17.232558139534877], [364.0, 21.666666666666668], [382.0, 21.744186046511622], [379.0, 23.377777777777776], [375.0, 23.227272727272723], [371.0, 18.250000000000007], [399.0, 22.55555555555555], [397.0, 20.891304347826086], [393.0, 22.957446808510632], [388.0, 20.630434782608692], [387.0, 20.70212765957446], [414.0, 18.02222222222223], [411.0, 20.82222222222222], [410.0, 25.063829787234038], [409.0, 21.021276595744684], [406.0, 21.666666666666668], [403.0, 17.288888888888884], [430.0, 19.891304347826086], [420.0, 22.58974358974359], [417.0, 22.066666666666666], [445.0, 19.099999999999998], [442.0, 24.266666666666662], [436.0, 21.190476190476193], [432.0, 24.54545454545454], [462.0, 22.244444444444444], [458.0, 19.250000000000004], [453.0, 22.465116279069765], [478.0, 20.131578947368425], [472.0, 30.74418604651163], [465.0, 16.365853658536587], [488.0, 21.263157894736842], [507.0, 20.12820512820513], [502.0, 22.93181818181818], [498.0, 19.318181818181824], [542.0, 13.782608695652174], [516.0, 11.499999999999998], [567.0, 12.54166666666667], [588.0, 8361.644444444444], [589.0, 5647.048780487805], [591.0, 2506.2444444444445], [592.0, 201.28571428571428], [593.0, 12.833333333333334], [594.0, 24.0], [595.0, 37.875], [601.0, 525.0], [602.0, 10383.0], [605.0, 435.5], [612.0, 9487.0], [613.0, 673.0], [614.0, 3086.0], [617.0, 649.0], [626.0, 700.0], [623.0, 10.1875], [651.0, 691.0], [659.0, 764.0], [655.0, 9.294117647058826], [681.0, 789.0], [689.0, 862.5], [686.0, 12.26086956521739], [711.0, 10.0], [740.0, 860.0], [750.0, 10777.0], [767.0, 11.849999999999998], [744.0, 14.28], [786.0, 869.0], [795.0, 13.9], [823.0, 8.769230769230768], [858.0, 15.730769230769234], [887.0, 3450.5], [888.0, 4933.714285714285], [890.0, 7377.5], [892.0, 11242.0], [893.0, 1055.8200836820085], [894.0, 1080.8695652173915], [895.0, 243.5], [880.0, 9.933333333333332], [926.0, 1144.9531250000002], [927.0, 1269.25], [914.0, 14.34782608695652], [928.0, 1044.0], [936.0, 1134.0], [941.0, 1180.0], [942.0, 39.0], [943.0, 4978.666666666667], [940.0, 13.090909090909092], [963.0, 1219.5], [972.0, 1212.0], [975.0, 12585.0], [979.0, 545.6666666666666], [985.0, 437.3333333333333], [966.0, 12.235294117647058], [1021.0, 1421.0], [1000.0, 12596.0], [1006.0, 142.0], [1008.0, 1583.0], [1012.0, 6743.0], [1014.0, 6846.5], [1016.0, 987.0], [1023.0, 11730.5], [997.0, 12.4], [1078.0, 4318.125], [1080.0, 4626.666666666666], [1084.0, 160.0], [1086.0, 4628.666666666666], [1070.0, 194.0], [1068.0, 195.0], [1056.0, 92.62790697674416], [1058.0, 171.0], [1088.0, 532.75], [1092.0, 757.5217391304348], [1090.0, 387.0], [1094.0, 387.0], [1116.0, 1503.0], [1118.0, 517.0], [1112.0, 430.7731958762887], [1110.0, 673.3333333333333], [1096.0, 230.42857142857142], [1098.0, 63.0], [1100.0, 2935.4], [1122.0, 3092.777777777778], [1120.0, 455.0], [1138.0, 438.1360544217684], [1102.0, 386.0], [1148.0, 421.0], [1128.0, 360.3333333333333], [1124.0, 35.0], [1208.0, 346.0], [1214.0, 346.0], [1164.0, 401.84999999999985], [1154.0, 422.0], [1156.0, 420.0], [1228.0, 1102.0], [1270.0, 1878.0], [1226.0, 309.0], [1216.0, 328.4615384615384], [1238.0, 289.24576271186436], [1232.0, 308.0], [1240.0, 267.0], [1266.0, 211.7898550724637], [1268.0, 192.5], [1260.0, 228.0], [1262.0, 228.0], [1254.0, 245.50406504065043], [1256.0, 229.0], [1288.0, 118.0], [1298.0, 102.94736842105263], [1296.0, 113.0], [1284.0, 153.0], [1336.0, 79.0], [1334.0, 80.5], [1330.0, 82.0], [1332.0, 80.0], [1354.0, 70.0], [1370.0, 323.0], [1402.0, 2888.7999999999997], [1368.0, 13986.0], [1362.0, 2122.0], [1360.0, 67.0], [1358.0, 13870.0], [1356.0, 70.0], [1346.0, 73.0], [1344.0, 75.0], [1374.0, 63.5], [1372.0, 65.0], [1406.0, 53.0], [1404.0, 54.0], [1400.0, 55.333333333333336], [1382.0, 60.0], [1384.0, 59.0], [1390.0, 58.0], [1414.0, 12795.0], [1420.0, 2001.0], [1430.0, 406.5], [1434.0, 37.666666666666664], [1436.0, 35.0], [1460.0, 25.666666666666668], [1416.0, 1952.0], [1412.0, 2174.3333333333335], [1410.0, 51.0], [1408.0, 716.0], [1462.0, 25.0], [1470.0, 22.0], [1446.0, 31.0], [1440.0, 35.0], [1454.0, 26.5], [1450.0, 28.0], [1466.0, 24.0], [1522.0, 20.674418604651162], [1524.0, 782.0], [1476.0, 18.0], [1486.0, 15.5], [1480.0, 17.5], [1472.0, 20.0], [1474.0, 20.5], [1526.0, 19.800000000000004], [1532.0, 20.250000000000007], [1518.0, 20.542168674698797], [1492.0, 11.5], [1488.0, 13.333333333333332], [1490.0, 14.0], [1592.0, 495.5], [1586.0, 506.02702702702686], [1584.0, 484.0], [1548.0, 20.173913043478258], [1550.0, 24.888888888888882], [1598.0, 493.0], [1568.0, 20.348837209302324], [1574.0, 158.20359281437123], [1582.0, 429.776119402985], [1580.0, 352.75], [1576.0, 244.0], [1536.0, 22.52173913043479], [1562.0, 19.42857142857142], [1558.0, 21.31914893617022], [1554.0, 17.818181818181827], [1538.0, 21.78723404255319], [1544.0, 20.727272727272737], [1606.0, 496.0], [1654.0, 490.0], [1628.0, 490.0], [1644.0, 496.0], [1610.0, 498.0], [1602.0, 496.0], [1600.0, 494.0], [1624.0, 490.0], [1658.0, 489.0], [1662.0, 489.0], [1718.0, 475.0], [1680.0, 484.0], [1692.0, 481.0], [1722.0, 477.0], [1712.0, 482.0], [1664.0, 482.0], [1672.0, 496.0], [1708.0, 482.0], [1710.0, 487.0], [1698.0, 486.3333333333333], [1702.0, 483.0], [1700.0, 482.0], [1740.0, 479.0], [1790.0, 475.5], [1770.0, 930.0], [1760.0, 475.0], [1766.0, 476.5], [1746.0, 479.0], [1744.0, 478.6666666666667], [1750.0, 472.0], [1772.0, 466.0], [1734.0, 482.0], [1776.0, 470.0], [1782.0, 471.0], [1742.0, 482.0], [1754.0, 469.0], [1844.0, 24.43478260869566], [1848.0, 978.0], [1834.0, 7958.25], [1842.0, 2131.0], [1836.0, 21.166666666666664], [1846.0, 21.808510638297875], [1840.0, 384.2830188679244], [1818.0, 10375.666666666666], [1808.0, 465.0], [1812.0, 469.0], [1794.0, 1108.0], [1820.0, 462.0], [1800.0, 476.0], [1804.0, 469.5], [1832.0, 458.0526315789474], [1828.0, 14336.0], [1824.0, 461.3333333333333], [1854.0, 22.557894736842094], [1852.0, 25.624999999999993], [1850.0, 20.27659574468085], [1858.0, 205.48140900195702], [1880.0, 3393.125984251968], [1856.0, 135.84], [1886.0, 268.75], [1884.0, 1276.2287581699345], [1882.0, 2595.5462184873945], [1878.0, 108.23809523809524], [1874.0, 3724.4999999999995], [1876.0, 22.000000000000014], [1872.0, 70.52777777777779], [1860.0, 1159.6068965517259], [1862.0, 83.63374485596712], [1864.0, 364.88243831640085], [1866.0, 124.0], [1868.0, 21.794178794178805], [1870.0, 78.82781456953639], [1918.0, 2310.0555555555557], [1904.0, 2017.1029411764691], [1906.0, 18.0], [1908.0, 22.0], [1910.0, 45.5], [1914.0, 49.5], [1912.0, 26.0], [1916.0, 7531.0], [1890.0, 2781.905882352941], [1900.0, 75.16666666666666], [1902.0, 7188.333333333334], [1898.0, 13.0], [1896.0, 4782.75], [1894.0, 177.0], [1950.0, 1133.1315789473683], [1920.0, 2386.268817204301], [1946.0, 74.0], [1948.0, 277.6], [1938.0, 266.5], [1940.0, 8974.6], [1942.0, 1796.9677419354844], [1922.0, 4449.889999999999], [1924.0, 3957.9999999999995], [1980.0, 778.25], [1952.0, 26.0], [1982.0, 543.0357142857146], [1974.0, 11.0], [1976.0, 14.666666666666666], [1972.0, 63.0], [1954.0, 538.7058823529412], [1962.0, 65.0], [1932.0, 7967.5], [1930.0, 58.0], [1928.0, 126.0], [1926.0, 76.0], [1988.0, 1029.1000000000001], [1990.0, 4203.181818181818], [1986.0, 1043.75], [2000.0, 971.3333333333334], [2002.0, 706.6], [2004.0, 8.0], [2006.0, 969.0476190476193], [2008.0, 2519.153846153846], [2010.0, 1397.8829787234047], [2014.0, 3970.5000000000005], [2012.0, 41.0], [1992.0, 8170.0], [1994.0, 1729.0253164556966], [1996.0, 20.0], [1998.0, 1114.26582278481], [2018.0, 5512.672727272729], [2026.0, 1270.9629629629633], [2028.0, 230.5625], [2030.0, 2676.0000000000005], [2024.0, 26.333333333333332], [2022.0, 642.4259259259258], [2020.0, 31.333333333333332], [2016.0, 17.0], [2046.0, 1368.3636363636365], [2040.0, 852.1666666666666], [2042.0, 3244.722222222223], [2044.0, 32.0], [2038.0, 3242.0], [2036.0, 1552.5357142857142], [2032.0, 1724.8780487804875], [2034.0, 1096.5249999999999], [2052.0, 2583.3513513513517], [2048.0, 3585.3809523809527], [2104.0, 1791.2820512820515], [2100.0, 1273.5], [2096.0, 502.1228070175439], [2092.0, 2611.9999999999995], [2088.0, 1338.6666666666667], [2080.0, 139.8392423506552], [2084.0, 26.031250000000018], [2064.0, 1170.7799999999997], [2068.0, 102.37499999999999], [2072.0, 335.85714285714283], [2076.0, 574.2692307692307], [2120.0, 841.2000000000002], [2116.0, 63.5609756097561], [2112.0, 1183.0], [2124.0, 687.4878048780489], [2128.0, 3862.5], [2132.0, 23.5], [2136.0, 623.0], [2140.0, 23.5], [2172.0, 19.0], [2168.0, 25.0], [2160.0, 21.769230769230774], [2152.0, 28.05882352941177], [2148.0, 9.0], [2144.0, 41.0], [2156.0, 33.0], [2164.0, 31.0], [2060.0, 2889.0], [2056.0, 25.0], [2296.0, 27.75], [2244.0, 14.307692307692307], [2240.0, 53.75], [2248.0, 35.26086956521739], [2252.0, 20.5], [2256.0, 15.88888888888889], [2260.0, 32.72727272727273], [2264.0, 16.93181818181818], [2268.0, 19.200000000000003], [2284.0, 28.375000000000004], [2272.0, 31.71428571428571], [2204.0, 11.833333333333332], [2200.0, 36.285714285714285], [2196.0, 24.333333333333332], [2188.0, 31.625], [2184.0, 17.52631578947368], [2176.0, 32.0], [2180.0, 26.666666666666668], [2220.0, 46.0], [2216.0, 21.22222222222222], [2208.0, 37.764705882352935], [2228.0, 20.999999999999996], [2236.0, 19.666666666666668], [2276.0, 22.0], [2288.0, 22.26829268292683], [2304.0, 23.099999999999998], [2308.0, 38.0], [2356.0, 17.875], [2364.0, 13.0], [2352.0, 14.166666666666668], [2340.0, 20.5], [2400.0, 246.27713884129335], [2372.0, 18.5], [2392.0, 141.66666666666666], [2384.0, 20.499999999999996], [2396.0, 216.89189189189185], [2312.0, 31.64130434782609], [2061.0, 2271.0], [2065.0, 413.70000000000016], [2049.0, 33.22222222222222], [2105.0, 1259.1818181818185], [2097.0, 2638.0], [2093.0, 1638.0153846153844], [2089.0, 66.2093023255814], [2085.0, 223.86885245901632], [2081.0, 453.2606837606839], [2101.0, 899.4], [2053.0, 3063.0], [2073.0, 921.2375], [2137.0, 332.27777777777777], [2129.0, 1063.0400000000002], [2125.0, 5390.0], [2121.0, 1494.7199999999998], [2113.0, 3229.5], [2141.0, 27.2], [2173.0, 21.0], [2169.0, 15.377777777777782], [2165.0, 36.375], [2161.0, 24.999999999999996], [2149.0, 11.083333333333332], [2077.0, 77.0], [2153.0, 37.0], [2157.0, 9.2], [2069.0, 20.0], [2057.0, 26.0], [2285.0, 35.0], [2297.0, 31.4], [2241.0, 60.5], [2245.0, 15.166666666666666], [2249.0, 29.0], [2257.0, 18.847826086956523], [2265.0, 10.0], [2269.0, 23.25], [2301.0, 17.285714285714285], [2293.0, 13.0], [2281.0, 19.2], [2181.0, 9.5], [2189.0, 46.81818181818181], [2193.0, 12.857142857142858], [2205.0, 15.4], [2197.0, 32.99999999999999], [2237.0, 21.666666666666668], [2229.0, 26.08695652173913], [2225.0, 12.166666666666666], [2221.0, 36.5], [2217.0, 24.0], [2209.0, 29.0], [2213.0, 7.5], [2233.0, 37.333333333333336], [2277.0, 9.0], [2305.0, 30.333333333333336], [2309.0, 43.0], [2317.0, 78.99999999999999], [2325.0, 67.01075268817206], [2329.0, 45.0], [2353.0, 16.2], [2357.0, 11.5], [2361.0, 17.0], [2337.0, 83.99999999999997], [2345.0, 18.0], [2341.0, 20.0], [2397.0, 227.88095238095238], [2389.0, 9.36842105263158], [2385.0, 7.0], [1079.0, 7588.0], [1087.0, 1220.0], [1085.0, 291.7686567164179], [1075.0, 193.0], [1069.0, 193.0], [1065.0, 195.0], [1025.0, 11.882352941176471], [1089.0, 2524.714285714286], [1119.0, 455.0], [1115.0, 13367.0], [1111.0, 1968.0], [1113.0, 456.0], [1091.0, 665.3333333333333], [1093.0, 216.5], [1097.0, 5001.0], [1095.0, 386.0], [1099.0, 349.0], [1101.0, 467.25], [1103.0, 696.3333333333333], [1121.0, 248.5], [1133.0, 454.0], [1145.0, 421.0], [1147.0, 421.0], [1167.0, 453.0], [1159.0, 522.3333333333334], [1191.0, 371.29752066115697], [1201.0, 347.0], [1187.0, 384.0], [1175.0, 386.0], [1169.0, 385.0], [1227.0, 1741.0], [1279.0, 980.5], [1247.0, 266.0], [1239.0, 268.0], [1241.0, 267.0], [1271.0, 193.0], [1251.0, 267.0], [1259.0, 228.0], [1289.0, 118.0], [1293.0, 113.5], [1333.0, 13796.0], [1305.0, 740.0], [1303.0, 1798.0], [1301.0, 1169.0], [1295.0, 1329.5], [1291.0, 117.81818181818183], [1287.0, 134.78571428571433], [1285.0, 153.0], [1281.0, 172.47272727272733], [1339.0, 77.0], [1331.0, 81.0], [1319.0, 87.0], [1321.0, 86.0], [1327.0, 84.0], [1325.0, 85.5], [1357.0, 68.0], [1393.0, 57.0], [1361.0, 67.0], [1349.0, 72.0], [1345.0, 73.66666666666667], [1375.0, 63.333333333333336], [1373.0, 63.0], [1407.0, 51.5], [1403.0, 53.0], [1399.0, 55.0], [1383.0, 58.0], [1409.0, 51.0], [1429.0, 41.0], [1433.0, 39.0], [1437.0, 35.0], [1423.0, 630.0], [1411.0, 50.0], [1441.0, 33.0], [1449.0, 29.0], [1447.0, 30.0], [1469.0, 22.0], [1467.0, 23.0], [1481.0, 16.0], [1485.0, 15.0], [1475.0, 19.5], [1487.0, 15.0], [1529.0, 20.999999999999996], [1495.0, 12.0], [1587.0, 499.75], [1589.0, 501.22222222222223], [1585.0, 482.0], [1599.0, 504.0], [1573.0, 46.224489795918366], [1579.0, 313.2913385826772], [1575.0, 244.0], [1559.0, 20.888888888888893], [1553.0, 18.617021276595747], [1539.0, 22.348837209302324], [1653.0, 497.0], [1641.0, 489.0], [1647.0, 489.0], [1637.0, 489.5], [1623.0, 495.6666666666667], [1613.0, 496.5], [1625.0, 498.0], [1615.0, 494.0], [1663.0, 485.0], [1693.0, 489.0], [1723.0, 480.0], [1683.0, 2114.0], [1685.0, 489.0], [1691.0, 486.0], [1725.0, 475.6666666666667], [1697.0, 483.0], [1713.0, 481.0], [1669.0, 485.0], [1675.0, 489.6666666666667], [1695.0, 491.0], [1705.0, 487.0], [1707.0, 483.0], [1785.0, 465.0], [1789.0, 966.0], [1791.0, 467.0], [1765.0, 469.0], [1763.0, 474.0], [1749.0, 473.0], [1773.0, 471.0], [1735.0, 474.0], [1731.0, 476.0], [1729.0, 478.0], [1805.0, 919.0], [1843.0, 27.423611111111114], [1841.0, 22.739130434782602], [1837.0, 633.0], [1847.0, 303.0833333333334], [1845.0, 2356.0], [1817.0, 464.0], [1813.0, 475.0], [1799.0, 464.0], [1803.0, 466.0], [1797.0, 857.0], [1831.0, 2171.6875], [1829.0, 460.0], [1833.0, 254.72801635991883], [1825.0, 577.0], [1855.0, 75.16860465116278], [1853.0, 21.54736842105264], [1851.0, 17.391304347826086], [1859.0, 791.2285714285714], [1885.0, 94.5], [1887.0, 247.66666666666666], [1883.0, 4948.0], [1881.0, 228.59999999999997], [1879.0, 3107.6800000000003], [1877.0, 433.1226415094338], [1875.0, 21.738675958188143], [1873.0, 3093.0], [1857.0, 25.620754716981143], [1861.0, 527.0363636363636], [1863.0, 70.71951219512191], [1865.0, 25.84466019417475], [1867.0, 1337.9999999999998], [1869.0, 81.39814814814821], [1871.0, 23.302083333333332], [1889.0, 2445.2549999999987], [1919.0, 1164.2307692307693], [1917.0, 32.0], [1905.0, 16.5], [1909.0, 7750.5], [1911.0, 25.0], [1913.0, 1499.3333333333335], [1915.0, 15037.0], [1907.0, 36.16666666666667], [1899.0, 741.8333333333336], [1903.0, 7516.5], [1897.0, 29.333333333333336], [1893.0, 3297.1428571428573], [1895.0, 9.0], [1951.0, 906.5581395348837], [1923.0, 4752.5], [1943.0, 56.857142857142854], [1945.0, 156.38888888888889], [1947.0, 611.0], [1937.0, 3972.0000000000005], [1941.0, 7536.5], [1921.0, 1258.4615384615386], [1925.0, 55.0], [1935.0, 1330.5], [1953.0, 902.7956989247311], [1973.0, 12.6], [1981.0, 39.0], [1983.0, 2154.2173913043475], [1979.0, 14.666666666666666], [1975.0, 26.666666666666668], [1971.0, 431.0], [1955.0, 64.0], [1957.0, 28.0], [1933.0, 15626.0], [1931.0, 213.25], [1927.0, 55.0], [1929.0, 194.5], [1993.0, 497.4516129032258], [1997.0, 1070.1874999999995], [1985.0, 2690.3333333333335], [2003.0, 398.80000000000007], [2005.0, 1650.0804597701147], [2007.0, 877.8108108108108], [2009.0, 5515.666666666666], [2011.0, 144.9661016949152], [2013.0, 591.666666666667], [1989.0, 13.6], [1999.0, 32.142857142857146], [2019.0, 11693.909090909092], [2021.0, 4524.388888888888], [2023.0, 1015.1176470588235], [2027.0, 26.3125], [2029.0, 3431.5053763440856], [2031.0, 24.0], [2025.0, 29.5], [2017.0, 3170.052631578947], [2047.0, 2424.285714285714], [2043.0, 22.5], [2041.0, 6142.0], [2045.0, 2256.285714285714], [2039.0, 4586.0], [2035.0, 1080.2790697674416], [2033.0, 33.57142857142858], [2066.0, 602.0454545454545], [2158.0, 11.0], [2054.0, 1094.1707317073171], [2106.0, 18.795454545454543], [2102.0, 85.34782608695649], [2098.0, 713.6557377049182], [2094.0, 1564.285714285714], [2086.0, 20.0], [2082.0, 70.45454545454545], [2110.0, 450.0], [2050.0, 2699.8333333333335], [2058.0, 1418.455782312925], [2062.0, 3235.666666666666], [2074.0, 91.66666666666666], [2174.0, 26.235294117647054], [2114.0, 124.0], [2118.0, 18.0], [2122.0, 2212.5], [2126.0, 1823.3125000000002], [2134.0, 24.333333333333332], [2130.0, 1390.107142857143], [2138.0, 14.0], [2142.0, 57.714285714285715], [2170.0, 13.0], [2166.0, 47.0], [2162.0, 30.0], [2150.0, 18.288888888888888], [2146.0, 37.0], [2154.0, 28.0], [2070.0, 182.24999999999997], [2290.0, 25.5], [2294.0, 21.9], [2242.0, 53.0], [2246.0, 22.000000000000004], [2250.0, 22.000000000000004], [2254.0, 10.0], [2258.0, 26.263157894736842], [2270.0, 26.000000000000004], [2298.0, 46.5], [2302.0, 17.47222222222222], [2238.0, 29.863636363636367], [2206.0, 17.4], [2202.0, 20.88636363636364], [2198.0, 37.0], [2190.0, 37.8], [2186.0, 24.533333333333328], [2182.0, 11.0], [2178.0, 21.170731707317074], [2194.0, 19.452380952380953], [2234.0, 9.333333333333334], [2222.0, 24.5], [2218.0, 26.6], [2214.0, 10.75], [2226.0, 16.88888888888889], [2278.0, 9.0], [2286.0, 28.0], [2306.0, 34.25], [2310.0, 45.0], [2358.0, 74.0], [2362.0, 17.0], [2366.0, 21.0], [2350.0, 16.0], [2338.0, 209.0], [2398.0, 246.25714285714287], [2394.0, 166.50980392156862], [2330.0, 45.0], [2314.0, 40.319999999999986], [2059.0, 3396.5], [2055.0, 976.4230769230769], [2051.0, 1550.9999999999998], [2103.0, 1238.0952380952388], [2099.0, 2371.181818181818], [2095.0, 1226.0], [2091.0, 1523.6562499999995], [2087.0, 365.41666666666674], [2083.0, 22.255319148936163], [2107.0, 11.0], [2063.0, 770.5744680851064], [2067.0, 1691.924050632911], [2071.0, 1135.2580645161288], [2075.0, 41.833333333333336], [2175.0, 35.56249999999999], [2143.0, 39.0], [2139.0, 18.26923076923078], [2135.0, 121.0], [2131.0, 23.0], [2127.0, 1170.5], [2123.0, 1696.2500000000002], [2119.0, 927.0833333333334], [2171.0, 14.0], [2167.0, 37.4], [2151.0, 17.625], [2147.0, 20.0], [2159.0, 16.0], [2295.0, 16.166666666666664], [2243.0, 54.0], [2303.0, 17.5], [2247.0, 26.0], [2251.0, 23.5], [2255.0, 11.0], [2259.0, 30.166666666666664], [2263.0, 29.0], [2267.0, 14.5], [2271.0, 27.75], [2291.0, 10.2], [2287.0, 30.2], [2283.0, 22.857142857142858], [2239.0, 19.522727272727277], [2179.0, 37.5], [2187.0, 28.642857142857146], [2191.0, 44.0], [2195.0, 20.857142857142858], [2207.0, 26.76923076923077], [2203.0, 9.0], [2199.0, 41.5], [2215.0, 17.132075471698126], [2211.0, 36.0], [2219.0, 29.0], [2227.0, 18.0], [2235.0, 14.857142857142856], [2275.0, 18.846153846153847], [2279.0, 11.5], [2315.0, 79.0], [2311.0, 60.5], [2319.0, 78.66666666666667], [2363.0, 9.0], [2355.0, 12.0], [2371.0, 19.0], [2343.0, 19.0], [2399.0, 210.32456140350877], [2395.0, 199.05263157894737], [2387.0, 5.75], [2383.0, 6.0], [2391.0, 95.11510791366909]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2379.5971691777095, 254.8472140639002]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 83805.36666666667, "minX": 1.63912434E12, "maxY": 8265599.65, "series": [{"data": [[1.63912512E12, 7850362.45], [1.63912482E12, 7680002.55], [1.63912452E12, 7679356.633333334], [1.63912518E12, 7979138.7], [1.63912488E12, 8265599.65], [1.63912458E12, 8166245.633333334], [1.63912524E12, 4467411.633333334], [1.63912494E12, 7969240.35], [1.63912464E12, 7826036.266666667], [1.63912434E12, 4041710.1666666665], [1.639125E12, 7668483.183333334], [1.6391247E12, 7930009.133333334], [1.6391244E12, 8201407.6], [1.63912506E12, 8227906.266666667], [1.63912476E12, 8206112.266666667], [1.63912446E12, 7979413.783333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63912512E12, 164122.03333333333], [1.63912482E12, 160545.45], [1.63912452E12, 160539.88333333333], [1.63912518E12, 166794.03333333333], [1.63912488E12, 172800.46666666667], [1.63912458E12, 170648.95], [1.63912524E12, 93389.18333333333], [1.63912494E12, 166607.55], [1.63912464E12, 163548.66666666666], [1.63912434E12, 83805.36666666667], [1.639125E12, 160320.0], [1.6391247E12, 165730.8], [1.6391244E12, 170432.2], [1.63912506E12, 172015.56666666668], [1.63912476E12, 171517.35], [1.63912446E12, 166682.31666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912524E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 34.227080012210386, "minX": 1.63912434E12, "maxY": 685.987285064892, "series": [{"data": [[1.63912512E12, 34.227080012210386], [1.63912482E12, 361.7532289662107], [1.63912452E12, 68.37049879505547], [1.63912518E12, 154.32785435370323], [1.63912488E12, 331.8309065137542], [1.63912458E12, 387.11223108414686], [1.63912524E12, 151.79849789884503], [1.63912494E12, 136.50727543059443], [1.63912464E12, 298.4083560245088], [1.63912434E12, 685.987285064892], [1.639125E12, 181.93473958333277], [1.6391247E12, 390.42207443235185], [1.6391244E12, 352.83721307749886], [1.63912506E12, 342.400521018736], [1.63912476E12, 308.19434302127667], [1.63912446E12, 38.25611505989979]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912524E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 34.02803310382239, "minX": 1.63912434E12, "maxY": 681.1931945450984, "series": [{"data": [[1.63912512E12, 34.02803310382239], [1.63912482E12, 361.5819420606441], [1.63912452E12, 68.24638083184503], [1.63912518E12, 154.18487801622035], [1.63912488E12, 331.6888087107767], [1.63912458E12, 386.9072923292766], [1.63912524E12, 151.62137513784143], [1.63912494E12, 136.38475417230674], [1.63912464E12, 298.2006126616751], [1.63912434E12, 681.1931945450984], [1.639125E12, 181.79538194444496], [1.6391247E12, 390.20635160553405], [1.6391244E12, 352.675643647936], [1.63912506E12, 342.26926313064655], [1.63912476E12, 307.99668954773097], [1.63912446E12, 38.14092168051543]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912524E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6007896184589469, "minX": 1.63912434E12, "maxY": 336.28974240727086, "series": [{"data": [[1.63912512E12, 4.575585930875416], [1.63912482E12, 4.96411296614137], [1.63912452E12, 0.6215433693371879], [1.63912518E12, 5.24570303374155], [1.63912488E12, 1.1152470845950584], [1.63912458E12, 0.8403712221298079], [1.63912524E12, 2.8864781092599707], [1.63912494E12, 0.6264220919160031], [1.63912464E12, 1.584972770592231], [1.63912434E12, 336.28974240727086], [1.639125E12, 1.9027083333333366], [1.6391247E12, 2.2302834878408966], [1.6391244E12, 2.9620629200350663], [1.63912506E12, 0.6007896184589469], [1.63912476E12, 2.2472128912905935], [1.63912446E12, 0.632462375279483]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912524E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.63912434E12, "maxY": 17960.0, "series": [{"data": [[1.63912512E12, 888.0], [1.63912482E12, 1086.0], [1.63912452E12, 1629.0], [1.63912518E12, 1287.0], [1.63912488E12, 1085.0], [1.63912458E12, 1157.0], [1.63912524E12, 888.0], [1.63912494E12, 1080.0], [1.63912464E12, 1201.0], [1.63912434E12, 17960.0], [1.639125E12, 1316.0], [1.6391247E12, 1206.0], [1.6391244E12, 1121.0], [1.63912506E12, 1091.0], [1.63912476E12, 1168.0], [1.63912446E12, 634.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63912512E12, 707.9900000000016], [1.63912482E12, 1032.0], [1.63912452E12, 1121.0], [1.63912518E12, 909.0], [1.63912488E12, 864.9900000000016], [1.63912458E12, 965.0], [1.63912524E12, 479.0], [1.63912494E12, 47.0], [1.63912464E12, 935.0], [1.63912434E12, 1540.9900000000016], [1.639125E12, 1054.0], [1.6391247E12, 919.9900000000016], [1.6391244E12, 1008.0], [1.63912506E12, 1036.0], [1.63912476E12, 902.0], [1.63912446E12, 41.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63912512E12, 887.0], [1.63912482E12, 1085.9963091278005], [1.63912452E12, 1622.9989454650859], [1.63912518E12, 1106.9968363952576], [1.63912488E12, 926.9978909301717], [1.63912458E12, 1013.9994727325429], [1.63912524E12, 541.9978909301717], [1.63912494E12, 90.0], [1.63912464E12, 1022.9994727325429], [1.63912434E12, 1591.0], [1.639125E12, 1114.9942000579722], [1.6391247E12, 953.9994727325429], [1.6391244E12, 1036.0], [1.63912506E12, 1091.0], [1.63912476E12, 936.0], [1.63912446E12, 67.99894546508585]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63912512E12, 856.0], [1.63912482E12, 1072.9993051910387], [1.63912452E12, 1610.9993051910387], [1.63912518E12, 958.0], [1.63912488E12, 919.0], [1.63912458E12, 1008.0], [1.63912524E12, 523.9993051910387], [1.63912494E12, 80.99930519103873], [1.63912464E12, 981.9993051910387], [1.63912434E12, 1585.0], [1.639125E12, 1087.0], [1.6391247E12, 947.9993051910387], [1.6391244E12, 1031.0], [1.63912506E12, 1083.0], [1.63912476E12, 933.0], [1.63912446E12, 60.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63912512E12, 5.0], [1.63912482E12, 3.0], [1.63912452E12, 4.0], [1.63912518E12, 4.0], [1.63912488E12, 5.0], [1.63912458E12, 4.0], [1.63912524E12, 5.0], [1.63912494E12, 4.0], [1.63912464E12, 4.0], [1.63912434E12, 5.0], [1.639125E12, 4.0], [1.6391247E12, 4.0], [1.6391244E12, 5.0], [1.63912506E12, 4.0], [1.63912476E12, 4.0], [1.63912446E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63912512E12, 24.0], [1.63912482E12, 274.0], [1.63912452E12, 27.0], [1.63912518E12, 392.0], [1.63912488E12, 229.0], [1.63912458E12, 260.0], [1.63912524E12, 29.0], [1.63912494E12, 22.0], [1.63912464E12, 142.0], [1.63912434E12, 282.0], [1.639125E12, 360.0], [1.6391247E12, 340.0], [1.6391244E12, 433.0], [1.63912506E12, 28.0], [1.63912476E12, 222.0], [1.63912446E12, 23.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912524E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 24.0, "maxY": 9426.0, "series": [{"data": [[24.0, 12.0], [38.0, 15.0], [49.0, 20.0], [51.0, 9426.0], [57.0, 27.0], [79.0, 19.0], [84.0, 40.0], [93.0, 62.0], [99.0, 1277.0], [109.0, 19.0], [114.0, 29.0], [118.0, 20.0], [125.0, 25.0], [140.0, 40.0], [136.0, 21.0], [142.0, 30.5], [146.0, 26.0], [144.0, 43.0], [164.0, 20.0], [180.0, 150.5], [182.0, 22.0], [183.0, 23.0], [190.0, 17.0], [196.0, 29.0], [202.0, 22.0], [210.0, 104.5], [216.0, 115.5], [220.0, 25.0], [230.0, 24.0], [228.0, 156.0], [232.0, 91.0], [239.0, 25.0], [246.0, 25.0], [240.0, 26.5], [248.0, 23.0], [263.0, 19.0], [288.0, 22.0], [293.0, 260.0], [307.0, 140.0], [331.0, 24.0], [326.0, 93.0], [325.0, 20.0], [332.0, 123.5], [324.0, 23.0], [346.0, 159.0], [351.0, 21.0], [337.0, 22.0], [340.0, 23.0], [336.0, 23.0], [352.0, 140.5], [363.0, 108.0], [366.0, 21.0], [368.0, 23.0], [371.0, 22.0], [373.0, 22.0], [372.0, 24.0], [377.0, 21.0], [383.0, 24.0], [375.0, 23.0], [370.0, 23.0], [374.0, 83.0], [396.0, 24.0], [387.0, 166.0], [390.0, 24.0], [411.0, 21.0], [402.0, 124.0], [414.0, 129.5], [422.0, 24.0], [420.0, 24.0], [438.0, 22.0], [440.0, 145.0], [462.0, 516.5], [452.0, 24.0], [455.0, 193.0], [457.0, 176.0], [473.0, 33.0], [479.0, 21.0], [476.0, 25.0], [466.0, 125.0], [483.0, 32.0], [480.0, 23.0], [495.0, 173.0], [500.0, 157.5], [504.0, 182.0], [526.0, 21.0], [516.0, 174.5], [514.0, 167.5], [530.0, 23.0], [525.0, 24.0], [551.0, 26.0], [558.0, 111.0], [549.0, 96.0], [577.0, 22.0], [625.0, 24.0], [617.0, 23.0], [640.0, 169.0], [667.0, 149.0], [679.0, 201.0], [704.0, 30.0], [707.0, 22.0], [720.0, 23.0], [706.0, 21.0], [732.0, 23.0], [767.0, 22.0], [739.0, 65.0], [763.0, 23.0], [757.0, 22.0], [755.0, 21.0], [766.0, 22.0], [793.0, 21.0], [789.0, 23.0], [782.0, 23.0], [771.0, 23.0], [788.0, 233.5], [795.0, 22.0], [777.0, 21.0], [803.0, 21.0], [815.0, 24.0], [814.0, 21.0], [810.0, 22.0], [811.0, 173.0], [812.0, 23.0], [818.0, 23.0], [817.0, 23.0], [826.0, 24.0], [830.0, 22.0], [829.0, 20.0], [825.0, 22.0], [860.0, 23.0], [832.0, 22.0], [844.0, 22.0], [836.0, 23.0], [846.0, 22.0], [843.0, 25.0], [886.0, 24.0], [877.0, 23.0], [879.0, 25.0], [868.0, 22.0], [888.0, 21.0], [925.0, 23.0], [898.0, 21.0], [908.0, 23.0], [911.0, 27.0], [906.0, 24.0], [897.0, 223.0], [951.0, 24.0], [950.0, 24.0], [987.0, 22.0], [990.0, 23.0], [962.0, 22.0], [964.0, 23.0], [986.0, 24.0], [985.0, 23.0], [984.0, 23.0], [989.0, 22.0], [970.0, 22.0], [974.0, 23.0], [969.0, 23.0], [960.0, 28.0], [991.0, 22.0], [979.0, 23.0], [980.0, 23.0], [978.0, 23.0], [976.0, 24.0], [981.0, 22.0], [983.0, 22.0], [982.0, 23.0], [988.0, 22.0], [995.0, 23.0], [999.0, 22.0], [1001.0, 23.0], [1000.0, 23.0], [1004.0, 22.0], [1003.0, 22.0], [1002.0, 23.0], [1014.0, 23.0], [1015.0, 23.0], [1013.0, 21.0], [1012.0, 23.0], [1011.0, 23.0], [997.0, 23.0], [998.0, 23.0], [996.0, 23.0], [1008.0, 23.0], [1020.0, 24.0], [1009.0, 23.0], [1010.0, 23.0], [1007.0, 22.0], [1006.0, 23.0], [994.0, 23.0], [992.0, 23.0], [993.0, 22.0], [1005.0, 24.0], [1056.0, 24.0], [1043.0, 26.0], [1069.0, 24.0], [1048.0, 279.5], [1029.0, 23.0], [1060.0, 26.0], [1066.0, 252.5], [1058.0, 25.0], [1033.0, 28.0], [1102.0, 274.5], [1115.0, 32.0], [1103.0, 24.0], [1204.0, 282.0], [1166.0, 282.5], [1197.0, 296.0], [1186.0, 123.0], [1154.0, 25.0], [1152.0, 26.0], [1213.0, 32.0], [1212.0, 27.0], [1221.0, 42.0], [1277.0, 27.0], [1228.0, 242.0], [1276.0, 235.5], [1254.0, 314.5], [1244.0, 28.0], [1309.0, 95.5], [1313.0, 271.0], [1305.0, 371.0], [1352.0, 379.0], [1372.0, 118.0], [1385.0, 39.0], [1368.0, 31.0], [1387.0, 94.0], [1436.0, 35.0], [1439.0, 359.0], [1410.0, 31.0], [1427.0, 44.0], [1417.0, 309.0], [1424.0, 36.0], [1418.0, 316.0], [1434.0, 30.0], [1430.0, 185.0], [1454.0, 54.0], [1453.0, 277.0], [1507.0, 181.0], [1522.0, 61.0], [1478.0, 70.0], [1512.0, 330.0], [1532.0, 301.5], [1523.0, 341.0], [1529.0, 315.0], [1484.0, 33.0], [1539.0, 125.0], [1593.0, 176.0], [1566.0, 104.5], [1596.0, 403.0], [1598.0, 316.0], [1563.0, 291.0], [1589.0, 132.0], [1558.0, 335.0], [1588.0, 337.5], [1547.0, 122.0], [1587.0, 128.0], [1586.0, 150.0], [1557.0, 272.0], [1554.0, 360.0], [1629.0, 278.0], [1615.0, 32.0], [1654.0, 183.5], [1622.0, 233.5], [1652.0, 386.0], [1653.0, 200.0], [1637.0, 349.0], [1658.0, 128.0], [1610.0, 320.0], [1620.0, 147.5], [1624.0, 147.5], [1623.0, 710.0], [1724.0, 303.0], [1715.0, 178.0], [1696.0, 289.0], [1723.0, 223.0], [1712.0, 406.0], [1698.0, 154.0], [1687.0, 402.0], [1780.0, 241.0], [1787.0, 306.5], [1781.0, 289.0], [1768.0, 373.0], [1767.0, 396.0], [1791.0, 258.0], [1790.0, 379.0], [1763.0, 439.0], [1758.0, 285.5], [1754.0, 210.0], [1734.0, 213.0], [1778.0, 356.5], [1744.0, 104.0], [1844.0, 425.0], [1830.0, 594.5], [1827.0, 255.0], [1819.0, 334.0], [1818.0, 288.0], [1812.0, 400.0], [1845.0, 437.0], [1813.0, 460.0], [1808.0, 351.0], [1811.0, 417.0], [1852.0, 212.0], [1803.0, 238.0], [1801.0, 270.0], [1915.0, 128.0], [1905.0, 267.0], [1871.0, 405.0], [1869.0, 343.0], [1866.0, 365.0], [1873.0, 382.0], [1858.0, 270.0], [1900.0, 505.0], [1914.0, 421.5], [1919.0, 874.0], [1892.0, 285.0], [1898.0, 428.5], [1977.0, 395.0], [1930.0, 457.0], [1972.0, 410.5], [1975.0, 59.0], [1964.0, 425.5], [1943.0, 420.0], [1962.0, 275.0], [2006.0, 870.5], [2012.0, 330.0], [2045.0, 257.0], [2030.0, 924.0], [2039.0, 418.0], [2042.0, 472.0], [2160.0, 293.0], [2156.0, 726.0], [2138.0, 380.0], [2060.0, 501.0], [2092.0, 559.5], [2066.0, 483.0], [2068.0, 449.5], [2296.0, 570.5], [2234.0, 780.0], [2184.0, 309.5], [2242.0, 884.0], [2292.0, 447.0], [2218.0, 580.5], [2210.0, 614.0], [2280.0, 705.0], [2284.0, 419.5], [2288.0, 633.0], [2244.0, 671.0], [2260.0, 799.0], [2246.0, 687.0], [2268.0, 171.5], [2222.0, 565.5], [2228.0, 817.5], [2330.0, 555.0], [2380.0, 693.0], [2308.0, 589.0], [2322.0, 549.0], [2352.0, 507.0], [2354.0, 725.5], [2344.0, 577.0], [2410.0, 747.0], [2368.0, 717.0], [2416.0, 709.0], [2412.0, 681.0], [2362.0, 868.0], [2458.0, 743.0], [2432.0, 603.0], [2454.0, 673.0], [2544.0, 691.5], [2494.0, 585.5], [2492.0, 565.0], [2486.0, 445.0], [2594.0, 611.0], [2620.0, 578.0], [2161.0, 767.0], [2141.0, 823.0], [2175.0, 306.0], [2121.0, 508.0], [2095.0, 406.0], [2107.0, 588.0], [2051.0, 485.0], [2057.0, 852.0], [2131.0, 558.0], [2125.0, 764.0], [2147.0, 560.0], [2199.0, 767.0], [2239.0, 672.0], [2193.0, 440.0], [2289.0, 592.0], [2231.0, 286.0], [2283.0, 598.0], [2405.0, 584.0], [2367.0, 689.0], [2375.0, 633.0], [2377.0, 486.0], [2383.0, 669.0], [2389.0, 618.0], [2399.0, 629.0], [2391.0, 728.0], [2357.0, 452.0], [2321.0, 674.0], [2323.0, 680.0], [2365.0, 549.0], [2349.0, 341.0], [2347.0, 595.5], [2339.0, 643.0], [2343.0, 649.0], [2407.0, 650.0], [2369.0, 713.0], [2373.0, 130.0], [2403.0, 617.0], [2401.0, 529.0], [2363.0, 710.0], [2531.0, 637.0], [2553.0, 623.0], [2485.0, 670.0], [2453.0, 701.0], [2449.0, 523.0], [2515.0, 612.0], [2557.0, 636.0], [2495.0, 687.0], [2571.0, 616.0], [2649.0, 511.0], [2789.0, 535.0], [2837.0, 436.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2837.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 24.0, "maxY": 9409.0, "series": [{"data": [[24.0, 12.0], [38.0, 15.0], [49.0, 20.0], [51.0, 9409.0], [57.0, 27.0], [79.0, 19.0], [84.0, 40.0], [93.0, 28.0], [99.0, 127.0], [109.0, 19.0], [114.0, 29.0], [118.0, 19.5], [125.0, 25.0], [140.0, 37.0], [136.0, 21.0], [142.0, 30.0], [146.0, 26.0], [144.0, 43.0], [164.0, 20.0], [180.0, 150.5], [182.0, 22.0], [183.0, 23.0], [190.0, 17.0], [196.0, 28.5], [202.0, 22.0], [210.0, 104.5], [216.0, 114.0], [220.0, 25.0], [230.0, 23.5], [228.0, 155.5], [232.0, 42.5], [239.0, 25.0], [246.0, 25.0], [240.0, 26.5], [248.0, 23.0], [263.0, 19.0], [288.0, 21.5], [293.0, 260.0], [307.0, 140.0], [331.0, 24.0], [326.0, 93.0], [325.0, 20.0], [332.0, 123.5], [324.0, 23.0], [346.0, 159.0], [351.0, 21.0], [337.0, 22.0], [340.0, 22.0], [336.0, 23.0], [352.0, 140.5], [363.0, 108.0], [366.0, 21.0], [368.0, 23.0], [371.0, 21.0], [373.0, 22.0], [372.0, 23.5], [377.0, 20.0], [383.0, 24.0], [375.0, 23.0], [370.0, 23.0], [374.0, 82.0], [396.0, 24.0], [387.0, 166.0], [390.0, 24.0], [411.0, 21.0], [402.0, 124.0], [414.0, 128.5], [422.0, 24.0], [420.0, 24.0], [438.0, 22.0], [440.0, 145.0], [462.0, 78.0], [452.0, 24.0], [455.0, 193.0], [457.0, 176.0], [473.0, 33.0], [479.0, 21.0], [476.0, 25.0], [466.0, 125.0], [483.0, 31.0], [480.0, 23.0], [495.0, 172.0], [500.0, 157.5], [504.0, 181.0], [526.0, 21.0], [516.0, 174.5], [514.0, 167.0], [530.0, 23.0], [525.0, 24.0], [551.0, 26.0], [558.0, 111.0], [549.0, 96.0], [577.0, 22.0], [625.0, 24.0], [617.0, 23.0], [640.0, 169.0], [667.0, 149.0], [679.0, 201.0], [704.0, 29.5], [707.0, 22.0], [720.0, 23.0], [706.0, 21.0], [732.0, 22.5], [767.0, 22.0], [739.0, 65.0], [763.0, 23.0], [757.0, 22.0], [755.0, 21.0], [766.0, 21.0], [793.0, 21.0], [789.0, 23.0], [782.0, 22.0], [771.0, 23.0], [788.0, 233.5], [795.0, 22.0], [777.0, 21.0], [803.0, 21.0], [815.0, 24.0], [814.0, 21.0], [810.0, 22.0], [811.0, 173.0], [812.0, 23.0], [818.0, 23.0], [817.0, 23.0], [826.0, 24.0], [830.0, 22.0], [829.0, 20.0], [825.0, 22.0], [860.0, 23.0], [832.0, 22.0], [844.0, 22.0], [836.0, 23.0], [846.0, 21.5], [843.0, 25.0], [886.0, 24.0], [877.0, 22.0], [879.0, 25.0], [868.0, 22.0], [888.0, 21.0], [925.0, 23.0], [898.0, 21.0], [908.0, 23.0], [911.0, 27.0], [906.0, 24.0], [897.0, 223.0], [951.0, 24.0], [950.0, 23.0], [987.0, 22.0], [990.0, 23.0], [962.0, 22.0], [964.0, 23.0], [986.0, 23.0], [985.0, 22.0], [984.0, 23.0], [989.0, 22.0], [970.0, 22.0], [974.0, 23.0], [969.0, 22.0], [960.0, 28.0], [991.0, 22.0], [979.0, 23.0], [980.0, 23.0], [978.0, 23.0], [976.0, 24.0], [981.0, 22.0], [983.0, 22.0], [982.0, 23.0], [988.0, 22.0], [995.0, 23.0], [999.0, 22.0], [1001.0, 23.0], [1000.0, 23.0], [1004.0, 22.0], [1003.0, 22.0], [1002.0, 23.0], [1014.0, 23.0], [1015.0, 23.0], [1013.0, 21.0], [1012.0, 22.0], [1011.0, 23.0], [997.0, 23.0], [998.0, 23.0], [996.0, 23.0], [1008.0, 23.0], [1020.0, 24.0], [1009.0, 23.0], [1010.0, 22.0], [1007.0, 22.0], [1006.0, 23.0], [994.0, 23.0], [992.0, 23.0], [993.0, 22.0], [1005.0, 24.0], [1056.0, 23.0], [1043.0, 26.0], [1069.0, 24.0], [1048.0, 279.0], [1029.0, 23.0], [1060.0, 25.0], [1066.0, 252.5], [1058.0, 25.0], [1033.0, 28.0], [1102.0, 274.5], [1115.0, 32.0], [1103.0, 24.0], [1204.0, 282.0], [1166.0, 282.0], [1197.0, 296.0], [1186.0, 123.0], [1154.0, 25.0], [1152.0, 26.0], [1213.0, 31.0], [1212.0, 27.0], [1221.0, 41.0], [1277.0, 27.0], [1228.0, 241.0], [1276.0, 235.5], [1254.0, 314.0], [1244.0, 28.0], [1309.0, 95.5], [1313.0, 270.0], [1305.0, 370.0], [1352.0, 379.0], [1372.0, 117.0], [1385.0, 38.0], [1368.0, 31.0], [1387.0, 94.0], [1436.0, 35.0], [1439.0, 359.0], [1410.0, 31.0], [1427.0, 44.0], [1417.0, 309.0], [1424.0, 36.0], [1418.0, 316.0], [1434.0, 29.0], [1430.0, 185.0], [1454.0, 54.0], [1453.0, 276.0], [1507.0, 181.0], [1522.0, 61.0], [1478.0, 70.0], [1512.0, 329.0], [1532.0, 301.0], [1523.0, 341.0], [1529.0, 315.0], [1484.0, 33.0], [1539.0, 125.0], [1593.0, 175.0], [1566.0, 104.0], [1596.0, 403.0], [1598.0, 315.5], [1563.0, 291.0], [1589.0, 132.0], [1558.0, 335.0], [1588.0, 337.5], [1547.0, 122.0], [1587.0, 128.0], [1586.0, 150.0], [1557.0, 272.0], [1554.0, 360.0], [1629.0, 278.0], [1615.0, 31.0], [1654.0, 183.0], [1622.0, 233.5], [1652.0, 386.0], [1653.0, 200.0], [1637.0, 348.0], [1658.0, 128.0], [1610.0, 320.0], [1620.0, 147.0], [1624.0, 147.5], [1623.0, 710.0], [1724.0, 303.0], [1715.0, 178.0], [1696.0, 289.0], [1723.0, 223.0], [1712.0, 406.0], [1698.0, 154.0], [1687.0, 402.0], [1780.0, 240.0], [1787.0, 306.5], [1781.0, 289.0], [1768.0, 373.0], [1767.0, 395.0], [1791.0, 258.0], [1790.0, 379.0], [1763.0, 439.0], [1758.0, 285.5], [1754.0, 210.0], [1734.0, 213.0], [1778.0, 356.5], [1744.0, 103.0], [1844.0, 425.0], [1830.0, 594.0], [1827.0, 254.0], [1819.0, 334.0], [1818.0, 288.0], [1812.0, 400.0], [1845.0, 437.0], [1813.0, 460.0], [1808.0, 350.5], [1811.0, 417.0], [1852.0, 212.0], [1803.0, 237.0], [1801.0, 270.0], [1915.0, 127.0], [1905.0, 267.0], [1871.0, 405.0], [1869.0, 343.0], [1866.0, 364.0], [1873.0, 382.0], [1858.0, 269.5], [1900.0, 505.0], [1914.0, 421.5], [1919.0, 874.0], [1892.0, 285.0], [1898.0, 428.0], [1977.0, 395.0], [1930.0, 456.0], [1972.0, 410.5], [1975.0, 59.0], [1964.0, 425.0], [1943.0, 420.0], [1962.0, 274.5], [2006.0, 870.0], [2012.0, 329.0], [2045.0, 257.0], [2030.0, 923.0], [2039.0, 418.0], [2042.0, 472.0], [2160.0, 292.0], [2156.0, 725.0], [2138.0, 380.0], [2060.0, 500.5], [2092.0, 559.0], [2066.0, 483.0], [2068.0, 449.5], [2296.0, 570.5], [2234.0, 780.0], [2184.0, 309.0], [2242.0, 884.0], [2292.0, 447.0], [2218.0, 580.5], [2210.0, 614.0], [2280.0, 705.0], [2284.0, 419.5], [2288.0, 633.0], [2244.0, 671.0], [2260.0, 799.0], [2246.0, 686.0], [2268.0, 170.5], [2222.0, 565.5], [2228.0, 817.5], [2330.0, 555.0], [2380.0, 693.0], [2308.0, 588.5], [2322.0, 549.0], [2352.0, 507.0], [2354.0, 725.5], [2344.0, 577.0], [2410.0, 747.0], [2368.0, 717.0], [2416.0, 709.0], [2412.0, 681.0], [2362.0, 868.0], [2458.0, 743.0], [2432.0, 603.0], [2454.0, 673.0], [2544.0, 691.5], [2494.0, 585.0], [2492.0, 565.0], [2486.0, 444.5], [2594.0, 611.0], [2620.0, 578.0], [2161.0, 766.0], [2141.0, 823.0], [2175.0, 306.0], [2121.0, 508.0], [2095.0, 406.0], [2107.0, 588.0], [2051.0, 485.0], [2057.0, 852.0], [2131.0, 558.0], [2125.0, 764.0], [2147.0, 560.0], [2199.0, 767.0], [2239.0, 672.0], [2193.0, 440.0], [2289.0, 592.0], [2231.0, 285.0], [2283.0, 598.0], [2405.0, 583.0], [2367.0, 689.0], [2375.0, 633.0], [2377.0, 486.0], [2383.0, 669.0], [2389.0, 618.0], [2399.0, 629.0], [2391.0, 728.0], [2357.0, 451.0], [2321.0, 674.0], [2323.0, 680.0], [2365.0, 549.0], [2349.0, 341.0], [2347.0, 595.0], [2339.0, 643.0], [2343.0, 649.0], [2407.0, 650.0], [2369.0, 713.0], [2373.0, 130.0], [2403.0, 616.0], [2401.0, 529.0], [2363.0, 710.0], [2531.0, 637.0], [2553.0, 623.0], [2485.0, 670.0], [2453.0, 701.0], [2449.0, 523.0], [2515.0, 612.0], [2557.0, 636.0], [2495.0, 687.0], [2571.0, 616.0], [2649.0, 511.0], [2789.0, 535.0], [2837.0, 436.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2837.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 505.96666666666664, "minX": 1.63912434E12, "maxY": 1034.9166666666667, "series": [{"data": [[1.63912512E12, 997.1], [1.63912482E12, 960.8], [1.63912452E12, 960.6833333333333], [1.63912518E12, 983.8166666666667], [1.63912488E12, 1034.9166666666667], [1.63912458E12, 1034.5333333333333], [1.63912524E12, 559.2166666666667], [1.63912494E12, 998.2666666666667], [1.63912464E12, 996.3833333333333], [1.63912434E12, 505.96666666666664], [1.639125E12, 959.2], [1.6391247E12, 992.2833333333333], [1.6391244E12, 1026.9333333333334], [1.63912506E12, 1030.65], [1.63912476E12, 997.9833333333333], [1.63912446E12, 999.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912524E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 505.96666666666664, "minX": 1.63912434E12, "maxY": 1034.7333333333333, "series": [{"data": [[1.63912512E12, 982.7666666666667], [1.63912482E12, 961.35], [1.63912452E12, 961.3166666666667], [1.63912518E12, 998.7666666666667], [1.63912488E12, 1034.7333333333333], [1.63912458E12, 1021.85], [1.63912524E12, 559.2166666666667], [1.63912494E12, 997.65], [1.63912464E12, 979.3333333333334], [1.63912434E12, 505.96666666666664], [1.639125E12, 960.0], [1.6391247E12, 992.4], [1.6391244E12, 1026.7], [1.63912506E12, 1030.0333333333333], [1.63912476E12, 1027.05], [1.63912446E12, 998.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912524E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 505.96666666666664, "minX": 1.63912434E12, "maxY": 1034.7333333333333, "series": [{"data": [[1.63912512E12, 982.7666666666667], [1.63912482E12, 961.35], [1.63912452E12, 961.3166666666667], [1.63912518E12, 998.7666666666667], [1.63912488E12, 1034.7333333333333], [1.63912458E12, 1021.85], [1.63912524E12, 559.2166666666667], [1.63912494E12, 997.65], [1.63912464E12, 979.3333333333334], [1.63912434E12, 505.96666666666664], [1.639125E12, 960.0], [1.6391247E12, 992.4], [1.6391244E12, 1026.7], [1.63912506E12, 1030.0333333333333], [1.63912476E12, 1027.05], [1.63912446E12, 998.9]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912524E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 505.96666666666664, "minX": 1.63912434E12, "maxY": 1034.7333333333333, "series": [{"data": [[1.63912512E12, 982.7666666666667], [1.63912482E12, 961.35], [1.63912452E12, 961.3166666666667], [1.63912518E12, 998.7666666666667], [1.63912488E12, 1034.7333333333333], [1.63912458E12, 1021.85], [1.63912524E12, 559.2166666666667], [1.63912494E12, 997.65], [1.63912464E12, 979.3333333333334], [1.63912434E12, 505.96666666666664], [1.639125E12, 960.0], [1.6391247E12, 992.4], [1.6391244E12, 1026.7], [1.63912506E12, 1030.0333333333333], [1.63912476E12, 1027.05], [1.63912446E12, 998.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912524E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

