/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 3080.0, "series": [{"data": [[0.0, 7.0], [0.1, 30.0], [0.2, 32.0], [0.3, 34.0], [0.4, 35.0], [0.5, 37.0], [0.6, 38.0], [0.7, 38.0], [0.8, 39.0], [0.9, 40.0], [1.0, 41.0], [1.1, 42.0], [1.2, 42.0], [1.3, 43.0], [1.4, 44.0], [1.5, 44.0], [1.6, 45.0], [1.7, 45.0], [1.8, 46.0], [1.9, 46.0], [2.0, 46.0], [2.1, 47.0], [2.2, 47.0], [2.3, 48.0], [2.4, 48.0], [2.5, 49.0], [2.6, 49.0], [2.7, 49.0], [2.8, 50.0], [2.9, 50.0], [3.0, 51.0], [3.1, 51.0], [3.2, 51.0], [3.3, 52.0], [3.4, 52.0], [3.5, 52.0], [3.6, 53.0], [3.7, 53.0], [3.8, 53.0], [3.9, 54.0], [4.0, 54.0], [4.1, 54.0], [4.2, 55.0], [4.3, 55.0], [4.4, 55.0], [4.5, 56.0], [4.6, 56.0], [4.7, 56.0], [4.8, 56.0], [4.9, 57.0], [5.0, 57.0], [5.1, 57.0], [5.2, 57.0], [5.3, 57.0], [5.4, 57.0], [5.5, 58.0], [5.6, 58.0], [5.7, 58.0], [5.8, 58.0], [5.9, 58.0], [6.0, 58.0], [6.1, 58.0], [6.2, 58.0], [6.3, 59.0], [6.4, 59.0], [6.5, 59.0], [6.6, 59.0], [6.7, 59.0], [6.8, 59.0], [6.9, 59.0], [7.0, 59.0], [7.1, 60.0], [7.2, 60.0], [7.3, 60.0], [7.4, 60.0], [7.5, 60.0], [7.6, 60.0], [7.7, 60.0], [7.8, 60.0], [7.9, 61.0], [8.0, 61.0], [8.1, 61.0], [8.2, 61.0], [8.3, 61.0], [8.4, 61.0], [8.5, 61.0], [8.6, 61.0], [8.7, 61.0], [8.8, 62.0], [8.9, 62.0], [9.0, 62.0], [9.1, 62.0], [9.2, 62.0], [9.3, 62.0], [9.4, 62.0], [9.5, 62.0], [9.6, 62.0], [9.7, 63.0], [9.8, 63.0], [9.9, 63.0], [10.0, 63.0], [10.1, 63.0], [10.2, 63.0], [10.3, 63.0], [10.4, 63.0], [10.5, 63.0], [10.6, 63.0], [10.7, 64.0], [10.8, 64.0], [10.9, 64.0], [11.0, 64.0], [11.1, 64.0], [11.2, 64.0], [11.3, 64.0], [11.4, 64.0], [11.5, 64.0], [11.6, 64.0], [11.7, 65.0], [11.8, 65.0], [11.9, 65.0], [12.0, 65.0], [12.1, 65.0], [12.2, 65.0], [12.3, 65.0], [12.4, 65.0], [12.5, 65.0], [12.6, 65.0], [12.7, 66.0], [12.8, 66.0], [12.9, 66.0], [13.0, 66.0], [13.1, 66.0], [13.2, 66.0], [13.3, 66.0], [13.4, 66.0], [13.5, 66.0], [13.6, 66.0], [13.7, 66.0], [13.8, 67.0], [13.9, 67.0], [14.0, 67.0], [14.1, 67.0], [14.2, 67.0], [14.3, 67.0], [14.4, 67.0], [14.5, 67.0], [14.6, 67.0], [14.7, 67.0], [14.8, 67.0], [14.9, 68.0], [15.0, 68.0], [15.1, 68.0], [15.2, 68.0], [15.3, 68.0], [15.4, 68.0], [15.5, 68.0], [15.6, 68.0], [15.7, 68.0], [15.8, 68.0], [15.9, 69.0], [16.0, 69.0], [16.1, 69.0], [16.2, 69.0], [16.3, 69.0], [16.4, 69.0], [16.5, 69.0], [16.6, 69.0], [16.7, 69.0], [16.8, 69.0], [16.9, 69.0], [17.0, 70.0], [17.1, 70.0], [17.2, 70.0], [17.3, 70.0], [17.4, 70.0], [17.5, 70.0], [17.6, 70.0], [17.7, 70.0], [17.8, 70.0], [17.9, 71.0], [18.0, 71.0], [18.1, 71.0], [18.2, 71.0], [18.3, 71.0], [18.4, 71.0], [18.5, 71.0], [18.6, 71.0], [18.7, 71.0], [18.8, 71.0], [18.9, 72.0], [19.0, 72.0], [19.1, 72.0], [19.2, 72.0], [19.3, 72.0], [19.4, 72.0], [19.5, 72.0], [19.6, 72.0], [19.7, 72.0], [19.8, 73.0], [19.9, 73.0], [20.0, 73.0], [20.1, 73.0], [20.2, 73.0], [20.3, 73.0], [20.4, 73.0], [20.5, 73.0], [20.6, 74.0], [20.7, 74.0], [20.8, 74.0], [20.9, 74.0], [21.0, 74.0], [21.1, 74.0], [21.2, 74.0], [21.3, 74.0], [21.4, 75.0], [21.5, 75.0], [21.6, 75.0], [21.7, 75.0], [21.8, 75.0], [21.9, 75.0], [22.0, 75.0], [22.1, 75.0], [22.2, 76.0], [22.3, 76.0], [22.4, 76.0], [22.5, 76.0], [22.6, 76.0], [22.7, 76.0], [22.8, 77.0], [22.9, 77.0], [23.0, 77.0], [23.1, 77.0], [23.2, 77.0], [23.3, 77.0], [23.4, 78.0], [23.5, 78.0], [23.6, 78.0], [23.7, 78.0], [23.8, 78.0], [23.9, 79.0], [24.0, 79.0], [24.1, 79.0], [24.2, 79.0], [24.3, 79.0], [24.4, 80.0], [24.5, 80.0], [24.6, 80.0], [24.7, 80.0], [24.8, 81.0], [24.9, 81.0], [25.0, 81.0], [25.1, 82.0], [25.2, 82.0], [25.3, 82.0], [25.4, 82.0], [25.5, 83.0], [25.6, 83.0], [25.7, 84.0], [25.8, 84.0], [25.9, 84.0], [26.0, 85.0], [26.1, 85.0], [26.2, 86.0], [26.3, 86.0], [26.4, 87.0], [26.5, 87.0], [26.6, 88.0], [26.7, 88.0], [26.8, 89.0], [26.9, 89.0], [27.0, 90.0], [27.1, 90.0], [27.2, 91.0], [27.3, 91.0], [27.4, 92.0], [27.5, 92.0], [27.6, 93.0], [27.7, 93.0], [27.8, 94.0], [27.9, 94.0], [28.0, 95.0], [28.1, 95.0], [28.2, 96.0], [28.3, 96.0], [28.4, 97.0], [28.5, 97.0], [28.6, 98.0], [28.7, 98.0], [28.8, 99.0], [28.9, 99.0], [29.0, 100.0], [29.1, 100.0], [29.2, 101.0], [29.3, 101.0], [29.4, 101.0], [29.5, 102.0], [29.6, 102.0], [29.7, 103.0], [29.8, 103.0], [29.9, 104.0], [30.0, 104.0], [30.1, 105.0], [30.2, 105.0], [30.3, 105.0], [30.4, 106.0], [30.5, 106.0], [30.6, 106.0], [30.7, 106.0], [30.8, 107.0], [30.9, 107.0], [31.0, 107.0], [31.1, 108.0], [31.2, 108.0], [31.3, 108.0], [31.4, 108.0], [31.5, 109.0], [31.6, 109.0], [31.7, 109.0], [31.8, 110.0], [31.9, 110.0], [32.0, 110.0], [32.1, 111.0], [32.2, 111.0], [32.3, 111.0], [32.4, 112.0], [32.5, 112.0], [32.6, 112.0], [32.7, 113.0], [32.8, 113.0], [32.9, 114.0], [33.0, 114.0], [33.1, 115.0], [33.2, 115.0], [33.3, 116.0], [33.4, 116.0], [33.5, 117.0], [33.6, 118.0], [33.7, 119.0], [33.8, 120.0], [33.9, 121.0], [34.0, 122.0], [34.1, 123.0], [34.2, 124.0], [34.3, 126.0], [34.4, 128.0], [34.5, 129.0], [34.6, 131.0], [34.7, 133.0], [34.8, 135.0], [34.9, 137.0], [35.0, 139.0], [35.1, 142.0], [35.2, 145.0], [35.3, 148.0], [35.4, 151.0], [35.5, 154.0], [35.6, 156.0], [35.7, 159.0], [35.8, 162.0], [35.9, 164.0], [36.0, 167.0], [36.1, 169.0], [36.2, 172.0], [36.3, 174.0], [36.4, 177.0], [36.5, 180.0], [36.6, 182.0], [36.7, 185.0], [36.8, 188.0], [36.9, 190.0], [37.0, 194.0], [37.1, 196.0], [37.2, 199.0], [37.3, 202.0], [37.4, 204.0], [37.5, 207.0], [37.6, 209.0], [37.7, 211.0], [37.8, 214.0], [37.9, 216.0], [38.0, 218.0], [38.1, 220.0], [38.2, 222.0], [38.3, 224.0], [38.4, 226.0], [38.5, 228.0], [38.6, 230.0], [38.7, 232.0], [38.8, 234.0], [38.9, 235.0], [39.0, 237.0], [39.1, 239.0], [39.2, 240.0], [39.3, 242.0], [39.4, 243.0], [39.5, 245.0], [39.6, 246.0], [39.7, 248.0], [39.8, 249.0], [39.9, 251.0], [40.0, 252.0], [40.1, 253.0], [40.2, 255.0], [40.3, 256.0], [40.4, 258.0], [40.5, 259.0], [40.6, 261.0], [40.7, 262.0], [40.8, 263.0], [40.9, 265.0], [41.0, 266.0], [41.1, 267.0], [41.2, 269.0], [41.3, 270.0], [41.4, 271.0], [41.5, 273.0], [41.6, 274.0], [41.7, 275.0], [41.8, 277.0], [41.9, 278.0], [42.0, 279.0], [42.1, 281.0], [42.2, 282.0], [42.3, 283.0], [42.4, 284.0], [42.5, 286.0], [42.6, 287.0], [42.7, 288.0], [42.8, 289.0], [42.9, 291.0], [43.0, 292.0], [43.1, 293.0], [43.2, 295.0], [43.3, 296.0], [43.4, 297.0], [43.5, 299.0], [43.6, 300.0], [43.7, 301.0], [43.8, 303.0], [43.9, 304.0], [44.0, 305.0], [44.1, 307.0], [44.2, 308.0], [44.3, 309.0], [44.4, 310.0], [44.5, 312.0], [44.6, 313.0], [44.7, 314.0], [44.8, 316.0], [44.9, 317.0], [45.0, 318.0], [45.1, 319.0], [45.2, 321.0], [45.3, 322.0], [45.4, 323.0], [45.5, 324.0], [45.6, 326.0], [45.7, 327.0], [45.8, 328.0], [45.9, 330.0], [46.0, 331.0], [46.1, 333.0], [46.2, 334.0], [46.3, 336.0], [46.4, 337.0], [46.5, 339.0], [46.6, 340.0], [46.7, 342.0], [46.8, 343.0], [46.9, 345.0], [47.0, 347.0], [47.1, 348.0], [47.2, 350.0], [47.3, 351.0], [47.4, 353.0], [47.5, 354.0], [47.6, 356.0], [47.7, 357.0], [47.8, 359.0], [47.9, 360.0], [48.0, 362.0], [48.1, 363.0], [48.2, 365.0], [48.3, 367.0], [48.4, 369.0], [48.5, 371.0], [48.6, 373.0], [48.7, 375.0], [48.8, 377.0], [48.9, 379.0], [49.0, 381.0], [49.1, 383.0], [49.2, 384.0], [49.3, 387.0], [49.4, 389.0], [49.5, 391.0], [49.6, 392.0], [49.7, 394.0], [49.8, 396.0], [49.9, 398.0], [50.0, 400.0], [50.1, 402.0], [50.2, 404.0], [50.3, 406.0], [50.4, 408.0], [50.5, 410.0], [50.6, 413.0], [50.7, 415.0], [50.8, 417.0], [50.9, 419.0], [51.0, 421.0], [51.1, 423.0], [51.2, 425.0], [51.3, 427.0], [51.4, 429.0], [51.5, 430.0], [51.6, 432.0], [51.7, 434.0], [51.8, 437.0], [51.9, 439.0], [52.0, 441.0], [52.1, 444.0], [52.2, 446.0], [52.3, 448.0], [52.4, 450.0], [52.5, 452.0], [52.6, 454.0], [52.7, 456.0], [52.8, 458.0], [52.9, 459.0], [53.0, 461.0], [53.1, 463.0], [53.2, 465.0], [53.3, 466.0], [53.4, 468.0], [53.5, 469.0], [53.6, 471.0], [53.7, 472.0], [53.8, 474.0], [53.9, 475.0], [54.0, 477.0], [54.1, 478.0], [54.2, 480.0], [54.3, 482.0], [54.4, 483.0], [54.5, 485.0], [54.6, 487.0], [54.7, 488.0], [54.8, 490.0], [54.9, 491.0], [55.0, 493.0], [55.1, 494.0], [55.2, 496.0], [55.3, 497.0], [55.4, 499.0], [55.5, 500.0], [55.6, 501.0], [55.7, 502.0], [55.8, 504.0], [55.9, 505.0], [56.0, 507.0], [56.1, 508.0], [56.2, 509.0], [56.3, 511.0], [56.4, 512.0], [56.5, 513.0], [56.6, 515.0], [56.7, 516.0], [56.8, 517.0], [56.9, 519.0], [57.0, 520.0], [57.1, 521.0], [57.2, 523.0], [57.3, 524.0], [57.4, 526.0], [57.5, 527.0], [57.6, 528.0], [57.7, 530.0], [57.8, 531.0], [57.9, 532.0], [58.0, 534.0], [58.1, 535.0], [58.2, 537.0], [58.3, 538.0], [58.4, 539.0], [58.5, 540.0], [58.6, 542.0], [58.7, 543.0], [58.8, 544.0], [58.9, 545.0], [59.0, 547.0], [59.1, 548.0], [59.2, 550.0], [59.3, 551.0], [59.4, 552.0], [59.5, 554.0], [59.6, 555.0], [59.7, 557.0], [59.8, 558.0], [59.9, 560.0], [60.0, 561.0], [60.1, 562.0], [60.2, 564.0], [60.3, 565.0], [60.4, 567.0], [60.5, 568.0], [60.6, 569.0], [60.7, 571.0], [60.8, 572.0], [60.9, 574.0], [61.0, 575.0], [61.1, 577.0], [61.2, 578.0], [61.3, 580.0], [61.4, 581.0], [61.5, 583.0], [61.6, 584.0], [61.7, 586.0], [61.8, 587.0], [61.9, 589.0], [62.0, 590.0], [62.1, 592.0], [62.2, 594.0], [62.3, 595.0], [62.4, 597.0], [62.5, 599.0], [62.6, 601.0], [62.7, 602.0], [62.8, 604.0], [62.9, 606.0], [63.0, 607.0], [63.1, 609.0], [63.2, 611.0], [63.3, 612.0], [63.4, 614.0], [63.5, 615.0], [63.6, 617.0], [63.7, 619.0], [63.8, 620.0], [63.9, 622.0], [64.0, 624.0], [64.1, 626.0], [64.2, 628.0], [64.3, 629.0], [64.4, 631.0], [64.5, 633.0], [64.6, 635.0], [64.7, 637.0], [64.8, 639.0], [64.9, 641.0], [65.0, 642.0], [65.1, 644.0], [65.2, 645.0], [65.3, 647.0], [65.4, 649.0], [65.5, 651.0], [65.6, 652.0], [65.7, 654.0], [65.8, 656.0], [65.9, 657.0], [66.0, 659.0], [66.1, 660.0], [66.2, 662.0], [66.3, 664.0], [66.4, 666.0], [66.5, 667.0], [66.6, 669.0], [66.7, 671.0], [66.8, 672.0], [66.9, 674.0], [67.0, 676.0], [67.1, 678.0], [67.2, 679.0], [67.3, 681.0], [67.4, 682.0], [67.5, 684.0], [67.6, 685.0], [67.7, 687.0], [67.8, 688.0], [67.9, 690.0], [68.0, 691.0], [68.1, 693.0], [68.2, 694.0], [68.3, 696.0], [68.4, 698.0], [68.5, 699.0], [68.6, 701.0], [68.7, 702.0], [68.8, 703.0], [68.9, 705.0], [69.0, 707.0], [69.1, 708.0], [69.2, 710.0], [69.3, 711.0], [69.4, 713.0], [69.5, 714.0], [69.6, 715.0], [69.7, 717.0], [69.8, 718.0], [69.9, 719.0], [70.0, 720.0], [70.1, 722.0], [70.2, 723.0], [70.3, 725.0], [70.4, 726.0], [70.5, 727.0], [70.6, 729.0], [70.7, 730.0], [70.8, 731.0], [70.9, 732.0], [71.0, 734.0], [71.1, 735.0], [71.2, 736.0], [71.3, 738.0], [71.4, 739.0], [71.5, 740.0], [71.6, 742.0], [71.7, 743.0], [71.8, 744.0], [71.9, 746.0], [72.0, 747.0], [72.1, 749.0], [72.2, 750.0], [72.3, 751.0], [72.4, 753.0], [72.5, 754.0], [72.6, 755.0], [72.7, 757.0], [72.8, 758.0], [72.9, 759.0], [73.0, 760.0], [73.1, 761.0], [73.2, 763.0], [73.3, 764.0], [73.4, 765.0], [73.5, 766.0], [73.6, 768.0], [73.7, 769.0], [73.8, 771.0], [73.9, 772.0], [74.0, 774.0], [74.1, 775.0], [74.2, 776.0], [74.3, 778.0], [74.4, 779.0], [74.5, 781.0], [74.6, 782.0], [74.7, 784.0], [74.8, 785.0], [74.9, 787.0], [75.0, 788.0], [75.1, 789.0], [75.2, 791.0], [75.3, 792.0], [75.4, 794.0], [75.5, 795.0], [75.6, 796.0], [75.7, 798.0], [75.8, 799.0], [75.9, 801.0], [76.0, 802.0], [76.1, 803.0], [76.2, 805.0], [76.3, 807.0], [76.4, 808.0], [76.5, 810.0], [76.6, 811.0], [76.7, 813.0], [76.8, 814.0], [76.9, 816.0], [77.0, 817.0], [77.1, 819.0], [77.2, 821.0], [77.3, 822.0], [77.4, 824.0], [77.5, 826.0], [77.6, 827.0], [77.7, 829.0], [77.8, 830.0], [77.9, 831.0], [78.0, 833.0], [78.1, 834.0], [78.2, 836.0], [78.3, 837.0], [78.4, 839.0], [78.5, 841.0], [78.6, 842.0], [78.7, 844.0], [78.8, 845.0], [78.9, 847.0], [79.0, 849.0], [79.1, 851.0], [79.2, 853.0], [79.3, 855.0], [79.4, 857.0], [79.5, 859.0], [79.6, 861.0], [79.7, 862.0], [79.8, 864.0], [79.9, 866.0], [80.0, 868.0], [80.1, 870.0], [80.2, 872.0], [80.3, 873.0], [80.4, 875.0], [80.5, 876.0], [80.6, 878.0], [80.7, 880.0], [80.8, 881.0], [80.9, 883.0], [81.0, 885.0], [81.1, 887.0], [81.2, 888.0], [81.3, 890.0], [81.4, 892.0], [81.5, 894.0], [81.6, 897.0], [81.7, 898.0], [81.8, 900.0], [81.9, 902.0], [82.0, 904.0], [82.1, 905.0], [82.2, 907.0], [82.3, 909.0], [82.4, 910.0], [82.5, 912.0], [82.6, 914.0], [82.7, 916.0], [82.8, 918.0], [82.9, 920.0], [83.0, 921.0], [83.1, 923.0], [83.2, 925.0], [83.3, 926.0], [83.4, 928.0], [83.5, 930.0], [83.6, 932.0], [83.7, 933.0], [83.8, 935.0], [83.9, 936.0], [84.0, 938.0], [84.1, 940.0], [84.2, 941.0], [84.3, 943.0], [84.4, 944.0], [84.5, 945.0], [84.6, 947.0], [84.7, 948.0], [84.8, 949.0], [84.9, 951.0], [85.0, 952.0], [85.1, 954.0], [85.2, 956.0], [85.3, 957.0], [85.4, 959.0], [85.5, 960.0], [85.6, 962.0], [85.7, 964.0], [85.8, 965.0], [85.9, 967.0], [86.0, 968.0], [86.1, 970.0], [86.2, 972.0], [86.3, 973.0], [86.4, 975.0], [86.5, 976.0], [86.6, 977.0], [86.7, 979.0], [86.8, 980.0], [86.9, 982.0], [87.0, 983.0], [87.1, 984.0], [87.2, 986.0], [87.3, 987.0], [87.4, 989.0], [87.5, 990.0], [87.6, 992.0], [87.7, 993.0], [87.8, 995.0], [87.9, 996.0], [88.0, 998.0], [88.1, 999.0], [88.2, 1001.0], [88.3, 1002.0], [88.4, 1004.0], [88.5, 1006.0], [88.6, 1007.0], [88.7, 1009.0], [88.8, 1010.0], [88.9, 1012.0], [89.0, 1013.0], [89.1, 1015.0], [89.2, 1016.0], [89.3, 1018.0], [89.4, 1019.0], [89.5, 1021.0], [89.6, 1023.0], [89.7, 1025.0], [89.8, 1026.0], [89.9, 1028.0], [90.0, 1030.0], [90.1, 1032.0], [90.2, 1033.0], [90.3, 1035.0], [90.4, 1037.0], [90.5, 1038.0], [90.6, 1040.0], [90.7, 1041.0], [90.8, 1043.0], [90.9, 1045.0], [91.0, 1047.0], [91.1, 1049.0], [91.2, 1051.0], [91.3, 1053.0], [91.4, 1055.0], [91.5, 1057.0], [91.6, 1059.0], [91.7, 1062.0], [91.8, 1064.0], [91.9, 1065.0], [92.0, 1067.0], [92.1, 1069.0], [92.2, 1071.0], [92.3, 1074.0], [92.4, 1076.0], [92.5, 1079.0], [92.6, 1081.0], [92.7, 1084.0], [92.8, 1086.0], [92.9, 1089.0], [93.0, 1091.0], [93.1, 1093.0], [93.2, 1095.0], [93.3, 1098.0], [93.4, 1101.0], [93.5, 1103.0], [93.6, 1106.0], [93.7, 1109.0], [93.8, 1111.0], [93.9, 1114.0], [94.0, 1117.0], [94.1, 1120.0], [94.2, 1124.0], [94.3, 1127.0], [94.4, 1130.0], [94.5, 1133.0], [94.6, 1136.0], [94.7, 1139.0], [94.8, 1142.0], [94.9, 1146.0], [95.0, 1149.0], [95.1, 1152.0], [95.2, 1156.0], [95.3, 1159.0], [95.4, 1163.0], [95.5, 1167.0], [95.6, 1170.0], [95.7, 1174.0], [95.8, 1177.0], [95.9, 1181.0], [96.0, 1185.0], [96.1, 1190.0], [96.2, 1194.0], [96.3, 1198.0], [96.4, 1203.0], [96.5, 1208.0], [96.6, 1214.0], [96.7, 1219.0], [96.8, 1224.0], [96.9, 1229.0], [97.0, 1234.0], [97.1, 1238.0], [97.2, 1243.0], [97.3, 1248.0], [97.4, 1253.0], [97.5, 1259.0], [97.6, 1265.0], [97.7, 1270.0], [97.8, 1277.0], [97.9, 1283.0], [98.0, 1290.0], [98.1, 1296.0], [98.2, 1303.0], [98.3, 1309.0], [98.4, 1316.0], [98.5, 1323.0], [98.6, 1329.0], [98.7, 1337.0], [98.8, 1344.0], [98.9, 1350.0], [99.0, 1359.0], [99.1, 1367.0], [99.2, 1376.0], [99.3, 1385.0], [99.4, 1394.0], [99.5, 1407.0], [99.6, 1426.0], [99.7, 1442.0], [99.8, 1475.0], [99.9, 1538.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 260003.0, "series": [{"data": [[0.0, 260003.0], [600.0, 53799.0], [700.0, 65542.0], [3000.0, 22.0], [200.0, 57179.0], [800.0, 53241.0], [900.0, 57111.0], [1000.0, 47094.0], [1100.0, 26735.0], [300.0, 57507.0], [1200.0, 16322.0], [1300.0, 11733.0], [1400.0, 3786.0], [1500.0, 540.0], [100.0, 74232.0], [400.0, 49416.0], [1600.0, 164.0], [1700.0, 160.0], [1800.0, 158.0], [1900.0, 79.0], [500.0, 63489.0], [2000.0, 1.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1119.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 499048.0, "series": [{"data": [[0.0, 499048.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 398146.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1119.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2274.28835099932, "minX": 1.63220454E12, "maxY": 2400.0, "series": [{"data": [[1.63220472E12, 2400.0], [1.63220514E12, 2400.0], [1.63220478E12, 2400.0], [1.63220544E12, 2393.183338193833], [1.63220496E12, 2400.0], [1.63220526E12, 2400.0], [1.63220466E12, 2400.0], [1.6322052E12, 2400.0], [1.63220502E12, 2400.0], [1.6322049E12, 2400.0], [1.63220532E12, 2400.0], [1.6322046E12, 2400.0], [1.63220508E12, 2400.0], [1.63220484E12, 2400.0], [1.63220538E12, 2400.0], [1.63220454E12, 2274.28835099932]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63220544E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 322.0, "maxY": 1026.0, "series": [{"data": [[322.0, 148.5], [328.0, 191.0], [331.0, 168.5], [332.0, 196.0], [339.0, 143.0], [346.0, 212.0], [351.0, 161.0], [352.0, 183.0], [353.0, 151.5], [362.0, 194.0], [368.0, 262.0], [370.0, 211.0], [371.0, 267.0], [373.0, 279.0], [376.0, 203.0], [377.0, 226.0], [384.0, 261.0], [396.0, 247.0], [391.0, 233.0], [386.0, 238.0], [393.0, 247.0], [390.0, 298.0], [411.0, 254.0], [413.0, 318.0], [415.0, 255.0], [402.0, 263.0], [409.0, 248.0], [404.0, 250.0], [405.0, 254.0], [421.0, 269.0], [423.0, 317.6666666666667], [424.0, 287.0], [428.0, 290.5], [430.0, 289.0], [445.0, 337.0], [432.0, 301.0], [433.0, 312.0], [437.0, 231.0], [439.0, 255.0], [440.0, 336.5], [441.0, 335.0], [443.0, 339.0], [446.0, 339.0], [447.0, 336.5], [450.0, 352.25], [453.0, 374.5], [454.0, 339.0], [455.0, 400.0], [456.0, 378.5], [458.0, 339.0], [462.0, 322.5], [480.0, 378.0], [481.0, 410.0], [491.0, 411.0], [492.0, 392.0], [493.0, 452.0], [494.0, 417.0], [495.0, 406.0], [498.0, 435.0], [499.0, 411.0], [505.0, 425.0], [507.0, 406.0], [510.0, 420.0], [515.0, 434.0], [520.0, 432.0], [521.0, 435.0], [524.0, 431.0], [525.0, 434.0], [529.0, 442.0], [532.0, 440.0], [544.0, 457.0], [546.0, 477.0], [552.0, 486.0], [553.0, 496.0], [556.0, 526.5], [558.0, 464.0], [562.0, 476.5], [564.0, 505.0], [570.0, 488.0], [590.0, 555.0], [576.0, 515.5], [584.0, 550.3333333333334], [587.0, 511.5], [589.0, 578.0], [591.0, 530.0], [599.0, 555.5], [606.0, 615.0], [607.0, 574.6666666666666], [602.0, 572.3333333333334], [604.0, 552.0], [619.0, 594.0], [612.0, 569.5], [614.0, 598.0], [616.0, 597.0], [617.0, 576.3333333333334], [618.0, 607.125], [621.0, 611.6666666666666], [622.0, 644.0], [635.0, 606.0], [636.0, 578.0], [638.0, 549.0], [639.0, 595.0], [645.0, 643.5], [644.0, 486.0], [646.0, 562.5], [647.0, 679.0], [648.0, 552.0], [651.0, 617.0], [652.0, 585.3333333333334], [655.0, 638.0], [656.0, 637.3333333333334], [670.0, 526.0], [666.0, 669.5], [668.0, 653.0], [657.0, 562.0], [658.0, 622.5], [660.0, 630.0], [661.0, 635.3333333333334], [663.0, 703.0], [675.0, 652.0], [683.0, 525.0], [673.0, 637.25], [686.0, 674.6666666666666], [687.0, 674.0], [677.0, 534.5], [678.0, 565.25], [688.0, 545.5], [703.0, 597.0], [700.0, 633.0], [702.0, 677.6666666666666], [698.0, 572.0], [699.0, 646.3333333333334], [690.0, 608.0], [692.0, 745.0], [680.0, 664.0], [681.0, 691.0], [682.0, 730.0], [684.0, 732.0], [685.0, 700.6666666666666], [705.0, 609.0], [704.0, 633.0], [706.0, 759.0], [708.0, 620.0], [709.0, 778.0], [710.0, 679.0], [723.0, 681.5], [734.0, 749.0], [735.0, 741.0], [728.0, 607.0], [731.0, 676.0], [724.0, 694.6666666666666], [726.0, 597.0], [727.0, 730.0], [713.0, 678.0], [715.0, 688.5], [716.0, 728.0], [740.0, 668.5], [737.0, 772.6666666666666], [742.0, 740.0], [743.0, 628.0], [747.0, 692.0], [748.0, 599.0], [751.0, 629.0], [752.0, 645.0], [763.0, 783.0], [753.0, 668.0], [754.0, 685.0], [755.0, 775.0], [756.0, 767.0], [784.0, 865.0], [779.0, 800.0], [780.0, 670.0], [783.0, 780.5], [786.0, 814.3333333333334], [789.0, 798.3333333333333], [790.0, 808.6666666666666], [791.0, 730.0], [794.0, 692.0], [796.0, 672.0], [805.0, 837.5], [810.0, 855.6666666666666], [813.0, 783.0], [815.0, 845.0], [816.0, 811.3333333333334], [829.0, 628.0], [826.0, 647.0], [828.0, 604.0], [817.0, 783.8749999999999], [819.0, 737.6666666666666], [824.0, 649.5], [825.0, 612.5999999999999], [837.0, 635.0], [838.0, 667.5], [842.0, 627.0], [870.0, 701.7142857142857], [868.0, 676.1111111111111], [867.0, 687.4], [869.0, 687.0], [871.0, 711.3333333333334], [872.0, 713.0], [879.0, 684.0], [880.0, 654.0], [881.0, 677.375], [882.0, 647.0], [883.0, 650.0], [884.0, 646.0], [886.0, 638.0], [887.0, 669.6], [900.0, 661.0], [909.0, 656.75], [915.0, 711.3076923076922], [916.0, 742.0], [918.0, 47.0], [905.0, 572.8571428571429], [908.0, 37.5], [904.0, 659.0], [903.0, 651.5], [920.0, 48.0], [912.0, 516.0], [922.0, 46.75], [913.0, 667.5], [899.0, 654.0], [911.0, 43.0], [914.0, 676.0], [931.0, 705.0], [940.0, 675.6], [929.0, 676.0], [943.0, 678.0], [941.0, 668.5], [942.0, 679.0], [932.0, 707.1666666666666], [933.0, 666.0], [935.0, 672.3333333333334], [952.0, 673.3333333333334], [955.0, 662.0], [956.0, 675.0], [957.0, 671.0], [959.0, 703.0], [945.0, 670.0], [946.0, 682.8], [947.0, 688.0], [949.0, 678.0], [950.0, 654.0], [951.0, 688.0], [937.0, 682.8], [938.0, 644.0], [939.0, 684.0], [973.0, 649.0], [962.0, 676.8333333333333], [961.0, 691.0], [974.0, 243.66666666666669], [975.0, 648.0], [963.0, 688.0], [966.0, 655.0], [967.0, 649.0], [984.0, 640.3333333333334], [986.0, 358.0], [988.0, 444.33333333333337], [990.0, 658.0], [977.0, 494.75], [979.0, 677.0], [980.0, 643.0], [981.0, 644.0], [982.0, 240.33333333333331], [983.0, 636.0], [968.0, 649.0], [969.0, 655.0], [971.0, 648.25], [970.0, 46.0], [972.0, 46.0], [1004.0, 343.0], [995.0, 646.6666666666666], [998.0, 562.7142857142857], [1021.0, 50.0], [1008.0, 51.5], [1000.0, 642.0], [1002.0, 640.5], [1003.0, 640.6666666666666], [1006.0, 344.0], [1007.0, 638.0], [1011.0, 647.0], [1013.0, 634.3333333333334], [1014.0, 640.0], [1072.0, 685.0], [1056.0, 687.0], [1042.0, 365.0], [1040.0, 49.0], [1046.0, 666.0], [1048.0, 674.0], [1032.0, 51.0], [1026.0, 51.0], [1038.0, 49.0], [1036.0, 50.0], [1074.0, 683.3333333333334], [1078.0, 678.5], [1080.0, 690.0], [1082.0, 682.5], [1058.0, 369.5], [1062.0, 688.3333333333334], [1064.0, 681.0], [1066.0, 689.0], [1068.0, 52.0], [1092.0, 682.2857142857143], [1098.0, 661.0], [1112.0, 652.0], [1110.0, 652.0], [1104.0, 654.0], [1090.0, 673.0], [1096.0, 369.5], [1100.0, 659.75], [1102.0, 658.5], [1148.0, 662.0], [1126.0, 59.5], [1124.0, 62.0], [1146.0, 655.0], [1140.0, 660.5], [1142.0, 661.0], [1138.0, 661.5], [1128.0, 661.0], [1130.0, 661.0], [1132.0, 60.0], [1158.0, 660.0], [1178.0, 666.0], [1180.0, 666.0], [1176.0, 666.5], [1172.0, 263.6666666666667], [1174.0, 62.0], [1156.0, 661.6666666666666], [1160.0, 665.6666666666666], [1164.0, 58.0], [1184.0, 663.8333333333333], [1214.0, 659.0], [1208.0, 657.25], [1204.0, 656.0], [1206.0, 657.0], [1200.0, 660.0], [1202.0, 358.0], [1186.0, 656.0], [1188.0, 668.0], [1190.0, 656.0], [1192.0, 359.0], [1194.0, 359.0], [1196.0, 459.66666666666663], [1198.0, 660.0], [1248.0, 703.2857142857142], [1242.0, 683.375], [1264.0, 707.7142857142858], [1278.0, 746.6666666666666], [1266.0, 70.0], [1250.0, 713.0], [1252.0, 582.4], [1254.0, 550.5], [1256.0, 701.3333333333334], [1232.0, 369.5], [1234.0, 311.0], [1236.0, 368.0], [1238.0, 66.5], [1240.0, 676.0], [1244.0, 708.0], [1246.0, 598.3333333333334], [1220.0, 63.333333333333336], [1228.0, 61.0], [1222.0, 58.0], [1284.0, 707.1666666666667], [1280.0, 754.25], [1306.0, 689.0], [1308.0, 687.6363636363635], [1304.0, 587.8333333333333], [1302.0, 694.0], [1300.0, 571.5], [1296.0, 591.5], [1298.0, 694.0], [1282.0, 715.25], [1286.0, 589.9999999999999], [1288.0, 705.3333333333334], [1292.0, 698.6], [1290.0, 72.0], [1294.0, 700.0], [1330.0, 685.0], [1334.0, 276.6666666666667], [1336.0, 678.0], [1338.0, 600.75], [1340.0, 674.0], [1342.0, 377.0], [1312.0, 687.6], [1314.0, 686.0], [1316.0, 682.5], [1318.0, 276.6666666666667], [1320.0, 690.0], [1322.0, 685.0], [1324.0, 685.0], [1402.0, 674.0], [1346.0, 677.5], [1344.0, 78.6], [1348.0, 75.0], [1354.0, 77.8], [1352.0, 75.0], [1392.0, 679.0], [1394.0, 676.6666666666666], [1396.0, 73.0], [1406.0, 676.0], [1398.0, 374.0], [1400.0, 72.0], [1368.0, 377.0], [1364.0, 74.0], [1370.0, 684.0], [1376.0, 481.66666666666663], [1378.0, 689.1428571428571], [1380.0, 693.0], [1382.0, 379.5], [1384.0, 691.0], [1386.0, 681.5], [1388.0, 682.6666666666666], [1416.0, 679.0], [1436.0, 670.0], [1410.0, 677.6666666666667], [1408.0, 673.0], [1438.0, 672.0], [1412.0, 374.1666666666667], [1448.0, 677.0], [1452.0, 674.0], [1450.0, 679.0], [1440.0, 551.0], [1470.0, 624.2], [1468.0, 673.0], [1464.0, 673.5], [1466.0, 370.0], [1460.0, 673.0], [1422.0, 677.0], [1418.0, 677.5], [1420.0, 679.6666666666666], [1434.0, 679.0], [1426.0, 678.0], [1424.0, 475.33333333333337], [1430.0, 672.5], [1520.0, 371.0], [1504.0, 696.7954545454544], [1496.0, 678.5], [1494.0, 681.6666666666666], [1486.0, 680.0], [1488.0, 684.4], [1524.0, 702.7142857142858], [1522.0, 678.0], [1526.0, 694.25], [1528.0, 699.0], [1478.0, 677.0], [1502.0, 67.5], [1506.0, 676.4], [1518.0, 375.0], [1516.0, 682.3333333333334], [1510.0, 681.25], [1512.0, 700.0], [1514.0, 717.5], [1490.0, 686.3333333333334], [1536.0, 709.6666666666666], [1540.0, 716.4], [1564.0, 726.0], [1558.0, 716.0], [1560.0, 718.3333333333334], [1554.0, 712.0], [1552.0, 720.0], [1538.0, 703.0], [1542.0, 706.0], [1594.0, 755.5], [1588.0, 748.0], [1586.0, 746.0], [1584.0, 744.0], [1572.0, 732.0], [1568.0, 66.0], [1598.0, 757.0], [1544.0, 713.6666666666666], [1546.0, 713.0], [1548.0, 710.0], [1658.0, 799.5], [1600.0, 756.0], [1614.0, 754.0], [1648.0, 788.5], [1616.0, 758.5], [1624.0, 62.0], [1620.0, 61.0], [1640.0, 786.6000000000001], [1638.0, 63.0], [1644.0, 59.5], [1642.0, 60.5], [1660.0, 797.0], [1636.0, 768.0], [1634.0, 413.0], [1604.0, 763.5], [1612.0, 62.0], [1678.0, 808.5], [1674.0, 807.0], [1712.0, 828.0], [1666.0, 810.0], [1676.0, 431.5], [1688.0, 435.5], [1684.0, 59.0], [1696.0, 822.6666666666666], [1722.0, 828.0], [1724.0, 829.0], [1720.0, 570.0], [1718.0, 826.6666666666666], [1716.0, 826.25], [1710.0, 827.0], [1708.0, 825.0], [1704.0, 827.0], [1706.0, 57.0], [1742.0, 832.1], [1750.0, 831.25], [1748.0, 832.2], [1740.0, 831.0], [1768.0, 822.0], [1760.0, 830.5], [1786.0, 441.25], [1788.0, 826.5], [1790.0, 62.0], [1780.0, 840.0], [1784.0, 825.0], [1776.0, 855.0], [1778.0, 857.3333333333334], [1764.0, 704.0], [1762.0, 809.0], [1728.0, 673.0], [1756.0, 809.0], [1758.0, 815.0], [1752.0, 831.5], [1754.0, 698.0], [1796.0, 444.5], [1800.0, 830.0], [1814.0, 827.0], [1812.0, 60.0], [1816.0, 829.5], [1820.0, 837.0], [1822.0, 827.3333333333334], [1802.0, 830.0], [1794.0, 827.5], [1824.0, 832.0], [1854.0, 842.0], [1852.0, 646.0], [1850.0, 842.5], [1846.0, 836.0], [1844.0, 686.2], [1842.0, 644.25], [1840.0, 58.0], [1826.0, 829.6666666666666], [1828.0, 829.3333333333333], [1830.0, 443.5], [1832.0, 831.0], [1886.0, 838.5], [1856.0, 843.0], [1874.0, 837.6666666666666], [1880.0, 838.0], [1878.0, 835.0], [1882.0, 834.0], [1884.0, 834.5], [1876.0, 834.5], [1888.0, 838.0], [1918.0, 598.3333333333333], [1916.0, 864.0], [1914.0, 257.5], [1904.0, 857.6666666666666], [1912.0, 865.5], [1906.0, 55.5], [1902.0, 800.2142857142858], [1862.0, 844.3333333333334], [1860.0, 844.25], [1864.0, 841.0], [1870.0, 838.0], [1866.0, 845.5], [1952.0, 890.0], [1954.0, 893.0], [1956.0, 758.0], [1960.0, 898.0], [1962.0, 687.75], [1964.0, 904.3333333333334], [1932.0, 464.5], [1982.0, 913.0], [1980.0, 910.0], [1970.0, 905.6666666666666], [1972.0, 906.0], [1950.0, 890.5], [1944.0, 880.0], [1938.0, 55.0], [1948.0, 891.0], [1946.0, 55.0], [2034.0, 955.4], [2024.0, 957.0], [2018.0, 964.0], [2030.0, 962.0], [2032.0, 962.0], [1992.0, 948.0], [2000.0, 949.0], [2004.0, 955.0], [2036.0, 924.6666666666666], [2038.0, 966.0], [2042.0, 928.0], [2044.0, 930.0], [2046.0, 932.0], [2016.0, 964.0], [1994.0, 945.0], [2010.0, 956.0], [2008.0, 956.0], [1996.0, 949.0], [2112.0, 953.0], [2060.0, 941.3333333333334], [2056.0, 40.0], [2084.0, 952.0], [2108.0, 949.0], [2140.0, 963.0], [2128.0, 496.0], [2120.0, 948.0], [2116.0, 954.0], [2144.0, 973.0], [2148.0, 966.0], [2156.0, 956.3333333333334], [2164.0, 725.5], [2168.0, 963.0], [2172.0, 831.0], [2160.0, 959.0], [2152.0, 960.0], [2180.0, 654.3333333333333], [2176.0, 967.5], [2196.0, 977.0], [2204.0, 980.0], [2276.0, 1004.0], [2288.0, 1016.25], [2296.0, 1022.6666666666666], [2300.0, 1018.5], [2272.0, 1007.0], [2240.0, 1000.6666666666666], [2244.0, 1000.0], [2248.0, 999.5], [2252.0, 1005.0], [2256.0, 1004.3333333333334], [2260.0, 1003.5], [2264.0, 1002.0], [2268.0, 1006.0], [2200.0, 979.0], [2220.0, 991.0], [2228.0, 998.5], [2224.0, 1004.0], [2232.0, 999.1666666666666], [2236.0, 999.0], [2208.0, 981.0], [2212.0, 984.0], [2308.0, 1009.4285714285713], [2304.0, 1012.0], [2316.0, 1013.4285714285714], [2312.0, 1008.0], [2324.0, 1013.6666666666666], [2364.0, 1015.0], [2332.0, 1016.0], [2372.0, 1019.0], [2400.0, 473.003833476117], [2388.0, 1026.0], [2396.0, 58.0], [2376.0, 1016.0], [2384.0, 8.0], [2340.0, 1011.5], [2344.0, 1010.0], [2069.0, 942.0], [2049.0, 757.2], [2089.0, 949.5], [2057.0, 940.0], [2061.0, 940.5], [2065.0, 40.0], [2053.0, 939.5], [2081.0, 949.0], [2085.0, 38.0], [2129.0, 721.75], [2117.0, 31.0], [2169.0, 963.0], [2173.0, 966.0], [2157.0, 960.0], [2165.0, 970.0], [2153.0, 956.25], [2145.0, 953.0], [2149.0, 954.0], [2141.0, 962.0], [2133.0, 494.0], [2093.0, 950.0], [2097.0, 949.5], [2105.0, 953.0], [2109.0, 955.0], [2197.0, 978.0], [2181.0, 970.0], [2205.0, 979.6666666666666], [2273.0, 1004.6666666666666], [2285.0, 1007.6666666666666], [2289.0, 1011.0], [2293.0, 10.0], [2301.0, 1012.3333333333334], [2297.0, 1021.5], [2281.0, 1009.0], [2277.0, 756.25], [2177.0, 967.0], [2193.0, 978.0], [2237.0, 1000.0], [2241.0, 1001.5], [2221.0, 992.0], [2233.0, 15.0], [2265.0, 1002.0], [2269.0, 756.0], [2253.0, 1007.75], [2249.0, 1003.0], [2257.0, 1002.0], [2261.0, 1004.0], [2309.0, 1010.3333333333334], [2305.0, 1010.75], [2357.0, 1011.0], [2313.0, 1009.0], [2317.0, 1015.5], [2321.0, 1012.5], [2325.0, 1014.5], [2329.0, 1014.0], [2333.0, 1014.0], [2381.0, 682.3333333333333], [2397.0, 249.53333333333327], [2385.0, 215.8], [2373.0, 1018.0], [2341.0, 1017.0], [2345.0, 1012.0], [2353.0, 1010.0], [1083.0, 683.0], [1079.0, 530.25], [1077.0, 685.25], [1031.0, 51.0], [1025.0, 51.0], [1081.0, 560.4], [1085.0, 687.0], [1087.0, 677.6666666666666], [1059.0, 679.0], [1061.0, 52.0], [1065.0, 685.25], [1067.0, 686.75], [1069.0, 591.7142857142858], [1071.0, 51.0], [1095.0, 665.0], [1093.0, 604.0], [1089.0, 678.2], [1111.0, 653.0], [1117.0, 53.0], [1105.0, 678.0], [1097.0, 576.1428571428571], [1099.0, 658.4], [1103.0, 660.0], [1123.0, 659.0], [1149.0, 665.0], [1151.0, 658.0], [1147.0, 657.0], [1143.0, 662.5], [1137.0, 664.0], [1133.0, 667.5], [1131.0, 59.5], [1155.0, 661.0], [1153.0, 662.0], [1181.0, 668.0], [1175.0, 669.0], [1177.0, 62.0], [1173.0, 580.4285714285713], [1163.0, 663.0], [1165.0, 665.0], [1167.0, 664.0], [1215.0, 659.0], [1209.0, 658.4285714285714], [1211.0, 659.0], [1207.0, 663.0], [1193.0, 261.3333333333333], [1199.0, 661.3333333333334], [1195.0, 60.0], [1169.0, 666.0], [1171.0, 667.0], [1265.0, 745.6666666666666], [1235.0, 674.0], [1217.0, 662.0], [1231.0, 678.0], [1267.0, 749.0], [1277.0, 68.0], [1273.0, 69.25], [1249.0, 704.6666666666666], [1251.0, 709.3333333333334], [1253.0, 705.0], [1257.0, 449.2], [1233.0, 676.0], [1239.0, 683.5], [1237.0, 64.0], [1241.0, 66.0], [1243.0, 702.1666666666667], [1245.0, 383.5], [1247.0, 705.2], [1293.0, 699.5], [1303.0, 484.66666666666663], [1307.0, 75.0], [1301.0, 540.0], [1299.0, 633.4], [1283.0, 392.5], [1285.0, 493.33333333333337], [1289.0, 625.625], [1291.0, 386.6666666666667], [1295.0, 488.33333333333337], [1331.0, 685.1666666666667], [1335.0, 685.6666666666666], [1337.0, 676.0], [1341.0, 674.5], [1315.0, 680.3333333333334], [1317.0, 681.0], [1323.0, 685.5], [1325.0, 685.6666666666666], [1327.0, 682.0], [1397.0, 676.0], [1379.0, 693.0], [1345.0, 673.4], [1395.0, 680.0], [1353.0, 77.0], [1351.0, 78.5], [1403.0, 576.6666666666666], [1405.0, 674.5], [1407.0, 433.8], [1399.0, 377.0], [1365.0, 688.3333333333334], [1367.0, 683.0], [1375.0, 686.0], [1373.0, 70.0], [1381.0, 689.0], [1383.0, 688.0], [1385.0, 683.6666666666666], [1387.0, 674.0], [1389.0, 679.5], [1391.0, 679.0], [1467.0, 674.0], [1439.0, 677.0], [1437.0, 672.0], [1423.0, 373.5], [1445.0, 675.0], [1447.0, 677.2], [1449.0, 674.0], [1455.0, 672.1666666666667], [1443.0, 676.0], [1469.0, 674.0], [1441.0, 68.0], [1465.0, 674.0], [1461.0, 672.5], [1457.0, 672.0], [1463.0, 673.875], [1421.0, 682.0], [1411.0, 71.0], [1433.0, 675.6666666666666], [1435.0, 675.0], [1431.0, 601.25], [1427.0, 673.8333333333333], [1425.0, 678.8], [1523.0, 680.0], [1489.0, 686.0], [1487.0, 684.0], [1521.0, 380.5], [1525.0, 696.0], [1485.0, 557.0], [1503.0, 67.0], [1499.0, 65.0], [1505.0, 710.25], [1519.0, 675.0], [1511.0, 675.0], [1513.0, 719.0], [1515.0, 397.5], [1507.0, 672.0], [1495.0, 681.0], [1491.0, 479.0], [1493.0, 679.0], [1543.0, 709.0], [1545.0, 711.0], [1561.0, 720.0], [1555.0, 500.33333333333337], [1539.0, 501.66666666666663], [1541.0, 68.0], [1549.0, 715.0], [1589.0, 753.0], [1593.0, 64.0], [1597.0, 61.0], [1595.0, 61.333333333333336], [1587.0, 404.0], [1585.0, 744.0], [1573.0, 744.0], [1575.0, 734.0], [1583.0, 742.0], [1579.0, 740.0], [1571.0, 741.0], [1599.0, 60.0], [1655.0, 800.0], [1641.0, 423.5], [1643.0, 790.0], [1657.0, 797.0], [1663.0, 60.0], [1607.0, 413.5], [1615.0, 62.0], [1613.0, 62.0], [1605.0, 752.0], [1621.0, 769.0], [1623.0, 769.0], [1625.0, 762.0], [1679.0, 621.75], [1713.0, 827.5], [1687.0, 811.25], [1685.0, 814.0], [1691.0, 820.0], [1689.0, 56.0], [1695.0, 439.5], [1693.0, 59.0], [1719.0, 827.6666666666666], [1721.0, 827.25], [1723.0, 58.0], [1727.0, 829.0], [1697.0, 58.0], [1725.0, 827.0], [1715.0, 828.0], [1709.0, 829.0], [1703.0, 828.2], [1705.0, 833.0], [1707.0, 825.0], [1701.0, 823.0], [1699.0, 313.6666666666667], [1741.0, 314.33333333333337], [1731.0, 675.8], [1739.0, 833.8], [1735.0, 57.0], [1745.0, 834.0], [1747.0, 831.0], [1767.0, 827.3333333333334], [1765.0, 56.0], [1761.0, 57.0], [1771.0, 58.0], [1773.0, 57.0], [1785.0, 823.0], [1787.0, 826.6666666666666], [1789.0, 655.5555555555555], [1791.0, 57.0], [1779.0, 685.0], [1777.0, 60.0], [1783.0, 825.0], [1751.0, 835.5], [1759.0, 841.0], [1757.0, 817.3333333333334], [1753.0, 824.4285714285714], [1755.0, 809.5], [1793.0, 443.0], [1795.0, 719.4285714285714], [1821.0, 839.0], [1817.0, 827.0], [1813.0, 826.0], [1823.0, 829.5], [1801.0, 830.0], [1807.0, 826.0], [1855.0, 530.4], [1851.0, 581.0], [1849.0, 449.5], [1845.0, 843.0], [1853.0, 842.0], [1843.0, 710.3333333333333], [1841.0, 839.6666666666666], [1827.0, 521.0], [1829.0, 829.5], [1833.0, 829.5714285714287], [1831.0, 828.75], [1803.0, 829.0], [1809.0, 573.0], [1811.0, 829.3333333333334], [1883.0, 836.5], [1863.0, 841.0], [1873.0, 839.75], [1877.0, 839.029411764706], [1879.0, 836.5], [1881.0, 834.0], [1875.0, 836.6923076923077], [1857.0, 842.8571428571429], [1859.0, 844.8571428571429], [1871.0, 836.8571428571429], [1889.0, 684.4], [1891.0, 55.0], [1919.0, 866.5], [1913.0, 865.5], [1905.0, 397.1428571428571], [1911.0, 55.0], [1903.0, 856.0], [1895.0, 54.0], [1861.0, 844.0], [1869.0, 526.2], [1865.0, 839.6666666666666], [1953.0, 892.0], [1925.0, 872.0], [1937.0, 877.125], [1939.0, 877.0], [1961.0, 899.6666666666666], [1963.0, 902.0], [1967.0, 799.6249999999999], [1965.0, 905.5], [1955.0, 891.0], [1959.0, 54.0], [1983.0, 914.0], [1931.0, 872.0], [1945.0, 881.0], [1943.0, 55.0], [1951.0, 890.0], [1997.0, 948.75], [1989.0, 945.0], [1987.0, 950.8928571428572], [1991.0, 946.0], [2005.0, 952.0], [2001.0, 48.0], [2013.0, 45.0], [2029.0, 969.0], [1993.0, 946.0], [2015.0, 962.0], [2021.0, 966.0], [2041.0, 926.0], [2043.0, 930.0], [2017.0, 45.0], [2039.0, 926.0], [2066.0, 942.0], [2102.0, 952.0], [2058.0, 941.0], [2062.0, 940.0], [2050.0, 938.0], [2110.0, 949.5], [2106.0, 34.0], [2090.0, 948.75], [2094.0, 950.0], [2098.0, 492.5], [2122.0, 952.0], [2118.0, 947.0], [2146.0, 491.5], [2074.0, 39.0], [2070.0, 39.0], [2150.0, 962.7142857142857], [2154.0, 955.0], [2162.0, 965.3333333333334], [2170.0, 963.0], [2158.0, 961.5], [2130.0, 950.0], [2138.0, 961.0], [2142.0, 972.0], [2198.0, 981.5], [2186.0, 974.0], [2178.0, 966.0], [2190.0, 738.25], [2194.0, 20.0], [2206.0, 980.2], [2274.0, 1006.4444444444445], [2282.0, 1003.0], [2302.0, 1015.0], [2278.0, 509.5], [2210.0, 982.6666666666666], [2214.0, 984.0], [2242.0, 1002.0], [2246.0, 507.0], [2258.0, 1005.3333333333334], [2250.0, 1002.3333333333334], [2262.0, 1002.6], [2266.0, 1005.0], [2270.0, 1004.5], [2310.0, 1010.0], [2306.0, 510.5], [2314.0, 1009.75], [2318.0, 1011.3636363636364], [2330.0, 1014.0], [2386.0, 1023.6666666666666], [2394.0, 73.05747126436783], [2398.0, 61.50000000000001], [2326.0, 1015.0], [2350.0, 1007.6666666666666], [2358.0, 1017.0], [2342.0, 1012.0], [2051.0, 936.5], [2087.0, 948.0], [2091.0, 952.0], [2063.0, 941.0], [2147.0, 954.0], [2155.0, 958.0], [2159.0, 961.0], [2171.0, 963.0], [2151.0, 956.0], [2095.0, 946.0], [2103.0, 952.0], [2111.0, 957.0], [2107.0, 33.0], [2119.0, 947.0], [2115.0, 942.0], [2123.0, 955.0], [2127.0, 952.0], [2131.0, 955.5], [2143.0, 960.5], [2139.0, 29.0], [2191.0, 981.0], [2203.0, 979.0], [2179.0, 966.5], [2199.0, 984.0], [2211.0, 984.0], [2223.0, 997.5], [2239.0, 1001.0], [2227.0, 1011.0], [2263.0, 1009.0], [2267.0, 1004.75], [2271.0, 1002.0], [2251.0, 1002.0], [2255.0, 672.6666666666667], [2287.0, 1006.0], [2299.0, 1018.3333333333334], [2303.0, 1013.0], [2279.0, 1001.0], [2275.0, 508.0], [2311.0, 759.5], [2307.0, 1009.0], [2319.0, 1010.5999999999999], [2323.0, 1016.0], [2339.0, 1017.7058823529411], [2363.0, 1014.0], [2327.0, 1014.6666666666666], [2367.0, 1015.0], [2375.0, 1015.6666666666666], [2383.0, 1021.5], [2395.0, 183.75]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2397.0339914929586, 473.6433091806541]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 51963.15, "minX": 1.63220454E12, "maxY": 8168059.2, "series": [{"data": [[1.63220472E12, 7639000.133333334], [1.63220514E12, 8115760.8], [1.63220478E12, 7861532.466666667], [1.63220544E12, 5435094.416666667], [1.63220496E12, 7972468.466666667], [1.63220526E12, 7859316.916666667], [1.63220466E12, 8168059.2], [1.6322052E12, 7913302.6], [1.63220502E12, 7879757.666666667], [1.6322049E12, 7753369.866666666], [1.63220532E12, 7686865.766666667], [1.6322046E12, 7815309.133333334], [1.63220508E12, 7768953.733333333], [1.63220484E12, 8154060.133333334], [1.63220538E12, 8113503.716666667], [1.63220454E12, 2504380.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63220472E12, 160029.53333333333], [1.63220514E12, 170017.2], [1.63220478E12, 164691.36666666667], [1.63220544E12, 113842.8], [1.63220496E12, 167015.36666666667], [1.63220526E12, 164636.03333333333], [1.63220466E12, 170748.48333333334], [1.6322052E12, 165775.9], [1.63220502E12, 165073.16666666666], [1.6322049E12, 162425.46666666667], [1.63220532E12, 161008.93333333332], [1.6322046E12, 162736.75], [1.63220508E12, 162751.93333333332], [1.63220484E12, 170819.53333333333], [1.63220538E12, 169945.26666666666], [1.63220454E12, 51963.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63220544E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 140.39935579699105, "minX": 1.63220454E12, "maxY": 681.0464588936371, "series": [{"data": [[1.63220472E12, 496.6361813215268], [1.63220514E12, 585.4414339647267], [1.63220478E12, 487.087237724064], [1.63220544E12, 501.39511033342984], [1.63220496E12, 552.7262742889297], [1.63220526E12, 158.12712790091945], [1.63220466E12, 548.5201785021296], [1.6322052E12, 140.39935579699105], [1.63220502E12, 519.7903125785633], [1.6322049E12, 560.0464502282476], [1.63220532E12, 293.24510275620213], [1.6322046E12, 598.505703229289], [1.63220508E12, 547.8268112739236], [1.63220484E12, 538.389556541739], [1.63220538E12, 509.21111581414806], [1.63220454E12, 681.0464588936371]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63220544E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 140.23284767769934, "minX": 1.63220454E12, "maxY": 680.8612561303609, "series": [{"data": [[1.63220472E12, 496.449033574218], [1.63220514E12, 585.2526036581453], [1.63220478E12, 467.5941337544315], [1.63220544E12, 501.1509672402068], [1.63220496E12, 552.5303559891972], [1.63220526E12, 157.94288066950173], [1.63220466E12, 548.3341902729354], [1.6322052E12, 140.23284767769934], [1.63220502E12, 519.6063353724927], [1.6322049E12, 559.8604619472653], [1.63220532E12, 293.0343838064473], [1.6322046E12, 598.322574648935], [1.63220508E12, 547.6389011661528], [1.63220484E12, 538.1990379320458], [1.63220538E12, 508.9698336209454], [1.63220454E12, 680.8612561303609]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63220544E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.050733527148066754, "minX": 1.63220454E12, "maxY": 1.4444971787164453, "series": [{"data": [[1.63220472E12, 0.27746274333529203], [1.63220514E12, 0.4451929961596057], [1.63220478E12, 0.5762763115896997], [1.63220544E12, 0.30674637892485446], [1.63220496E12, 0.23239518279854854], [1.63220526E12, 0.050733527148066754], [1.63220466E12, 0.26864247833397736], [1.6322052E12, 0.16126771141040513], [1.63220502E12, 0.20316768624821938], [1.6322049E12, 0.5323124616747288], [1.63220532E12, 0.08048663138360039], [1.6322046E12, 0.7281883164067104], [1.63220508E12, 0.17589161255227242], [1.63220484E12, 0.3626380745683668], [1.63220538E12, 0.3074593820206449], [1.63220454E12, 1.4444971787164453]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63220544E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.63220454E12, "maxY": 3080.0, "series": [{"data": [[1.63220472E12, 1529.0], [1.63220514E12, 1669.0], [1.63220478E12, 1741.0], [1.63220544E12, 1453.0], [1.63220496E12, 1587.0], [1.63220526E12, 3080.0], [1.63220466E12, 1420.0], [1.6322052E12, 1313.0], [1.63220502E12, 1492.0], [1.6322049E12, 1893.0], [1.63220532E12, 1818.0], [1.6322046E12, 1944.0], [1.63220508E12, 1495.0], [1.63220484E12, 1330.0], [1.63220538E12, 1606.0], [1.63220454E12, 2032.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63220472E12, 894.0], [1.63220514E12, 1024.0], [1.63220478E12, 921.0], [1.63220544E12, 1103.0], [1.63220496E12, 960.0], [1.63220526E12, 844.9000000000015], [1.63220466E12, 991.9000000000015], [1.6322052E12, 109.0], [1.63220502E12, 963.0], [1.6322049E12, 1141.0], [1.63220532E12, 1188.0], [1.6322046E12, 1210.0], [1.63220508E12, 965.0], [1.63220484E12, 995.0], [1.63220538E12, 1114.0], [1.63220454E12, 1242.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63220472E12, 995.0], [1.63220514E12, 1158.9900000000016], [1.63220478E12, 1524.9800000000032], [1.63220544E12, 1392.0], [1.63220496E12, 1097.0], [1.63220526E12, 1812.0], [1.63220466E12, 1201.0], [1.6322052E12, 126.9900000000016], [1.63220502E12, 1086.0], [1.6322049E12, 1332.9900000000016], [1.63220532E12, 1455.9900000000016], [1.6322046E12, 1381.0], [1.63220508E12, 1099.9900000000016], [1.63220484E12, 1145.0], [1.63220538E12, 1262.0], [1.63220454E12, 1388.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63220472E12, 942.0], [1.63220514E12, 1095.0], [1.63220478E12, 1035.0], [1.63220544E12, 1260.0], [1.63220496E12, 1011.9500000000007], [1.63220526E12, 1039.0], [1.63220466E12, 1107.9500000000007], [1.6322052E12, 114.0], [1.63220502E12, 1009.0], [1.6322049E12, 1249.0], [1.63220532E12, 1257.0], [1.6322046E12, 1278.0], [1.63220508E12, 1018.0], [1.63220484E12, 1071.9500000000007], [1.63220538E12, 1174.0], [1.63220454E12, 1328.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63220472E12, 18.0], [1.63220514E12, 16.0], [1.63220478E12, 9.0], [1.63220544E12, 7.0], [1.63220496E12, 13.0], [1.63220526E12, 24.0], [1.63220466E12, 10.0], [1.6322052E12, 22.0], [1.63220502E12, 10.0], [1.6322049E12, 18.0], [1.63220532E12, 28.0], [1.6322046E12, 8.0], [1.63220508E12, 14.0], [1.63220484E12, 13.0], [1.63220538E12, 11.0], [1.63220454E12, 38.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63220472E12, 370.0], [1.63220514E12, 607.0], [1.63220478E12, 310.0], [1.63220544E12, 578.0], [1.63220496E12, 501.0], [1.63220526E12, 106.0], [1.63220466E12, 513.0], [1.6322052E12, 73.0], [1.63220502E12, 486.0], [1.6322049E12, 597.5], [1.63220532E12, 628.0], [1.6322046E12, 584.0], [1.63220508E12, 353.5], [1.63220484E12, 519.0], [1.63220538E12, 510.0], [1.63220454E12, 694.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63220544E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19.5, "minX": 1.0, "maxY": 3060.0, "series": [{"data": [[2.0, 44.0], [3.0, 33.0], [5.0, 40.5], [8.0, 43.0], [10.0, 34.5], [16.0, 42.0], [18.0, 38.5], [21.0, 68.0], [22.0, 3060.0], [36.0, 44.5], [39.0, 52.0], [38.0, 59.5], [43.0, 26.0], [45.0, 63.0], [47.0, 33.0], [57.0, 76.0], [66.0, 115.0], [67.0, 98.0], [79.0, 56.0], [76.0, 81.0], [84.0, 73.5], [88.0, 68.0], [99.0, 166.0], [107.0, 71.0], [116.0, 33.5], [127.0, 204.0], [124.0, 69.0], [126.0, 178.0], [158.0, 58.0], [156.0, 48.0], [160.0, 270.0], [161.0, 240.0], [166.0, 188.0], [173.0, 85.0], [170.0, 56.5], [184.0, 66.0], [189.0, 67.0], [191.0, 63.0], [199.0, 58.0], [202.0, 63.0], [234.0, 228.0], [233.0, 62.0], [264.0, 45.0], [263.0, 56.0], [287.0, 72.0], [281.0, 45.0], [277.0, 39.0], [272.0, 49.5], [289.0, 71.0], [291.0, 65.0], [300.0, 73.0], [305.0, 70.0], [307.0, 66.0], [317.0, 79.0], [304.0, 63.0], [318.0, 59.0], [327.0, 574.0], [322.0, 67.0], [331.0, 71.0], [334.0, 62.0], [320.0, 77.0], [338.0, 82.0], [337.0, 69.0], [336.0, 95.5], [351.0, 67.0], [353.0, 72.0], [352.0, 315.0], [364.0, 94.0], [355.0, 69.0], [371.0, 77.0], [382.0, 68.0], [380.0, 111.0], [374.0, 68.0], [375.0, 58.0], [370.0, 67.0], [369.0, 70.0], [378.0, 70.0], [404.0, 173.0], [414.0, 64.0], [412.0, 61.0], [401.0, 64.0], [407.0, 107.0], [416.0, 65.0], [428.0, 61.0], [419.0, 325.0], [426.0, 289.0], [434.0, 64.0], [444.0, 69.0], [432.0, 128.0], [454.0, 65.0], [471.0, 264.0], [481.0, 321.0], [488.0, 40.0], [487.0, 266.0], [504.0, 343.0], [496.0, 300.0], [499.0, 284.0], [514.0, 290.0], [544.0, 79.0], [574.0, 265.0], [564.0, 120.5], [555.0, 303.0], [552.0, 277.0], [595.0, 381.0], [596.0, 246.0], [601.0, 473.0], [600.0, 282.0], [584.0, 77.0], [637.0, 323.0], [631.0, 307.0], [628.0, 52.0], [632.0, 62.0], [625.0, 267.0], [664.0, 107.0], [642.0, 285.0], [660.0, 428.0], [671.0, 67.0], [651.0, 266.0], [646.0, 57.0], [667.0, 260.0], [669.0, 112.0], [653.0, 66.0], [641.0, 294.0], [647.0, 68.0], [697.0, 281.0], [693.0, 280.0], [694.0, 264.0], [685.0, 270.0], [687.0, 401.0], [690.0, 248.0], [681.0, 300.0], [698.0, 303.5], [680.0, 337.0], [672.0, 257.0], [673.0, 65.0], [678.0, 70.0], [692.0, 274.0], [691.0, 265.0], [728.0, 423.0], [719.0, 265.0], [735.0, 253.0], [725.0, 252.0], [711.0, 51.0], [712.0, 71.0], [760.0, 302.0], [738.0, 68.0], [742.0, 368.0], [739.0, 274.0], [741.0, 272.0], [793.0, 67.0], [799.0, 70.0], [774.0, 348.0], [784.0, 412.0], [807.0, 64.0], [817.0, 324.0], [837.0, 66.0], [859.0, 66.0], [839.0, 54.0], [836.0, 361.0], [835.0, 70.0], [851.0, 67.0], [858.0, 52.0], [881.0, 64.0], [892.0, 69.0], [885.0, 60.0], [877.0, 61.0], [872.0, 469.5], [868.0, 288.0], [919.0, 414.0], [904.0, 66.0], [917.0, 71.0], [950.0, 71.0], [930.0, 301.0], [936.0, 101.0], [941.0, 67.0], [939.0, 295.0], [957.0, 81.0], [958.0, 74.0], [986.0, 73.0], [981.0, 73.0], [980.0, 76.0], [979.0, 74.0], [991.0, 72.0], [976.0, 70.0], [977.0, 74.0], [978.0, 72.0], [985.0, 71.0], [984.0, 81.0], [967.0, 67.0], [966.0, 74.0], [988.0, 72.0], [987.0, 73.0], [990.0, 72.0], [974.0, 62.0], [973.0, 72.0], [972.0, 77.0], [969.0, 80.0], [982.0, 62.0], [983.0, 72.0], [961.0, 65.0], [960.0, 63.0], [975.0, 72.0], [999.0, 77.0], [1008.0, 69.0], [1011.0, 68.0], [1006.0, 67.0], [1005.0, 73.0], [1004.0, 71.0], [1007.0, 68.0], [1003.0, 70.0], [1001.0, 68.0], [1000.0, 77.0], [1002.0, 72.0], [1010.0, 70.0], [1015.0, 74.0], [1012.0, 65.0], [1013.0, 71.0], [1014.0, 77.0], [1016.0, 54.0], [1018.0, 72.0], [1017.0, 79.0], [1019.0, 72.0], [1022.0, 66.0], [1020.0, 87.0], [1021.0, 71.0], [1009.0, 69.0], [992.0, 71.0], [998.0, 66.0], [994.0, 75.0], [995.0, 77.0], [996.0, 73.0], [993.0, 72.0], [997.0, 67.0], [1073.0, 583.0], [1084.0, 66.5], [1025.0, 67.0], [1056.0, 68.0], [1057.0, 62.0], [1050.0, 56.0], [1024.0, 89.0], [1045.0, 77.0], [1066.0, 292.0], [1076.0, 69.0], [1027.0, 71.0], [1029.0, 73.0], [1028.0, 85.0], [1030.0, 76.0], [1039.0, 76.0], [1032.0, 70.0], [1033.0, 79.0], [1035.0, 84.0], [1113.0, 315.0], [1135.0, 57.0], [1149.0, 441.0], [1132.0, 381.0], [1213.0, 403.0], [1182.0, 681.0], [1198.0, 388.5], [1200.0, 737.0], [1189.0, 308.0], [1156.0, 191.0], [1155.0, 68.0], [1159.0, 367.0], [1176.0, 58.0], [1231.0, 356.0], [1279.0, 345.0], [1219.0, 349.0], [1220.0, 350.5], [1267.0, 69.0], [1241.0, 1095.0], [1238.0, 594.0], [1245.0, 402.0], [1244.0, 453.0], [1243.0, 481.0], [1254.0, 356.5], [1263.0, 103.0], [1275.0, 502.0], [1294.0, 68.0], [1340.0, 958.0], [1333.0, 291.0], [1289.0, 404.0], [1318.0, 70.0], [1313.0, 399.0], [1312.0, 376.5], [1321.0, 456.0], [1322.0, 389.5], [1307.0, 95.0], [1311.0, 369.0], [1281.0, 60.0], [1299.0, 397.0], [1292.0, 320.0], [1350.0, 874.0], [1377.0, 364.0], [1374.0, 367.0], [1346.0, 70.0], [1357.0, 421.0], [1392.0, 95.0], [1429.0, 910.0], [1471.0, 101.0], [1432.0, 547.0], [1463.0, 64.0], [1444.0, 98.5], [1445.0, 95.0], [1522.0, 996.0], [1501.0, 1353.0], [1483.0, 1064.0], [1492.0, 112.0], [1513.0, 452.0], [1494.0, 579.0], [1534.0, 298.5], [1491.0, 549.0], [1525.0, 518.0], [1532.0, 134.0], [1505.0, 275.0], [1588.0, 416.0], [1569.0, 397.0], [1570.0, 713.0], [1578.0, 811.0], [1575.0, 1060.0], [1549.0, 212.0], [1586.0, 140.0], [1551.0, 493.0], [1556.0, 112.5], [1547.0, 483.0], [1543.0, 95.0], [1544.0, 90.0], [1561.0, 430.0], [1563.0, 1307.0], [1542.0, 115.5], [1552.0, 262.5], [1597.0, 899.0], [1591.0, 980.0], [1604.0, 1184.0], [1600.0, 400.0], [1629.0, 944.0], [1637.0, 181.0], [1662.0, 211.0], [1655.0, 1133.0], [1653.0, 177.0], [1626.0, 177.5], [1641.0, 1071.0], [1638.0, 258.5], [1625.0, 490.0], [1620.0, 601.0], [1621.0, 150.0], [1615.0, 349.0], [1717.0, 272.0], [1677.0, 892.0], [1707.0, 801.0], [1699.0, 160.0], [1690.0, 238.5], [1691.0, 982.0], [1674.0, 294.0], [1718.0, 891.0], [1722.0, 356.0], [1675.0, 472.0], [1725.0, 215.0], [1713.0, 521.0], [1678.0, 432.5], [1716.0, 459.0], [1676.0, 285.5], [1791.0, 357.0], [1734.0, 474.0], [1759.0, 875.0], [1764.0, 370.5], [1761.0, 1318.0], [1765.0, 525.0], [1768.0, 1082.0], [1773.0, 295.0], [1772.0, 988.5], [1747.0, 798.0], [1737.0, 425.0], [1784.0, 359.0], [1745.0, 1195.0], [1843.0, 508.0], [1839.0, 778.0], [1838.0, 527.0], [1828.0, 835.0], [1824.0, 537.5], [1832.0, 521.5], [1834.0, 903.5], [1836.0, 362.0], [1841.0, 594.0], [1842.0, 543.0], [1848.0, 637.5], [1806.0, 930.0], [1845.0, 499.0], [1819.0, 509.0], [1818.0, 260.0], [1809.0, 540.0], [1844.0, 615.0], [1794.0, 485.0], [1799.0, 1077.0], [1800.0, 1044.0], [1803.0, 1065.0], [1797.0, 1282.0], [1798.0, 890.0], [1796.0, 841.0], [1866.0, 561.5], [1877.0, 431.0], [1873.0, 620.0], [1872.0, 491.5], [1871.0, 562.0], [1878.0, 831.0], [1913.0, 867.0], [1897.0, 895.0], [1863.0, 1076.0], [1864.0, 504.5], [1907.0, 398.0], [1857.0, 715.0], [1883.0, 585.0], [1887.0, 628.0], [1904.0, 940.5], [1970.0, 483.5], [1939.0, 523.0], [1923.0, 469.0], [1969.0, 393.0], [1967.0, 812.0], [1981.0, 774.0], [1929.0, 722.0], [1927.0, 1056.0], [1975.0, 889.0], [1973.0, 1158.0], [1962.0, 810.0], [2040.0, 500.0], [1996.0, 894.0], [2021.0, 1129.0], [2028.0, 646.0], [2045.0, 914.0], [1990.0, 451.0], [2009.0, 1123.0], [2007.0, 886.0], [2033.0, 1144.0], [1998.0, 447.5], [2017.0, 643.0], [2162.0, 658.0], [2116.0, 822.0], [2130.0, 551.0], [2118.0, 556.0], [2158.0, 801.0], [2078.0, 571.5], [2064.0, 793.0], [2062.0, 477.0], [2170.0, 845.0], [2052.0, 782.0], [2100.0, 888.0], [2094.0, 484.0], [2090.0, 548.5], [2080.0, 558.0], [2056.0, 1164.0], [2188.0, 988.5], [2180.0, 663.0], [2178.0, 536.0], [2182.0, 580.0], [2258.0, 784.5], [2212.0, 597.5], [2228.0, 780.0], [2266.0, 825.0], [2300.0, 662.5], [2244.0, 781.0], [2294.0, 619.0], [2292.0, 763.0], [2274.0, 782.0], [2272.0, 925.5], [2304.0, 714.0], [2318.0, 780.0], [2332.0, 806.0], [2396.0, 761.0], [2372.0, 795.0], [2364.0, 787.0], [2344.0, 834.0], [2346.0, 770.0], [2352.0, 1069.0], [2356.0, 811.0], [2368.0, 720.0], [2414.0, 679.0], [2422.0, 812.0], [2412.0, 748.0], [2338.0, 833.0], [2336.0, 800.0], [2488.0, 681.0], [2468.0, 770.5], [2464.0, 752.0], [2448.0, 805.0], [2494.0, 791.0], [2558.0, 715.0], [2500.0, 787.0], [2472.0, 810.0], [2568.0, 809.0], [2149.0, 926.0], [2053.0, 517.0], [2051.0, 537.0], [2143.0, 1042.0], [2123.0, 558.0], [2131.0, 848.0], [2121.0, 590.0], [2161.0, 857.0], [2115.0, 890.0], [2157.0, 815.0], [2153.0, 728.0], [2151.0, 1080.0], [2091.0, 511.0], [2089.0, 552.0], [2103.0, 707.0], [2071.0, 1042.0], [2075.0, 466.0], [2145.0, 876.0], [2063.0, 538.0], [2059.0, 1129.0], [2297.0, 795.0], [2239.0, 858.0], [2249.0, 696.0], [2241.0, 534.0], [2223.0, 780.0], [2265.0, 639.0], [2271.0, 642.0], [2267.0, 616.0], [2281.0, 872.0], [2273.0, 690.0], [2199.0, 686.0], [2191.0, 566.0], [2403.0, 791.0], [2341.0, 787.0], [2409.0, 719.0], [2355.0, 777.0], [2357.0, 736.0], [2413.0, 765.0], [2377.0, 753.0], [2339.0, 755.0], [2461.0, 850.0], [2545.0, 792.0], [2437.0, 755.0], [2455.0, 781.0], [2439.0, 768.0], [2497.0, 721.0], [2435.0, 833.0], [2479.0, 721.0], [2471.0, 1074.0], [2531.0, 697.0], [2639.0, 796.0], [2573.0, 759.0], [2791.0, 545.0], [1.0, 19.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2791.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19.5, "minX": 1.0, "maxY": 3060.0, "series": [{"data": [[2.0, 44.0], [3.0, 32.0], [5.0, 40.5], [8.0, 43.0], [10.0, 34.5], [16.0, 41.5], [18.0, 38.5], [21.0, 68.0], [22.0, 3060.0], [36.0, 44.0], [39.0, 52.0], [38.0, 59.5], [43.0, 26.0], [45.0, 63.0], [47.0, 32.0], [57.0, 76.0], [66.0, 115.0], [67.0, 98.0], [79.0, 56.0], [76.0, 81.0], [84.0, 73.5], [88.0, 68.0], [99.0, 166.0], [107.0, 71.0], [116.0, 33.5], [127.0, 203.0], [124.0, 68.5], [126.0, 178.0], [158.0, 58.0], [156.0, 48.0], [160.0, 270.0], [161.0, 239.0], [166.0, 188.0], [173.0, 84.0], [170.0, 56.5], [184.0, 66.0], [189.0, 67.0], [191.0, 63.0], [199.0, 58.0], [202.0, 63.0], [234.0, 228.0], [233.0, 61.0], [264.0, 45.0], [263.0, 56.0], [287.0, 72.0], [281.0, 45.0], [277.0, 39.0], [272.0, 49.0], [289.0, 71.0], [291.0, 65.0], [300.0, 73.0], [305.0, 69.0], [307.0, 66.0], [317.0, 79.0], [304.0, 63.0], [318.0, 59.0], [327.0, 574.0], [322.0, 66.0], [331.0, 71.0], [334.0, 62.0], [320.0, 76.5], [338.0, 82.0], [337.0, 69.0], [336.0, 95.0], [351.0, 67.0], [353.0, 72.0], [352.0, 314.5], [364.0, 94.0], [355.0, 68.0], [371.0, 77.0], [382.0, 68.0], [380.0, 111.0], [374.0, 68.0], [375.0, 58.0], [370.0, 67.0], [369.0, 70.0], [378.0, 69.5], [404.0, 173.0], [414.0, 64.0], [412.0, 61.0], [401.0, 64.0], [407.0, 107.0], [416.0, 65.0], [428.0, 60.0], [419.0, 325.0], [426.0, 288.0], [434.0, 64.0], [444.0, 69.0], [432.0, 127.5], [454.0, 65.0], [471.0, 264.0], [481.0, 321.0], [488.0, 40.0], [487.0, 266.0], [504.0, 343.0], [496.0, 299.0], [499.0, 283.0], [514.0, 290.0], [544.0, 79.0], [574.0, 265.0], [564.0, 120.5], [555.0, 303.0], [552.0, 277.0], [595.0, 381.0], [596.0, 245.5], [601.0, 473.0], [600.0, 281.5], [584.0, 77.0], [637.0, 323.0], [631.0, 306.0], [628.0, 51.0], [632.0, 61.0], [625.0, 267.0], [664.0, 107.0], [642.0, 285.0], [660.0, 428.0], [671.0, 67.0], [651.0, 265.0], [646.0, 57.0], [667.0, 260.0], [669.0, 112.0], [653.0, 66.0], [641.0, 293.0], [647.0, 68.0], [697.0, 281.0], [693.0, 279.0], [694.0, 264.0], [685.0, 270.0], [687.0, 401.0], [690.0, 248.0], [681.0, 299.0], [698.0, 303.0], [680.0, 337.0], [672.0, 257.0], [673.0, 65.0], [678.0, 69.0], [692.0, 273.0], [691.0, 265.0], [728.0, 423.0], [719.0, 265.0], [735.0, 252.0], [725.0, 252.0], [711.0, 50.0], [712.0, 70.0], [760.0, 301.0], [738.0, 68.0], [742.0, 368.0], [739.0, 273.0], [741.0, 272.0], [793.0, 67.0], [799.0, 70.0], [774.0, 347.5], [784.0, 412.0], [807.0, 64.0], [817.0, 323.0], [837.0, 66.0], [859.0, 66.0], [839.0, 54.0], [836.0, 361.0], [835.0, 70.0], [851.0, 67.0], [858.0, 52.0], [881.0, 64.0], [892.0, 68.0], [885.0, 59.0], [877.0, 61.0], [872.0, 469.5], [868.0, 288.0], [919.0, 414.0], [904.0, 66.0], [917.0, 71.0], [950.0, 70.0], [930.0, 301.0], [936.0, 100.0], [941.0, 66.0], [939.0, 295.0], [957.0, 81.0], [958.0, 73.0], [986.0, 73.0], [981.0, 72.0], [980.0, 76.0], [979.0, 74.0], [991.0, 72.0], [976.0, 70.0], [977.0, 74.0], [978.0, 72.0], [985.0, 70.0], [984.0, 81.0], [967.0, 67.0], [966.0, 74.0], [988.0, 71.0], [987.0, 73.0], [990.0, 71.0], [974.0, 62.0], [973.0, 72.0], [972.0, 77.0], [969.0, 80.0], [982.0, 62.0], [983.0, 72.0], [961.0, 65.0], [960.0, 63.0], [975.0, 72.0], [999.0, 76.0], [1008.0, 68.0], [1011.0, 68.0], [1006.0, 67.0], [1005.0, 73.0], [1004.0, 71.0], [1007.0, 67.0], [1003.0, 70.0], [1001.0, 67.0], [1000.0, 77.0], [1002.0, 72.0], [1010.0, 70.0], [1015.0, 73.0], [1012.0, 65.0], [1013.0, 71.0], [1014.0, 77.0], [1016.0, 54.0], [1018.0, 72.0], [1017.0, 79.0], [1019.0, 72.0], [1022.0, 65.0], [1020.0, 87.0], [1021.0, 71.0], [1009.0, 69.0], [992.0, 71.0], [998.0, 66.0], [994.0, 74.0], [995.0, 77.0], [996.0, 73.0], [993.0, 71.0], [997.0, 67.0], [1073.0, 583.0], [1084.0, 66.0], [1025.0, 67.0], [1056.0, 68.0], [1057.0, 62.0], [1050.0, 56.0], [1024.0, 89.0], [1045.0, 77.0], [1066.0, 291.0], [1076.0, 69.0], [1027.0, 71.0], [1029.0, 73.0], [1028.0, 85.0], [1030.0, 76.0], [1039.0, 76.0], [1032.0, 69.0], [1033.0, 79.0], [1035.0, 84.0], [1113.0, 315.0], [1135.0, 57.0], [1149.0, 440.0], [1132.0, 380.0], [1213.0, 403.0], [1182.0, 680.0], [1198.0, 388.5], [1200.0, 737.0], [1189.0, 308.0], [1156.0, 191.0], [1155.0, 68.0], [1159.0, 367.0], [1176.0, 58.0], [1231.0, 356.0], [1279.0, 345.0], [1219.0, 348.0], [1220.0, 350.0], [1267.0, 69.0], [1241.0, 56.0], [1238.0, 594.0], [1245.0, 402.0], [1244.0, 452.0], [1243.0, 481.0], [1254.0, 356.5], [1263.0, 103.0], [1275.0, 502.0], [1294.0, 67.0], [1340.0, 957.5], [1333.0, 291.0], [1289.0, 404.0], [1318.0, 70.0], [1313.0, 399.0], [1312.0, 376.5], [1321.0, 455.0], [1322.0, 389.5], [1307.0, 95.0], [1311.0, 369.0], [1281.0, 60.0], [1299.0, 397.0], [1292.0, 320.0], [1350.0, 874.0], [1377.0, 364.0], [1374.0, 367.0], [1346.0, 70.0], [1357.0, 421.0], [1392.0, 95.0], [1429.0, 910.0], [1471.0, 100.0], [1432.0, 547.0], [1463.0, 63.0], [1444.0, 98.0], [1445.0, 94.0], [1522.0, 995.5], [1501.0, 1351.0], [1483.0, 1064.0], [1492.0, 111.0], [1513.0, 452.0], [1494.0, 579.0], [1534.0, 298.5], [1491.0, 549.0], [1525.0, 517.0], [1532.0, 134.0], [1505.0, 275.0], [1588.0, 416.0], [1569.0, 397.0], [1570.0, 713.0], [1578.0, 811.0], [1575.0, 1060.0], [1549.0, 212.0], [1586.0, 140.0], [1551.0, 492.0], [1556.0, 112.0], [1547.0, 483.0], [1543.0, 95.0], [1544.0, 89.5], [1561.0, 430.0], [1563.0, 1306.0], [1542.0, 115.0], [1552.0, 262.5], [1597.0, 899.0], [1591.0, 979.0], [1604.0, 1184.0], [1600.0, 400.0], [1629.0, 944.0], [1637.0, 181.0], [1662.0, 210.0], [1655.0, 1133.0], [1653.0, 177.0], [1626.0, 177.0], [1641.0, 1070.0], [1638.0, 258.5], [1625.0, 490.0], [1620.0, 601.0], [1621.0, 150.0], [1615.0, 348.0], [1717.0, 272.0], [1677.0, 891.0], [1707.0, 801.0], [1699.0, 160.0], [1690.0, 238.0], [1691.0, 982.0], [1674.0, 294.0], [1718.0, 891.0], [1722.0, 356.0], [1675.0, 472.0], [1725.0, 215.0], [1713.0, 521.0], [1678.0, 432.0], [1716.0, 459.0], [1676.0, 285.0], [1791.0, 357.0], [1734.0, 474.0], [1759.0, 875.0], [1764.0, 370.0], [1761.0, 1318.0], [1765.0, 524.0], [1768.0, 1082.0], [1773.0, 295.0], [1772.0, 988.5], [1747.0, 798.0], [1737.0, 425.0], [1784.0, 358.5], [1745.0, 1195.0], [1843.0, 508.0], [1839.0, 777.5], [1838.0, 527.0], [1828.0, 834.5], [1824.0, 537.0], [1832.0, 521.5], [1834.0, 903.5], [1836.0, 362.0], [1841.0, 594.0], [1842.0, 543.0], [1848.0, 637.5], [1806.0, 930.0], [1845.0, 499.0], [1819.0, 509.0], [1818.0, 260.0], [1809.0, 539.0], [1844.0, 615.0], [1794.0, 485.0], [1799.0, 1076.0], [1800.0, 1044.0], [1803.0, 1065.0], [1797.0, 1281.0], [1798.0, 889.5], [1796.0, 840.0], [1866.0, 561.0], [1877.0, 431.0], [1873.0, 620.0], [1872.0, 491.5], [1871.0, 562.0], [1878.0, 830.5], [1913.0, 867.0], [1897.0, 894.0], [1863.0, 1076.0], [1864.0, 504.0], [1907.0, 397.0], [1857.0, 715.0], [1883.0, 584.0], [1887.0, 628.0], [1904.0, 940.5], [1970.0, 483.5], [1939.0, 523.0], [1923.0, 469.0], [1969.0, 393.0], [1967.0, 812.0], [1981.0, 773.0], [1929.0, 722.0], [1927.0, 1056.0], [1975.0, 888.0], [1973.0, 1158.0], [1962.0, 809.0], [2040.0, 500.0], [1996.0, 894.0], [2021.0, 1129.0], [2028.0, 645.0], [2045.0, 914.0], [1990.0, 451.0], [2009.0, 1123.0], [2007.0, 886.0], [2033.0, 1144.0], [1998.0, 447.0], [2017.0, 643.0], [2162.0, 657.5], [2116.0, 821.5], [2130.0, 551.0], [2118.0, 556.0], [2158.0, 801.0], [2078.0, 571.5], [2064.0, 792.5], [2062.0, 477.0], [2170.0, 845.0], [2052.0, 781.0], [2100.0, 887.0], [2094.0, 484.0], [2090.0, 547.0], [2080.0, 558.0], [2056.0, 1164.0], [2188.0, 988.0], [2180.0, 663.0], [2178.0, 536.0], [2182.0, 579.0], [2258.0, 784.5], [2212.0, 597.0], [2228.0, 780.0], [2266.0, 824.5], [2300.0, 662.5], [2244.0, 781.0], [2294.0, 619.0], [2292.0, 762.5], [2274.0, 781.0], [2272.0, 925.0], [2304.0, 714.0], [2318.0, 780.0], [2332.0, 806.0], [2396.0, 760.5], [2372.0, 795.0], [2364.0, 787.0], [2344.0, 834.0], [2346.0, 770.0], [2352.0, 1069.0], [2356.0, 810.5], [2368.0, 720.0], [2414.0, 679.0], [2422.0, 812.0], [2412.0, 748.0], [2338.0, 833.0], [2336.0, 800.0], [2488.0, 681.0], [2468.0, 770.5], [2464.0, 751.5], [2448.0, 804.0], [2494.0, 791.0], [2558.0, 715.0], [2500.0, 787.0], [2472.0, 810.0], [2568.0, 809.0], [2149.0, 925.0], [2053.0, 517.0], [2051.0, 537.0], [2143.0, 1041.0], [2123.0, 558.0], [2131.0, 848.0], [2121.0, 590.0], [2161.0, 857.0], [2115.0, 889.0], [2157.0, 815.0], [2153.0, 727.0], [2151.0, 1079.0], [2091.0, 511.0], [2089.0, 552.0], [2103.0, 707.0], [2071.0, 1041.0], [2075.0, 466.0], [2145.0, 876.0], [2063.0, 538.0], [2059.0, 1128.0], [2297.0, 795.0], [2239.0, 858.0], [2249.0, 696.0], [2241.0, 534.0], [2223.0, 780.0], [2265.0, 639.0], [2271.0, 642.0], [2267.0, 616.0], [2281.0, 872.0], [2273.0, 690.0], [2199.0, 686.0], [2191.0, 566.0], [2403.0, 790.0], [2341.0, 787.0], [2409.0, 719.0], [2355.0, 776.0], [2357.0, 736.0], [2413.0, 764.0], [2377.0, 753.0], [2339.0, 755.0], [2461.0, 850.0], [2545.0, 792.0], [2437.0, 755.0], [2455.0, 781.0], [2439.0, 768.0], [2497.0, 721.0], [2435.0, 833.0], [2479.0, 721.0], [2471.0, 1074.0], [2531.0, 697.0], [2639.0, 796.0], [2573.0, 759.0], [2791.0, 545.0], [1.0, 19.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2791.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 343.3, "minX": 1.63220454E12, "maxY": 1031.6833333333334, "series": [{"data": [[1.63220472E12, 990.45], [1.63220514E12, 1025.75], [1.63220478E12, 964.8166666666667], [1.63220544E12, 684.7333333333333], [1.63220496E12, 986.7333333333333], [1.63220526E12, 991.7833333333333], [1.63220466E12, 1031.6833333333334], [1.6322052E12, 998.5666666666667], [1.63220502E12, 994.4166666666666], [1.6322049E12, 996.65], [1.63220532E12, 968.4666666666667], [1.6322046E12, 959.0333333333333], [1.63220508E12, 980.4333333333333], [1.63220484E12, 1030.2333333333333], [1.63220538E12, 1024.8333333333333], [1.63220454E12, 343.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63220544E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 316.05, "minX": 1.63220454E12, "maxY": 1030.8, "series": [{"data": [[1.63220472E12, 964.0333333333333], [1.63220514E12, 1024.2], [1.63220478E12, 992.1166666666667], [1.63220544E12, 685.8], [1.63220496E12, 1006.1166666666667], [1.63220526E12, 991.7833333333333], [1.63220466E12, 1030.8], [1.6322052E12, 998.65], [1.63220502E12, 994.4166666666666], [1.6322049E12, 978.4666666666667], [1.63220532E12, 969.9333333333333], [1.6322046E12, 986.2833333333333], [1.63220508E12, 980.4333333333333], [1.63220484E12, 1029.0333333333333], [1.63220538E12, 1023.7666666666667], [1.63220454E12, 316.05]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63220544E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 316.05, "minX": 1.63220454E12, "maxY": 1030.8, "series": [{"data": [[1.63220472E12, 964.0333333333333], [1.63220514E12, 1024.2], [1.63220478E12, 992.1166666666667], [1.63220544E12, 685.8], [1.63220496E12, 1006.1166666666667], [1.63220526E12, 991.7833333333333], [1.63220466E12, 1030.8], [1.6322052E12, 998.65], [1.63220502E12, 994.4166666666666], [1.6322049E12, 978.4666666666667], [1.63220532E12, 969.9333333333333], [1.6322046E12, 986.2833333333333], [1.63220508E12, 980.4333333333333], [1.63220484E12, 1029.0333333333333], [1.63220538E12, 1023.7666666666667], [1.63220454E12, 316.05]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63220544E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 316.05, "minX": 1.63220454E12, "maxY": 1030.8, "series": [{"data": [[1.63220472E12, 964.0333333333333], [1.63220514E12, 1024.2], [1.63220478E12, 992.1166666666667], [1.63220544E12, 685.8], [1.63220496E12, 1006.1166666666667], [1.63220526E12, 991.7833333333333], [1.63220466E12, 1030.8], [1.6322052E12, 998.65], [1.63220502E12, 994.4166666666666], [1.6322049E12, 978.4666666666667], [1.63220532E12, 969.9333333333333], [1.6322046E12, 986.2833333333333], [1.63220508E12, 980.4333333333333], [1.63220484E12, 1029.0333333333333], [1.63220538E12, 1023.7666666666667], [1.63220454E12, 316.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63220544E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

