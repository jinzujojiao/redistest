/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 20188.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 6.0], [0.3, 6.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 12.0], [6.9, 12.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 12.0], [8.0, 12.0], [8.1, 12.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 13.0], [8.9, 13.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 16.0], [13.6, 16.0], [13.7, 16.0], [13.8, 16.0], [13.9, 16.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 17.0], [14.5, 17.0], [14.6, 17.0], [14.7, 17.0], [14.8, 17.0], [14.9, 17.0], [15.0, 17.0], [15.1, 17.0], [15.2, 17.0], [15.3, 17.0], [15.4, 17.0], [15.5, 17.0], [15.6, 17.0], [15.7, 17.0], [15.8, 17.0], [15.9, 17.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 18.0], [16.4, 18.0], [16.5, 18.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 18.0], [17.1, 18.0], [17.2, 18.0], [17.3, 18.0], [17.4, 18.0], [17.5, 18.0], [17.6, 18.0], [17.7, 18.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 18.0], [18.2, 18.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 19.0], [19.1, 19.0], [19.2, 19.0], [19.3, 19.0], [19.4, 19.0], [19.5, 19.0], [19.6, 19.0], [19.7, 19.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 19.0], [20.2, 19.0], [20.3, 20.0], [20.4, 20.0], [20.5, 20.0], [20.6, 20.0], [20.7, 20.0], [20.8, 20.0], [20.9, 20.0], [21.0, 20.0], [21.1, 20.0], [21.2, 20.0], [21.3, 20.0], [21.4, 20.0], [21.5, 20.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 21.0], [22.5, 21.0], [22.6, 21.0], [22.7, 21.0], [22.8, 21.0], [22.9, 21.0], [23.0, 21.0], [23.1, 21.0], [23.2, 21.0], [23.3, 21.0], [23.4, 21.0], [23.5, 21.0], [23.6, 21.0], [23.7, 21.0], [23.8, 21.0], [23.9, 21.0], [24.0, 21.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 22.0], [24.7, 22.0], [24.8, 22.0], [24.9, 22.0], [25.0, 22.0], [25.1, 22.0], [25.2, 22.0], [25.3, 22.0], [25.4, 22.0], [25.5, 22.0], [25.6, 22.0], [25.7, 22.0], [25.8, 22.0], [25.9, 22.0], [26.0, 22.0], [26.1, 22.0], [26.2, 22.0], [26.3, 22.0], [26.4, 22.0], [26.5, 22.0], [26.6, 22.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 23.0], [27.1, 23.0], [27.2, 23.0], [27.3, 23.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 24.0], [29.0, 24.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 24.0], [29.7, 24.0], [29.8, 24.0], [29.9, 24.0], [30.0, 24.0], [30.1, 24.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 24.0], [31.0, 25.0], [31.1, 25.0], [31.2, 25.0], [31.3, 25.0], [31.4, 25.0], [31.5, 25.0], [31.6, 25.0], [31.7, 25.0], [31.8, 25.0], [31.9, 25.0], [32.0, 25.0], [32.1, 25.0], [32.2, 25.0], [32.3, 25.0], [32.4, 25.0], [32.5, 25.0], [32.6, 25.0], [32.7, 25.0], [32.8, 25.0], [32.9, 25.0], [33.0, 25.0], [33.1, 26.0], [33.2, 26.0], [33.3, 26.0], [33.4, 26.0], [33.5, 26.0], [33.6, 26.0], [33.7, 26.0], [33.8, 26.0], [33.9, 26.0], [34.0, 26.0], [34.1, 26.0], [34.2, 26.0], [34.3, 26.0], [34.4, 26.0], [34.5, 26.0], [34.6, 26.0], [34.7, 26.0], [34.8, 26.0], [34.9, 26.0], [35.0, 26.0], [35.1, 26.0], [35.2, 26.0], [35.3, 27.0], [35.4, 27.0], [35.5, 27.0], [35.6, 27.0], [35.7, 27.0], [35.8, 27.0], [35.9, 27.0], [36.0, 27.0], [36.1, 27.0], [36.2, 27.0], [36.3, 27.0], [36.4, 27.0], [36.5, 27.0], [36.6, 27.0], [36.7, 27.0], [36.8, 27.0], [36.9, 27.0], [37.0, 27.0], [37.1, 27.0], [37.2, 27.0], [37.3, 27.0], [37.4, 28.0], [37.5, 28.0], [37.6, 28.0], [37.7, 28.0], [37.8, 28.0], [37.9, 28.0], [38.0, 28.0], [38.1, 28.0], [38.2, 28.0], [38.3, 28.0], [38.4, 28.0], [38.5, 28.0], [38.6, 28.0], [38.7, 28.0], [38.8, 28.0], [38.9, 28.0], [39.0, 28.0], [39.1, 28.0], [39.2, 28.0], [39.3, 28.0], [39.4, 29.0], [39.5, 29.0], [39.6, 29.0], [39.7, 29.0], [39.8, 29.0], [39.9, 29.0], [40.0, 29.0], [40.1, 29.0], [40.2, 29.0], [40.3, 29.0], [40.4, 29.0], [40.5, 29.0], [40.6, 29.0], [40.7, 29.0], [40.8, 29.0], [40.9, 29.0], [41.0, 29.0], [41.1, 29.0], [41.2, 29.0], [41.3, 30.0], [41.4, 30.0], [41.5, 30.0], [41.6, 30.0], [41.7, 30.0], [41.8, 30.0], [41.9, 30.0], [42.0, 30.0], [42.1, 30.0], [42.2, 30.0], [42.3, 30.0], [42.4, 30.0], [42.5, 30.0], [42.6, 30.0], [42.7, 30.0], [42.8, 30.0], [42.9, 30.0], [43.0, 31.0], [43.1, 31.0], [43.2, 31.0], [43.3, 31.0], [43.4, 31.0], [43.5, 31.0], [43.6, 31.0], [43.7, 31.0], [43.8, 31.0], [43.9, 31.0], [44.0, 31.0], [44.1, 31.0], [44.2, 31.0], [44.3, 31.0], [44.4, 31.0], [44.5, 32.0], [44.6, 32.0], [44.7, 32.0], [44.8, 32.0], [44.9, 32.0], [45.0, 32.0], [45.1, 32.0], [45.2, 32.0], [45.3, 32.0], [45.4, 32.0], [45.5, 32.0], [45.6, 32.0], [45.7, 33.0], [45.8, 33.0], [45.9, 33.0], [46.0, 33.0], [46.1, 33.0], [46.2, 33.0], [46.3, 33.0], [46.4, 33.0], [46.5, 33.0], [46.6, 33.0], [46.7, 33.0], [46.8, 34.0], [46.9, 34.0], [47.0, 34.0], [47.1, 34.0], [47.2, 34.0], [47.3, 34.0], [47.4, 34.0], [47.5, 34.0], [47.6, 35.0], [47.7, 35.0], [47.8, 35.0], [47.9, 35.0], [48.0, 35.0], [48.1, 35.0], [48.2, 35.0], [48.3, 36.0], [48.4, 36.0], [48.5, 36.0], [48.6, 36.0], [48.7, 36.0], [48.8, 37.0], [48.9, 37.0], [49.0, 37.0], [49.1, 37.0], [49.2, 38.0], [49.3, 38.0], [49.4, 38.0], [49.5, 39.0], [49.6, 39.0], [49.7, 40.0], [49.8, 40.0], [49.9, 41.0], [50.0, 41.0], [50.1, 42.0], [50.2, 43.0], [50.3, 44.0], [50.4, 46.0], [50.5, 47.0], [50.6, 49.0], [50.7, 51.0], [50.8, 53.0], [50.9, 55.0], [51.0, 57.0], [51.1, 60.0], [51.2, 62.0], [51.3, 64.0], [51.4, 66.0], [51.5, 68.0], [51.6, 70.0], [51.7, 72.0], [51.8, 74.0], [51.9, 76.0], [52.0, 78.0], [52.1, 80.0], [52.2, 82.0], [52.3, 84.0], [52.4, 86.0], [52.5, 88.0], [52.6, 90.0], [52.7, 91.0], [52.8, 93.0], [52.9, 95.0], [53.0, 97.0], [53.1, 99.0], [53.2, 101.0], [53.3, 103.0], [53.4, 105.0], [53.5, 106.0], [53.6, 108.0], [53.7, 110.0], [53.8, 112.0], [53.9, 113.0], [54.0, 115.0], [54.1, 116.0], [54.2, 118.0], [54.3, 119.0], [54.4, 121.0], [54.5, 122.0], [54.6, 124.0], [54.7, 125.0], [54.8, 127.0], [54.9, 128.0], [55.0, 130.0], [55.1, 131.0], [55.2, 133.0], [55.3, 134.0], [55.4, 136.0], [55.5, 137.0], [55.6, 138.0], [55.7, 140.0], [55.8, 141.0], [55.9, 142.0], [56.0, 144.0], [56.1, 145.0], [56.2, 146.0], [56.3, 148.0], [56.4, 149.0], [56.5, 151.0], [56.6, 152.0], [56.7, 153.0], [56.8, 154.0], [56.9, 156.0], [57.0, 157.0], [57.1, 158.0], [57.2, 159.0], [57.3, 161.0], [57.4, 162.0], [57.5, 163.0], [57.6, 164.0], [57.7, 166.0], [57.8, 167.0], [57.9, 168.0], [58.0, 169.0], [58.1, 171.0], [58.2, 172.0], [58.3, 173.0], [58.4, 174.0], [58.5, 175.0], [58.6, 177.0], [58.7, 178.0], [58.8, 179.0], [58.9, 181.0], [59.0, 182.0], [59.1, 183.0], [59.2, 184.0], [59.3, 186.0], [59.4, 187.0], [59.5, 188.0], [59.6, 189.0], [59.7, 191.0], [59.8, 192.0], [59.9, 193.0], [60.0, 194.0], [60.1, 196.0], [60.2, 197.0], [60.3, 198.0], [60.4, 199.0], [60.5, 201.0], [60.6, 202.0], [60.7, 203.0], [60.8, 205.0], [60.9, 206.0], [61.0, 207.0], [61.1, 209.0], [61.2, 210.0], [61.3, 211.0], [61.4, 213.0], [61.5, 214.0], [61.6, 215.0], [61.7, 216.0], [61.8, 218.0], [61.9, 219.0], [62.0, 220.0], [62.1, 222.0], [62.2, 223.0], [62.3, 224.0], [62.4, 226.0], [62.5, 227.0], [62.6, 229.0], [62.7, 230.0], [62.8, 231.0], [62.9, 233.0], [63.0, 234.0], [63.1, 235.0], [63.2, 236.0], [63.3, 238.0], [63.4, 239.0], [63.5, 240.0], [63.6, 242.0], [63.7, 243.0], [63.8, 244.0], [63.9, 246.0], [64.0, 247.0], [64.1, 248.0], [64.2, 249.0], [64.3, 250.0], [64.4, 252.0], [64.5, 253.0], [64.6, 254.0], [64.7, 255.0], [64.8, 257.0], [64.9, 258.0], [65.0, 259.0], [65.1, 260.0], [65.2, 261.0], [65.3, 263.0], [65.4, 264.0], [65.5, 265.0], [65.6, 267.0], [65.7, 268.0], [65.8, 269.0], [65.9, 270.0], [66.0, 272.0], [66.1, 273.0], [66.2, 274.0], [66.3, 276.0], [66.4, 277.0], [66.5, 278.0], [66.6, 280.0], [66.7, 281.0], [66.8, 282.0], [66.9, 283.0], [67.0, 285.0], [67.1, 286.0], [67.2, 287.0], [67.3, 289.0], [67.4, 290.0], [67.5, 291.0], [67.6, 293.0], [67.7, 294.0], [67.8, 295.0], [67.9, 297.0], [68.0, 298.0], [68.1, 300.0], [68.2, 301.0], [68.3, 302.0], [68.4, 304.0], [68.5, 305.0], [68.6, 306.0], [68.7, 308.0], [68.8, 309.0], [68.9, 310.0], [69.0, 312.0], [69.1, 313.0], [69.2, 315.0], [69.3, 316.0], [69.4, 317.0], [69.5, 318.0], [69.6, 320.0], [69.7, 321.0], [69.8, 322.0], [69.9, 324.0], [70.0, 325.0], [70.1, 326.0], [70.2, 327.0], [70.3, 329.0], [70.4, 330.0], [70.5, 331.0], [70.6, 333.0], [70.7, 334.0], [70.8, 335.0], [70.9, 337.0], [71.0, 338.0], [71.1, 339.0], [71.2, 341.0], [71.3, 342.0], [71.4, 344.0], [71.5, 346.0], [71.6, 347.0], [71.7, 349.0], [71.8, 350.0], [71.9, 351.0], [72.0, 353.0], [72.1, 354.0], [72.2, 355.0], [72.3, 357.0], [72.4, 358.0], [72.5, 359.0], [72.6, 360.0], [72.7, 362.0], [72.8, 363.0], [72.9, 364.0], [73.0, 365.0], [73.1, 367.0], [73.2, 368.0], [73.3, 369.0], [73.4, 371.0], [73.5, 372.0], [73.6, 373.0], [73.7, 375.0], [73.8, 376.0], [73.9, 378.0], [74.0, 379.0], [74.1, 381.0], [74.2, 382.0], [74.3, 384.0], [74.4, 385.0], [74.5, 387.0], [74.6, 388.0], [74.7, 389.0], [74.8, 391.0], [74.9, 392.0], [75.0, 393.0], [75.1, 394.0], [75.2, 396.0], [75.3, 397.0], [75.4, 398.0], [75.5, 400.0], [75.6, 401.0], [75.7, 402.0], [75.8, 403.0], [75.9, 404.0], [76.0, 406.0], [76.1, 407.0], [76.2, 408.0], [76.3, 409.0], [76.4, 410.0], [76.5, 412.0], [76.6, 413.0], [76.7, 415.0], [76.8, 416.0], [76.9, 417.0], [77.0, 419.0], [77.1, 420.0], [77.2, 421.0], [77.3, 423.0], [77.4, 424.0], [77.5, 426.0], [77.6, 427.0], [77.7, 428.0], [77.8, 430.0], [77.9, 431.0], [78.0, 432.0], [78.1, 434.0], [78.2, 435.0], [78.3, 436.0], [78.4, 438.0], [78.5, 439.0], [78.6, 441.0], [78.7, 442.0], [78.8, 444.0], [78.9, 445.0], [79.0, 446.0], [79.1, 448.0], [79.2, 450.0], [79.3, 451.0], [79.4, 453.0], [79.5, 454.0], [79.6, 455.0], [79.7, 457.0], [79.8, 458.0], [79.9, 460.0], [80.0, 461.0], [80.1, 463.0], [80.2, 464.0], [80.3, 466.0], [80.4, 467.0], [80.5, 468.0], [80.6, 470.0], [80.7, 471.0], [80.8, 473.0], [80.9, 474.0], [81.0, 475.0], [81.1, 477.0], [81.2, 478.0], [81.3, 480.0], [81.4, 481.0], [81.5, 483.0], [81.6, 484.0], [81.7, 486.0], [81.8, 488.0], [81.9, 489.0], [82.0, 491.0], [82.1, 492.0], [82.2, 494.0], [82.3, 496.0], [82.4, 497.0], [82.5, 499.0], [82.6, 500.0], [82.7, 502.0], [82.8, 504.0], [82.9, 505.0], [83.0, 507.0], [83.1, 508.0], [83.2, 510.0], [83.3, 511.0], [83.4, 513.0], [83.5, 515.0], [83.6, 516.0], [83.7, 518.0], [83.8, 520.0], [83.9, 521.0], [84.0, 523.0], [84.1, 524.0], [84.2, 526.0], [84.3, 528.0], [84.4, 529.0], [84.5, 531.0], [84.6, 533.0], [84.7, 535.0], [84.8, 537.0], [84.9, 538.0], [85.0, 540.0], [85.1, 542.0], [85.2, 543.0], [85.3, 545.0], [85.4, 547.0], [85.5, 549.0], [85.6, 550.0], [85.7, 552.0], [85.8, 554.0], [85.9, 556.0], [86.0, 558.0], [86.1, 560.0], [86.2, 561.0], [86.3, 563.0], [86.4, 564.0], [86.5, 566.0], [86.6, 568.0], [86.7, 569.0], [86.8, 571.0], [86.9, 573.0], [87.0, 574.0], [87.1, 576.0], [87.2, 578.0], [87.3, 580.0], [87.4, 582.0], [87.5, 584.0], [87.6, 585.0], [87.7, 587.0], [87.8, 589.0], [87.9, 591.0], [88.0, 593.0], [88.1, 595.0], [88.2, 597.0], [88.3, 599.0], [88.4, 601.0], [88.5, 603.0], [88.6, 604.0], [88.7, 606.0], [88.8, 608.0], [88.9, 610.0], [89.0, 612.0], [89.1, 614.0], [89.2, 616.0], [89.3, 617.0], [89.4, 619.0], [89.5, 621.0], [89.6, 623.0], [89.7, 625.0], [89.8, 627.0], [89.9, 629.0], [90.0, 631.0], [90.1, 633.0], [90.2, 635.0], [90.3, 637.0], [90.4, 639.0], [90.5, 642.0], [90.6, 644.0], [90.7, 646.0], [90.8, 647.0], [90.9, 649.0], [91.0, 651.0], [91.1, 654.0], [91.2, 656.0], [91.3, 658.0], [91.4, 660.0], [91.5, 662.0], [91.6, 664.0], [91.7, 666.0], [91.8, 668.0], [91.9, 671.0], [92.0, 673.0], [92.1, 675.0], [92.2, 677.0], [92.3, 679.0], [92.4, 681.0], [92.5, 683.0], [92.6, 686.0], [92.7, 688.0], [92.8, 690.0], [92.9, 693.0], [93.0, 695.0], [93.1, 697.0], [93.2, 699.0], [93.3, 701.0], [93.4, 704.0], [93.5, 706.0], [93.6, 709.0], [93.7, 711.0], [93.8, 714.0], [93.9, 716.0], [94.0, 718.0], [94.1, 721.0], [94.2, 724.0], [94.3, 726.0], [94.4, 729.0], [94.5, 732.0], [94.6, 735.0], [94.7, 738.0], [94.8, 740.0], [94.9, 743.0], [95.0, 746.0], [95.1, 749.0], [95.2, 752.0], [95.3, 754.0], [95.4, 758.0], [95.5, 761.0], [95.6, 764.0], [95.7, 767.0], [95.8, 770.0], [95.9, 773.0], [96.0, 776.0], [96.1, 780.0], [96.2, 783.0], [96.3, 787.0], [96.4, 790.0], [96.5, 794.0], [96.6, 798.0], [96.7, 802.0], [96.8, 806.0], [96.9, 810.0], [97.0, 814.0], [97.1, 818.0], [97.2, 823.0], [97.3, 828.0], [97.4, 833.0], [97.5, 838.0], [97.6, 843.0], [97.7, 849.0], [97.8, 855.0], [97.9, 862.0], [98.0, 869.0], [98.1, 876.0], [98.2, 884.0], [98.3, 892.0], [98.4, 902.0], [98.5, 915.0], [98.6, 930.0], [98.7, 947.0], [98.8, 970.0], [98.9, 994.0], [99.0, 1022.0], [99.1, 1056.0], [99.2, 1085.0], [99.3, 1113.0], [99.4, 1135.0], [99.5, 1173.0], [99.6, 1204.0], [99.7, 1245.0], [99.8, 1838.0], [99.9, 11908.0], [100.0, 20188.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 478381.0, "series": [{"data": [[0.0, 478381.0], [100.0, 65795.0], [200.0, 69319.0], [300.0, 66635.0], [400.0, 63504.0], [500.0, 52181.0], [600.0, 43929.0], [700.0, 30813.0], [800.0, 15704.0], [900.0, 4916.0], [1000.0, 2958.0], [1100.0, 2988.0], [1200.0, 1402.0], [1300.0, 422.0], [1400.0, 111.0], [1500.0, 1.0], [1800.0, 148.0], [1900.0, 53.0], [2000.0, 115.0], [2100.0, 2.0], [2300.0, 3.0], [2200.0, 1.0], [2400.0, 22.0], [3000.0, 139.0], [3800.0, 1.0], [4400.0, 2.0], [4800.0, 3.0], [4900.0, 3.0], [5100.0, 2.0], [5000.0, 1.0], [5200.0, 5.0], [5300.0, 4.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6100.0, 2.0], [6300.0, 2.0], [6200.0, 2.0], [6400.0, 18.0], [6600.0, 7.0], [6500.0, 26.0], [6900.0, 41.0], [6700.0, 4.0], [6800.0, 11.0], [7000.0, 18.0], [7100.0, 3.0], [7300.0, 10.0], [7400.0, 16.0], [7200.0, 5.0], [7600.0, 20.0], [7500.0, 15.0], [7800.0, 15.0], [7700.0, 14.0], [7900.0, 14.0], [8000.0, 12.0], [8100.0, 9.0], [8300.0, 9.0], [8200.0, 9.0], [8700.0, 4.0], [8400.0, 11.0], [8500.0, 7.0], [8600.0, 4.0], [9100.0, 3.0], [9000.0, 4.0], [8800.0, 13.0], [9200.0, 2.0], [8900.0, 2.0], [9600.0, 2.0], [10200.0, 2.0], [9900.0, 1.0], [10000.0, 1.0], [10400.0, 4.0], [10300.0, 8.0], [10600.0, 1.0], [10700.0, 10.0], [11100.0, 1.0], [10800.0, 4.0], [11000.0, 1.0], [11200.0, 2.0], [10900.0, 2.0], [11500.0, 6.0], [11700.0, 9.0], [11300.0, 4.0], [11600.0, 12.0], [11400.0, 5.0], [12000.0, 8.0], [11900.0, 14.0], [11800.0, 5.0], [12100.0, 7.0], [12200.0, 8.0], [12300.0, 8.0], [12500.0, 7.0], [12400.0, 7.0], [12700.0, 3.0], [12600.0, 3.0], [13100.0, 3.0], [12900.0, 2.0], [13200.0, 4.0], [12800.0, 2.0], [13000.0, 4.0], [13300.0, 2.0], [13800.0, 9.0], [13700.0, 5.0], [13500.0, 1.0], [13600.0, 2.0], [13400.0, 2.0], [14100.0, 6.0], [14000.0, 4.0], [14200.0, 6.0], [14600.0, 2.0], [14500.0, 1.0], [14400.0, 2.0], [15100.0, 27.0], [15000.0, 19.0], [15200.0, 20.0], [15300.0, 34.0], [14900.0, 7.0], [15700.0, 22.0], [15400.0, 26.0], [15800.0, 12.0], [15600.0, 13.0], [15500.0, 11.0], [15900.0, 10.0], [16300.0, 12.0], [16100.0, 8.0], [16200.0, 8.0], [16000.0, 3.0], [17300.0, 3.0], [16500.0, 14.0], [16600.0, 9.0], [17200.0, 1.0], [16400.0, 25.0], [16700.0, 12.0], [16800.0, 15.0], [17000.0, 13.0], [16900.0, 9.0], [17100.0, 4.0], [17400.0, 5.0], [17500.0, 8.0], [17900.0, 21.0], [18000.0, 74.0], [18100.0, 58.0], [17800.0, 27.0], [17700.0, 25.0], [17600.0, 15.0], [18200.0, 16.0], [18300.0, 32.0], [18400.0, 32.0], [19200.0, 8.0], [18500.0, 38.0], [18600.0, 11.0], [18700.0, 17.0], [18900.0, 13.0], [19100.0, 8.0], [19000.0, 4.0], [18800.0, 10.0], [19300.0, 3.0], [19400.0, 7.0], [19600.0, 3.0], [19800.0, 4.0], [19500.0, 1.0], [19700.0, 1.0], [19900.0, 3.0], [20000.0, 1.0], [20100.0, 1.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1825.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 744230.0, "series": [{"data": [[0.0, 744230.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 154828.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1825.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1312.1493891052648, "minX": 1.63750338E12, "maxY": 2400.0, "series": [{"data": [[1.63750362E12, 2400.0], [1.63750392E12, 2400.0], [1.63750398E12, 2400.0], [1.63750428E12, 1312.1493891052648], [1.63750386E12, 2400.0], [1.63750416E12, 2400.0], [1.63750422E12, 2398.972469608201], [1.63750356E12, 2400.0], [1.6375041E12, 2400.0], [1.63750344E12, 2400.0], [1.6375035E12, 2400.0], [1.6375038E12, 2400.0], [1.63750338E12, 2336.551098709456], [1.63750368E12, 2400.0], [1.63750374E12, 2400.0], [1.63750404E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63750428E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 35.0, "maxY": 19558.0, "series": [{"data": [[35.0, 9.533333333333333], [66.0, 11.80952380952381], [93.0, 12.578947368421053], [120.0, 10.842105263157897], [149.0, 11.478260869565217], [174.0, 11.000000000000002], [201.0, 10.555555555555555], [231.0, 10.517241379310343], [248.0, 9.277777777777777], [278.0, 11.814814814814815], [299.0, 11.888888888888888], [320.0, 14.322580645161286], [337.0, 8.75], [365.0, 11.333333333333332], [392.0, 8.849999999999998], [420.0, 8.764705882352942], [451.0, 17.10344827586208], [468.0, 18.903225806451623], [485.0, 15.590909090909092], [511.0, 12.800000000000002], [534.0, 14.766666666666664], [570.0, 14.133333333333333], [552.0, 13.966666666666667], [602.0, 15.857142857142858], [588.0, 17.205882352941174], [636.0, 14.607142857142858], [622.0, 16.749999999999996], [656.0, 13.562500000000002], [672.0, 15.806451612903224], [690.0, 12.827586206896553], [725.0, 18.3030303030303], [709.0, 18.062500000000004], [750.0, 14.379310344827582], [740.0, 16.210526315789473], [795.0, 19.575000000000003], [782.0, 15.85714285714286], [769.0, 20.571428571428573], [803.0, 15.083333333333336], [815.0, 14.300000000000002], [859.0, 16.142857142857142], [851.0, 22.349999999999994], [841.0, 18.105263157894736], [833.0, 18.475], [890.0, 18.289473684210527], [879.0, 13.20588235294118], [888.0, 5.0], [886.0, 5.0], [871.0, 17.8], [926.0, 17.23255813953488], [919.0, 17.80487804878049], [908.0, 17.342105263157894], [900.0, 18.499999999999996], [959.0, 22.326086956521742], [954.0, 18.255813953488367], [950.0, 21.62222222222222], [946.0, 21.909090909090903], [945.0, 21.17021276595745], [940.0, 17.209302325581394], [931.0, 18.487179487179493], [988.0, 16.11904761904762], [984.0, 18.863636363636367], [983.0, 26.680851063829788], [979.0, 20.69767441860465], [977.0, 19.108695652173914], [971.0, 20.720930232558143], [966.0, 21.25581395348837], [962.0, 21.863636363636363], [961.0, 23.212765957446816], [1009.0, 19.451612903225804], [1020.0, 20.56818181818182], [1018.0, 22.304347826086953], [1016.0, 20.891304347826086], [998.0, 20.142857142857146], [993.0, 20.302325581395344], [1015.0, 23.382978723404257], [1013.0, 23.00704225352112], [1012.0, 22.61052631578946], [1008.0, 20.72916666666666], [1006.0, 20.695652173913047], [1003.0, 22.73333333333333], [1086.0, 22.059233449477375], [1082.0, 22.25531914893617], [1056.0, 24.763636363636362], [1058.0, 23.524339360222534], [1060.0, 21.08510638297872], [1066.0, 20.489130434782606], [1070.0, 18.68888888888889], [1080.0, 21.869565217391305], [1078.0, 22.712765957446805], [1054.0, 24.215053763440867], [1028.0, 23.01052631578946], [1024.0, 21.644444444444442], [1030.0, 20.06818181818182], [1034.0, 19.854166666666664], [1036.0, 20.768421052631577], [1052.0, 19.717391304347824], [1050.0, 24.063829787234038], [1048.0, 27.282608695652176], [1040.0, 21.170212765957448], [1146.0, 18.437500000000004], [1128.0, 18.71111111111111], [1110.0, 14.923076923076923], [1106.0, 20.454545454545457], [1088.0, 17.51111111111112], [1214.0, 18.428571428571427], [1206.0, 17.800000000000004], [1182.0, 17.82926829268293], [1174.0, 19.825], [1162.0, 19.194444444444443], [1268.0, 17.583333333333336], [1254.0, 17.441176470588236], [1230.0, 18.085714285714285], [1220.0, 16.421052631578945], [1294.0, 18.666666666666664], [1280.0, 11.764705882352942], [1404.0, 25.375], [1378.0, 22.347826086956516], [1384.0, 24.749999999999996], [1406.0, 22.999999999999996], [1402.0, 18.319148936170212], [1398.0, 20.000000000000007], [1392.0, 20.46511627906977], [1358.0, 26.916666666666668], [1356.0, 50.0], [1348.0, 28.837209302325586], [1368.0, 18.888888888888893], [1420.0, 1509.3207547169818], [1414.0, 13783.117021276594], [1412.0, 24.12587412587413], [1410.0, 18.148936170212767], [1408.0, 21.87467362924282], [1438.0, 23.680851063829785], [1436.0, 23.23157894736842], [1434.0, 20.45777777777778], [1428.0, 116.80310880829018], [1426.0, 19.042553191489368], [1430.0, 22.562499999999996], [1424.0, 12268.0], [1432.0, 20.50833333333332], [1418.0, 1389.9056603773583], [1422.0, 324.8342857142855], [1446.0, 35.0], [1442.0, 11.950000000000001], [1468.0, 362.0], [1466.0, 173.0], [1464.0, 8260.644067796611], [1470.0, 289.0], [1456.0, 7588.4], [1458.0, 1384.5555555555557], [1460.0, 908.0], [1462.0, 4639.936507936507], [1454.0, 10139.416184971096], [1416.0, 311.1666666666667], [1448.0, 36.0], [1450.0, 25.0], [1526.0, 467.0], [1534.0, 7194.4], [1514.0, 6844.749999999999], [1532.0, 5954.0], [1486.0, 22.0], [1482.0, 388.3333333333333], [1478.0, 3942.0], [1480.0, 21.5], [1502.0, 5478.666666666666], [1472.0, 372.5], [1474.0, 374.0], [1476.0, 6040.0], [1500.0, 10101.5], [1492.0, 3804.4444444444443], [1490.0, 6025.5], [1488.0, 381.3333333333333], [1496.0, 309.0], [1504.0, 184.0], [1506.0, 3904.0], [1508.0, 180.5], [1512.0, 360.5], [1528.0, 275.5], [1522.0, 7085.4], [1542.0, 7978.692307692307], [1548.0, 6107.333333333333], [1538.0, 7165.1], [1536.0, 7416.75], [1566.0, 4090.0], [1540.0, 9849.0], [1544.0, 10940.25], [1546.0, 7385.5], [1552.0, 13990.0], [1562.0, 15.0], [1550.0, 6690.0], [1596.0, 2757.714285714286], [1568.0, 4170.5], [1598.0, 601.0], [1594.0, 16651.0], [1570.0, 2920.666666666667], [1574.0, 614.0], [1576.0, 7711.0], [1588.0, 5875.0], [1592.0, 15216.5], [1590.0, 7102.25], [1636.0, 10361.666666666668], [1600.0, 2676.625], [1642.0, 6059.857142857143], [1640.0, 6280.0], [1644.0, 3903.4], [1646.0, 607.5], [1634.0, 4533.5], [1608.0, 19426.0], [1650.0, 870.0], [1652.0, 665.625], [1656.0, 2128.0], [1620.0, 7788.818181818182], [1618.0, 624.5], [1602.0, 13188.75], [1628.0, 7912.0], [1630.0, 697.0], [1622.0, 13932.25], [1668.0, 2023.8], [1692.0, 19558.0], [1690.0, 3707.5714285714284], [1684.0, 2546.8749999999995], [1688.0, 854.0], [1666.0, 1357.923076923077], [1670.0, 4442.357142857142], [1672.0, 4141.043478260871], [1674.0, 828.0], [1710.0, 919.5], [1714.0, 10375.5], [1718.0, 2966.25], [1722.0, 916.0], [1726.0, 6547.166666666667], [1696.0, 863.5], [1680.0, 2398.2], [1682.0, 867.0], [1736.0, 938.0], [1732.0, 7286.8], [1728.0, 4090.4], [1756.0, 4202.0], [1758.0, 7256.25], [1754.0, 5716.625], [1752.0, 1067.0], [1730.0, 1979.916666666667], [1734.0, 1030.0], [1740.0, 7167.5], [1776.0, 898.0], [1788.0, 993.5], [1790.0, 952.25], [1786.0, 939.3333333333334], [1784.0, 954.0], [1778.0, 936.0], [1760.0, 994.0], [1764.0, 5556.428571428572], [1770.0, 1100.0], [1766.0, 1091.0], [1774.0, 909.4], [1742.0, 1006.6666666666666], [1794.0, 988.0], [1792.0, 2868.4285714285716], [1812.0, 1047.0], [1808.0, 1035.0], [1796.0, 977.6], [1804.0, 2511.4], [1850.0, 1146.25], [1846.0, 7345.666666666667], [1848.0, 1077.5], [1854.0, 1127.5555555555557], [1844.0, 1095.0], [1842.0, 1120.0], [1840.0, 955.0], [1830.0, 1102.5], [1834.0, 1103.5], [1832.0, 1065.6666666666667], [1838.0, 1105.0], [1828.0, 1060.75], [1802.0, 992.7142857142857], [1798.0, 1012.4374999999999], [1866.0, 1154.25], [1882.0, 1181.6666666666667], [1856.0, 1131.3333333333333], [1886.0, 1108.1666666666667], [1884.0, 1224.5], [1868.0, 3043.0], [1912.0, 14.0], [1908.0, 938.0], [1910.0, 272.75], [1906.0, 943.5], [1904.0, 15.0], [1892.0, 2460.5263157894733], [1896.0, 743.0], [1898.0, 989.0], [1900.0, 1014.0], [1902.0, 973.5], [1890.0, 997.8333333333334], [1870.0, 1198.0], [1878.0, 2300.0], [1874.0, 1177.0], [1872.0, 1141.5], [1924.0, 875.3333333333334], [1930.0, 877.0], [1942.0, 19.910344827586194], [1940.0, 875.0], [1936.0, 879.5], [1938.0, 590.6666666666667], [1926.0, 876.0], [1944.0, 889.8461538461539], [1948.0, 924.3333333333333], [1950.0, 83.35714285714283], [1922.0, 875.5], [1920.0, 748.8333333333334], [1956.0, 953.5], [1958.0, 954.0], [1964.0, 961.1666666666666], [1966.0, 964.25], [1960.0, 958.5], [1962.0, 963.0], [1954.0, 940.75], [1952.0, 930.5], [1978.0, 982.0], [1980.0, 986.6666666666666], [1976.0, 977.8], [1974.0, 974.8], [1972.0, 972.0], [1970.0, 968.0], [1968.0, 967.3333333333334], [1932.0, 877.3333333333334], [2032.0, 1097.3333333333333], [1996.0, 1026.0], [1992.0, 70.10526315789475], [1986.0, 22.999999999999996], [2010.0, 1055.0], [2002.0, 1051.3636363636363], [2008.0, 1054.3333333333333], [2004.0, 20.658536585365855], [1990.0, 1004.7], [1994.0, 1019.111111111111], [1998.0, 1029.0], [2046.0, 257.63043478260875], [2044.0, 1110.0], [2042.0, 1106.0], [2038.0, 1099.0], [2034.0, 1096.4], [2036.0, 1095.6666666666667], [2020.0, 1085.5], [2024.0, 1083.6190476190477], [2026.0, 1088.5], [2028.0, 1093.2727272727273], [2022.0, 1081.0], [2000.0, 1028.8], [2056.0, 1138.5], [2052.0, 1134.3636363636363], [2048.0, 1124.2222222222222], [2108.0, 571.3048780487802], [2084.0, 1146.3333333333333], [2088.0, 172.22727272727278], [2068.0, 1168.5000000000002], [2072.0, 1172.111111111111], [2160.0, 1140.3333333333333], [2156.0, 15.92307692307692], [2164.0, 1136.2777777777776], [2168.0, 1126.6666666666665], [2172.0, 233.66666666666674], [2112.0, 1190.8333333333335], [2124.0, 1172.2], [2120.0, 1167.1666666666667], [2132.0, 560.445945945946], [2136.0, 1136.9375000000002], [2140.0, 1101.3636363636363], [2080.0, 73.47619047619047], [2196.0, 16.902439024390244], [2176.0, 1088.6363636363637], [2216.0, 1096.5], [2228.0, 1131.0], [2232.0, 1118.0], [2208.0, 1078.0], [2212.0, 1086.5], [2184.0, 1117.2222222222222], [2188.0, 1127.7142857142858], [2192.0, 1132.5], [2200.0, 1107.6363636363635], [2204.0, 133.5], [2272.0, 1120.0], [2276.0, 1061.6666666666667], [2292.0, 20.04878048780488], [2260.0, 1128.0], [2268.0, 16.702702702702705], [2264.0, 1131.4285714285716], [2248.0, 1110.6666666666667], [2244.0, 1099.0], [2240.0, 1091.0], [2364.0, 940.0], [2324.0, 221.8301886792453], [2312.0, 1100.0], [2304.0, 1136.1666666666665], [2360.0, 776.6666666666666], [2356.0, 187.5], [2348.0, 262.20000000000005], [2340.0, 38.812080536912745], [2336.0, 48.5], [2352.0, 1182.0], [2316.0, 1109.0], [2320.0, 1084.3333333333333], [2328.0, 1078.6666666666665], [2332.0, 1086.0], [2368.0, 508.21319796954367], [2400.0, 222.30875818516088], [2376.0, 1117.8], [2384.0, 528.0], [2392.0, 680.8888888888888], [2396.0, 1133.0], [2053.0, 1138.5], [2049.0, 1124.5], [2109.0, 1174.0], [2101.0, 1166.25], [2093.0, 1151.0], [2097.0, 1161.2857142857144], [2089.0, 1147.4], [2085.0, 1147.5], [2081.0, 1175.5], [2065.0, 15.909090909090908], [2069.0, 1137.0], [2073.0, 1163.0], [2077.0, 1179.5], [2161.0, 1126.2307692307695], [2165.0, 161.31914893617017], [2173.0, 1120.0], [2169.0, 1104.0], [2125.0, 1173.5], [2129.0, 1193.75], [2133.0, 1146.1428571428573], [2137.0, 1128.377358490566], [2141.0, 391.4655172413792], [2121.0, 1171.4], [2113.0, 100.47619047619047], [2189.0, 1122.6666666666667], [2193.0, 1134.0], [2213.0, 1085.3636363636363], [2229.0, 1138.5], [2233.0, 1101.0], [2209.0, 71.02439024390243], [2205.0, 1113.7999999999997], [2241.0, 1091.0], [2273.0, 1121.0], [2301.0, 1107.1538461538462], [2277.0, 1063.6666666666665], [2281.0, 1069.0], [2245.0, 1103.125], [2253.0, 1123.0], [2265.0, 1122.916666666667], [2269.0, 1103.642857142857], [2257.0, 1119.0], [2201.0, 1107.0], [2353.0, 473.0769230769231], [2365.0, 1120.4], [2361.0, 483.0], [2357.0, 1118.8999999999999], [2349.0, 320.8363636363637], [2345.0, 306.75], [2341.0, 20.0], [2337.0, 49.0], [2309.0, 208.33333333333326], [2325.0, 1090.5], [2329.0, 41.45454545454545], [2369.0, 829.2], [2373.0, 1134.857142857143], [2377.0, 1098.0], [2393.0, 676.5], [2397.0, 743.6950354609929], [1059.0, 19.04195804195805], [1057.0, 20.919273461150365], [1063.0, 23.29787234042552], [1061.0, 20.452631578947358], [1065.0, 19.895833333333336], [1069.0, 18.744680851063833], [1085.0, 23.872340425531913], [1083.0, 22.776595744680847], [1081.0, 22.12765957446809], [1079.0, 21.936170212765962], [1077.0, 24.757894736842108], [1073.0, 20.113636363636367], [1035.0, 20.59574468085106], [1029.0, 19.42553191489362], [1027.0, 19.531914893617024], [1037.0, 21.355555555555558], [1051.0, 20.93617021276595], [1045.0, 20.623655913978492], [1043.0, 19.212765957446813], [1041.0, 20.70212765957448], [1097.0, 21.435897435897438], [1139.0, 22.950000000000006], [1131.0, 20.63414634146342], [1119.0, 19.51282051282051], [1091.0, 20.261904761904763], [1197.0, 16.000000000000004], [1189.0, 20.674999999999997], [1243.0, 16.72972972972973], [1335.0, 17.885714285714286], [1319.0, 16.8125], [1311.0, 17.925], [1303.0, 20.073170731707314], [1403.0, 18.893617021276597], [1407.0, 22.397774687065343], [1381.0, 21.42222222222222], [1405.0, 20.1875], [1401.0, 22.31578947368422], [1399.0, 21.0], [1397.0, 20.869565217391308], [1353.0, 29.372549019607842], [1371.0, 18.195121951219512], [1361.0, 15.048780487804876], [1419.0, 2323.1571428571424], [1413.0, 7212.045569620252], [1411.0, 23.13986013986015], [1409.0, 27.29166666666666], [1439.0, 21.844444444444445], [1437.0, 21.911458333333336], [1435.0, 32.0], [1433.0, 22.685863874345554], [1429.0, 210.99999999999991], [1427.0, 22.703125000000004], [1431.0, 20.242105263157907], [1425.0, 26.102040816326532], [1421.0, 1828.5000000000002], [1423.0, 6944.500000000001], [1471.0, 364.6], [1469.0, 2139.5714285714284], [1467.0, 330.66666666666674], [1463.0, 8951.75], [1465.0, 5571.0], [1457.0, 8121.7333333333345], [1461.0, 15791.0], [1453.0, 8622.170731707316], [1447.0, 35.5], [1417.0, 2758.002320185616], [1455.0, 10924.75], [1415.0, 1206.9224806201544], [1531.0, 7710.0], [1515.0, 19.0], [1519.0, 19.0], [1525.0, 9663.5], [1533.0, 2268.25], [1521.0, 8038.0], [1485.0, 402.0], [1501.0, 21.0], [1473.0, 234.8], [1475.0, 4646.75], [1491.0, 410.0], [1489.0, 1834.6], [1493.0, 168.0], [1497.0, 14057.0], [1499.0, 4052.5], [1513.0, 7589.0], [1505.0, 5202.333333333333], [1535.0, 7601.0], [1507.0, 8687.25], [1509.0, 5861.0], [1511.0, 20.0], [1595.0, 7615.727272727274], [1567.0, 15602.333333333334], [1545.0, 17510.0], [1541.0, 8505.833333333334], [1565.0, 6959.108108108109], [1597.0, 5340.4], [1599.0, 218.5], [1571.0, 9324.5], [1573.0, 451.0], [1579.0, 471.0], [1577.0, 11964.0], [1575.0, 6932.285714285714], [1593.0, 9184.0], [1587.0, 13.0], [1551.0, 352.0], [1585.0, 14.0], [1591.0, 2500.5], [1549.0, 4140.0], [1547.0, 2980.333333333333], [1633.0, 8313.699999999999], [1605.0, 9320.444444444445], [1629.0, 7951.0], [1637.0, 2865.666666666667], [1643.0, 6146.0], [1645.0, 5871.0], [1651.0, 4498.181818181818], [1653.0, 3125.6666666666665], [1657.0, 3159.066666666666], [1663.0, 3158.666666666667], [1635.0, 8444.0], [1619.0, 579.0], [1627.0, 8142.75], [1625.0, 9.0], [1623.0, 6036.6], [1631.0, 703.0], [1621.0, 9526.666666666666], [1667.0, 2119.818181818182], [1665.0, 3484.428571428571], [1693.0, 2066.176470588235], [1695.0, 5603.0], [1689.0, 6747.75], [1691.0, 4942.25], [1669.0, 4528.0], [1713.0, 3572.333333333333], [1711.0, 880.0], [1715.0, 912.0], [1719.0, 906.5], [1717.0, 988.0], [1721.0, 5094.25], [1723.0, 965.75], [1727.0, 994.0], [1697.0, 890.0], [1671.0, 806.0], [1681.0, 7220.0], [1729.0, 1013.0], [1759.0, 1084.0], [1757.0, 8857.0], [1755.0, 1072.0], [1751.0, 7841.4], [1753.0, 5759.25], [1739.0, 1030.0], [1737.0, 9650.0], [1733.0, 1014.0], [1743.0, 3630.666666666667], [1787.0, 1980.1538461538462], [1789.0, 997.4], [1785.0, 972.0], [1783.0, 961.3333333333334], [1761.0, 1015.0], [1763.0, 3718.666666666667], [1773.0, 1048.0], [1771.0, 1098.6666666666667], [1767.0, 8424.0], [1775.0, 1953.2727272727277], [1765.0, 5994.5], [1741.0, 8809.888888888889], [1845.0, 1072.5], [1801.0, 1591.909090909091], [1795.0, 1049.4444444444443], [1793.0, 1020.4444444444445], [1811.0, 1050.0], [1809.0, 1029.5], [1797.0, 971.4], [1805.0, 970.0], [1807.0, 2800.3333333333335], [1827.0, 1492.727272727273], [1825.0, 1071.0], [1843.0, 3814.0], [1849.0, 1099.0], [1847.0, 1150.0], [1851.0, 2310.9285714285716], [1853.0, 1140.3333333333333], [1855.0, 1077.0], [1841.0, 906.3750000000001], [1831.0, 1741.75], [1835.0, 4364.0], [1833.0, 1076.0], [1837.0, 1079.5], [1839.0, 1944.4444444444443], [1829.0, 1083.4444444444443], [1799.0, 998.8571428571429], [1867.0, 987.0], [1857.0, 1156.0], [1887.0, 1217.5], [1885.0, 3197.526315789474], [1859.0, 22.0], [1869.0, 742.3333333333333], [1871.0, 1183.0], [1889.0, 2792.25], [1917.0, 914.0], [1909.0, 898.0], [1907.0, 987.0000000000001], [1893.0, 845.8571428571429], [1895.0, 896.0], [1897.0, 869.2727272727273], [1903.0, 1013.0], [1899.0, 595.6], [1901.0, 1006.3333333333334], [1879.0, 7226.0], [1881.0, 603.0], [1877.0, 18.0], [1875.0, 19.0], [1873.0, 1185.0], [1935.0, 879.0], [1941.0, 880.0], [1939.0, 881.0], [1937.0, 880.0], [1927.0, 876.5], [1931.0, 878.0], [1943.0, 883.8499999999999], [1947.0, 919.1764705882352], [1949.0, 927.0], [1951.0, 931.0], [1963.0, 959.6666666666666], [1965.0, 965.0], [1959.0, 90.37499999999999], [1957.0, 946.5], [1955.0, 935.4], [1953.0, 931.0], [1979.0, 982.8], [1977.0, 982.1538461538462], [1975.0, 984.1428571428571], [1973.0, 973.5], [1969.0, 966.0], [1971.0, 43.44117647058824], [1933.0, 878.0], [1929.0, 878.0], [1989.0, 1001.75], [1987.0, 1001.1666666666666], [2011.0, 22.860465116279066], [2009.0, 1057.2], [1993.0, 1013.0], [1995.0, 1024.3333333333333], [2019.0, 1081.0], [2047.0, 1147.0], [2017.0, 19.91176470588236], [2045.0, 1129.5999999999997], [2043.0, 1113.7142857142856], [2041.0, 1103.0], [2039.0, 1102.4], [2037.0, 1099.0], [2033.0, 1102.5], [2021.0, 1087.0], [2023.0, 1089.6666666666667], [2025.0, 1087.8181818181818], [2029.0, 1104.0], [2031.0, 74.48571428571428], [2027.0, 1095.0], [2001.0, 1051.4499999999998], [2058.0, 17.73170731707317], [2110.0, 1175.2], [2102.0, 1170.0], [2098.0, 18.157894736842106], [2106.0, 1203.0], [2090.0, 1145.3333333333333], [2094.0, 1153.6666666666667], [2086.0, 1147.0], [2054.0, 1130.5], [2070.0, 1132.0], [2170.0, 1112.0], [2174.0, 1122.25], [2162.0, 1126.357142857143], [2114.0, 1148.0], [2118.0, 1160.7272727272727], [2122.0, 16.55263157894737], [2126.0, 1145.0], [2130.0, 1174.7222222222224], [2138.0, 1112.375], [2142.0, 1108.5], [2082.0, 1160.8], [2190.0, 1134.142857142857], [2230.0, 1122.6666666666667], [2214.0, 1096.0], [2218.0, 14.322580645161288], [2210.0, 1085.0], [2186.0, 14.421052631578949], [2194.0, 1136.0], [2198.0, 1127.5], [2202.0, 1108.3333333333333], [2206.0, 1118.8333333333333], [2274.0, 1115.5], [2278.0, 1064.8333333333333], [2302.0, 1115.777777777778], [2242.0, 361.6428571428571], [2246.0, 1108.0], [2250.0, 1111.6666666666667], [2266.0, 1147.25], [2270.0, 1107.0], [2258.0, 1120.0], [2306.0, 40.26086956521738], [2366.0, 1123.8], [2362.0, 1116.0], [2358.0, 451.75], [2354.0, 321.3333333333333], [2350.0, 709.111111111111], [2346.0, 340.85714285714283], [2338.0, 48.0], [2342.0, 19.6], [2310.0, 1096.875], [2314.0, 1105.0], [2318.0, 1111.0], [2322.0, 1066.0], [2326.0, 1087.5555555555557], [2330.0, 1085.0], [2370.0, 354.18181818181824], [2334.0, 23.8], [2374.0, 1125.25], [2386.0, 547.3805309734514], [2394.0, 688.7499999999999], [2055.0, 1132.0], [2111.0, 1205.0], [2107.0, 1159.75], [2099.0, 1165.0], [2095.0, 1157.3750000000002], [2087.0, 1147.625], [2091.0, 1150.142857142857], [2083.0, 1143.6666666666667], [2051.0, 1127.0], [2067.0, 1153.0], [2071.0, 1133.0], [2075.0, 1141.0], [2079.0, 1145.5], [2159.0, 1148.5], [2151.0, 24.813953488372093], [2163.0, 1128.25], [2167.0, 1140.25], [2171.0, 1114.181818181818], [2175.0, 1106.769230769231], [2147.0, 1101.0], [2115.0, 1151.3333333333333], [2119.0, 1165.0], [2123.0, 1173.0], [2131.0, 1158.4285714285713], [2139.0, 1095.5], [2143.0, 1108.4], [2191.0, 1131.5], [2179.0, 45.54761904761906], [2211.0, 1088.0], [2215.0, 1089.0], [2227.0, 1123.4285714285713], [2235.0, 70.11627906976742], [2239.0, 1089.3333333333333], [2231.0, 1120.0], [2187.0, 1117.0], [2199.0, 1112.5454545454543], [2195.0, 1133.6666666666667], [2203.0, 1110.8333333333333], [2207.0, 1096.25], [2275.0, 1074.769230769231], [2299.0, 18.41463414634147], [2279.0, 47.16666666666668], [2243.0, 1097.5], [2247.0, 1114.0], [2251.0, 43.48780487804878], [2255.0, 1122.1578947368423], [2259.0, 100.83333333333339], [2267.0, 1098.25], [2271.0, 1112.1818181818182], [2363.0, 1116.5], [2315.0, 140.43181818181822], [2307.0, 1095.6666666666667], [2367.0, 1125.5], [2359.0, 724.25], [2355.0, 832.0666666666666], [2347.0, 235.0], [2343.0, 19.0], [2351.0, 1031.857142857143], [2311.0, 1097.5555555555557], [2323.0, 1068.0], [2319.0, 1116.5], [2335.0, 1106.090909090909], [2371.0, 178.6842105263158], [2375.0, 1118.0], [2395.0, 716.6400000000001], [2391.0, 640.2173913043479], [2387.0, 584.1363636363637], [2399.0, 1161.125], [2331.0, 1084.5]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2374.270917533054, 241.1449344698453]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52168.01666666667, "minX": 1.63750338E12, "maxY": 8296869.333333333, "series": [{"data": [[1.63750362E12, 8254856.2], [1.63750392E12, 8296869.333333333], [1.63750398E12, 7979878.866666666], [1.63750428E12, 2495318.066666667], [1.63750386E12, 7816923.666666667], [1.63750416E12, 7945929.866666666], [1.63750422E12, 7863120.933333334], [1.63750356E12, 7974877.316666666], [1.6375041E12, 7972556.533333333], [1.63750344E12, 7975190.816666666], [1.6375035E12, 7912520.666666667], [1.6375038E12, 7805873.6], [1.63750338E12, 5725645.366666666], [1.63750368E12, 7776495.65], [1.63750374E12, 8162808.05], [1.63750404E12, 7980411.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63750362E12, 172575.01666666666], [1.63750392E12, 173457.33333333334], [1.63750398E12, 166830.21666666667], [1.63750428E12, 52168.01666666667], [1.63750386E12, 163423.41666666666], [1.63750416E12, 166120.46666666667], [1.63750422E12, 164389.23333333334], [1.63750356E12, 166718.88333333333], [1.6375041E12, 166677.13333333333], [1.63750344E12, 165771.76666666666], [1.6375035E12, 165413.5], [1.6375038E12, 163192.4], [1.63750338E12, 118795.4], [1.63750368E12, 162577.28333333333], [1.63750374E12, 170654.51666666666], [1.63750404E12, 166841.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63750428E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20.465667182414773, "minX": 1.63750338E12, "maxY": 938.8037902569565, "series": [{"data": [[1.63750362E12, 323.16991113333455], [1.63750392E12, 178.04719191271002], [1.63750398E12, 21.51183703431815], [1.63750428E12, 20.465667182414773], [1.63750386E12, 252.00284424763703], [1.63750416E12, 279.60934253736605], [1.63750422E12, 136.40156107141638], [1.63750356E12, 296.19190637573683], [1.6375041E12, 69.46910694008447], [1.63750344E12, 259.58791318864894], [1.6375035E12, 282.2259801447132], [1.6375038E12, 287.9474348478639], [1.63750338E12, 938.8037902569565], [1.63750368E12, 269.32704456352275], [1.63750374E12, 267.4388139546258], [1.63750404E12, 21.474717648432403]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63750428E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20.359440857920426, "minX": 1.63750338E12, "maxY": 933.486455063363, "series": [{"data": [[1.63750362E12, 323.0418689418264], [1.63750392E12, 177.94512195121976], [1.63750398E12, 21.424898646957725], [1.63750428E12, 20.359440857920426], [1.63750386E12, 251.88272162139342], [1.63750416E12, 279.4809831780715], [1.63750422E12, 136.26749856083444], [1.63750356E12, 296.074458672098], [1.6375041E12, 69.36582392625742], [1.63750344E12, 259.44813021703044], [1.6375035E12, 282.047635874142], [1.6375038E12, 287.81825624232715], [1.63750338E12, 933.486455063363], [1.63750368E12, 269.2040882710451], [1.63750374E12, 267.3221013488188], [1.63750404E12, 21.378276028893968]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63750428E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63750338E12, "maxY": 406.8177421230078, "series": [{"data": [[1.63750362E12, 1.1316065351676488], [1.63750392E12, 0.55232670089859], [1.63750398E12, 0.45114199436092994], [1.63750428E12, 0.0], [1.63750386E12, 0.8952226858553926], [1.63750416E12, 1.0360733194825917], [1.63750422E12, 1.9424164437370988], [1.63750356E12, 0.7241523230771798], [1.6375041E12, 0.6969975285552077], [1.63750344E12, 1.3121035058430919], [1.6375035E12, 3.6342756183746188], [1.6375038E12, 1.3955348615090528], [1.63750338E12, 406.8177421230078], [1.63750368E12, 1.0912156956737604], [1.63750374E12, 1.0916934418475717], [1.63750404E12, 0.4610046210566723]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63750428E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.63750338E12, "maxY": 20188.0, "series": [{"data": [[1.63750362E12, 1066.0], [1.63750392E12, 839.0], [1.63750398E12, 83.0], [1.63750428E12, 71.0], [1.63750386E12, 1023.0], [1.63750416E12, 940.0], [1.63750422E12, 970.0], [1.63750356E12, 877.0], [1.6375041E12, 1466.0], [1.63750344E12, 944.0], [1.6375035E12, 1096.0], [1.6375038E12, 2464.0], [1.63750338E12, 20188.0], [1.63750368E12, 922.0], [1.63750374E12, 961.0], [1.63750404E12, 108.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63750362E12, 1009.0], [1.63750392E12, 39.0], [1.63750398E12, 40.0], [1.63750428E12, 39.0], [1.63750386E12, 996.950000000008], [1.63750416E12, 863.0], [1.63750422E12, 761.0], [1.63750356E12, 837.0], [1.6375041E12, 635.0], [1.63750344E12, 894.9900000000016], [1.6375035E12, 843.9900000000016], [1.6375038E12, 942.0], [1.63750338E12, 1043.9900000000016], [1.63750368E12, 882.9900000000016], [1.63750374E12, 910.0], [1.63750404E12, 39.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63750362E12, 1065.0], [1.63750392E12, 56.0], [1.63750398E12, 53.0], [1.63750428E12, 61.37719543455751], [1.63750386E12, 1022.0], [1.63750416E12, 897.0], [1.63750422E12, 816.0], [1.63750356E12, 857.9994727325429], [1.6375041E12, 784.9831274413737], [1.63750344E12, 943.9994727325429], [1.6375035E12, 896.0], [1.6375038E12, 2464.0], [1.63750338E12, 1108.999472732543], [1.63750368E12, 918.9957818603434], [1.63750374E12, 958.9968363952576], [1.63750404E12, 52.99947273254293]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63750362E12, 1059.0], [1.63750392E12, 52.99930519103873], [1.63750398E12, 48.99930519103873], [1.63750428E12, 50.0], [1.63750386E12, 1015.0], [1.63750416E12, 893.0], [1.63750422E12, 809.0], [1.63750356E12, 851.9993051910387], [1.6375041E12, 707.0], [1.63750344E12, 936.0], [1.6375035E12, 880.0], [1.6375038E12, 2403.9854090118133], [1.63750338E12, 1093.0], [1.63750368E12, 906.0], [1.63750374E12, 944.0], [1.63750404E12, 48.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63750362E12, 4.0], [1.63750392E12, 3.0], [1.63750398E12, 4.0], [1.63750428E12, 4.0], [1.63750386E12, 4.0], [1.63750416E12, 4.0], [1.63750422E12, 3.0], [1.63750356E12, 4.0], [1.6375041E12, 4.0], [1.63750344E12, 4.0], [1.6375035E12, 4.0], [1.6375038E12, 4.0], [1.63750338E12, 4.0], [1.63750368E12, 4.0], [1.63750374E12, 4.0], [1.63750404E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63750362E12, 399.0], [1.63750392E12, 22.0], [1.63750398E12, 22.0], [1.63750428E12, 20.0], [1.63750386E12, 256.0], [1.63750416E12, 173.0], [1.63750422E12, 154.0], [1.63750356E12, 234.0], [1.6375041E12, 25.0], [1.63750344E12, 186.0], [1.6375035E12, 196.0], [1.6375038E12, 342.0], [1.63750338E12, 36.0], [1.63750368E12, 170.0], [1.63750374E12, 158.0], [1.63750404E12, 21.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63750428E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.5, "minX": 4.0, "maxY": 15181.0, "series": [{"data": [[4.0, 7.5], [14.0, 23.0], [15.0, 8.0], [64.0, 16.0], [67.0, 19.0], [77.0, 16.0], [84.0, 24.5], [89.0, 24.0], [92.0, 118.0], [99.0, 20.0], [96.0, 23.0], [98.0, 51.5], [101.0, 24.0], [100.0, 22.0], [106.0, 20.5], [110.0, 20.5], [114.0, 21.0], [116.0, 22.0], [118.0, 23.0], [120.0, 20.0], [124.0, 18.0], [127.0, 23.0], [130.0, 20.5], [132.0, 21.5], [131.0, 24.0], [139.0, 28.0], [141.0, 25.0], [148.0, 23.0], [144.0, 29.0], [152.0, 38.0], [153.0, 18.0], [168.0, 73.0], [183.0, 110.0], [182.0, 22.0], [194.0, 126.0], [199.0, 24.0], [195.0, 22.0], [214.0, 65.0], [216.0, 76.0], [218.0, 100.0], [230.0, 258.0], [248.0, 110.0], [250.0, 78.0], [261.0, 19.0], [279.0, 78.0], [282.0, 22.0], [273.0, 21.0], [280.0, 21.0], [284.0, 24.0], [295.0, 22.0], [300.0, 21.0], [290.0, 20.0], [288.0, 22.5], [292.0, 22.0], [289.0, 21.0], [311.0, 21.0], [318.0, 21.0], [312.0, 21.0], [319.0, 21.0], [314.0, 22.0], [307.0, 24.0], [309.0, 19.0], [310.0, 39.0], [323.0, 28.0], [320.0, 19.5], [325.0, 22.0], [330.0, 22.0], [338.0, 22.0], [336.0, 23.0], [337.0, 33.0], [350.0, 22.0], [367.0, 21.0], [352.0, 22.0], [353.0, 78.0], [382.0, 22.0], [379.0, 23.0], [389.0, 22.0], [410.0, 33.0], [419.0, 22.0], [438.0, 22.0], [456.0, 23.0], [467.0, 163.0], [478.0, 24.0], [466.0, 20.0], [468.0, 22.0], [476.0, 20.0], [482.0, 21.0], [480.0, 21.0], [481.0, 21.0], [483.0, 22.0], [486.0, 24.0], [493.0, 21.0], [492.0, 12.0], [503.0, 21.0], [535.0, 283.0], [543.0, 143.0], [513.0, 21.0], [528.0, 21.0], [526.0, 22.0], [512.0, 23.0], [534.0, 20.0], [568.0, 232.0], [544.0, 23.0], [632.0, 142.0], [625.0, 205.0], [621.0, 206.0], [613.0, 214.0], [608.0, 191.0], [642.0, 179.0], [649.0, 183.0], [665.0, 21.0], [703.0, 20.0], [687.0, 88.0], [694.0, 128.5], [692.0, 22.0], [689.0, 25.5], [691.0, 22.0], [702.0, 21.0], [690.0, 23.0], [675.0, 23.0], [711.0, 219.0], [733.0, 22.0], [713.0, 66.0], [724.0, 20.0], [722.0, 22.0], [726.0, 134.5], [705.0, 79.0], [704.0, 22.0], [718.0, 22.0], [717.0, 21.0], [734.0, 116.0], [720.0, 23.0], [716.0, 33.0], [721.0, 178.0], [729.0, 22.0], [715.0, 33.0], [764.0, 220.5], [739.0, 33.0], [756.0, 22.0], [765.0, 126.0], [757.0, 25.0], [781.0, 198.0], [785.0, 154.0], [789.0, 19.0], [787.0, 18.0], [790.0, 18.5], [825.0, 436.0], [812.0, 543.0], [826.0, 205.0], [830.0, 204.5], [803.0, 184.0], [805.0, 206.0], [829.0, 162.0], [827.0, 131.0], [811.0, 18.0], [849.0, 237.0], [845.0, 200.0], [835.0, 199.0], [891.0, 22.0], [882.0, 312.5], [870.0, 23.0], [872.0, 22.0], [895.0, 192.0], [865.0, 21.0], [893.0, 158.0], [878.0, 22.0], [889.0, 20.0], [896.0, 21.0], [900.0, 21.0], [911.0, 22.0], [924.0, 113.5], [899.0, 23.0], [951.0, 21.0], [935.0, 22.0], [929.0, 22.0], [956.0, 261.5], [948.0, 22.0], [934.0, 22.0], [955.0, 21.0], [946.0, 22.0], [991.0, 22.0], [983.0, 21.0], [988.0, 22.0], [978.0, 22.0], [976.0, 23.0], [979.0, 22.0], [980.0, 22.0], [984.0, 21.0], [971.0, 20.0], [966.0, 248.0], [969.0, 22.0], [985.0, 22.0], [986.0, 22.0], [981.0, 22.0], [987.0, 22.0], [989.0, 21.0], [990.0, 22.0], [982.0, 22.0], [996.0, 22.0], [992.0, 22.0], [1009.0, 22.0], [1001.0, 21.0], [1000.0, 21.0], [994.0, 22.0], [995.0, 22.0], [993.0, 22.0], [1003.0, 22.0], [1004.0, 22.0], [1002.0, 21.0], [1007.0, 22.0], [1006.0, 22.0], [1005.0, 22.0], [1011.0, 21.0], [1012.0, 22.0], [1013.0, 22.0], [1010.0, 21.0], [1008.0, 22.0], [999.0, 22.0], [998.0, 22.0], [997.0, 22.0], [1042.0, 23.0], [1060.0, 23.0], [1043.0, 23.0], [1050.0, 23.0], [1039.0, 25.0], [1065.0, 25.0], [1069.0, 267.0], [1041.0, 21.0], [1091.0, 988.0], [1089.0, 15181.0], [1117.0, 129.0], [1138.0, 206.0], [1116.0, 23.0], [1111.0, 24.0], [1144.0, 26.0], [1105.0, 23.0], [1148.0, 25.0], [1125.0, 25.0], [1140.0, 25.0], [1143.0, 246.0], [1159.0, 267.0], [1179.0, 346.0], [1170.0, 26.0], [1176.0, 120.0], [1177.0, 25.0], [1175.0, 26.0], [1183.0, 25.0], [1158.0, 123.0], [1185.0, 25.0], [1215.0, 25.0], [1209.0, 25.0], [1205.0, 28.0], [1200.0, 143.5], [1207.0, 24.0], [1210.0, 230.0], [1214.0, 184.0], [1213.0, 185.0], [1187.0, 218.0], [1192.0, 217.0], [1194.0, 224.0], [1221.0, 1207.0], [1264.0, 27.0], [1255.0, 26.0], [1254.0, 289.0], [1234.0, 193.5], [1244.0, 28.0], [1253.0, 175.0], [1329.0, 31.0], [1301.0, 29.0], [1334.0, 27.0], [1314.0, 195.0], [1315.0, 30.0], [1332.0, 29.0], [1325.0, 245.0], [1284.0, 28.0], [1307.0, 262.0], [1375.0, 300.0], [1353.0, 700.0], [1363.0, 1064.0], [1387.0, 302.0], [1407.0, 186.0], [1392.0, 314.0], [1364.0, 30.0], [1371.0, 31.0], [1372.0, 32.0], [1349.0, 247.0], [1368.0, 282.0], [1416.0, 33.0], [1451.0, 33.0], [1417.0, 280.0], [1493.0, 1119.0], [1494.0, 662.0], [1500.0, 925.5], [1527.0, 36.0], [1490.0, 303.0], [1501.0, 32.0], [1514.0, 128.5], [1591.0, 189.0], [1587.0, 372.0], [1542.0, 76.5], [1618.0, 944.0], [1634.0, 227.0], [1626.0, 124.5], [1671.0, 184.0], [1670.0, 285.5], [1706.0, 146.0], [1702.0, 173.5], [1677.0, 162.0], [1723.0, 186.0], [1686.0, 237.0], [1736.0, 256.0], [1731.0, 106.0], [1754.0, 234.0], [1773.0, 212.0], [1741.0, 282.0], [1837.0, 306.0], [1825.0, 382.0], [1809.0, 231.0], [1797.0, 353.0], [1838.0, 313.5], [1877.0, 827.0], [1876.0, 317.0], [1919.0, 379.0], [1899.0, 180.0], [1869.0, 239.0], [1918.0, 325.0], [1870.0, 406.0], [1949.0, 582.0], [1953.0, 333.0], [1982.0, 335.0], [1931.0, 367.0], [1936.0, 371.0], [1958.0, 392.0], [1930.0, 554.0], [1991.0, 405.0], [2013.0, 378.0], [1988.0, 370.5], [2005.0, 337.0], [2000.0, 387.0], [2068.0, 463.0], [2118.0, 419.5], [2142.0, 494.0], [2136.0, 402.0], [2130.0, 572.0], [2198.0, 329.0], [2302.0, 296.0], [2254.0, 598.0], [2204.0, 499.0], [2368.0, 249.0], [2416.0, 527.0], [2404.0, 552.0], [2446.0, 339.5], [2522.0, 458.0], [2474.0, 769.0], [2470.0, 408.5], [2488.0, 581.0], [2486.0, 224.0], [2540.0, 516.5], [2450.0, 633.0], [2460.0, 547.5], [2458.0, 558.0], [2588.0, 410.0], [2632.0, 390.0], [2636.0, 471.5], [2676.0, 537.5], [2664.0, 419.0], [2670.0, 466.0], [2680.0, 575.0], [2562.0, 396.0], [2560.0, 458.0], [2620.0, 450.0], [2686.0, 252.0], [2616.0, 610.0], [2596.0, 134.5], [2610.0, 519.0], [2614.0, 605.0], [2578.0, 647.5], [2700.0, 510.0], [2706.0, 530.0], [2794.0, 629.0], [2730.0, 511.5], [2722.0, 290.0], [2694.0, 419.0], [2814.0, 471.0], [2770.0, 517.0], [2752.0, 500.0], [2704.0, 520.0], [2830.0, 513.0], [2940.0, 400.5], [2836.0, 568.5], [2902.0, 618.0], [2846.0, 492.0], [2980.0, 499.0], [3018.0, 511.0], [2974.0, 530.0], [2153.0, 158.0], [2087.0, 440.0], [2125.0, 561.0], [2085.0, 550.0], [2169.0, 399.0], [2173.0, 432.0], [2097.0, 433.0], [2077.0, 381.0], [2137.0, 752.0], [2269.0, 424.0], [2193.0, 458.0], [2275.0, 545.0], [2309.0, 490.0], [2357.0, 495.0], [2363.0, 411.0], [2343.0, 503.0], [2395.0, 238.0], [2547.0, 477.0], [2537.0, 603.0], [2527.0, 679.0], [2505.0, 595.0], [2515.0, 457.0], [2511.0, 459.0], [2449.0, 93.0], [2539.0, 456.0], [2455.0, 526.0], [2627.0, 378.0], [2617.0, 197.0], [2685.0, 503.0], [2613.0, 574.0], [2575.0, 523.0], [2653.0, 408.0], [2629.0, 538.0], [2709.0, 451.0], [2695.0, 422.0], [2745.0, 574.0], [2777.0, 579.0], [2715.0, 589.0], [2769.0, 392.0], [2767.0, 243.0], [2701.0, 420.0], [2705.0, 319.0], [2931.0, 464.0], [2867.0, 559.0], [2897.0, 458.0], [2899.0, 536.0], [2839.0, 508.0], [2847.0, 386.0], [2845.0, 272.0], [2833.0, 516.0], [2933.0, 379.0], [2953.0, 475.0], [2981.0, 547.0], [2959.0, 392.0], [3007.0, 476.0], [3083.0, 374.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3083.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.5, "minX": 4.0, "maxY": 15004.0, "series": [{"data": [[4.0, 7.5], [14.0, 23.0], [15.0, 8.0], [64.0, 16.0], [67.0, 19.0], [77.0, 16.0], [84.0, 24.5], [89.0, 24.0], [92.0, 118.0], [99.0, 20.0], [96.0, 23.0], [98.0, 51.5], [101.0, 24.0], [100.0, 22.0], [106.0, 20.0], [110.0, 20.5], [114.0, 21.0], [116.0, 22.0], [118.0, 23.0], [120.0, 20.0], [124.0, 18.0], [127.0, 23.0], [130.0, 20.0], [132.0, 21.0], [131.0, 24.0], [139.0, 28.0], [141.0, 25.0], [148.0, 23.0], [144.0, 29.0], [152.0, 38.0], [153.0, 18.0], [168.0, 73.0], [183.0, 109.0], [182.0, 22.0], [194.0, 126.0], [199.0, 24.0], [195.0, 22.0], [214.0, 65.0], [216.0, 76.0], [218.0, 100.0], [230.0, 258.0], [248.0, 110.0], [250.0, 78.0], [261.0, 19.0], [279.0, 78.0], [282.0, 22.0], [273.0, 21.0], [280.0, 21.0], [284.0, 24.0], [295.0, 22.0], [300.0, 21.0], [290.0, 19.5], [288.0, 22.0], [292.0, 22.0], [289.0, 21.0], [311.0, 21.0], [318.0, 21.0], [312.0, 21.0], [319.0, 21.0], [314.0, 22.0], [307.0, 24.0], [309.0, 19.0], [310.0, 39.0], [323.0, 28.0], [320.0, 19.0], [325.0, 22.0], [330.0, 22.0], [338.0, 22.0], [336.0, 23.0], [337.0, 33.0], [350.0, 22.0], [367.0, 21.0], [352.0, 21.5], [353.0, 78.0], [382.0, 22.0], [379.0, 23.0], [389.0, 22.0], [410.0, 33.0], [419.0, 22.0], [438.0, 22.0], [456.0, 23.0], [467.0, 163.0], [478.0, 23.0], [466.0, 20.0], [468.0, 22.0], [476.0, 20.0], [482.0, 21.0], [480.0, 21.0], [481.0, 21.0], [483.0, 22.0], [486.0, 23.0], [493.0, 21.0], [492.0, 12.0], [503.0, 21.0], [535.0, 282.5], [543.0, 143.0], [513.0, 21.0], [528.0, 21.0], [526.0, 22.0], [512.0, 23.0], [534.0, 20.0], [568.0, 232.0], [544.0, 23.0], [632.0, 142.0], [625.0, 205.0], [621.0, 206.0], [613.0, 214.0], [608.0, 191.0], [642.0, 179.0], [649.0, 183.0], [665.0, 21.0], [703.0, 20.0], [687.0, 88.0], [694.0, 128.0], [692.0, 22.0], [689.0, 25.0], [691.0, 22.0], [702.0, 21.0], [690.0, 23.0], [675.0, 23.0], [711.0, 219.0], [733.0, 22.0], [713.0, 66.0], [724.0, 20.0], [722.0, 22.0], [726.0, 134.5], [705.0, 78.0], [704.0, 22.0], [718.0, 22.0], [717.0, 21.0], [734.0, 116.0], [720.0, 23.0], [716.0, 33.0], [721.0, 178.0], [729.0, 22.0], [715.0, 33.0], [764.0, 220.5], [739.0, 32.0], [756.0, 22.0], [765.0, 125.0], [757.0, 25.0], [781.0, 198.0], [785.0, 154.0], [789.0, 19.0], [787.0, 18.0], [790.0, 18.0], [825.0, 436.0], [812.0, 543.0], [826.0, 205.0], [830.0, 204.5], [803.0, 184.0], [805.0, 206.0], [829.0, 162.0], [827.0, 131.0], [811.0, 18.0], [849.0, 237.0], [845.0, 199.0], [835.0, 199.0], [891.0, 22.0], [882.0, 312.5], [870.0, 22.0], [872.0, 22.0], [895.0, 192.0], [865.0, 21.0], [893.0, 157.0], [878.0, 22.0], [889.0, 20.0], [896.0, 21.0], [900.0, 21.0], [911.0, 22.0], [924.0, 113.0], [899.0, 22.0], [951.0, 21.0], [935.0, 22.0], [929.0, 22.0], [956.0, 261.5], [948.0, 22.0], [934.0, 21.0], [955.0, 21.0], [946.0, 22.0], [991.0, 21.0], [983.0, 21.0], [988.0, 22.0], [978.0, 21.0], [976.0, 22.0], [979.0, 22.0], [980.0, 22.0], [984.0, 21.0], [971.0, 20.0], [966.0, 248.0], [969.0, 22.0], [985.0, 22.0], [986.0, 22.0], [981.0, 22.0], [987.0, 22.0], [989.0, 21.0], [990.0, 22.0], [982.0, 21.0], [996.0, 22.0], [992.0, 22.0], [1009.0, 22.0], [1001.0, 21.0], [1000.0, 21.0], [994.0, 22.0], [995.0, 22.0], [993.0, 22.0], [1003.0, 22.0], [1004.0, 22.0], [1002.0, 21.0], [1007.0, 21.0], [1006.0, 22.0], [1005.0, 22.0], [1011.0, 21.0], [1012.0, 22.0], [1013.0, 21.0], [1010.0, 21.0], [1008.0, 22.0], [999.0, 22.0], [998.0, 22.0], [997.0, 21.0], [1042.0, 23.0], [1060.0, 23.0], [1043.0, 22.0], [1050.0, 23.0], [1039.0, 25.0], [1065.0, 25.0], [1069.0, 267.0], [1041.0, 21.0], [1091.0, 987.0], [1089.0, 15004.0], [1117.0, 129.0], [1138.0, 206.0], [1116.0, 23.0], [1111.0, 23.0], [1144.0, 26.0], [1105.0, 23.0], [1148.0, 25.0], [1125.0, 25.0], [1140.0, 25.0], [1143.0, 246.0], [1159.0, 267.0], [1179.0, 346.0], [1170.0, 25.0], [1176.0, 119.5], [1177.0, 25.0], [1175.0, 25.0], [1183.0, 25.0], [1158.0, 123.0], [1185.0, 25.0], [1215.0, 25.0], [1209.0, 25.0], [1205.0, 28.0], [1200.0, 143.0], [1207.0, 24.0], [1210.0, 230.0], [1214.0, 184.0], [1213.0, 184.0], [1187.0, 218.0], [1192.0, 217.0], [1194.0, 224.0], [1221.0, 1206.0], [1264.0, 26.5], [1255.0, 26.0], [1254.0, 289.0], [1234.0, 193.0], [1244.0, 28.0], [1253.0, 175.0], [1329.0, 31.0], [1301.0, 29.0], [1334.0, 27.0], [1314.0, 195.0], [1315.0, 30.0], [1332.0, 28.0], [1325.0, 245.0], [1284.0, 28.0], [1307.0, 262.0], [1375.0, 297.0], [1353.0, 700.0], [1363.0, 1064.0], [1387.0, 301.0], [1407.0, 186.0], [1392.0, 314.0], [1364.0, 30.0], [1371.0, 31.0], [1372.0, 32.0], [1349.0, 247.0], [1368.0, 282.0], [1416.0, 32.0], [1451.0, 33.0], [1417.0, 280.0], [1493.0, 1119.0], [1494.0, 662.0], [1500.0, 925.0], [1527.0, 36.0], [1490.0, 303.0], [1501.0, 32.0], [1514.0, 128.0], [1591.0, 189.0], [1587.0, 372.0], [1542.0, 76.0], [1618.0, 944.0], [1634.0, 226.0], [1626.0, 124.5], [1671.0, 184.0], [1670.0, 285.0], [1706.0, 146.0], [1702.0, 173.0], [1677.0, 162.0], [1723.0, 186.0], [1686.0, 237.0], [1736.0, 256.0], [1731.0, 106.0], [1754.0, 234.0], [1773.0, 212.0], [1741.0, 282.0], [1837.0, 306.0], [1825.0, 382.0], [1809.0, 230.0], [1797.0, 353.0], [1838.0, 313.5], [1877.0, 827.0], [1876.0, 317.0], [1919.0, 379.0], [1899.0, 179.0], [1869.0, 239.0], [1918.0, 325.0], [1870.0, 406.0], [1949.0, 582.0], [1953.0, 332.0], [1982.0, 335.0], [1931.0, 367.0], [1936.0, 371.0], [1958.0, 392.0], [1930.0, 554.0], [1991.0, 405.0], [2013.0, 378.0], [1988.0, 370.5], [2005.0, 337.0], [2000.0, 387.0], [2068.0, 463.0], [2118.0, 419.5], [2142.0, 494.0], [2136.0, 402.0], [2130.0, 571.0], [2198.0, 329.0], [2302.0, 296.0], [2254.0, 598.0], [2204.0, 499.0], [2368.0, 249.0], [2416.0, 527.0], [2404.0, 552.0], [2446.0, 339.0], [2522.0, 458.0], [2474.0, 769.0], [2470.0, 408.5], [2488.0, 581.0], [2486.0, 224.0], [2540.0, 516.0], [2450.0, 632.0], [2460.0, 547.0], [2458.0, 557.0], [2588.0, 409.5], [2632.0, 390.0], [2636.0, 471.0], [2676.0, 537.5], [2664.0, 419.0], [2670.0, 466.0], [2680.0, 575.0], [2562.0, 395.0], [2560.0, 458.0], [2620.0, 450.0], [2686.0, 252.0], [2616.0, 610.0], [2596.0, 134.0], [2610.0, 519.0], [2614.0, 605.0], [2578.0, 647.0], [2700.0, 510.0], [2706.0, 530.0], [2794.0, 629.0], [2730.0, 511.5], [2722.0, 290.0], [2694.0, 419.0], [2814.0, 471.0], [2770.0, 517.0], [2752.0, 500.0], [2704.0, 520.0], [2830.0, 513.0], [2940.0, 400.5], [2836.0, 568.0], [2902.0, 618.0], [2846.0, 492.0], [2980.0, 499.0], [3018.0, 511.0], [2974.0, 530.0], [2153.0, 158.0], [2087.0, 440.0], [2125.0, 560.0], [2085.0, 550.0], [2169.0, 399.0], [2173.0, 432.0], [2097.0, 433.0], [2077.0, 381.0], [2137.0, 752.0], [2269.0, 423.0], [2193.0, 458.0], [2275.0, 545.0], [2309.0, 490.0], [2357.0, 495.0], [2363.0, 410.0], [2343.0, 503.0], [2395.0, 238.0], [2547.0, 477.0], [2537.0, 603.0], [2527.0, 679.0], [2505.0, 595.0], [2515.0, 457.0], [2511.0, 459.0], [2449.0, 92.0], [2539.0, 456.0], [2455.0, 525.0], [2627.0, 377.0], [2617.0, 196.0], [2685.0, 503.0], [2613.0, 574.0], [2575.0, 523.0], [2653.0, 408.0], [2629.0, 538.0], [2709.0, 451.0], [2695.0, 422.0], [2745.0, 574.0], [2777.0, 579.0], [2715.0, 589.0], [2769.0, 392.0], [2767.0, 243.0], [2701.0, 420.0], [2705.0, 319.0], [2931.0, 463.0], [2867.0, 559.0], [2897.0, 458.0], [2899.0, 536.0], [2839.0, 507.0], [2847.0, 386.0], [2845.0, 272.0], [2833.0, 516.0], [2933.0, 379.0], [2953.0, 475.0], [2981.0, 547.0], [2959.0, 392.0], [3007.0, 475.0], [3083.0, 374.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3083.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.133333333333334, "minX": 1.63750332E12, "maxY": 1033.3833333333334, "series": [{"data": [[1.63750362E12, 1033.3833333333334], [1.63750392E12, 998.6833333333333], [1.63750398E12, 999.7], [1.63750428E12, 312.1], [1.63750332E12, 7.133333333333334], [1.63750386E12, 1018.5666666666667], [1.63750416E12, 995.5], [1.63750422E12, 983.85], [1.63750356E12, 998.3166666666667], [1.6375041E12, 997.3333333333334], [1.63750344E12, 989.8333333333334], [1.6375035E12, 990.5], [1.6375038E12, 976.45], [1.63750338E12, 718.1166666666667], [1.63750368E12, 998.5], [1.63750374E12, 997.65], [1.63750404E12, 999.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63750428E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 312.3833333333333, "minX": 1.63750338E12, "maxY": 1038.6666666666667, "series": [{"data": [[1.63750362E12, 1033.3833333333334], [1.63750392E12, 1038.6666666666667], [1.63750398E12, 998.9833333333333], [1.63750428E12, 312.3833333333333], [1.63750386E12, 978.5833333333334], [1.63750416E12, 994.7333333333333], [1.63750422E12, 984.3666666666667], [1.63750356E12, 998.3166666666667], [1.6375041E12, 998.0666666666667], [1.63750344E12, 998.3333333333334], [1.6375035E12, 990.5], [1.6375038E12, 977.2], [1.63750338E12, 716.75], [1.63750368E12, 973.5166666666667], [1.63750374E12, 1021.8833333333333], [1.63750404E12, 999.05]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63750428E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 312.3833333333333, "minX": 1.63750338E12, "maxY": 1038.6666666666667, "series": [{"data": [[1.63750362E12, 1033.3833333333334], [1.63750392E12, 1038.6666666666667], [1.63750398E12, 998.9833333333333], [1.63750428E12, 312.3833333333333], [1.63750386E12, 978.5833333333334], [1.63750416E12, 994.7333333333333], [1.63750422E12, 984.3666666666667], [1.63750356E12, 998.3166666666667], [1.6375041E12, 998.0666666666667], [1.63750344E12, 998.3333333333334], [1.6375035E12, 990.5], [1.6375038E12, 977.2], [1.63750338E12, 716.75], [1.63750368E12, 973.5166666666667], [1.63750374E12, 1021.8833333333333], [1.63750404E12, 999.05]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63750428E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 312.3833333333333, "minX": 1.63750338E12, "maxY": 1038.6666666666667, "series": [{"data": [[1.63750362E12, 1033.3833333333334], [1.63750392E12, 1038.6666666666667], [1.63750398E12, 998.9833333333333], [1.63750428E12, 312.3833333333333], [1.63750386E12, 978.5833333333334], [1.63750416E12, 994.7333333333333], [1.63750422E12, 984.3666666666667], [1.63750356E12, 998.3166666666667], [1.6375041E12, 998.0666666666667], [1.63750344E12, 998.3333333333334], [1.6375035E12, 990.5], [1.6375038E12, 977.2], [1.63750338E12, 716.75], [1.63750368E12, 973.5166666666667], [1.63750374E12, 1021.8833333333333], [1.63750404E12, 999.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63750428E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

