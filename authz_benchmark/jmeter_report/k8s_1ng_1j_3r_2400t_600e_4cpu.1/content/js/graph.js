/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 2039.0, "series": [{"data": [[0.0, 6.0], [0.1, 28.0], [0.2, 31.0], [0.3, 33.0], [0.4, 34.0], [0.5, 35.0], [0.6, 35.0], [0.7, 36.0], [0.8, 36.0], [0.9, 37.0], [1.0, 37.0], [1.1, 38.0], [1.2, 38.0], [1.3, 38.0], [1.4, 39.0], [1.5, 39.0], [1.6, 39.0], [1.7, 40.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 41.0], [2.2, 41.0], [2.3, 41.0], [2.4, 41.0], [2.5, 41.0], [2.6, 42.0], [2.7, 42.0], [2.8, 42.0], [2.9, 42.0], [3.0, 42.0], [3.1, 42.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 43.0], [3.7, 43.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 45.0], [4.6, 45.0], [4.7, 45.0], [4.8, 45.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 45.0], [5.4, 46.0], [5.5, 46.0], [5.6, 46.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 47.0], [6.4, 47.0], [6.5, 47.0], [6.6, 47.0], [6.7, 47.0], [6.8, 47.0], [6.9, 47.0], [7.0, 47.0], [7.1, 47.0], [7.2, 48.0], [7.3, 48.0], [7.4, 48.0], [7.5, 48.0], [7.6, 48.0], [7.7, 48.0], [7.8, 48.0], [7.9, 48.0], [8.0, 48.0], [8.1, 49.0], [8.2, 49.0], [8.3, 49.0], [8.4, 49.0], [8.5, 49.0], [8.6, 49.0], [8.7, 49.0], [8.8, 49.0], [8.9, 49.0], [9.0, 49.0], [9.1, 50.0], [9.2, 50.0], [9.3, 50.0], [9.4, 50.0], [9.5, 50.0], [9.6, 50.0], [9.7, 50.0], [9.8, 50.0], [9.9, 50.0], [10.0, 51.0], [10.1, 51.0], [10.2, 51.0], [10.3, 51.0], [10.4, 51.0], [10.5, 51.0], [10.6, 51.0], [10.7, 51.0], [10.8, 51.0], [10.9, 52.0], [11.0, 52.0], [11.1, 52.0], [11.2, 52.0], [11.3, 52.0], [11.4, 52.0], [11.5, 52.0], [11.6, 52.0], [11.7, 52.0], [11.8, 53.0], [11.9, 53.0], [12.0, 53.0], [12.1, 53.0], [12.2, 53.0], [12.3, 53.0], [12.4, 53.0], [12.5, 54.0], [12.6, 54.0], [12.7, 54.0], [12.8, 54.0], [12.9, 54.0], [13.0, 54.0], [13.1, 55.0], [13.2, 55.0], [13.3, 55.0], [13.4, 55.0], [13.5, 55.0], [13.6, 55.0], [13.7, 55.0], [13.8, 55.0], [13.9, 56.0], [14.0, 56.0], [14.1, 56.0], [14.2, 56.0], [14.3, 56.0], [14.4, 56.0], [14.5, 56.0], [14.6, 56.0], [14.7, 56.0], [14.8, 56.0], [14.9, 57.0], [15.0, 57.0], [15.1, 57.0], [15.2, 57.0], [15.3, 57.0], [15.4, 57.0], [15.5, 57.0], [15.6, 57.0], [15.7, 57.0], [15.8, 57.0], [15.9, 57.0], [16.0, 57.0], [16.1, 57.0], [16.2, 57.0], [16.3, 58.0], [16.4, 58.0], [16.5, 58.0], [16.6, 58.0], [16.7, 58.0], [16.8, 58.0], [16.9, 58.0], [17.0, 58.0], [17.1, 58.0], [17.2, 58.0], [17.3, 58.0], [17.4, 58.0], [17.5, 58.0], [17.6, 58.0], [17.7, 58.0], [17.8, 58.0], [17.9, 58.0], [18.0, 58.0], [18.1, 59.0], [18.2, 59.0], [18.3, 59.0], [18.4, 59.0], [18.5, 59.0], [18.6, 59.0], [18.7, 59.0], [18.8, 59.0], [18.9, 59.0], [19.0, 59.0], [19.1, 59.0], [19.2, 59.0], [19.3, 59.0], [19.4, 59.0], [19.5, 59.0], [19.6, 59.0], [19.7, 59.0], [19.8, 59.0], [19.9, 59.0], [20.0, 60.0], [20.1, 60.0], [20.2, 60.0], [20.3, 60.0], [20.4, 60.0], [20.5, 60.0], [20.6, 60.0], [20.7, 60.0], [20.8, 60.0], [20.9, 60.0], [21.0, 60.0], [21.1, 60.0], [21.2, 60.0], [21.3, 60.0], [21.4, 60.0], [21.5, 60.0], [21.6, 60.0], [21.7, 60.0], [21.8, 60.0], [21.9, 60.0], [22.0, 61.0], [22.1, 61.0], [22.2, 61.0], [22.3, 61.0], [22.4, 61.0], [22.5, 61.0], [22.6, 61.0], [22.7, 61.0], [22.8, 61.0], [22.9, 61.0], [23.0, 61.0], [23.1, 61.0], [23.2, 61.0], [23.3, 61.0], [23.4, 61.0], [23.5, 61.0], [23.6, 61.0], [23.7, 61.0], [23.8, 61.0], [23.9, 62.0], [24.0, 62.0], [24.1, 62.0], [24.2, 62.0], [24.3, 62.0], [24.4, 62.0], [24.5, 62.0], [24.6, 62.0], [24.7, 62.0], [24.8, 62.0], [24.9, 62.0], [25.0, 62.0], [25.1, 62.0], [25.2, 62.0], [25.3, 62.0], [25.4, 62.0], [25.5, 62.0], [25.6, 62.0], [25.7, 63.0], [25.8, 63.0], [25.9, 63.0], [26.0, 63.0], [26.1, 63.0], [26.2, 63.0], [26.3, 63.0], [26.4, 63.0], [26.5, 63.0], [26.6, 63.0], [26.7, 63.0], [26.8, 63.0], [26.9, 63.0], [27.0, 63.0], [27.1, 63.0], [27.2, 63.0], [27.3, 63.0], [27.4, 63.0], [27.5, 64.0], [27.6, 64.0], [27.7, 64.0], [27.8, 64.0], [27.9, 64.0], [28.0, 64.0], [28.1, 64.0], [28.2, 64.0], [28.3, 64.0], [28.4, 64.0], [28.5, 64.0], [28.6, 64.0], [28.7, 64.0], [28.8, 64.0], [28.9, 64.0], [29.0, 64.0], [29.1, 64.0], [29.2, 65.0], [29.3, 65.0], [29.4, 65.0], [29.5, 65.0], [29.6, 65.0], [29.7, 65.0], [29.8, 65.0], [29.9, 65.0], [30.0, 65.0], [30.1, 65.0], [30.2, 65.0], [30.3, 65.0], [30.4, 65.0], [30.5, 65.0], [30.6, 65.0], [30.7, 65.0], [30.8, 66.0], [30.9, 66.0], [31.0, 66.0], [31.1, 66.0], [31.2, 66.0], [31.3, 66.0], [31.4, 66.0], [31.5, 66.0], [31.6, 66.0], [31.7, 66.0], [31.8, 66.0], [31.9, 66.0], [32.0, 66.0], [32.1, 66.0], [32.2, 66.0], [32.3, 66.0], [32.4, 67.0], [32.5, 67.0], [32.6, 67.0], [32.7, 67.0], [32.8, 67.0], [32.9, 67.0], [33.0, 67.0], [33.1, 67.0], [33.2, 67.0], [33.3, 67.0], [33.4, 67.0], [33.5, 67.0], [33.6, 67.0], [33.7, 67.0], [33.8, 67.0], [33.9, 67.0], [34.0, 68.0], [34.1, 68.0], [34.2, 68.0], [34.3, 68.0], [34.4, 68.0], [34.5, 68.0], [34.6, 68.0], [34.7, 68.0], [34.8, 68.0], [34.9, 68.0], [35.0, 68.0], [35.1, 68.0], [35.2, 68.0], [35.3, 68.0], [35.4, 69.0], [35.5, 69.0], [35.6, 69.0], [35.7, 69.0], [35.8, 69.0], [35.9, 69.0], [36.0, 69.0], [36.1, 69.0], [36.2, 69.0], [36.3, 69.0], [36.4, 69.0], [36.5, 69.0], [36.6, 69.0], [36.7, 70.0], [36.8, 70.0], [36.9, 70.0], [37.0, 70.0], [37.1, 70.0], [37.2, 70.0], [37.3, 70.0], [37.4, 70.0], [37.5, 70.0], [37.6, 70.0], [37.7, 70.0], [37.8, 70.0], [37.9, 71.0], [38.0, 71.0], [38.1, 71.0], [38.2, 71.0], [38.3, 71.0], [38.4, 71.0], [38.5, 71.0], [38.6, 71.0], [38.7, 71.0], [38.8, 71.0], [38.9, 71.0], [39.0, 71.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 72.0], [40.1, 73.0], [40.2, 73.0], [40.3, 73.0], [40.4, 73.0], [40.5, 73.0], [40.6, 73.0], [40.7, 73.0], [40.8, 73.0], [40.9, 73.0], [41.0, 73.0], [41.1, 74.0], [41.2, 74.0], [41.3, 74.0], [41.4, 74.0], [41.5, 74.0], [41.6, 74.0], [41.7, 74.0], [41.8, 74.0], [41.9, 75.0], [42.0, 75.0], [42.1, 75.0], [42.2, 75.0], [42.3, 75.0], [42.4, 75.0], [42.5, 75.0], [42.6, 76.0], [42.7, 76.0], [42.8, 76.0], [42.9, 76.0], [43.0, 76.0], [43.1, 76.0], [43.2, 76.0], [43.3, 77.0], [43.4, 77.0], [43.5, 77.0], [43.6, 77.0], [43.7, 77.0], [43.8, 78.0], [43.9, 78.0], [44.0, 78.0], [44.1, 78.0], [44.2, 78.0], [44.3, 79.0], [44.4, 79.0], [44.5, 79.0], [44.6, 79.0], [44.7, 80.0], [44.8, 80.0], [44.9, 80.0], [45.0, 80.0], [45.1, 81.0], [45.2, 81.0], [45.3, 81.0], [45.4, 81.0], [45.5, 82.0], [45.6, 82.0], [45.7, 82.0], [45.8, 83.0], [45.9, 83.0], [46.0, 83.0], [46.1, 84.0], [46.2, 84.0], [46.3, 84.0], [46.4, 85.0], [46.5, 85.0], [46.6, 85.0], [46.7, 85.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 86.0], [47.2, 87.0], [47.3, 87.0], [47.4, 87.0], [47.5, 87.0], [47.6, 88.0], [47.7, 88.0], [47.8, 88.0], [47.9, 88.0], [48.0, 89.0], [48.1, 89.0], [48.2, 89.0], [48.3, 89.0], [48.4, 89.0], [48.5, 90.0], [48.6, 90.0], [48.7, 90.0], [48.8, 90.0], [48.9, 90.0], [49.0, 91.0], [49.1, 91.0], [49.2, 91.0], [49.3, 91.0], [49.4, 91.0], [49.5, 92.0], [49.6, 92.0], [49.7, 92.0], [49.8, 92.0], [49.9, 92.0], [50.0, 93.0], [50.1, 93.0], [50.2, 93.0], [50.3, 93.0], [50.4, 94.0], [50.5, 94.0], [50.6, 94.0], [50.7, 94.0], [50.8, 95.0], [50.9, 95.0], [51.0, 95.0], [51.1, 95.0], [51.2, 96.0], [51.3, 96.0], [51.4, 97.0], [51.5, 97.0], [51.6, 97.0], [51.7, 98.0], [51.8, 98.0], [51.9, 99.0], [52.0, 99.0], [52.1, 100.0], [52.2, 100.0], [52.3, 101.0], [52.4, 102.0], [52.5, 102.0], [52.6, 103.0], [52.7, 104.0], [52.8, 104.0], [52.9, 105.0], [53.0, 106.0], [53.1, 106.0], [53.2, 107.0], [53.3, 108.0], [53.4, 108.0], [53.5, 109.0], [53.6, 110.0], [53.7, 110.0], [53.8, 111.0], [53.9, 112.0], [54.0, 113.0], [54.1, 113.0], [54.2, 114.0], [54.3, 115.0], [54.4, 116.0], [54.5, 118.0], [54.6, 119.0], [54.7, 121.0], [54.8, 123.0], [54.9, 125.0], [55.0, 127.0], [55.1, 130.0], [55.2, 133.0], [55.3, 136.0], [55.4, 139.0], [55.5, 143.0], [55.6, 146.0], [55.7, 151.0], [55.8, 155.0], [55.9, 158.0], [56.0, 161.0], [56.1, 165.0], [56.2, 169.0], [56.3, 174.0], [56.4, 178.0], [56.5, 181.0], [56.6, 185.0], [56.7, 188.0], [56.8, 192.0], [56.9, 195.0], [57.0, 199.0], [57.1, 202.0], [57.2, 206.0], [57.3, 209.0], [57.4, 212.0], [57.5, 215.0], [57.6, 217.0], [57.7, 219.0], [57.8, 221.0], [57.9, 224.0], [58.0, 226.0], [58.1, 228.0], [58.2, 230.0], [58.3, 232.0], [58.4, 234.0], [58.5, 236.0], [58.6, 238.0], [58.7, 240.0], [58.8, 242.0], [58.9, 244.0], [59.0, 246.0], [59.1, 247.0], [59.2, 249.0], [59.3, 251.0], [59.4, 252.0], [59.5, 254.0], [59.6, 255.0], [59.7, 257.0], [59.8, 258.0], [59.9, 260.0], [60.0, 261.0], [60.1, 263.0], [60.2, 265.0], [60.3, 266.0], [60.4, 268.0], [60.5, 269.0], [60.6, 271.0], [60.7, 272.0], [60.8, 274.0], [60.9, 275.0], [61.0, 277.0], [61.1, 278.0], [61.2, 280.0], [61.3, 281.0], [61.4, 283.0], [61.5, 285.0], [61.6, 286.0], [61.7, 288.0], [61.8, 289.0], [61.9, 291.0], [62.0, 293.0], [62.1, 294.0], [62.2, 295.0], [62.3, 297.0], [62.4, 298.0], [62.5, 300.0], [62.6, 301.0], [62.7, 303.0], [62.8, 304.0], [62.9, 306.0], [63.0, 308.0], [63.1, 309.0], [63.2, 311.0], [63.3, 313.0], [63.4, 314.0], [63.5, 316.0], [63.6, 317.0], [63.7, 319.0], [63.8, 321.0], [63.9, 322.0], [64.0, 324.0], [64.1, 326.0], [64.2, 328.0], [64.3, 330.0], [64.4, 332.0], [64.5, 334.0], [64.6, 336.0], [64.7, 338.0], [64.8, 341.0], [64.9, 343.0], [65.0, 345.0], [65.1, 347.0], [65.2, 350.0], [65.3, 352.0], [65.4, 354.0], [65.5, 357.0], [65.6, 359.0], [65.7, 362.0], [65.8, 365.0], [65.9, 367.0], [66.0, 370.0], [66.1, 373.0], [66.2, 376.0], [66.3, 379.0], [66.4, 382.0], [66.5, 385.0], [66.6, 389.0], [66.7, 392.0], [66.8, 395.0], [66.9, 398.0], [67.0, 401.0], [67.1, 404.0], [67.2, 408.0], [67.3, 410.0], [67.4, 413.0], [67.5, 415.0], [67.6, 418.0], [67.7, 421.0], [67.8, 424.0], [67.9, 427.0], [68.0, 429.0], [68.1, 432.0], [68.2, 435.0], [68.3, 437.0], [68.4, 440.0], [68.5, 443.0], [68.6, 446.0], [68.7, 449.0], [68.8, 451.0], [68.9, 453.0], [69.0, 455.0], [69.1, 457.0], [69.2, 460.0], [69.3, 462.0], [69.4, 464.0], [69.5, 466.0], [69.6, 468.0], [69.7, 470.0], [69.8, 472.0], [69.9, 474.0], [70.0, 476.0], [70.1, 478.0], [70.2, 480.0], [70.3, 482.0], [70.4, 484.0], [70.5, 486.0], [70.6, 488.0], [70.7, 490.0], [70.8, 491.0], [70.9, 493.0], [71.0, 495.0], [71.1, 496.0], [71.2, 498.0], [71.3, 500.0], [71.4, 502.0], [71.5, 504.0], [71.6, 506.0], [71.7, 508.0], [71.8, 510.0], [71.9, 512.0], [72.0, 514.0], [72.1, 516.0], [72.2, 517.0], [72.3, 519.0], [72.4, 521.0], [72.5, 522.0], [72.6, 524.0], [72.7, 526.0], [72.8, 527.0], [72.9, 529.0], [73.0, 531.0], [73.1, 533.0], [73.2, 534.0], [73.3, 536.0], [73.4, 538.0], [73.5, 540.0], [73.6, 542.0], [73.7, 544.0], [73.8, 546.0], [73.9, 548.0], [74.0, 550.0], [74.1, 552.0], [74.2, 554.0], [74.3, 556.0], [74.4, 558.0], [74.5, 560.0], [74.6, 562.0], [74.7, 564.0], [74.8, 565.0], [74.9, 567.0], [75.0, 569.0], [75.1, 571.0], [75.2, 573.0], [75.3, 575.0], [75.4, 577.0], [75.5, 580.0], [75.6, 582.0], [75.7, 585.0], [75.8, 587.0], [75.9, 589.0], [76.0, 592.0], [76.1, 594.0], [76.2, 596.0], [76.3, 598.0], [76.4, 600.0], [76.5, 602.0], [76.6, 604.0], [76.7, 606.0], [76.8, 608.0], [76.9, 610.0], [77.0, 613.0], [77.1, 615.0], [77.2, 617.0], [77.3, 619.0], [77.4, 621.0], [77.5, 624.0], [77.6, 626.0], [77.7, 629.0], [77.8, 631.0], [77.9, 633.0], [78.0, 635.0], [78.1, 637.0], [78.2, 639.0], [78.3, 642.0], [78.4, 644.0], [78.5, 646.0], [78.6, 648.0], [78.7, 650.0], [78.8, 652.0], [78.9, 655.0], [79.0, 657.0], [79.1, 659.0], [79.2, 661.0], [79.3, 663.0], [79.4, 665.0], [79.5, 667.0], [79.6, 669.0], [79.7, 671.0], [79.8, 674.0], [79.9, 676.0], [80.0, 678.0], [80.1, 680.0], [80.2, 682.0], [80.3, 685.0], [80.4, 687.0], [80.5, 689.0], [80.6, 691.0], [80.7, 694.0], [80.8, 696.0], [80.9, 698.0], [81.0, 700.0], [81.1, 702.0], [81.2, 704.0], [81.3, 706.0], [81.4, 709.0], [81.5, 711.0], [81.6, 713.0], [81.7, 715.0], [81.8, 717.0], [81.9, 718.0], [82.0, 720.0], [82.1, 723.0], [82.2, 725.0], [82.3, 727.0], [82.4, 729.0], [82.5, 731.0], [82.6, 733.0], [82.7, 735.0], [82.8, 737.0], [82.9, 739.0], [83.0, 741.0], [83.1, 743.0], [83.2, 746.0], [83.3, 748.0], [83.4, 750.0], [83.5, 752.0], [83.6, 754.0], [83.7, 756.0], [83.8, 759.0], [83.9, 761.0], [84.0, 763.0], [84.1, 765.0], [84.2, 767.0], [84.3, 769.0], [84.4, 771.0], [84.5, 774.0], [84.6, 775.0], [84.7, 778.0], [84.8, 780.0], [84.9, 782.0], [85.0, 785.0], [85.1, 787.0], [85.2, 789.0], [85.3, 792.0], [85.4, 794.0], [85.5, 796.0], [85.6, 798.0], [85.7, 801.0], [85.8, 803.0], [85.9, 805.0], [86.0, 807.0], [86.1, 810.0], [86.2, 812.0], [86.3, 814.0], [86.4, 816.0], [86.5, 819.0], [86.6, 821.0], [86.7, 823.0], [86.8, 825.0], [86.9, 828.0], [87.0, 830.0], [87.1, 832.0], [87.2, 834.0], [87.3, 837.0], [87.4, 839.0], [87.5, 841.0], [87.6, 843.0], [87.7, 846.0], [87.8, 848.0], [87.9, 851.0], [88.0, 853.0], [88.1, 856.0], [88.2, 858.0], [88.3, 860.0], [88.4, 862.0], [88.5, 864.0], [88.6, 867.0], [88.7, 869.0], [88.8, 871.0], [88.9, 873.0], [89.0, 876.0], [89.1, 878.0], [89.2, 880.0], [89.3, 882.0], [89.4, 884.0], [89.5, 887.0], [89.6, 889.0], [89.7, 891.0], [89.8, 893.0], [89.9, 895.0], [90.0, 897.0], [90.1, 899.0], [90.2, 901.0], [90.3, 903.0], [90.4, 905.0], [90.5, 907.0], [90.6, 909.0], [90.7, 912.0], [90.8, 914.0], [90.9, 916.0], [91.0, 918.0], [91.1, 920.0], [91.2, 922.0], [91.3, 925.0], [91.4, 927.0], [91.5, 929.0], [91.6, 931.0], [91.7, 933.0], [91.8, 935.0], [91.9, 938.0], [92.0, 940.0], [92.1, 942.0], [92.2, 945.0], [92.3, 947.0], [92.4, 950.0], [92.5, 953.0], [92.6, 955.0], [92.7, 958.0], [92.8, 960.0], [92.9, 963.0], [93.0, 965.0], [93.1, 967.0], [93.2, 969.0], [93.3, 972.0], [93.4, 974.0], [93.5, 977.0], [93.6, 979.0], [93.7, 982.0], [93.8, 985.0], [93.9, 988.0], [94.0, 991.0], [94.1, 994.0], [94.2, 997.0], [94.3, 999.0], [94.4, 1002.0], [94.5, 1004.0], [94.6, 1006.0], [94.7, 1009.0], [94.8, 1011.0], [94.9, 1014.0], [95.0, 1017.0], [95.1, 1020.0], [95.2, 1024.0], [95.3, 1028.0], [95.4, 1032.0], [95.5, 1036.0], [95.6, 1038.0], [95.7, 1041.0], [95.8, 1044.0], [95.9, 1048.0], [96.0, 1051.0], [96.1, 1055.0], [96.2, 1060.0], [96.3, 1065.0], [96.4, 1069.0], [96.5, 1073.0], [96.6, 1077.0], [96.7, 1081.0], [96.8, 1084.0], [96.9, 1089.0], [97.0, 1094.0], [97.1, 1101.0], [97.2, 1107.0], [97.3, 1113.0], [97.4, 1119.0], [97.5, 1124.0], [97.6, 1129.0], [97.7, 1135.0], [97.8, 1141.0], [97.9, 1146.0], [98.0, 1151.0], [98.1, 1157.0], [98.2, 1162.0], [98.3, 1168.0], [98.4, 1178.0], [98.5, 1191.0], [98.6, 1199.0], [98.7, 1209.0], [98.8, 1220.0], [98.9, 1230.0], [99.0, 1244.0], [99.1, 1256.0], [99.2, 1265.0], [99.3, 1278.0], [99.4, 1292.0], [99.5, 1314.0], [99.6, 1338.0], [99.7, 1358.0], [99.8, 1380.0], [99.9, 1461.0], [100.0, 2039.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 468634.0, "series": [{"data": [[0.0, 468634.0], [600.0, 41409.0], [700.0, 42096.0], [200.0, 49139.0], [800.0, 40339.0], [900.0, 37627.0], [1000.0, 24964.0], [1100.0, 13659.0], [300.0, 40183.0], [1200.0, 7547.0], [1300.0, 3557.0], [1400.0, 921.0], [1500.0, 424.0], [400.0, 39032.0], [100.0, 44671.0], [1600.0, 125.0], [1700.0, 15.0], [1900.0, 2.0], [500.0, 45947.0], [2000.0, 12.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 577.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 642172.0, "series": [{"data": [[0.0, 642172.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 257554.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 577.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2273.869727387434, "minX": 1.63172226E12, "maxY": 2400.0, "series": [{"data": [[1.63172244E12, 2400.0], [1.63172274E12, 2400.0], [1.63172304E12, 2400.0], [1.6317231E12, 2400.0], [1.6317228E12, 2400.0], [1.63172286E12, 2400.0], [1.6317225E12, 2400.0], [1.63172316E12, 2382.905784432962], [1.63172262E12, 2400.0], [1.63172256E12, 2400.0], [1.63172226E12, 2273.869727387434], [1.63172292E12, 2400.0], [1.63172298E12, 2400.0], [1.63172238E12, 2400.0], [1.63172232E12, 2400.0], [1.63172268E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63172316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.5, "minX": 384.0, "maxY": 665.0, "series": [{"data": [[385.0, 357.0], [395.0, 399.9225806451613], [387.0, 359.0], [384.0, 359.0], [397.0, 450.09090909090895], [398.0, 397.6348314606742], [396.0, 443.92], [399.0, 105.33333333333333], [400.0, 48.333333333333336], [411.0, 70.0], [401.0, 55.0], [428.0, 97.0], [418.0, 81.75], [424.0, 89.9090909090909], [421.0, 81.0], [425.0, 94.0], [419.0, 80.0], [435.0, 117.5], [432.0, 105.0], [436.0, 120.75], [434.0, 111.0], [443.0, 134.0], [444.0, 133.6], [439.0, 125.0], [447.0, 141.0], [446.0, 134.5], [450.0, 134.66666666666666], [448.0, 139.86363636363637], [462.0, 151.0], [463.0, 152.0], [449.0, 133.0], [453.0, 144.5], [455.0, 146.0], [456.0, 145.8], [459.0, 150.5], [458.0, 150.0], [457.0, 146.5], [461.0, 150.66666666666666], [451.0, 137.71428571428572], [465.0, 147.45], [464.0, 147.0], [467.0, 149.7058823529412], [470.0, 146.42857142857142], [466.0, 149.0], [469.0, 147.0], [468.0, 146.0], [479.0, 154.57142857142858], [472.0, 147.40000000000003], [473.0, 144.33333333333334], [477.0, 152.0], [476.0, 147.0], [471.0, 148.0], [482.0, 156.0], [483.0, 155.5], [481.0, 155.2], [488.0, 152.0], [489.0, 151.4], [493.0, 150.0], [484.0, 157.0], [492.0, 155.0], [486.0, 158.0], [499.0, 151.0], [497.0, 147.8], [496.0, 150.66666666666666], [501.0, 153.0], [503.0, 155.5], [505.0, 156.75], [504.0, 157.0], [510.0, 145.66666666666666], [511.0, 142.5], [508.0, 155.0], [509.0, 162.0], [498.0, 148.0], [506.0, 157.92857142857142], [507.0, 157.0], [515.0, 145.66666666666666], [513.0, 144.33333333333334], [525.0, 153.0], [527.0, 160.0], [514.0, 145.0], [533.0, 151.22222222222223], [534.0, 142.0], [530.0, 157.0], [540.0, 143.34285714285713], [541.0, 143.66666666666666], [537.0, 143.58333333333331], [538.0, 145.0], [539.0, 146.0], [516.0, 147.0], [536.0, 142.5], [523.0, 153.0], [532.0, 157.0], [524.0, 154.0], [560.0, 134.0], [561.0, 134.0], [562.0, 136.16666666666669], [564.0, 137.64999999999998], [563.0, 137.33333333333334], [565.0, 138.16666666666666], [566.0, 139.2857142857143], [567.0, 136.0], [548.0, 130.25], [568.0, 132.46153846153845], [570.0, 125.0], [555.0, 131.66666666666666], [558.0, 133.0], [545.0, 135.0], [544.0, 137.33333333333334], [552.0, 130.0], [556.0, 133.0], [603.0, 123.5], [582.0, 121.0], [580.0, 132.0], [581.0, 136.4477611940298], [576.0, 131.66666666666666], [579.0, 130.0], [585.0, 120.0], [587.0, 121.0], [583.0, 121.5], [601.0, 122.66666666666667], [602.0, 121.0], [594.0, 140.0], [593.0, 162.0], [592.0, 119.0], [606.0, 122.11111111111111], [607.0, 111.66666666666667], [604.0, 124.83333333333333], [605.0, 126.5], [597.0, 120.25000000000001], [596.0, 119.42857142857143], [599.0, 123.15384615384616], [598.0, 122.33333333333333], [600.0, 123.5], [610.0, 104.33333333333333], [613.0, 97.75], [614.0, 99.25], [618.0, 101.33333333333334], [612.0, 103.0], [608.0, 111.0], [621.0, 104.0], [622.0, 105.0], [623.0, 107.0], [617.0, 100.0], [611.0, 104.0], [624.0, 107.0], [639.0, 114.0], [637.0, 113.99999999999999], [635.0, 118.8], [636.0, 118.57142857142857], [638.0, 103.33333333333333], [626.0, 109.66666666666667], [628.0, 112.0], [633.0, 118.0], [641.0, 95.66666666666667], [640.0, 105.25], [647.0, 93.0], [656.0, 94.5], [669.0, 97.8], [666.0, 92.0], [664.0, 89.5], [653.0, 100.25], [654.0, 101.0], [655.0, 111.39622641509436], [650.0, 97.0], [651.0, 99.0], [659.0, 86.3529411764706], [662.0, 87.42857142857143], [661.0, 87.0], [663.0, 89.12500000000001], [658.0, 83.66666666666667], [657.0, 88.5], [685.0, 104.25], [683.0, 111.5], [682.0, 114.25], [674.0, 107.0], [680.0, 112.0], [677.0, 110.0], [673.0, 104.0], [687.0, 95.66666666666667], [686.0, 100.5], [684.0, 106.5], [678.0, 109.0], [679.0, 111.0], [691.0, 87.0], [690.0, 84.0], [688.0, 92.5], [702.0, 101.0], [689.0, 90.33333333333333], [699.0, 94.54545454545455], [692.0, 85.22222222222223], [693.0, 87.66666666666666], [694.0, 87.5], [719.0, 73.8], [710.0, 107.71428571428572], [728.0, 80.28571428571429], [722.0, 75.0], [735.0, 85.0], [731.0, 81.0], [733.0, 82.0], [726.0, 78.66666666666666], [725.0, 79.0], [724.0, 78.0], [713.0, 108.66666666666667], [709.0, 107.25], [715.0, 99.33333333333333], [708.0, 105.66666666666667], [716.0, 89.33333333333333], [717.0, 105.0], [718.0, 78.0], [738.0, 87.0], [743.0, 90.0], [737.0, 87.0], [739.0, 87.0], [747.0, 97.33333333333333], [744.0, 92.5], [754.0, 105.5], [765.0, 117.0], [766.0, 117.0], [770.0, 117.33333333333334], [773.0, 121.5], [769.0, 119.0], [777.0, 99.2], [776.0, 113.0], [775.0, 108.28571428571428], [779.0, 98.6], [784.0, 91.0], [787.0, 92.8], [790.0, 96.0], [783.0, 92.0], [781.0, 91.0], [782.0, 92.0], [780.0, 93.0], [774.0, 107.0], [806.0, 111.6], [807.0, 113.33333333333334], [810.0, 114.88888888888889], [811.0, 115.0], [812.0, 117.2], [815.0, 112.71428571428571], [814.0, 116.23076923076923], [813.0, 116.5], [819.0, 103.0], [820.0, 99.6], [821.0, 93.28571428571429], [822.0, 89.00000000000001], [823.0, 94.55555555555556], [818.0, 106.33333333333333], [816.0, 112.0], [831.0, 100.5], [825.0, 98.0], [824.0, 96.375], [835.0, 101.66666666666667], [838.0, 100.5], [834.0, 104.16666666666666], [839.0, 95.83333333333334], [858.0, 86.6], [860.0, 89.0], [863.0, 89.5], [862.0, 89.0], [850.0, 84.0], [849.0, 85.0], [848.0, 100.0], [837.0, 100.0], [842.0, 92.5], [832.0, 102.66666666666667], [846.0, 95.50000000000001], [847.0, 91.66666666666667], [852.0, 84.25], [854.0, 85.0], [855.0, 85.66666666666667], [853.0, 85.0], [851.0, 83.4], [869.0, 98.0], [875.0, 104.5], [889.0, 115.39999999999998], [893.0, 112.0], [895.0, 114.66666666666667], [892.0, 110.75], [888.0, 97.0], [867.0, 95.5], [865.0, 93.0], [886.0, 108.16666666666666], [887.0, 113.0], [873.0, 101.5], [872.0, 101.0], [880.0, 106.5], [864.0, 92.0], [879.0, 104.0], [876.0, 109.0], [913.0, 120.0], [900.0, 117.0], [901.0, 117.5], [909.0, 122.5], [910.0, 116.5], [905.0, 121.66666666666666], [904.0, 120.0], [908.0, 124.2], [918.0, 102.83333333333333], [917.0, 105.0], [903.0, 119.75], [916.0, 110.4], [926.0, 87.0], [912.0, 116.0], [925.0, 86.0], [914.0, 113.0], [919.0, 95.83333333333333], [922.0, 90.0], [921.0, 93.66666666666667], [923.0, 87.66666666666667], [924.0, 100.0], [944.0, 107.5], [932.0, 89.0], [928.0, 87.66666666666667], [951.0, 109.33333333333333], [949.0, 111.0], [942.0, 105.25], [940.0, 104.0], [943.0, 106.0], [946.0, 106.75], [947.0, 107.77777777777777], [948.0, 110.5], [933.0, 93.4], [953.0, 107.6], [952.0, 107.5], [954.0, 102.33333333333333], [957.0, 100.0], [955.0, 103.0], [956.0, 102.0], [959.0, 75.63636363636364], [958.0, 100.0], [950.0, 109.0], [960.0, 78.0], [972.0, 86.33333333333333], [961.0, 79.0], [984.0, 91.0], [985.0, 91.33333333333333], [986.0, 93.0], [991.0, 101.66666666666667], [967.0, 82.0], [996.0, 103.0], [992.0, 102.0], [993.0, 103.0], [995.0, 103.0], [1023.0, 122.0], [1000.0, 106.66666666666667], [999.0, 105.0], [1022.0, 121.0], [1012.0, 115.0], [1024.0, 123.5], [1052.0, 125.5], [1040.0, 138.0], [1046.0, 134.0], [1056.0, 129.0], [1034.0, 135.0], [1082.0, 146.0], [1084.0, 147.0], [1080.0, 141.0], [1060.0, 135.66666666666666], [1064.0, 125.0], [1066.0, 126.0], [1062.0, 124.66666666666667], [1054.0, 131.25], [1044.0, 136.0], [1102.0, 169.0], [1090.0, 150.5], [1092.0, 154.0], [1096.0, 157.0], [1122.0, 170.0], [1142.0, 175.33333333333334], [1120.0, 173.0], [1148.0, 168.0], [1146.0, 168.25], [1138.0, 174.0], [1110.0, 170.0], [1112.0, 168.0], [1114.0, 164.0], [1156.0, 170.5], [1152.0, 166.4], [1180.0, 181.0], [1182.0, 181.66666666666666], [1158.0, 171.5], [1154.0, 167.5], [1184.0, 181.33333333333334], [1206.0, 168.0], [1204.0, 167.0], [1202.0, 166.0], [1200.0, 165.0], [1188.0, 179.5], [1190.0, 89.5], [1194.0, 176.0], [1192.0, 175.0], [1196.0, 165.25], [1198.0, 162.35714285714286], [1186.0, 176.0], [1164.0, 176.0], [1162.0, 176.5], [1160.0, 175.22222222222226], [1230.0, 193.11111111111111], [1244.0, 184.0], [1240.0, 193.0], [1228.0, 188.0], [1256.0, 191.0], [1260.0, 193.0], [1258.0, 188.0], [1254.0, 190.2], [1264.0, 188.0], [1252.0, 187.0], [1250.0, 187.0], [1234.0, 193.0], [1242.0, 194.6818181818182], [1246.0, 185.66666666666666], [1236.0, 192.0], [1282.0, 195.5], [1280.0, 196.08333333333331], [1284.0, 195.0], [1306.0, 197.0], [1288.0, 192.16666666666666], [1286.0, 194.8], [1290.0, 190.0], [1314.0, 202.6], [1310.0, 202.5], [1308.0, 198.0], [1358.0, 7.333333333333333], [1458.0, 328.0], [1456.0, 329.0], [1442.0, 322.0], [1464.0, 331.0], [1482.0, 343.0], [1472.0, 332.6666666666667], [1502.0, 308.0], [1494.0, 312.0], [1500.0, 310.5], [1484.0, 328.5], [1486.0, 326.0], [1506.0, 308.0], [1516.0, 314.0], [1504.0, 309.0], [1534.0, 324.5], [1530.0, 321.0], [1522.0, 317.0], [1526.0, 318.5], [1490.0, 322.75], [1488.0, 325.0], [1480.0, 339.25], [1474.0, 337.0], [1492.0, 316.1428571428571], [1548.0, 339.0], [1562.0, 351.5], [1584.0, 326.5], [1592.0, 331.0], [1596.0, 350.0], [1598.0, 378.0], [1558.0, 347.75], [1536.0, 327.0], [1566.0, 354.0], [1560.0, 350.0], [1564.0, 353.0], [1568.0, 353.42857142857144], [1572.0, 349.33333333333337], [1574.0, 344.0], [1582.0, 327.0], [1580.0, 332.5], [1578.0, 330.0], [1570.0, 74.3157894736842], [1650.0, 393.0], [1628.0, 379.5], [1634.0, 379.0], [1648.0, 393.3333333333333], [1602.0, 15.600000000000001], [1658.0, 396.0], [1660.0, 398.5], [1662.0, 399.0], [1622.0, 381.0], [1624.0, 382.0], [1642.0, 389.5], [1618.0, 378.0], [1678.0, 413.0], [1716.0, 418.8333333333333], [1710.0, 417.0], [1712.0, 416.0], [1672.0, 405.0], [1694.0, 415.125], [1690.0, 416.0], [1684.0, 412.0], [1688.0, 413.5], [1692.0, 417.0], [1670.0, 403.0], [1680.0, 409.0], [1722.0, 419.0], [1786.0, 430.6], [1790.0, 434.5], [1760.0, 424.5], [1788.0, 433.0], [1744.0, 416.0], [1746.0, 418.0], [1762.0, 423.5], [1738.0, 415.0], [1736.0, 416.0], [1752.0, 417.0], [1794.0, 441.3333333333333], [1806.0, 449.0], [1802.0, 444.0], [1796.0, 96.63636363636364], [1792.0, 434.6666666666667], [1798.0, 443.0], [1822.0, 437.6666666666667], [1820.0, 389.0], [1816.0, 434.8], [1810.0, 416.0], [1808.0, 407.0], [1834.0, 440.4], [1826.0, 183.00000000000003], [1824.0, 434.8], [1828.0, 405.6666666666667], [1832.0, 432.0], [1830.0, 445.0], [1852.0, 464.0], [1838.0, 450.875], [1836.0, 423.6666666666667], [1856.0, 452.6], [1914.0, 424.0], [1882.0, 39.30434782608696], [1858.0, 486.0], [1866.0, 501.0], [1868.0, 451.0], [1908.0, 23.321428571428566], [1880.0, 398.5714285714286], [1876.0, 399.0], [1872.0, 496.0], [1894.0, 412.6666666666667], [1892.0, 406.6666666666667], [1928.0, 89.66666666666667], [1924.0, 422.0], [1946.0, 393.0], [1926.0, 420.0], [1940.0, 397.2], [1936.0, 441.66666666666663], [1938.0, 428.4], [1966.0, 423.8], [1960.0, 410.25], [1982.0, 422.0], [1978.0, 436.3333333333333], [1976.0, 36.333333333333336], [1934.0, 439.6666666666667], [1932.0, 434.0], [1970.0, 421.3333333333333], [1972.0, 422.0], [1974.0, 423.0], [1992.0, 437.77777777777777], [2010.0, 445.6666666666667], [2008.0, 441.25], [2006.0, 460.0], [2000.0, 443.0], [2032.0, 418.2], [2034.0, 424.0], [2038.0, 412.0], [2040.0, 409.0], [2044.0, 412.0], [2042.0, 410.0], [2014.0, 405.4], [2012.0, 408.0], [2016.0, 420.5], [2026.0, 414.25], [2024.0, 402.0], [2020.0, 414.0], [2018.0, 399.5], [2022.0, 400.0], [2144.0, 446.3333333333333], [2100.0, 430.25], [2084.0, 439.6666666666667], [2108.0, 416.0], [2072.0, 432.0], [2064.0, 50.0], [2076.0, 75.62068965517243], [2112.0, 509.6842105263157], [2132.0, 450.0], [2136.0, 448.0], [2096.0, 447.0], [2148.0, 444.0], [2168.0, 459.0], [2164.0, 51.0], [2104.0, 413.0], [2172.0, 255.0], [2196.0, 480.0], [2240.0, 474.0], [2296.0, 395.5], [2288.0, 335.0], [2280.0, 55.96], [2284.0, 65.73493975903617], [2292.0, 130.4504504504504], [2180.0, 57.51724137931034], [2208.0, 416.3333333333333], [2212.0, 492.0], [2236.0, 92.07317073170731], [2220.0, 491.0], [2176.0, 464.0], [2228.0, 481.83333333333337], [2232.0, 478.0], [2224.0, 489.0], [2268.0, 271.5], [2260.0, 314.4], [2264.0, 493.5], [2244.0, 478.0], [2312.0, 488.125], [2400.0, 324.34739243573637], [2344.0, 465.0], [2348.0, 466.5], [2304.0, 131.76525821596243], [2360.0, 472.5], [2384.0, 478.3333333333333], [2396.0, 474.5], [2392.0, 66.0], [2380.0, 482.0], [2328.0, 480.0], [2324.0, 495.0], [2316.0, 263.5], [2320.0, 492.0], [2336.0, 461.99999999999994], [2308.0, 484.0], [2145.0, 441.0], [2105.0, 413.0], [2081.0, 436.0], [2077.0, 434.0], [2113.0, 665.0], [2137.0, 447.0], [2129.0, 451.0], [2073.0, 433.0], [2061.0, 47.0], [2053.0, 56.35416666666666], [2057.0, 97.0], [2085.0, 440.2], [2153.0, 447.6666666666667], [2149.0, 41.938775510204096], [2173.0, 461.6666666666667], [2181.0, 190.33333333333331], [2233.0, 475.1666666666667], [2265.0, 124.6470588235294], [2269.0, 419.3333333333333], [2253.0, 485.0], [2241.0, 323.8], [2245.0, 478.0], [2293.0, 228.99999999999994], [2297.0, 135.0], [2289.0, 489.75], [2285.0, 296.625], [2277.0, 499.0], [2273.0, 38.77777777777777], [2249.0, 480.77777777777777], [2261.0, 491.4], [2201.0, 486.0], [2213.0, 489.0], [2209.0, 492.0], [2229.0, 480.0], [2221.0, 489.0], [2225.0, 487.3333333333333], [2217.0, 490.0], [2189.0, 472.0], [2193.0, 476.0], [2237.0, 473.0], [2313.0, 488.3333333333333], [2345.0, 465.6666666666667], [2341.0, 462.6], [2337.0, 460.0], [2305.0, 297.0], [2325.0, 490.6666666666667], [2329.0, 370.75], [2333.0, 472.6666666666667], [2393.0, 105.82608695652175], [2385.0, 68.91304347826087], [2381.0, 454.0], [2397.0, 69.84615384615384], [2369.0, 479.0], [2321.0, 495.0], [2349.0, 467.0], [1029.0, 129.0], [1043.0, 136.66666666666666], [1041.0, 137.5], [1051.0, 132.5], [1083.0, 146.0], [1057.0, 137.66666666666666], [1059.0, 135.5], [1061.0, 129.0], [1063.0, 128.7142857142857], [1065.0, 126.0], [1069.0, 132.0], [1053.0, 131.5], [1055.0, 129.0], [1143.0, 169.0], [1091.0, 151.9], [1093.0, 153.66666666666666], [1097.0, 158.0], [1089.0, 149.33333333333334], [1131.0, 172.5], [1125.0, 169.0], [1135.0, 179.0], [1149.0, 167.2], [1151.0, 166.25], [1147.0, 167.0], [1145.0, 167.33333333333334], [1137.0, 178.33333333333334], [1141.0, 168.25], [1111.0, 172.4], [1107.0, 165.5], [1105.0, 191.0], [1115.0, 167.5], [1117.0, 170.0], [1155.0, 169.66666666666666], [1161.0, 177.5], [1183.0, 181.0], [1181.0, 182.0], [1153.0, 167.2], [1159.0, 173.0], [1163.0, 178.0], [1185.0, 180.33333333333334], [1203.0, 171.6], [1207.0, 169.0], [1201.0, 169.66666666666666], [1187.0, 183.0], [1189.0, 175.0], [1193.0, 172.0], [1195.0, 164.8], [1199.0, 163.16666666666666], [1167.0, 177.0], [1249.0, 188.0], [1253.0, 188.0], [1259.0, 188.0], [1255.0, 189.5], [1267.0, 197.0], [1273.0, 13.999999999999998], [1251.0, 188.0], [1235.0, 194.33333333333334], [1233.0, 194.0], [1241.0, 178.72727272727275], [1245.0, 184.0], [1247.0, 185.25], [1243.0, 183.0], [1237.0, 67.6470588235294], [1239.0, 189.0], [1229.0, 189.0], [1305.0, 199.0], [1281.0, 197.66666666666666], [1301.0, 199.0], [1299.0, 196.0], [1303.0, 200.0], [1285.0, 195.0], [1289.0, 190.5], [1315.0, 204.0], [1313.0, 7.333333333333333], [1311.0, 200.0], [1403.0, 6.5], [1461.0, 329.5], [1465.0, 331.0], [1443.0, 322.0], [1453.0, 327.0], [1459.0, 329.0], [1449.0, 9.333333333333332], [1473.0, 335.8], [1475.0, 337.8], [1503.0, 308.0], [1497.0, 310.6666666666667], [1493.0, 311.5], [1499.0, 310.5], [1501.0, 310.0], [1483.0, 334.99999999999994], [1509.0, 313.0], [1533.0, 12.272727272727273], [1527.0, 319.0], [1531.0, 322.0], [1525.0, 318.0], [1485.0, 325.0], [1491.0, 53.57142857142858], [1481.0, 342.0], [1477.0, 339.3333333333333], [1479.0, 340.0], [1587.0, 330.0], [1543.0, 331.3333333333333], [1595.0, 346.6296296296297], [1597.0, 378.6666666666667], [1599.0, 383.9], [1555.0, 345.0], [1567.0, 355.0], [1563.0, 352.3333333333333], [1565.0, 353.33333333333337], [1569.0, 353.83333333333337], [1575.0, 341.875], [1577.0, 337.5], [1581.0, 327.5], [1583.0, 330.5], [1573.0, 352.75], [1663.0, 399.0], [1633.0, 379.0], [1631.0, 379.0], [1651.0, 394.0], [1659.0, 397.0], [1653.0, 395.0], [1635.0, 61.52941176470587], [1641.0, 387.25], [1639.0, 384.0], [1625.0, 408.0], [1671.0, 404.5], [1725.0, 424.0], [1679.0, 409.0], [1675.0, 407.0], [1697.0, 412.5], [1699.0, 413.0], [1687.0, 413.0], [1689.0, 415.0], [1693.0, 416.0], [1665.0, 402.0], [1669.0, 16.0], [1683.0, 411.0], [1681.0, 410.0], [1701.0, 55.57142857142857], [1705.0, 415.0], [1735.0, 416.0], [1791.0, 434.5], [1787.0, 431.0], [1761.0, 424.0], [1747.0, 417.0], [1763.0, 63.5], [1767.0, 419.0], [1759.0, 422.0], [1731.0, 17.5], [1755.0, 420.0], [1785.0, 429.3333333333333], [1841.0, 457.0], [1853.0, 476.42857142857144], [1835.0, 444.25], [1851.0, 453.1666666666667], [1839.0, 460.0], [1807.0, 455.0], [1793.0, 438.5], [1795.0, 441.125], [1801.0, 446.5], [1799.0, 445.4], [1797.0, 442.0], [1821.0, 458.0], [1823.0, 424.25], [1817.0, 443.0], [1815.0, 399.6666666666667], [1819.0, 417.0], [1833.0, 437.14285714285717], [1827.0, 448.85], [1825.0, 429.27272727272725], [1855.0, 26.450000000000003], [1829.0, 421.0], [1831.0, 444.0], [1909.0, 423.57142857142856], [1917.0, 425.5], [1901.0, 422.0], [1915.0, 424.25], [1907.0, 411.0], [1871.0, 492.0], [1883.0, 409.3333333333333], [1861.0, 494.0], [1859.0, 493.0], [1857.0, 474.0], [1887.0, 400.0], [1885.0, 406.5], [1869.0, 489.0], [1877.0, 424.0], [1873.0, 434.5], [1911.0, 425.5], [1903.0, 397.5], [1895.0, 418.0], [1893.0, 410.75], [1889.0, 406.0], [1923.0, 430.3333333333333], [1925.0, 425.0], [1941.0, 393.0], [1937.0, 396.0], [1939.0, 430.0], [1921.0, 426.0], [1943.0, 396.5], [1945.0, 406.0], [1951.0, 26.956521739130434], [1963.0, 418.0], [1965.0, 394.0], [1961.0, 416.4], [1957.0, 409.0], [1973.0, 423.0], [1975.0, 424.25], [1929.0, 433.6], [1931.0, 419.0], [1933.0, 440.0], [1927.0, 432.0], [1995.0, 441.5], [2009.0, 458.375], [2007.0, 450.3333333333333], [2003.0, 443.0], [2037.0, 45.121212121212125], [1997.0, 31.583333333333332], [2039.0, 410.0], [2013.0, 411.0], [2011.0, 426.85714285714283], [1987.0, 432.0], [1993.0, 459.0], [1985.0, 434.0], [2015.0, 398.0], [2021.0, 39.21212121212121], [2017.0, 422.0], [2025.0, 415.5714285714286], [2031.0, 406.0], [2023.0, 399.0], [2074.0, 434.0], [2094.0, 446.0], [2114.0, 77.83333333333334], [2102.0, 413.5], [2142.0, 450.5], [2110.0, 417.5], [2054.0, 81.66666666666667], [2150.0, 445.0], [2154.0, 49.0], [2174.0, 463.0], [2158.0, 48.0], [2138.0, 452.0], [2118.0, 449.0], [2082.0, 438.0], [2086.0, 442.0], [2234.0, 476.75], [2214.0, 490.0], [2218.0, 491.3333333333333], [2210.0, 137.28], [2242.0, 286.0], [2294.0, 253.33333333333334], [2298.0, 434.57142857142856], [2302.0, 484.5], [2278.0, 495.3333333333333], [2274.0, 48.0], [2198.0, 59.3448275862069], [2186.0, 60.30000000000001], [2282.0, 48.0], [2286.0, 295.75], [2258.0, 487.0], [2262.0, 344.66666666666663], [2266.0, 345.0], [2250.0, 484.0], [2254.0, 485.5], [2246.0, 478.0], [2226.0, 484.6666666666667], [2230.0, 479.6666666666667], [2314.0, 489.3333333333333], [2326.0, 487.8], [2394.0, 348.3333333333333], [2398.0, 69.07692307692308], [2390.0, 478.0], [2386.0, 475.0], [2374.0, 481.0], [2382.0, 402.7934782608697], [2330.0, 253.0], [2370.0, 480.0], [2306.0, 481.25], [2346.0, 464.5], [2338.0, 315.33333333333337], [2362.0, 473.3333333333333], [2354.0, 469.0], [2366.0, 474.0], [2310.0, 113.84905660377358], [2322.0, 493.0], [2318.0, 492.0], [2079.0, 436.0], [2103.0, 424.6666666666667], [2083.0, 438.0], [2139.0, 450.0], [2135.0, 48.264705882352956], [2171.0, 459.0], [2107.0, 415.0], [2119.0, 314.33333333333337], [2111.0, 418.0], [2151.0, 247.5], [2163.0, 48.88461538461537], [2115.0, 472.0], [2283.0, 497.3333333333333], [2295.0, 483.0], [2195.0, 481.0], [2223.0, 134.80952380952382], [2219.0, 490.3333333333333], [2211.0, 493.0], [2215.0, 490.0], [2199.0, 483.0], [2227.0, 483.5714285714286], [2239.0, 474.0], [2235.0, 473.6666666666667], [2259.0, 118.00000000000001], [2251.0, 484.0], [2255.0, 487.0], [2243.0, 477.5], [2247.0, 71.5945945945946], [2299.0, 483.5], [2303.0, 481.0], [2271.0, 493.0], [2279.0, 497.3333333333333], [2275.0, 47.0], [2291.0, 482.5], [2287.0, 96.0], [2311.0, 487.0], [2307.0, 483.27777777777777], [2343.0, 464.14285714285717], [2339.0, 23.0], [2347.0, 467.0], [2363.0, 474.0], [2367.0, 477.75], [2383.0, 483.3333333333333], [2315.0, 490.5], [2327.0, 486.0], [2395.0, 86.16279069767444], [2399.0, 85.2025316455696], [2391.0, 88.25000000000001], [2331.0, 470.0], [2335.0, 465.25], [2379.0, 483.0], [2375.0, 480.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2394.3921790774834, 323.59875508579]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 72796.53333333334, "minX": 1.63172226E12, "maxY": 8053689.466666667, "series": [{"data": [[1.63172244E12, 7917792.866666666], [1.63172274E12, 7792889.15], [1.63172304E12, 7740438.566666666], [1.6317231E12, 8031896.55], [1.6317228E12, 7853559.783333333], [1.63172286E12, 8021450.616666666], [1.6317225E12, 7916076.0], [1.63172316E12, 3476383.033333333], [1.63172262E12, 7979165.366666666], [1.63172256E12, 7625657.683333334], [1.63172226E12, 4815414.8], [1.63172292E12, 7981723.483333333], [1.63172298E12, 7918851.083333333], [1.63172238E12, 8053689.466666667], [1.63172232E12, 7825874.466666667], [1.63172268E12, 7963204.666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63172244E12, 165869.96666666667], [1.63172274E12, 163216.73333333334], [1.63172304E12, 162110.06666666668], [1.6317231E12, 168199.5], [1.6317228E12, 164500.46666666667], [1.63172286E12, 168036.26666666666], [1.6317225E12, 165834.0], [1.63172316E12, 72796.53333333334], [1.63172262E12, 167117.73333333334], [1.63172256E12, 159736.26666666666], [1.63172226E12, 100085.4], [1.63172292E12, 167209.03333333333], [1.63172298E12, 165892.1], [1.63172238E12, 168645.53333333333], [1.63172232E12, 162956.75], [1.63172268E12, 166780.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63172316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 64.58726505561906, "minX": 1.63172226E12, "maxY": 595.7360818131132, "series": [{"data": [[1.63172244E12, 65.26604173269105], [1.63172274E12, 500.22341255042704], [1.63172304E12, 427.32904392941475], [1.6317231E12, 345.9418702195921], [1.6317228E12, 491.7862356621502], [1.63172286E12, 490.7962987355122], [1.6317225E12, 67.47792792792731], [1.63172316E12, 66.01352994831242], [1.63172262E12, 484.8100788027243], [1.63172256E12, 249.74755784952237], [1.63172226E12, 477.392984476989], [1.63172292E12, 180.29215546767685], [1.63172298E12, 64.58726505561906], [1.63172238E12, 87.14582991702423], [1.63172232E12, 595.7360818131132], [1.63172268E12, 506.2324740386858]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63172316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 64.40321208785791, "minX": 1.63172226E12, "maxY": 595.5542973825924, "series": [{"data": [[1.63172244E12, 65.09358997881691], [1.63172274E12, 499.9588263213182], [1.63172304E12, 427.0553469638487], [1.6317231E12, 345.63798009704726], [1.6317228E12, 491.5448383733072], [1.63172286E12, 490.5977509220229], [1.6317225E12, 67.29911578244914], [1.63172316E12, 65.71754332623863], [1.63172262E12, 484.5305443348147], [1.63172256E12, 249.54846196480642], [1.63172226E12, 476.985519170643], [1.63172292E12, 180.11157072654166], [1.63172298E12, 64.40321208785791], [1.63172238E12, 86.96777737693164], [1.63172232E12, 595.5542973825924], [1.63172268E12, 505.9540327129146]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63172316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.601094557616297E-5, "minX": 1.63172226E12, "maxY": 0.6940197308200781, "series": [{"data": [[1.63172244E12, 0.06775307324070513], [1.63172274E12, 0.6940197308200781], [1.63172304E12, 0.6716387343414005], [1.6317231E12, 0.06900238506456167], [1.6317228E12, 0.5201654949712362], [1.63172286E12, 0.5361564805057932], [1.6317225E12, 0.06851851851851866], [1.63172316E12, 7.601094557616297E-5], [1.63172262E12, 0.4824183828885489], [1.63172256E12, 0.08017528058750183], [1.63172226E12, 0.6096758268882612], [1.63172292E12, 0.06486092956301649], [1.63172298E12, 0.060806190690616164], [1.63172238E12, 0.08468072545997199], [1.63172232E12, 0.34853266280776596], [1.63172268E12, 0.31465445738363085]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63172316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.63172226E12, "maxY": 2039.0, "series": [{"data": [[1.63172244E12, 136.0], [1.63172274E12, 1597.0], [1.63172304E12, 1743.0], [1.6317231E12, 1301.0], [1.6317228E12, 1756.0], [1.63172286E12, 1337.0], [1.6317225E12, 155.0], [1.63172316E12, 457.0], [1.63172262E12, 1410.0], [1.63172256E12, 2039.0], [1.63172226E12, 1490.0], [1.63172292E12, 1155.0], [1.63172298E12, 162.0], [1.63172238E12, 910.0], [1.63172232E12, 1571.0], [1.63172268E12, 1401.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63172244E12, 87.0], [1.63172274E12, 913.0], [1.63172304E12, 989.0], [1.6317231E12, 92.0], [1.6317228E12, 921.0], [1.63172286E12, 1036.0], [1.6317225E12, 92.0], [1.63172316E12, 92.0], [1.63172262E12, 1058.0], [1.63172256E12, 1056.0], [1.63172226E12, 919.0], [1.63172292E12, 88.0], [1.63172298E12, 88.0], [1.63172238E12, 90.0], [1.63172232E12, 1275.0], [1.63172268E12, 950.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63172244E12, 110.0], [1.63172274E12, 1139.0], [1.63172304E12, 1145.0], [1.6317231E12, 115.0], [1.6317228E12, 1110.0], [1.63172286E12, 1263.0], [1.6317225E12, 112.0], [1.63172316E12, 135.0], [1.63172262E12, 1310.0], [1.63172256E12, 1335.0], [1.63172226E12, 1217.0], [1.63172292E12, 114.0], [1.63172298E12, 110.0], [1.63172238E12, 113.0], [1.63172232E12, 1554.0], [1.63172268E12, 1071.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63172244E12, 93.0], [1.63172274E12, 1043.0], [1.63172304E12, 1046.0], [1.6317231E12, 99.0], [1.6317228E12, 1002.0], [1.63172286E12, 1183.0], [1.6317225E12, 99.0], [1.63172316E12, 102.0], [1.63172262E12, 1167.0], [1.63172256E12, 1130.0], [1.63172226E12, 1033.9000000000015], [1.63172292E12, 96.0], [1.63172298E12, 94.0], [1.63172238E12, 97.0], [1.63172232E12, 1376.0], [1.63172268E12, 999.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63172244E12, 16.0], [1.63172274E12, 21.0], [1.63172304E12, 10.0], [1.6317231E12, 22.0], [1.6317228E12, 13.0], [1.63172286E12, 7.0], [1.6317225E12, 19.0], [1.63172316E12, 6.0], [1.63172262E12, 7.0], [1.63172256E12, 14.0], [1.63172226E12, 14.0], [1.63172292E12, 6.0], [1.63172298E12, 16.0], [1.63172238E12, 16.0], [1.63172232E12, 14.0], [1.63172268E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63172244E12, 62.0], [1.63172274E12, 472.0], [1.63172304E12, 491.0], [1.6317231E12, 64.0], [1.6317228E12, 341.0], [1.63172286E12, 601.0], [1.6317225E12, 65.0], [1.63172316E12, 63.0], [1.63172262E12, 398.0], [1.63172256E12, 499.0], [1.63172226E12, 490.5], [1.63172292E12, 62.0], [1.63172298E12, 62.0], [1.63172238E12, 63.0], [1.63172232E12, 684.5], [1.63172268E12, 522.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63172316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 6.0, "maxY": 1274.0, "series": [{"data": [[6.0, 115.5], [7.0, 108.0], [12.0, 91.5], [14.0, 91.5], [21.0, 124.0], [27.0, 99.0], [32.0, 122.5], [36.0, 117.0], [44.0, 67.5], [50.0, 52.0], [63.0, 155.0], [62.0, 130.5], [67.0, 60.0], [69.0, 58.0], [73.0, 81.0], [77.0, 127.0], [79.0, 59.0], [82.0, 93.0], [95.0, 123.0], [92.0, 57.0], [107.0, 63.0], [118.0, 122.0], [133.0, 16.0], [140.0, 96.5], [145.0, 61.0], [168.0, 65.0], [192.0, 223.0], [201.0, 295.0], [225.0, 331.0], [255.0, 51.0], [282.0, 319.0], [303.0, 251.0], [304.0, 281.0], [317.0, 58.0], [311.0, 56.0], [315.0, 43.0], [322.0, 62.0], [323.0, 66.0], [327.0, 62.0], [335.0, 64.0], [338.0, 61.0], [346.0, 65.0], [341.0, 54.0], [347.0, 69.0], [349.0, 64.0], [356.0, 322.0], [355.0, 70.0], [367.0, 280.0], [354.0, 71.5], [357.0, 38.0], [381.0, 56.0], [370.0, 65.5], [379.0, 69.0], [372.0, 57.0], [374.0, 249.5], [394.0, 63.0], [391.0, 56.0], [389.0, 66.0], [393.0, 67.0], [390.0, 245.5], [395.0, 56.0], [386.0, 58.5], [387.0, 48.0], [412.0, 48.0], [414.0, 57.0], [403.0, 50.0], [431.0, 134.0], [464.0, 258.5], [491.0, 63.0], [489.0, 335.0], [511.0, 52.0], [514.0, 43.0], [527.0, 221.0], [535.0, 303.0], [541.0, 283.0], [555.0, 50.0], [567.0, 60.0], [571.0, 64.0], [546.0, 77.5], [573.0, 244.0], [582.0, 62.0], [579.0, 57.0], [597.0, 61.0], [578.0, 294.0], [600.0, 311.0], [599.0, 215.0], [607.0, 260.0], [590.0, 34.0], [625.0, 256.0], [623.0, 243.0], [628.0, 293.0], [611.0, 232.0], [613.0, 239.0], [669.0, 264.0], [650.0, 266.0], [645.0, 279.0], [660.0, 272.0], [659.0, 236.0], [653.0, 313.0], [699.0, 56.0], [672.0, 261.0], [683.0, 105.0], [678.0, 64.0], [734.0, 68.0], [709.0, 65.0], [705.0, 270.0], [719.0, 67.0], [710.0, 67.0], [743.0, 554.0], [756.0, 71.0], [744.0, 65.0], [751.0, 64.0], [760.0, 67.0], [738.0, 69.0], [761.0, 64.0], [742.0, 62.0], [774.0, 250.0], [784.0, 90.5], [773.0, 271.0], [790.0, 266.0], [791.0, 67.0], [787.0, 62.0], [799.0, 64.0], [768.0, 60.0], [772.0, 66.0], [777.0, 65.0], [776.0, 69.0], [829.0, 103.0], [852.0, 290.0], [860.0, 69.0], [866.0, 253.5], [903.0, 70.0], [927.0, 69.0], [952.0, 66.0], [958.0, 65.0], [940.0, 68.0], [947.0, 59.0], [950.0, 64.0], [942.0, 68.0], [943.0, 111.0], [935.0, 96.0], [959.0, 60.0], [956.0, 444.0], [984.0, 67.0], [989.0, 63.0], [975.0, 65.0], [976.0, 63.0], [990.0, 63.0], [991.0, 63.0], [977.0, 64.0], [980.0, 61.0], [983.0, 63.0], [982.0, 61.0], [986.0, 63.0], [961.0, 62.0], [962.0, 61.0], [960.0, 63.0], [985.0, 65.0], [964.0, 65.0], [967.0, 307.0], [966.0, 53.0], [965.0, 62.0], [963.0, 64.0], [987.0, 64.0], [988.0, 64.0], [978.0, 64.0], [973.0, 63.0], [974.0, 63.0], [972.0, 63.0], [969.0, 65.0], [971.0, 66.0], [970.0, 64.0], [968.0, 63.0], [979.0, 64.0], [1016.0, 63.0], [1023.0, 96.0], [1012.0, 61.0], [1013.0, 61.0], [1008.0, 62.0], [1010.0, 63.0], [1009.0, 63.0], [1011.0, 62.0], [1020.0, 64.0], [1019.0, 67.0], [1018.0, 68.0], [1017.0, 62.0], [1014.0, 64.0], [1015.0, 65.0], [993.0, 63.0], [994.0, 66.0], [996.0, 65.0], [995.0, 65.0], [998.0, 64.0], [999.0, 61.0], [997.0, 64.0], [1004.0, 65.0], [1003.0, 63.0], [1001.0, 63.0], [1000.0, 65.0], [1002.0, 63.5], [1005.0, 63.0], [992.0, 63.0], [1006.0, 63.0], [1007.0, 63.0], [1022.0, 64.0], [1021.0, 60.0], [1028.0, 66.0], [1030.0, 62.0], [1031.0, 65.0], [1032.0, 63.0], [1033.0, 63.0], [1042.0, 62.0], [1041.0, 69.0], [1044.0, 65.0], [1045.0, 65.0], [1034.0, 70.0], [1026.0, 63.0], [1027.0, 65.0], [1036.0, 62.0], [1038.0, 67.0], [1073.0, 405.0], [1058.0, 61.0], [1037.0, 64.0], [1029.0, 63.0], [1055.0, 70.0], [1024.0, 63.0], [1025.0, 64.0], [1121.0, 197.0], [1126.0, 325.0], [1150.0, 456.0], [1203.0, 380.0], [1215.0, 366.0], [1198.0, 67.0], [1184.0, 269.5], [1231.0, 145.0], [1225.0, 352.0], [1223.0, 358.0], [1217.0, 1082.0], [1269.0, 91.0], [1262.0, 329.0], [1256.0, 386.5], [1284.0, 575.5], [1303.0, 439.0], [1324.0, 74.0], [1319.0, 339.0], [1300.0, 73.0], [1285.0, 358.0], [1309.0, 62.0], [1311.0, 318.0], [1308.0, 328.0], [1298.0, 395.0], [1366.0, 123.5], [1345.0, 158.0], [1404.0, 88.0], [1379.0, 402.0], [1352.0, 78.0], [1401.0, 91.0], [1351.0, 1222.0], [1452.0, 461.0], [1432.0, 370.0], [1451.0, 479.0], [1448.0, 90.0], [1410.0, 73.0], [1443.0, 75.0], [1436.0, 567.0], [1511.0, 632.0], [1475.0, 106.0], [1491.0, 119.0], [1595.0, 408.0], [1548.0, 106.0], [1596.0, 464.0], [1547.0, 437.0], [1554.0, 433.0], [1545.0, 95.0], [1584.0, 162.0], [1551.0, 188.0], [1592.0, 335.0], [1585.0, 121.0], [1578.0, 112.0], [1581.0, 132.0], [1597.0, 110.0], [1660.0, 228.0], [1637.0, 264.5], [1634.0, 512.0], [1600.0, 141.0], [1608.0, 126.5], [1683.0, 472.0], [1680.0, 455.0], [1717.0, 230.0], [1677.0, 449.0], [1703.0, 261.5], [1722.0, 256.0], [1725.0, 523.0], [1749.0, 933.0], [1786.0, 366.0], [1744.0, 1085.0], [1741.0, 295.0], [1745.0, 351.0], [1785.0, 371.0], [1756.0, 346.0], [1784.0, 563.5], [1763.0, 1144.0], [1796.0, 1221.0], [1792.0, 856.0], [1801.0, 617.0], [1815.0, 915.0], [1814.0, 651.5], [1811.0, 513.0], [1808.0, 538.0], [1812.0, 275.0], [1795.0, 1274.0], [1800.0, 1174.0], [1838.0, 417.0], [1854.0, 340.0], [1828.0, 308.5], [1847.0, 534.0], [1833.0, 559.0], [1829.0, 617.0], [1835.0, 320.0], [1871.0, 565.0], [1905.0, 573.0], [1886.0, 924.0], [1917.0, 894.0], [1884.0, 697.0], [1869.0, 517.0], [1882.0, 772.0], [1895.0, 554.0], [1970.0, 896.0], [1959.0, 446.0], [1920.0, 553.5], [1961.0, 489.0], [1933.0, 455.0], [1941.0, 503.0], [1927.0, 490.0], [1944.0, 750.5], [1981.0, 487.0], [1998.0, 603.5], [1988.0, 470.5], [2033.0, 600.0], [2029.0, 1039.0], [2032.0, 1001.0], [1992.0, 939.0], [1996.0, 636.0], [1997.0, 424.0], [1994.0, 624.0], [1987.0, 822.0], [2012.0, 691.0], [2013.0, 798.0], [2039.0, 978.0], [2036.0, 541.5], [2094.0, 454.0], [2082.0, 858.5], [2086.0, 457.0], [2102.0, 525.0], [2048.0, 512.0], [2098.0, 524.5], [2278.0, 658.0], [2288.0, 770.5], [2216.0, 906.0], [2280.0, 746.5], [2214.0, 692.0], [2212.0, 950.0], [2292.0, 816.0], [2264.0, 820.0], [2196.0, 771.0], [2186.0, 687.0], [2414.0, 808.0], [2386.0, 956.0], [2312.0, 644.0], [2340.0, 732.0], [2374.0, 794.0], [2406.0, 696.0], [2392.0, 804.0], [2350.0, 693.5], [2448.0, 881.0], [2486.0, 737.0], [2432.0, 707.0], [2484.0, 744.0], [2472.0, 751.0], [2668.0, 737.0], [2610.0, 656.0], [2606.0, 927.5], [2738.0, 637.0], [2796.0, 610.0], [2153.0, 596.0], [2119.0, 550.0], [2073.0, 604.0], [2151.0, 527.0], [2131.0, 481.0], [2173.0, 561.0], [2167.0, 656.0], [2065.0, 638.0], [2103.0, 501.0], [2201.0, 725.0], [2219.0, 575.0], [2263.0, 821.0], [2257.0, 483.0], [2295.0, 734.0], [2245.0, 979.0], [2289.0, 710.0], [2283.0, 940.0], [2285.0, 487.0], [2239.0, 508.0], [2197.0, 778.0], [2189.0, 624.0], [2431.0, 646.0], [2369.0, 612.0], [2351.0, 738.0], [2343.0, 701.0], [2335.0, 747.0], [2371.0, 882.0], [2379.0, 819.0], [2409.0, 478.0], [2413.0, 745.0], [2541.0, 708.0], [2439.0, 809.0], [2557.0, 748.0], [2473.0, 698.0], [2507.0, 757.0], [2527.0, 754.0], [2529.0, 634.0], [2559.0, 744.0], [2503.0, 796.0], [2663.0, 618.0], [2683.0, 740.0], [2583.0, 847.0], [2655.0, 812.0], [2613.0, 756.0], [2783.0, 608.0], [2727.0, 715.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2796.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 6.0, "maxY": 1274.0, "series": [{"data": [[6.0, 115.5], [7.0, 108.0], [12.0, 91.5], [14.0, 91.0], [21.0, 124.0], [27.0, 99.0], [32.0, 122.0], [36.0, 117.0], [44.0, 67.5], [50.0, 52.0], [63.0, 154.0], [62.0, 130.5], [67.0, 60.0], [69.0, 58.0], [73.0, 80.0], [77.0, 127.0], [79.0, 59.0], [82.0, 93.0], [95.0, 122.0], [92.0, 56.5], [107.0, 63.0], [118.0, 121.5], [133.0, 15.0], [140.0, 96.0], [145.0, 60.0], [168.0, 65.0], [192.0, 223.0], [201.0, 295.0], [225.0, 331.0], [255.0, 51.0], [282.0, 319.0], [303.0, 251.0], [304.0, 281.0], [317.0, 58.0], [311.0, 55.0], [315.0, 42.0], [322.0, 62.0], [323.0, 66.0], [327.0, 62.0], [335.0, 64.0], [338.0, 60.0], [346.0, 65.0], [341.0, 53.0], [347.0, 69.0], [349.0, 64.0], [356.0, 322.0], [355.0, 70.0], [367.0, 280.0], [354.0, 71.0], [357.0, 38.0], [381.0, 56.0], [370.0, 65.0], [379.0, 69.0], [372.0, 57.0], [374.0, 249.0], [394.0, 63.0], [391.0, 56.0], [389.0, 65.0], [393.0, 67.0], [390.0, 245.0], [395.0, 55.0], [386.0, 58.0], [387.0, 48.0], [412.0, 48.0], [414.0, 56.0], [403.0, 50.0], [431.0, 134.0], [464.0, 258.0], [491.0, 62.0], [489.0, 334.0], [511.0, 52.0], [514.0, 43.0], [527.0, 221.0], [535.0, 302.0], [541.0, 282.0], [555.0, 50.0], [567.0, 60.0], [571.0, 64.0], [546.0, 77.5], [573.0, 244.0], [582.0, 62.0], [579.0, 57.0], [597.0, 61.0], [578.0, 294.0], [600.0, 311.0], [599.0, 215.0], [607.0, 260.0], [590.0, 33.0], [625.0, 256.0], [623.0, 242.0], [628.0, 292.5], [611.0, 232.0], [613.0, 238.0], [669.0, 264.0], [650.0, 265.5], [645.0, 278.0], [660.0, 272.0], [659.0, 236.0], [653.0, 313.0], [699.0, 55.0], [672.0, 261.0], [683.0, 105.0], [678.0, 63.0], [734.0, 68.0], [709.0, 65.0], [705.0, 270.0], [719.0, 67.0], [710.0, 67.0], [743.0, 554.0], [756.0, 70.0], [744.0, 65.0], [751.0, 64.0], [760.0, 67.0], [738.0, 69.0], [761.0, 63.0], [742.0, 61.5], [774.0, 250.0], [784.0, 90.5], [773.0, 271.0], [790.0, 266.0], [791.0, 66.0], [787.0, 62.0], [799.0, 64.0], [768.0, 59.0], [772.0, 66.0], [777.0, 65.0], [776.0, 69.0], [829.0, 102.5], [852.0, 290.0], [860.0, 68.0], [866.0, 253.0], [903.0, 69.0], [927.0, 69.0], [952.0, 66.0], [958.0, 65.0], [940.0, 68.0], [947.0, 59.0], [950.0, 64.0], [942.0, 68.0], [943.0, 111.0], [935.0, 95.0], [959.0, 60.0], [956.0, 444.0], [984.0, 67.0], [989.0, 62.0], [975.0, 65.0], [976.0, 63.0], [990.0, 63.0], [991.0, 63.0], [977.0, 64.0], [980.0, 61.0], [983.0, 63.0], [982.0, 61.0], [986.0, 63.0], [961.0, 62.0], [962.0, 61.0], [960.0, 63.0], [985.0, 65.0], [964.0, 65.0], [967.0, 307.0], [966.0, 53.0], [965.0, 62.0], [963.0, 64.0], [987.0, 64.0], [988.0, 64.0], [978.0, 63.0], [973.0, 62.0], [974.0, 63.0], [972.0, 63.0], [969.0, 65.0], [971.0, 66.0], [970.0, 63.0], [968.0, 63.0], [979.0, 64.0], [1016.0, 63.0], [1023.0, 95.0], [1012.0, 61.0], [1013.0, 61.0], [1008.0, 62.0], [1010.0, 63.0], [1009.0, 63.0], [1011.0, 62.0], [1020.0, 63.0], [1019.0, 66.0], [1018.0, 68.0], [1017.0, 61.0], [1014.0, 64.0], [1015.0, 65.0], [993.0, 63.0], [994.0, 66.0], [996.0, 65.0], [995.0, 64.0], [998.0, 63.0], [999.0, 61.0], [997.0, 64.0], [1004.0, 65.0], [1003.0, 63.0], [1001.0, 63.0], [1000.0, 65.0], [1002.0, 63.0], [1005.0, 63.0], [992.0, 63.0], [1006.0, 63.0], [1007.0, 63.0], [1022.0, 64.0], [1021.0, 60.0], [1028.0, 66.0], [1030.0, 62.0], [1031.0, 65.0], [1032.0, 63.0], [1033.0, 63.0], [1042.0, 62.0], [1041.0, 69.0], [1044.0, 64.0], [1045.0, 65.0], [1034.0, 70.0], [1026.0, 63.0], [1027.0, 65.0], [1036.0, 62.0], [1038.0, 67.0], [1073.0, 404.0], [1058.0, 61.0], [1037.0, 64.0], [1029.0, 63.0], [1055.0, 69.0], [1024.0, 63.0], [1025.0, 64.0], [1121.0, 197.0], [1126.0, 325.0], [1150.0, 456.0], [1203.0, 379.0], [1215.0, 366.0], [1198.0, 67.0], [1184.0, 269.0], [1231.0, 145.0], [1225.0, 352.0], [1223.0, 358.0], [1217.0, 1082.0], [1269.0, 91.0], [1262.0, 328.0], [1256.0, 386.5], [1284.0, 575.0], [1303.0, 438.0], [1324.0, 73.5], [1319.0, 339.0], [1300.0, 73.0], [1285.0, 358.0], [1309.0, 62.0], [1311.0, 317.0], [1308.0, 328.0], [1298.0, 395.0], [1366.0, 123.5], [1345.0, 158.0], [1404.0, 88.0], [1379.0, 402.0], [1352.0, 78.0], [1401.0, 90.0], [1351.0, 1221.0], [1452.0, 459.5], [1432.0, 370.0], [1451.0, 478.0], [1448.0, 89.5], [1410.0, 73.0], [1443.0, 75.0], [1436.0, 567.0], [1511.0, 632.0], [1475.0, 106.0], [1491.0, 119.0], [1595.0, 407.0], [1548.0, 106.0], [1596.0, 463.0], [1547.0, 437.0], [1554.0, 433.0], [1545.0, 95.0], [1584.0, 162.0], [1551.0, 188.0], [1592.0, 334.0], [1585.0, 121.0], [1578.0, 112.0], [1581.0, 132.0], [1597.0, 110.0], [1660.0, 227.5], [1637.0, 264.0], [1634.0, 512.0], [1600.0, 140.5], [1608.0, 126.0], [1683.0, 472.0], [1680.0, 454.5], [1717.0, 230.0], [1677.0, 448.0], [1703.0, 261.5], [1722.0, 256.0], [1725.0, 522.0], [1749.0, 933.0], [1786.0, 366.0], [1744.0, 1085.0], [1741.0, 295.0], [1745.0, 351.0], [1785.0, 371.0], [1756.0, 346.0], [1784.0, 563.5], [1763.0, 1143.0], [1796.0, 1221.0], [1792.0, 856.0], [1801.0, 617.0], [1815.0, 915.0], [1814.0, 651.5], [1811.0, 513.0], [1808.0, 538.0], [1812.0, 274.5], [1795.0, 1274.0], [1800.0, 1174.0], [1838.0, 416.5], [1854.0, 340.0], [1828.0, 308.0], [1847.0, 534.0], [1833.0, 559.0], [1829.0, 617.0], [1835.0, 320.0], [1871.0, 565.0], [1905.0, 573.0], [1886.0, 924.0], [1917.0, 894.0], [1884.0, 697.0], [1869.0, 516.0], [1882.0, 771.5], [1895.0, 553.0], [1970.0, 896.0], [1959.0, 445.0], [1920.0, 553.0], [1961.0, 489.0], [1933.0, 455.0], [1941.0, 503.0], [1927.0, 490.0], [1944.0, 750.5], [1981.0, 487.0], [1998.0, 603.0], [1988.0, 470.0], [2033.0, 600.0], [2029.0, 1039.0], [2032.0, 1000.5], [1992.0, 939.0], [1996.0, 636.0], [1997.0, 423.0], [1994.0, 624.0], [1987.0, 822.0], [2012.0, 690.5], [2013.0, 798.0], [2039.0, 978.0], [2036.0, 541.0], [2094.0, 454.0], [2082.0, 858.0], [2086.0, 457.0], [2102.0, 525.0], [2048.0, 512.0], [2098.0, 524.5], [2278.0, 657.0], [2288.0, 769.5], [2216.0, 906.0], [2280.0, 746.5], [2214.0, 691.5], [2212.0, 950.0], [2292.0, 816.0], [2264.0, 819.0], [2196.0, 770.5], [2186.0, 687.0], [2414.0, 808.0], [2386.0, 956.0], [2312.0, 644.0], [2340.0, 731.0], [2374.0, 794.0], [2406.0, 696.0], [2392.0, 804.0], [2350.0, 693.0], [2448.0, 881.0], [2486.0, 737.0], [2432.0, 707.0], [2484.0, 744.0], [2472.0, 751.0], [2668.0, 736.5], [2610.0, 655.0], [2606.0, 927.0], [2738.0, 636.0], [2796.0, 610.0], [2153.0, 596.0], [2119.0, 550.0], [2073.0, 604.0], [2151.0, 527.0], [2131.0, 476.0], [2173.0, 561.0], [2167.0, 655.0], [2065.0, 637.0], [2103.0, 500.0], [2201.0, 725.0], [2219.0, 575.0], [2263.0, 820.0], [2257.0, 483.0], [2295.0, 734.0], [2245.0, 979.0], [2289.0, 710.0], [2283.0, 940.0], [2285.0, 487.0], [2239.0, 508.0], [2197.0, 778.0], [2189.0, 624.0], [2431.0, 646.0], [2369.0, 612.0], [2351.0, 738.0], [2343.0, 701.0], [2335.0, 747.0], [2371.0, 882.0], [2379.0, 819.0], [2409.0, 478.0], [2413.0, 744.0], [2541.0, 708.0], [2439.0, 808.0], [2557.0, 747.0], [2473.0, 697.0], [2507.0, 757.0], [2527.0, 754.0], [2529.0, 634.0], [2559.0, 744.0], [2503.0, 795.0], [2663.0, 618.0], [2683.0, 739.0], [2583.0, 847.0], [2655.0, 812.0], [2613.0, 756.0], [2783.0, 608.0], [2727.0, 715.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2796.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 437.71666666666664, "minX": 1.63172226E12, "maxY": 1026.8833333333334, "series": [{"data": [[1.63172244E12, 999.1166666666667], [1.63172274E12, 972.5], [1.63172304E12, 992.95], [1.6317231E12, 996.8666666666667], [1.6317228E12, 1018.9], [1.63172286E12, 984.3333333333334], [1.6317225E12, 998.9333333333333], [1.63172316E12, 437.71666666666664], [1.63172262E12, 1026.8833333333334], [1.63172256E12, 961.1], [1.63172226E12, 618.25], [1.63172292E12, 1008.3166666666667], [1.63172298E12, 999.1333333333333], [1.63172238E12, 1017.7], [1.63172232E12, 977.0666666666667], [1.63172268E12, 995.2833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63172316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 438.53333333333336, "minX": 1.63172226E12, "maxY": 1016.3666666666667, "series": [{"data": [[1.63172244E12, 999.2166666666667], [1.63172274E12, 983.2333333333333], [1.63172304E12, 976.5666666666667], [1.6317231E12, 1013.25], [1.6317228E12, 990.9666666666667], [1.63172286E12, 1012.2666666666667], [1.6317225E12, 999.0], [1.63172316E12, 438.53333333333336], [1.63172262E12, 1006.7333333333333], [1.63172256E12, 962.2666666666667], [1.63172226E12, 607.7], [1.63172292E12, 1007.2833333333333], [1.63172298E12, 999.35], [1.63172238E12, 1016.3666666666667], [1.63172232E12, 987.6166666666667], [1.63172268E12, 1004.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63172316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 438.53333333333336, "minX": 1.63172226E12, "maxY": 1016.3666666666667, "series": [{"data": [[1.63172244E12, 999.2166666666667], [1.63172274E12, 983.2333333333333], [1.63172304E12, 976.5666666666667], [1.6317231E12, 1013.25], [1.6317228E12, 990.9666666666667], [1.63172286E12, 1012.2666666666667], [1.6317225E12, 999.0], [1.63172316E12, 438.53333333333336], [1.63172262E12, 1006.7333333333333], [1.63172256E12, 962.2666666666667], [1.63172226E12, 607.7], [1.63172292E12, 1007.2833333333333], [1.63172298E12, 999.35], [1.63172238E12, 1016.3666666666667], [1.63172232E12, 987.6166666666667], [1.63172268E12, 1004.7]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63172316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 438.53333333333336, "minX": 1.63172226E12, "maxY": 1016.3666666666667, "series": [{"data": [[1.63172244E12, 999.2166666666667], [1.63172274E12, 983.2333333333333], [1.63172304E12, 976.5666666666667], [1.6317231E12, 1013.25], [1.6317228E12, 990.9666666666667], [1.63172286E12, 1012.2666666666667], [1.6317225E12, 999.0], [1.63172316E12, 438.53333333333336], [1.63172262E12, 1006.7333333333333], [1.63172256E12, 962.2666666666667], [1.63172226E12, 607.7], [1.63172292E12, 1007.2833333333333], [1.63172298E12, 999.35], [1.63172238E12, 1016.3666666666667], [1.63172232E12, 987.6166666666667], [1.63172268E12, 1004.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63172316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

