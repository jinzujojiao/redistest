/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 2501.0, "series": [{"data": [[0.0, 6.0], [0.1, 27.0], [0.2, 29.0], [0.3, 30.0], [0.4, 31.0], [0.5, 32.0], [0.6, 33.0], [0.7, 34.0], [0.8, 35.0], [0.9, 35.0], [1.0, 36.0], [1.1, 36.0], [1.2, 37.0], [1.3, 37.0], [1.4, 38.0], [1.5, 38.0], [1.6, 39.0], [1.7, 39.0], [1.8, 39.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 41.0], [2.3, 41.0], [2.4, 41.0], [2.5, 41.0], [2.6, 42.0], [2.7, 42.0], [2.8, 42.0], [2.9, 42.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 44.0], [3.5, 44.0], [3.6, 44.0], [3.7, 44.0], [3.8, 44.0], [3.9, 45.0], [4.0, 45.0], [4.1, 45.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 46.0], [4.6, 46.0], [4.7, 46.0], [4.8, 46.0], [4.9, 46.0], [5.0, 46.0], [5.1, 46.0], [5.2, 47.0], [5.3, 47.0], [5.4, 47.0], [5.5, 47.0], [5.6, 47.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 48.0], [6.1, 48.0], [6.2, 48.0], [6.3, 48.0], [6.4, 48.0], [6.5, 48.0], [6.6, 48.0], [6.7, 49.0], [6.8, 49.0], [6.9, 49.0], [7.0, 49.0], [7.1, 49.0], [7.2, 49.0], [7.3, 49.0], [7.4, 49.0], [7.5, 50.0], [7.6, 50.0], [7.7, 50.0], [7.8, 50.0], [7.9, 50.0], [8.0, 50.0], [8.1, 50.0], [8.2, 50.0], [8.3, 50.0], [8.4, 51.0], [8.5, 51.0], [8.6, 51.0], [8.7, 51.0], [8.8, 51.0], [8.9, 51.0], [9.0, 51.0], [9.1, 51.0], [9.2, 51.0], [9.3, 52.0], [9.4, 52.0], [9.5, 52.0], [9.6, 52.0], [9.7, 52.0], [9.8, 52.0], [9.9, 52.0], [10.0, 52.0], [10.1, 53.0], [10.2, 53.0], [10.3, 53.0], [10.4, 53.0], [10.5, 53.0], [10.6, 53.0], [10.7, 53.0], [10.8, 53.0], [10.9, 54.0], [11.0, 54.0], [11.1, 54.0], [11.2, 54.0], [11.3, 54.0], [11.4, 54.0], [11.5, 54.0], [11.6, 54.0], [11.7, 55.0], [11.8, 55.0], [11.9, 55.0], [12.0, 55.0], [12.1, 55.0], [12.2, 55.0], [12.3, 55.0], [12.4, 55.0], [12.5, 56.0], [12.6, 56.0], [12.7, 56.0], [12.8, 56.0], [12.9, 56.0], [13.0, 56.0], [13.1, 56.0], [13.2, 56.0], [13.3, 56.0], [13.4, 56.0], [13.5, 56.0], [13.6, 57.0], [13.7, 57.0], [13.8, 57.0], [13.9, 57.0], [14.0, 57.0], [14.1, 57.0], [14.2, 57.0], [14.3, 57.0], [14.4, 57.0], [14.5, 57.0], [14.6, 57.0], [14.7, 57.0], [14.8, 57.0], [14.9, 57.0], [15.0, 58.0], [15.1, 58.0], [15.2, 58.0], [15.3, 58.0], [15.4, 58.0], [15.5, 58.0], [15.6, 58.0], [15.7, 58.0], [15.8, 58.0], [15.9, 58.0], [16.0, 58.0], [16.1, 58.0], [16.2, 58.0], [16.3, 58.0], [16.4, 58.0], [16.5, 58.0], [16.6, 58.0], [16.7, 59.0], [16.8, 59.0], [16.9, 59.0], [17.0, 59.0], [17.1, 59.0], [17.2, 59.0], [17.3, 59.0], [17.4, 59.0], [17.5, 59.0], [17.6, 59.0], [17.7, 59.0], [17.8, 59.0], [17.9, 59.0], [18.0, 59.0], [18.1, 59.0], [18.2, 59.0], [18.3, 59.0], [18.4, 59.0], [18.5, 59.0], [18.6, 60.0], [18.7, 60.0], [18.8, 60.0], [18.9, 60.0], [19.0, 60.0], [19.1, 60.0], [19.2, 60.0], [19.3, 60.0], [19.4, 60.0], [19.5, 60.0], [19.6, 60.0], [19.7, 60.0], [19.8, 60.0], [19.9, 60.0], [20.0, 60.0], [20.1, 60.0], [20.2, 60.0], [20.3, 60.0], [20.4, 60.0], [20.5, 60.0], [20.6, 61.0], [20.7, 61.0], [20.8, 61.0], [20.9, 61.0], [21.0, 61.0], [21.1, 61.0], [21.2, 61.0], [21.3, 61.0], [21.4, 61.0], [21.5, 61.0], [21.6, 61.0], [21.7, 61.0], [21.8, 61.0], [21.9, 61.0], [22.0, 61.0], [22.1, 61.0], [22.2, 61.0], [22.3, 61.0], [22.4, 61.0], [22.5, 61.0], [22.6, 62.0], [22.7, 62.0], [22.8, 62.0], [22.9, 62.0], [23.0, 62.0], [23.1, 62.0], [23.2, 62.0], [23.3, 62.0], [23.4, 62.0], [23.5, 62.0], [23.6, 62.0], [23.7, 62.0], [23.8, 62.0], [23.9, 62.0], [24.0, 62.0], [24.1, 62.0], [24.2, 62.0], [24.3, 62.0], [24.4, 62.0], [24.5, 62.0], [24.6, 62.0], [24.7, 63.0], [24.8, 63.0], [24.9, 63.0], [25.0, 63.0], [25.1, 63.0], [25.2, 63.0], [25.3, 63.0], [25.4, 63.0], [25.5, 63.0], [25.6, 63.0], [25.7, 63.0], [25.8, 63.0], [25.9, 63.0], [26.0, 63.0], [26.1, 63.0], [26.2, 63.0], [26.3, 63.0], [26.4, 63.0], [26.5, 63.0], [26.6, 63.0], [26.7, 63.0], [26.8, 64.0], [26.9, 64.0], [27.0, 64.0], [27.1, 64.0], [27.2, 64.0], [27.3, 64.0], [27.4, 64.0], [27.5, 64.0], [27.6, 64.0], [27.7, 64.0], [27.8, 64.0], [27.9, 64.0], [28.0, 64.0], [28.1, 64.0], [28.2, 64.0], [28.3, 64.0], [28.4, 64.0], [28.5, 64.0], [28.6, 64.0], [28.7, 64.0], [28.8, 64.0], [28.9, 65.0], [29.0, 65.0], [29.1, 65.0], [29.2, 65.0], [29.3, 65.0], [29.4, 65.0], [29.5, 65.0], [29.6, 65.0], [29.7, 65.0], [29.8, 65.0], [29.9, 65.0], [30.0, 65.0], [30.1, 65.0], [30.2, 65.0], [30.3, 65.0], [30.4, 65.0], [30.5, 65.0], [30.6, 65.0], [30.7, 65.0], [30.8, 65.0], [30.9, 65.0], [31.0, 66.0], [31.1, 66.0], [31.2, 66.0], [31.3, 66.0], [31.4, 66.0], [31.5, 66.0], [31.6, 66.0], [31.7, 66.0], [31.8, 66.0], [31.9, 66.0], [32.0, 66.0], [32.1, 66.0], [32.2, 66.0], [32.3, 66.0], [32.4, 66.0], [32.5, 66.0], [32.6, 66.0], [32.7, 66.0], [32.8, 66.0], [32.9, 66.0], [33.0, 67.0], [33.1, 67.0], [33.2, 67.0], [33.3, 67.0], [33.4, 67.0], [33.5, 67.0], [33.6, 67.0], [33.7, 67.0], [33.8, 67.0], [33.9, 67.0], [34.0, 67.0], [34.1, 67.0], [34.2, 67.0], [34.3, 67.0], [34.4, 67.0], [34.5, 67.0], [34.6, 67.0], [34.7, 67.0], [34.8, 67.0], [34.9, 67.0], [35.0, 68.0], [35.1, 68.0], [35.2, 68.0], [35.3, 68.0], [35.4, 68.0], [35.5, 68.0], [35.6, 68.0], [35.7, 68.0], [35.8, 68.0], [35.9, 68.0], [36.0, 68.0], [36.1, 68.0], [36.2, 68.0], [36.3, 68.0], [36.4, 68.0], [36.5, 68.0], [36.6, 68.0], [36.7, 68.0], [36.8, 68.0], [36.9, 69.0], [37.0, 69.0], [37.1, 69.0], [37.2, 69.0], [37.3, 69.0], [37.4, 69.0], [37.5, 69.0], [37.6, 69.0], [37.7, 69.0], [37.8, 69.0], [37.9, 69.0], [38.0, 69.0], [38.1, 69.0], [38.2, 69.0], [38.3, 69.0], [38.4, 69.0], [38.5, 69.0], [38.6, 69.0], [38.7, 70.0], [38.8, 70.0], [38.9, 70.0], [39.0, 70.0], [39.1, 70.0], [39.2, 70.0], [39.3, 70.0], [39.4, 70.0], [39.5, 70.0], [39.6, 70.0], [39.7, 70.0], [39.8, 70.0], [39.9, 70.0], [40.0, 70.0], [40.1, 70.0], [40.2, 70.0], [40.3, 71.0], [40.4, 71.0], [40.5, 71.0], [40.6, 71.0], [40.7, 71.0], [40.8, 71.0], [40.9, 71.0], [41.0, 71.0], [41.1, 71.0], [41.2, 71.0], [41.3, 71.0], [41.4, 71.0], [41.5, 71.0], [41.6, 71.0], [41.7, 71.0], [41.8, 72.0], [41.9, 72.0], [42.0, 72.0], [42.1, 72.0], [42.2, 72.0], [42.3, 72.0], [42.4, 72.0], [42.5, 72.0], [42.6, 72.0], [42.7, 72.0], [42.8, 72.0], [42.9, 72.0], [43.0, 72.0], [43.1, 72.0], [43.2, 72.0], [43.3, 73.0], [43.4, 73.0], [43.5, 73.0], [43.6, 73.0], [43.7, 73.0], [43.8, 73.0], [43.9, 73.0], [44.0, 73.0], [44.1, 73.0], [44.2, 73.0], [44.3, 73.0], [44.4, 73.0], [44.5, 74.0], [44.6, 74.0], [44.7, 74.0], [44.8, 74.0], [44.9, 74.0], [45.0, 74.0], [45.1, 74.0], [45.2, 74.0], [45.3, 74.0], [45.4, 74.0], [45.5, 74.0], [45.6, 74.0], [45.7, 75.0], [45.8, 75.0], [45.9, 75.0], [46.0, 75.0], [46.1, 75.0], [46.2, 75.0], [46.3, 75.0], [46.4, 75.0], [46.5, 75.0], [46.6, 76.0], [46.7, 76.0], [46.8, 76.0], [46.9, 76.0], [47.0, 76.0], [47.1, 76.0], [47.2, 76.0], [47.3, 76.0], [47.4, 76.0], [47.5, 77.0], [47.6, 77.0], [47.7, 77.0], [47.8, 77.0], [47.9, 77.0], [48.0, 77.0], [48.1, 77.0], [48.2, 78.0], [48.3, 78.0], [48.4, 78.0], [48.5, 78.0], [48.6, 78.0], [48.7, 78.0], [48.8, 78.0], [48.9, 79.0], [49.0, 79.0], [49.1, 79.0], [49.2, 79.0], [49.3, 79.0], [49.4, 80.0], [49.5, 80.0], [49.6, 80.0], [49.7, 80.0], [49.8, 80.0], [49.9, 81.0], [50.0, 81.0], [50.1, 81.0], [50.2, 81.0], [50.3, 82.0], [50.4, 82.0], [50.5, 82.0], [50.6, 82.0], [50.7, 83.0], [50.8, 83.0], [50.9, 83.0], [51.0, 84.0], [51.1, 84.0], [51.2, 84.0], [51.3, 84.0], [51.4, 85.0], [51.5, 85.0], [51.6, 85.0], [51.7, 86.0], [51.8, 86.0], [51.9, 86.0], [52.0, 87.0], [52.1, 87.0], [52.2, 87.0], [52.3, 87.0], [52.4, 88.0], [52.5, 88.0], [52.6, 88.0], [52.7, 89.0], [52.8, 89.0], [52.9, 89.0], [53.0, 89.0], [53.1, 89.0], [53.2, 90.0], [53.3, 90.0], [53.4, 90.0], [53.5, 90.0], [53.6, 91.0], [53.7, 91.0], [53.8, 91.0], [53.9, 91.0], [54.0, 91.0], [54.1, 92.0], [54.2, 92.0], [54.3, 92.0], [54.4, 92.0], [54.5, 92.0], [54.6, 93.0], [54.7, 93.0], [54.8, 93.0], [54.9, 93.0], [55.0, 93.0], [55.1, 94.0], [55.2, 94.0], [55.3, 94.0], [55.4, 94.0], [55.5, 94.0], [55.6, 95.0], [55.7, 95.0], [55.8, 95.0], [55.9, 95.0], [56.0, 96.0], [56.1, 96.0], [56.2, 96.0], [56.3, 96.0], [56.4, 97.0], [56.5, 97.0], [56.6, 97.0], [56.7, 97.0], [56.8, 98.0], [56.9, 98.0], [57.0, 98.0], [57.1, 98.0], [57.2, 99.0], [57.3, 99.0], [57.4, 99.0], [57.5, 100.0], [57.6, 100.0], [57.7, 100.0], [57.8, 101.0], [57.9, 101.0], [58.0, 102.0], [58.1, 102.0], [58.2, 103.0], [58.3, 103.0], [58.4, 104.0], [58.5, 104.0], [58.6, 105.0], [58.7, 105.0], [58.8, 105.0], [58.9, 106.0], [59.0, 106.0], [59.1, 107.0], [59.2, 107.0], [59.3, 108.0], [59.4, 108.0], [59.5, 108.0], [59.6, 109.0], [59.7, 109.0], [59.8, 110.0], [59.9, 110.0], [60.0, 111.0], [60.1, 111.0], [60.2, 112.0], [60.3, 113.0], [60.4, 113.0], [60.5, 114.0], [60.6, 115.0], [60.7, 116.0], [60.8, 117.0], [60.9, 118.0], [61.0, 119.0], [61.1, 121.0], [61.2, 123.0], [61.3, 126.0], [61.4, 128.0], [61.5, 131.0], [61.6, 135.0], [61.7, 138.0], [61.8, 141.0], [61.9, 145.0], [62.0, 149.0], [62.1, 154.0], [62.2, 158.0], [62.3, 161.0], [62.4, 165.0], [62.5, 168.0], [62.6, 171.0], [62.7, 175.0], [62.8, 179.0], [62.9, 183.0], [63.0, 186.0], [63.1, 190.0], [63.2, 193.0], [63.3, 197.0], [63.4, 202.0], [63.5, 205.0], [63.6, 209.0], [63.7, 212.0], [63.8, 215.0], [63.9, 218.0], [64.0, 222.0], [64.1, 225.0], [64.2, 228.0], [64.3, 231.0], [64.4, 233.0], [64.5, 236.0], [64.6, 238.0], [64.7, 241.0], [64.8, 243.0], [64.9, 246.0], [65.0, 248.0], [65.1, 250.0], [65.2, 252.0], [65.3, 254.0], [65.4, 257.0], [65.5, 259.0], [65.6, 261.0], [65.7, 263.0], [65.8, 265.0], [65.9, 267.0], [66.0, 269.0], [66.1, 271.0], [66.2, 273.0], [66.3, 275.0], [66.4, 277.0], [66.5, 280.0], [66.6, 282.0], [66.7, 284.0], [66.8, 286.0], [66.9, 288.0], [67.0, 290.0], [67.1, 292.0], [67.2, 294.0], [67.3, 297.0], [67.4, 299.0], [67.5, 301.0], [67.6, 304.0], [67.7, 305.0], [67.8, 308.0], [67.9, 310.0], [68.0, 312.0], [68.1, 314.0], [68.2, 316.0], [68.3, 318.0], [68.4, 320.0], [68.5, 323.0], [68.6, 325.0], [68.7, 327.0], [68.8, 330.0], [68.9, 332.0], [69.0, 334.0], [69.1, 337.0], [69.2, 340.0], [69.3, 343.0], [69.4, 346.0], [69.5, 349.0], [69.6, 352.0], [69.7, 354.0], [69.8, 357.0], [69.9, 360.0], [70.0, 362.0], [70.1, 365.0], [70.2, 368.0], [70.3, 370.0], [70.4, 373.0], [70.5, 375.0], [70.6, 378.0], [70.7, 381.0], [70.8, 384.0], [70.9, 387.0], [71.0, 391.0], [71.1, 394.0], [71.2, 397.0], [71.3, 401.0], [71.4, 404.0], [71.5, 408.0], [71.6, 411.0], [71.7, 414.0], [71.8, 418.0], [71.9, 421.0], [72.0, 425.0], [72.1, 428.0], [72.2, 431.0], [72.3, 435.0], [72.4, 438.0], [72.5, 442.0], [72.6, 445.0], [72.7, 449.0], [72.8, 452.0], [72.9, 455.0], [73.0, 457.0], [73.1, 460.0], [73.2, 463.0], [73.3, 465.0], [73.4, 468.0], [73.5, 471.0], [73.6, 474.0], [73.7, 477.0], [73.8, 480.0], [73.9, 483.0], [74.0, 486.0], [74.1, 488.0], [74.2, 491.0], [74.3, 493.0], [74.4, 496.0], [74.5, 498.0], [74.6, 500.0], [74.7, 503.0], [74.8, 505.0], [74.9, 508.0], [75.0, 510.0], [75.1, 513.0], [75.2, 516.0], [75.3, 518.0], [75.4, 520.0], [75.5, 523.0], [75.6, 525.0], [75.7, 527.0], [75.8, 529.0], [75.9, 532.0], [76.0, 534.0], [76.1, 536.0], [76.2, 538.0], [76.3, 541.0], [76.4, 543.0], [76.5, 545.0], [76.6, 548.0], [76.7, 550.0], [76.8, 553.0], [76.9, 555.0], [77.0, 557.0], [77.1, 559.0], [77.2, 561.0], [77.3, 563.0], [77.4, 566.0], [77.5, 568.0], [77.6, 570.0], [77.7, 573.0], [77.8, 575.0], [77.9, 577.0], [78.0, 580.0], [78.1, 582.0], [78.2, 585.0], [78.3, 588.0], [78.4, 590.0], [78.5, 593.0], [78.6, 595.0], [78.7, 597.0], [78.8, 600.0], [78.9, 602.0], [79.0, 605.0], [79.1, 608.0], [79.2, 610.0], [79.3, 613.0], [79.4, 615.0], [79.5, 618.0], [79.6, 621.0], [79.7, 623.0], [79.8, 626.0], [79.9, 629.0], [80.0, 632.0], [80.1, 635.0], [80.2, 638.0], [80.3, 641.0], [80.4, 643.0], [80.5, 646.0], [80.6, 649.0], [80.7, 652.0], [80.8, 655.0], [80.9, 658.0], [81.0, 661.0], [81.1, 664.0], [81.2, 667.0], [81.3, 670.0], [81.4, 673.0], [81.5, 676.0], [81.6, 679.0], [81.7, 682.0], [81.8, 686.0], [81.9, 689.0], [82.0, 692.0], [82.1, 695.0], [82.2, 698.0], [82.3, 700.0], [82.4, 703.0], [82.5, 706.0], [82.6, 709.0], [82.7, 712.0], [82.8, 715.0], [82.9, 718.0], [83.0, 721.0], [83.1, 723.0], [83.2, 726.0], [83.3, 728.0], [83.4, 731.0], [83.5, 733.0], [83.6, 736.0], [83.7, 738.0], [83.8, 741.0], [83.9, 744.0], [84.0, 746.0], [84.1, 749.0], [84.2, 751.0], [84.3, 754.0], [84.4, 757.0], [84.5, 759.0], [84.6, 762.0], [84.7, 764.0], [84.8, 767.0], [84.9, 769.0], [85.0, 771.0], [85.1, 774.0], [85.2, 776.0], [85.3, 778.0], [85.4, 781.0], [85.5, 783.0], [85.6, 786.0], [85.7, 788.0], [85.8, 791.0], [85.9, 793.0], [86.0, 795.0], [86.1, 797.0], [86.2, 800.0], [86.3, 802.0], [86.4, 804.0], [86.5, 806.0], [86.6, 808.0], [86.7, 810.0], [86.8, 812.0], [86.9, 814.0], [87.0, 817.0], [87.1, 819.0], [87.2, 821.0], [87.3, 824.0], [87.4, 826.0], [87.5, 829.0], [87.6, 831.0], [87.7, 834.0], [87.8, 836.0], [87.9, 838.0], [88.0, 841.0], [88.1, 843.0], [88.2, 846.0], [88.3, 848.0], [88.4, 851.0], [88.5, 853.0], [88.6, 856.0], [88.7, 858.0], [88.8, 861.0], [88.9, 863.0], [89.0, 865.0], [89.1, 868.0], [89.2, 870.0], [89.3, 873.0], [89.4, 875.0], [89.5, 878.0], [89.6, 881.0], [89.7, 883.0], [89.8, 886.0], [89.9, 889.0], [90.0, 891.0], [90.1, 894.0], [90.2, 897.0], [90.3, 900.0], [90.4, 903.0], [90.5, 906.0], [90.6, 909.0], [90.7, 912.0], [90.8, 915.0], [90.9, 918.0], [91.0, 921.0], [91.1, 924.0], [91.2, 927.0], [91.3, 930.0], [91.4, 933.0], [91.5, 936.0], [91.6, 939.0], [91.7, 942.0], [91.8, 945.0], [91.9, 948.0], [92.0, 951.0], [92.1, 955.0], [92.2, 958.0], [92.3, 960.0], [92.4, 963.0], [92.5, 966.0], [92.6, 969.0], [92.7, 972.0], [92.8, 975.0], [92.9, 978.0], [93.0, 981.0], [93.1, 983.0], [93.2, 986.0], [93.3, 988.0], [93.4, 991.0], [93.5, 994.0], [93.6, 996.0], [93.7, 999.0], [93.8, 1002.0], [93.9, 1004.0], [94.0, 1007.0], [94.1, 1010.0], [94.2, 1012.0], [94.3, 1015.0], [94.4, 1018.0], [94.5, 1020.0], [94.6, 1023.0], [94.7, 1025.0], [94.8, 1028.0], [94.9, 1030.0], [95.0, 1033.0], [95.1, 1036.0], [95.2, 1039.0], [95.3, 1041.0], [95.4, 1044.0], [95.5, 1046.0], [95.6, 1049.0], [95.7, 1051.0], [95.8, 1053.0], [95.9, 1055.0], [96.0, 1058.0], [96.1, 1061.0], [96.2, 1064.0], [96.3, 1067.0], [96.4, 1070.0], [96.5, 1073.0], [96.6, 1076.0], [96.7, 1078.0], [96.8, 1081.0], [96.9, 1084.0], [97.0, 1086.0], [97.1, 1089.0], [97.2, 1092.0], [97.3, 1095.0], [97.4, 1098.0], [97.5, 1101.0], [97.6, 1104.0], [97.7, 1107.0], [97.8, 1110.0], [97.9, 1114.0], [98.0, 1118.0], [98.1, 1123.0], [98.2, 1127.0], [98.3, 1131.0], [98.4, 1136.0], [98.5, 1142.0], [98.6, 1147.0], [98.7, 1151.0], [98.8, 1156.0], [98.9, 1161.0], [99.0, 1166.0], [99.1, 1172.0], [99.2, 1181.0], [99.3, 1196.0], [99.4, 1221.0], [99.5, 1248.0], [99.6, 1279.0], [99.7, 1349.0], [99.8, 1486.0], [99.9, 1657.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 517341.0, "series": [{"data": [[0.0, 517341.0], [600.0, 31366.0], [2400.0, 56.0], [2500.0, 1.0], [700.0, 35389.0], [200.0, 36618.0], [800.0, 36844.0], [900.0, 30825.0], [1000.0, 33700.0], [1100.0, 16671.0], [300.0, 34673.0], [1200.0, 2914.0], [1300.0, 928.0], [1400.0, 645.0], [1500.0, 520.0], [100.0, 52841.0], [400.0, 29685.0], [1600.0, 547.0], [1700.0, 100.0], [1800.0, 453.0], [1900.0, 15.0], [500.0, 37988.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1688.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 671514.0, "series": [{"data": [[0.0, 671514.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 226918.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1688.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2248.676535433074, "minX": 1.6333152E12, "maxY": 2400.0, "series": [{"data": [[1.63331556E12, 2400.0], [1.63331526E12, 2400.0], [1.6333152E12, 2248.676535433074], [1.63331586E12, 2400.0], [1.63331532E12, 2400.0], [1.63331598E12, 2400.0], [1.63331592E12, 2400.0], [1.63331562E12, 2400.0], [1.63331604E12, 2400.0], [1.63331574E12, 2400.0], [1.63331568E12, 2400.0], [1.63331538E12, 2400.0], [1.6333158E12, 2400.0], [1.6333155E12, 2400.0], [1.63331544E12, 2400.0], [1.6333161E12, 2398.267868664416]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6333161E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.44444444444445, "minX": 262.0, "maxY": 297.0120765226435, "series": [{"data": [[262.0, 167.71428571428572], [278.0, 193.0], [280.0, 181.0], [286.0, 200.0], [289.0, 198.0], [288.0, 166.0], [290.0, 193.8], [291.0, 179.66666666666666], [292.0, 190.79310344827584], [293.0, 201.5], [294.0, 202.33333333333334], [295.0, 202.16666666666669], [296.0, 205.8], [302.0, 208.9473684210526], [300.0, 197.0], [301.0, 199.0], [297.0, 202.5], [298.0, 187.0], [305.0, 205.5], [304.0, 213.5405405405406], [307.0, 203.32142857142856], [308.0, 158.0], [309.0, 178.0], [310.0, 208.7391304347826], [312.0, 221.6], [311.0, 271.0], [313.0, 192.16666666666666], [314.0, 153.0], [322.0, 157.5], [321.0, 154.0], [332.0, 177.5], [353.0, 199.0], [354.0, 193.5], [356.0, 194.0], [358.0, 193.0], [359.0, 196.0], [366.0, 187.16666666666666], [367.0, 187.0], [369.0, 186.0], [372.0, 177.2], [373.0, 171.16666666666669], [375.0, 170.0], [376.0, 169.33333333333334], [379.0, 172.625], [383.0, 174.25], [385.0, 172.4], [386.0, 172.66666666666666], [387.0, 177.25], [394.0, 180.0], [392.0, 178.0], [393.0, 175.0], [399.0, 186.0], [396.0, 187.0], [413.0, 190.0], [407.0, 193.0], [408.0, 196.33333333333334], [415.0, 192.66666666666666], [406.0, 193.0], [405.0, 193.0], [409.0, 196.375], [410.0, 195.33333333333334], [411.0, 197.0], [412.0, 195.01515151515153], [428.0, 191.25], [417.0, 193.66666666666666], [416.0, 193.5], [418.0, 193.2857142857143], [420.0, 192.72727272727272], [429.0, 188.6], [430.0, 188.85714285714283], [431.0, 190.68421052631578], [425.0, 182.0], [426.0, 187.0], [427.0, 187.0], [421.0, 186.4], [419.0, 194.0], [435.0, 193.14285714285714], [432.0, 192.42857142857144], [436.0, 189.3888888888889], [433.0, 192.5], [440.0, 168.78431372549022], [437.0, 178.0], [441.0, 161.85714285714283], [443.0, 162.0], [442.0, 167.0], [446.0, 156.5], [444.0, 155.5], [460.0, 144.74074074074073], [454.0, 151.5], [453.0, 153.55555555555554], [457.0, 147.54545454545456], [456.0, 149.25], [455.0, 152.66666666666666], [459.0, 145.33333333333334], [458.0, 148.0], [461.0, 136.57894736842104], [463.0, 146.0], [476.0, 117.42857142857143], [466.0, 129.08333333333331], [468.0, 135.14285714285717], [467.0, 124.0], [478.0, 101.39130434782608], [479.0, 101.66666666666667], [477.0, 109.0], [470.0, 136.42857142857144], [471.0, 131.73333333333335], [472.0, 126.625], [474.0, 128.20833333333334], [473.0, 129.0], [475.0, 125.42857142857143], [482.0, 100.8], [480.0, 99.07692307692307], [483.0, 99.71428571428574], [492.0, 71.0], [495.0, 76.33333333333334], [493.0, 72.0], [481.0, 99.5], [485.0, 83.12500000000001], [484.0, 93.5], [488.0, 68.99999999999999], [487.0, 73.0], [486.0, 78.0], [490.0, 67.81818181818181], [491.0, 71.0], [489.0, 66.875], [502.0, 85.0], [504.0, 90.0], [508.0, 93.0], [496.0, 77.33333333333333], [499.0, 85.0], [513.0, 105.0], [520.0, 74.0], [517.0, 91.33333333333333], [518.0, 87.75], [536.0, 62.95454545454545], [541.0, 68.0], [537.0, 63.4], [540.0, 67.0], [543.0, 68.25], [542.0, 69.5], [529.0, 91.92857142857142], [530.0, 92.5], [531.0, 85.5], [535.0, 61.57142857142857], [534.0, 62.5], [532.0, 80.71428571428572], [533.0, 72.0], [516.0, 96.25], [521.0, 72.83333333333333], [512.0, 101.0], [527.0, 84.5], [526.0, 80.5], [514.0, 104.5], [523.0, 74.4], [524.0, 76.0], [558.0, 58.0], [547.0, 52.55555555555556], [548.0, 49.0], [544.0, 60.5], [550.0, 55.358974358974365], [568.0, 46.333333333333336], [560.0, 56.666666666666664], [562.0, 54.666666666666664], [563.0, 53.0], [565.0, 51.0], [564.0, 49.0], [567.0, 48.0], [566.0, 49.0], [549.0, 48.0], [553.0, 51.5], [554.0, 55.6], [555.0, 53.0], [556.0, 54.5], [605.0, 69.5], [595.0, 64.0], [593.0, 63.0], [606.0, 70.0], [607.0, 71.33333333333333], [594.0, 62.666666666666664], [600.0, 68.33333333333333], [601.0, 68.5], [603.0, 68.0], [604.0, 69.0], [613.0, 76.0], [608.0, 72.0], [633.0, 79.0], [614.0, 73.8], [632.0, 80.0], [616.0, 70.0], [618.0, 67.0], [612.0, 75.66666666666667], [624.0, 75.0], [626.0, 76.0], [625.0, 74.0], [610.0, 74.5], [609.0, 73.0], [611.0, 75.5], [638.0, 80.33333333333333], [636.0, 80.0], [644.0, 83.0], [646.0, 79.75], [643.0, 85.0], [647.0, 77.66666666666667], [648.0, 77.25], [653.0, 83.0], [657.0, 91.83333333333333], [670.0, 73.75], [671.0, 75.0], [669.0, 77.6], [665.0, 81.0], [664.0, 82.0], [668.0, 81.0], [666.0, 82.0], [659.0, 90.5], [660.0, 94.5], [663.0, 93.16], [662.0, 97.66666666666667], [661.0, 94.60000000000001], [658.0, 92.16666666666667], [650.0, 81.0], [674.0, 68.8], [672.0, 70.15384615384615], [687.0, 86.0], [675.0, 70.2], [680.0, 74.46666666666667], [677.0, 71.75], [678.0, 74.66666666666667], [682.0, 76.0], [679.0, 74.0], [689.0, 79.8], [698.0, 87.0], [703.0, 89.0], [690.0, 77.5], [691.0, 77.33333333333333], [694.0, 78.0], [685.0, 82.0], [686.0, 81.0], [708.0, 91.0], [721.0, 77.0], [720.0, 78.0], [735.0, 88.0], [729.0, 82.0], [724.0, 78.5], [715.0, 83.0], [712.0, 83.66666666666667], [723.0, 76.0], [725.0, 79.0], [726.0, 80.5], [718.0, 82.0], [707.0, 89.0], [717.0, 82.0], [710.0, 88.0], [709.0, 90.0], [751.0, 101.0], [747.0, 101.25], [745.0, 98.5], [750.0, 103.8], [753.0, 93.25], [756.0, 94.0], [758.0, 92.25], [759.0, 87.75], [748.0, 101.75], [752.0, 95.5], [749.0, 105.0], [741.0, 95.66666666666667], [760.0, 86.75], [766.0, 78.0], [761.0, 83.25], [738.0, 90.5], [739.0, 92.0], [772.0, 85.33333333333333], [769.0, 80.75], [770.0, 82.0], [771.0, 84.08333333333333], [773.0, 85.8], [774.0, 86.33333333333334], [797.0, 93.85714285714288], [798.0, 89.5], [799.0, 79.5], [795.0, 98.28571428571429], [785.0, 96.0], [786.0, 97.0], [782.0, 91.0], [776.0, 87.0], [777.0, 88.5], [780.0, 91.0], [778.0, 90.0], [794.0, 102.6], [775.0, 87.0], [793.0, 103.0], [801.0, 79.5], [800.0, 79.0], [802.0, 80.875], [803.0, 82.0], [815.0, 89.33333333333333], [812.0, 87.0], [814.0, 88.0], [811.0, 86.0], [809.0, 85.0], [804.0, 82.0], [805.0, 83.0], [806.0, 83.0], [825.0, 97.5], [827.0, 98.0], [826.0, 98.6], [828.0, 99.33333333333333], [816.0, 89.0], [831.0, 98.5], [830.0, 99.0], [829.0, 100.8], [834.0, 90.5], [835.0, 82.9047619047619], [833.0, 98.0], [846.0, 69.5], [845.0, 69.0], [844.0, 68.5], [838.0, 69.5], [843.0, 67.875], [842.0, 67.0], [839.0, 67.49999999999999], [850.0, 71.0], [851.0, 72.0], [849.0, 70.0], [854.0, 73.0], [853.0, 74.0], [852.0, 72.57142857142857], [837.0, 74.0], [840.0, 66.0], [841.0, 67.0], [867.0, 78.0], [891.0, 95.0], [894.0, 98.5], [869.0, 77.0], [866.0, 77.33333333333333], [883.0, 92.0], [903.0, 77.0], [897.0, 90.66666666666667], [913.0, 88.0], [901.0, 78.72727272727272], [899.0, 81.75], [898.0, 81.0], [922.0, 99.0], [921.0, 99.0], [920.0, 98.0], [923.0, 101.0], [912.0, 87.0], [927.0, 109.83333333333333], [911.0, 86.0], [896.0, 84.0], [914.0, 87.0], [907.0, 81.6], [904.0, 78.0], [908.0, 82.5], [915.0, 88.5], [917.0, 90.0], [916.0, 89.5], [931.0, 104.4], [928.0, 110.66666666666667], [938.0, 105.5], [940.0, 94.0], [929.0, 108.66666666666667], [930.0, 107.81818181818183], [935.0, 89.44444444444444], [944.0, 96.0], [957.0, 107.0], [933.0, 119.0], [932.0, 127.0], [934.0, 104.57142857142857], [936.0, 102.46808510638296], [937.0, 115.0], [986.0, 115.33333333333333], [960.0, 106.0], [961.0, 105.0], [963.0, 104.0], [989.0, 108.0], [965.0, 104.0], [964.0, 105.0], [991.0, 93.5], [988.0, 114.0], [987.0, 114.0], [990.0, 107.5], [996.0, 80.28571428571429], [992.0, 77.0], [993.0, 78.66666666666666], [994.0, 80.0], [998.0, 85.5], [1001.0, 87.5], [1020.0, 101.5], [1019.0, 101.0], [1012.0, 97.0], [1022.0, 102.0], [1014.0, 99.0], [1021.0, 102.66666666666667], [1086.0, 111.0], [1038.0, 130.5], [1062.0, 129.0], [1074.0, 93.6], [1084.0, 102.5], [1082.0, 100.5], [1072.0, 92.33333333333333], [1066.0, 89.0], [1070.0, 91.0], [1064.0, 92.66666666666667], [1046.0, 135.0], [1024.0, 106.0], [1028.0, 109.33333333333333], [1036.0, 120.5], [1032.0, 115.4], [1040.0, 136.0], [1034.0, 132.5], [1100.0, 112.25], [1090.0, 115.0], [1096.0, 119.25], [1094.0, 117.0], [1092.0, 117.33333333333333], [1102.0, 112.0], [1120.0, 95.6], [1132.0, 106.0], [1130.0, 102.0], [1104.0, 111.6], [1106.0, 111.8], [1110.0, 111.33333333333333], [1116.0, 105.0], [1118.0, 108.0], [1112.0, 111.0], [1108.0, 111.33333333333333], [1208.0, 169.91666666666669], [1192.0, 160.5], [1206.0, 169.0], [1202.0, 167.0], [1210.0, 170.33333333333334], [1214.0, 170.0], [1204.0, 168.0], [1228.0, 152.44444444444446], [1222.0, 157.16666666666666], [1218.0, 165.57142857142858], [1220.0, 158.0], [1230.0, 147.33333333333334], [1248.0, 157.0], [1256.0, 162.0], [1250.0, 159.0], [1260.0, 167.0], [1268.0, 170.57142857142858], [1272.0, 172.28571428571428], [1270.0, 171.0], [1264.0, 169.5], [1216.0, 173.0], [1238.0, 153.0], [1240.0, 153.5], [1244.0, 154.66666666666666], [1242.0, 155.0], [1224.0, 154.0], [1226.0, 154.0], [1340.0, 219.05714285714288], [1324.0, 199.0], [1334.0, 207.5], [1326.0, 201.0], [1342.0, 219.33333333333334], [1348.0, 181.75000000000003], [1346.0, 188.5], [1344.0, 209.0], [1362.0, 196.0], [1360.0, 186.0], [1356.0, 183.0], [1378.0, 202.5], [1376.0, 216.5], [1394.0, 206.0], [1396.0, 216.16666666666666], [1402.0, 209.5], [1404.0, 203.75], [1406.0, 177.83333333333334], [1400.0, 208.0], [1398.0, 196.0], [1392.0, 218.5], [1384.0, 214.22222222222226], [1386.0, 213.0], [1388.0, 236.0], [1390.0, 207.33333333333334], [1382.0, 219.66666666666669], [1380.0, 203.5], [1436.0, 153.77777777777777], [1412.0, 180.0], [1410.0, 177.5], [1408.0, 174.42857142857142], [1434.0, 156.2], [1432.0, 156.0], [1426.0, 163.0], [1428.0, 165.0], [1424.0, 168.0], [1414.0, 176.28571428571428], [1418.0, 181.0], [1420.0, 176.25], [1440.0, 155.5], [1466.0, 172.0], [1464.0, 171.0], [1468.0, 163.0], [1444.0, 158.0], [1454.0, 167.0], [1416.0, 183.5], [1498.0, 122.5], [1472.0, 168.0], [1478.0, 166.0], [1486.0, 118.0], [1488.0, 136.375], [1492.0, 125.33333333333333], [1494.0, 126.2], [1502.0, 132.0], [1500.0, 131.0], [1474.0, 171.0], [1476.0, 163.33333333333334], [1522.0, 144.0], [1524.0, 145.33333333333334], [1534.0, 140.5], [1480.0, 159.0], [1482.0, 156.5], [1484.0, 158.0], [1550.0, 144.33333333333334], [1536.0, 140.0], [1558.0, 153.5], [1556.0, 149.0], [1552.0, 145.0], [1554.0, 147.5], [1588.0, 138.0], [1590.0, 141.0], [1596.0, 143.0], [1586.0, 148.5], [1576.0, 156.0], [1570.0, 149.0], [1568.0, 154.5], [1548.0, 145.5], [1560.0, 155.0], [1562.0, 156.33333333333331], [1564.0, 158.5], [1612.0, 146.16666666666666], [1610.0, 152.0], [1608.0, 147.0], [1604.0, 146.0], [1618.0, 152.0], [1622.0, 150.0], [1630.0, 145.0], [1626.0, 149.0], [1628.0, 145.0], [1616.0, 155.85714285714286], [1632.0, 144.57142857142858], [1658.0, 116.0], [1656.0, 124.0], [1654.0, 125.8], [1662.0, 106.0], [1652.0, 128.92857142857142], [1648.0, 127.28571428571429], [1634.0, 137.0], [1636.0, 132.33333333333331], [1640.0, 128.0], [1642.0, 125.2], [1646.0, 126.0], [1664.0, 97.80000000000001], [1672.0, 108.0], [1680.0, 114.0], [1682.0, 116.0], [1688.0, 85.0], [1690.0, 77.0], [1676.0, 111.33333333333334], [1702.0, 85.0], [1726.0, 106.0], [1712.0, 95.66666666666667], [1724.0, 106.0], [1722.0, 105.0], [1704.0, 87.0], [1730.0, 110.33333333333333], [1736.0, 112.71428571428571], [1754.0, 83.25], [1756.0, 85.0], [1750.0, 86.33333333333333], [1748.0, 93.0], [1740.0, 107.0], [1738.0, 107.0], [1742.0, 99.0], [1766.0, 91.0], [1774.0, 97.0], [1762.0, 89.0], [1790.0, 105.0], [1778.0, 98.5], [1744.0, 98.33333333333333], [1746.0, 109.75], [1734.0, 115.5], [1796.0, 108.5], [1800.0, 107.0], [1802.0, 107.5], [1794.0, 108.0], [1816.0, 94.0], [1820.0, 95.0], [1806.0, 100.0], [1844.0, 104.33333333333333], [1854.0, 110.0], [1848.0, 106.0], [1840.0, 100.8], [1824.0, 85.0], [1834.0, 98.0], [1838.0, 100.0], [1798.0, 109.0], [1804.0, 103.5], [1812.0, 97.0], [1814.0, 94.5], [1856.0, 110.0], [1866.0, 115.6], [1868.0, 113.75], [1862.0, 115.33333333333333], [1872.0, 111.0], [1858.0, 113.0], [1874.0, 100.33333333333334], [1876.0, 95.0], [1886.0, 105.8], [1904.0, 117.0], [1898.0, 113.0], [1890.0, 108.0], [1918.0, 112.7], [1914.0, 123.33333333333333], [1916.0, 121.8], [1910.0, 121.75], [1906.0, 119.25], [1912.0, 123.33333333333333], [1900.0, 115.0], [1924.0, 101.0], [1950.0, 95.0], [1930.0, 95.0], [1920.0, 106.5], [1922.0, 103.4], [1926.0, 100.0], [1936.0, 98.0], [1940.0, 96.0], [1976.0, 107.5], [1978.0, 109.49999999999999], [1956.0, 100.0], [1980.0, 110.5], [1934.0, 94.0], [1992.0, 112.33333333333333], [1988.0, 113.33333333333333], [1984.0, 112.0], [1990.0, 113.5], [1998.0, 113.66666666666667], [2034.0, 87.8], [2036.0, 117.0], [2042.0, 108.0], [1996.0, 108.0], [1994.0, 108.5], [2016.0, 105.33333333333333], [2010.0, 104.5], [2024.0, 101.0], [2000.0, 107.0], [2002.0, 108.0], [2100.0, 91.75], [2080.0, 99.0], [2088.0, 111.0], [2072.0, 102.0], [2148.0, 111.0], [2172.0, 110.5], [2156.0, 102.0], [2144.0, 112.0], [2112.0, 99.2], [2124.0, 108.5], [2132.0, 113.0], [2128.0, 99.0], [2136.0, 105.0], [2116.0, 107.0], [2052.0, 103.0], [2064.0, 105.0], [2084.0, 97.0], [2092.0, 89.33333333333333], [2108.0, 97.66666666666667], [2104.0, 98.0], [2280.0, 131.25], [2176.0, 110.25], [2184.0, 107.0], [2192.0, 107.0], [2284.0, 133.33333333333334], [2196.0, 106.0], [2292.0, 48.782608695652165], [2288.0, 135.0], [2300.0, 142.0], [2296.0, 109.33333333333333], [2320.0, 123.62499999999999], [2324.0, 140.25], [2316.0, 136.33333333333334], [2328.0, 139.0], [2340.0, 287.2558139534885], [2336.0, 158.0], [2344.0, 83.0], [2364.0, 155.0], [2372.0, 157.0], [2384.0, 63.0], [2400.0, 297.0120765226435], [2392.0, 171.0], [2396.0, 156.83333333333334], [2388.0, 167.75], [2065.0, 106.0], [2081.0, 97.0], [2077.0, 99.0], [2145.0, 103.0], [2149.0, 104.0], [2105.0, 99.0], [2101.0, 91.0], [2097.0, 90.25], [2093.0, 89.0], [2109.0, 100.0], [2113.0, 102.6], [2117.0, 101.0], [2133.0, 100.0], [2129.0, 103.0], [2189.0, 106.0], [2185.0, 107.0], [2181.0, 108.5], [2281.0, 133.0], [2277.0, 130.0], [2289.0, 135.33333333333334], [2297.0, 139.75], [2285.0, 48.0], [2309.0, 145.0], [2313.0, 139.8], [2317.0, 116.37640449438204], [2321.0, 102.5], [2305.0, 144.0], [2329.0, 96.86], [2345.0, 144.0], [2337.0, 268.3636363636363], [2373.0, 157.5], [2377.0, 161.66666666666666], [2385.0, 141.0], [2389.0, 62.92307692307692], [2393.0, 96.9054054054054], [2397.0, 182.77192982456143], [2349.0, 146.0], [2333.0, 143.0], [2369.0, 156.0], [2361.0, 151.0], [1087.0, 114.0], [1033.0, 124.25], [1037.0, 121.0], [1061.0, 135.0], [1079.0, 97.0], [1073.0, 93.0], [1063.0, 93.0], [1065.0, 90.33333333333333], [1067.0, 104.5], [1069.0, 90.66666666666667], [1071.0, 92.0], [1047.0, 133.5], [1045.0, 147.0], [1041.0, 123.0], [1031.0, 110.33333333333333], [1029.0, 108.0], [1097.0, 116.0], [1099.0, 114.75], [1091.0, 115.0], [1121.0, 101.0], [1131.0, 103.6], [1133.0, 107.0], [1107.0, 112.0], [1109.0, 111.33333333333333], [1117.0, 102.8], [1119.0, 100.0], [1115.0, 105.37500000000001], [1111.0, 110.66666666666667], [1205.0, 168.71428571428572], [1193.0, 161.66666666666666], [1201.0, 166.16666666666666], [1197.0, 164.0], [1209.0, 171.0], [1211.0, 169.5], [1213.0, 169.0], [1203.0, 167.0], [1229.0, 149.5], [1219.0, 161.24999999999997], [1223.0, 155.5], [1227.0, 154.0], [1231.0, 147.5], [1261.0, 166.66666666666666], [1257.0, 164.0], [1265.0, 168.0], [1267.0, 169.33333333333334], [1273.0, 170.6], [1271.0, 173.0], [1269.0, 171.0], [1217.0, 168.33333333333334], [1241.0, 153.0], [1245.0, 154.66666666666666], [1247.0, 156.5], [1325.0, 198.0], [1337.0, 210.0], [1343.0, 216.0], [1355.0, 200.0], [1359.0, 186.0], [1347.0, 192.25], [1367.0, 202.0], [1363.0, 201.0], [1345.0, 192.5], [1349.0, 177.75], [1395.0, 215.0], [1403.0, 196.3076923076923], [1405.0, 179.6], [1407.0, 176.0], [1401.0, 200.66666666666666], [1399.0, 209.33333333333334], [1393.0, 213.0], [1383.0, 207.0], [1389.0, 219.75], [1391.0, 213.66666666666666], [1385.0, 220.85714285714286], [1379.0, 203.0], [1413.0, 172.125], [1425.0, 166.625], [1437.0, 154.0], [1439.0, 154.2], [1435.0, 156.0], [1431.0, 159.6], [1427.0, 162.6], [1411.0, 176.73333333333335], [1409.0, 179.5], [1417.0, 190.75000000000003], [1463.0, 169.5], [1461.0, 171.0], [1467.0, 172.0], [1471.0, 162.0], [1469.0, 168.0], [1441.0, 156.91666666666669], [1443.0, 158.0], [1445.0, 159.75], [1449.0, 162.5], [1447.0, 161.0], [1419.0, 168.0], [1415.0, 186.45454545454544], [1501.0, 129.6], [1491.0, 124.53846153846153], [1495.0, 127.5], [1497.0, 125.66666666666666], [1489.0, 121.0], [1475.0, 163.0], [1473.0, 164.0], [1477.0, 174.0], [1487.0, 148.66666666666666], [1527.0, 142.0], [1535.0, 139.0], [1523.0, 139.0], [1479.0, 162.0], [1481.0, 153.0], [1585.0, 145.33333333333334], [1557.0, 150.5], [1541.0, 147.0], [1547.0, 145.0], [1537.0, 139.0], [1539.0, 140.5], [1589.0, 139.0], [1593.0, 142.0], [1587.0, 142.4], [1579.0, 152.8], [1583.0, 143.0], [1581.0, 147.0], [1561.0, 155.0], [1563.0, 156.66666666666666], [1567.0, 153.5], [1565.0, 157.4], [1559.0, 155.0], [1605.0, 146.0], [1611.0, 165.05633802816902], [1603.0, 148.5], [1617.0, 150.5], [1619.0, 155.0], [1621.0, 149.33333333333334], [1623.0, 150.0], [1631.0, 152.0], [1627.0, 147.5], [1629.0, 145.0], [1625.0, 154.0], [1613.0, 197.5], [1615.0, 146.0], [1633.0, 139.66666666666666], [1663.0, 102.3], [1657.0, 120.0], [1661.0, 109.0], [1659.0, 115.0], [1655.0, 119.0], [1653.0, 128.5], [1651.0, 128.28571428571428], [1649.0, 128.0], [1635.0, 137.66666666666666], [1637.0, 133.5], [1639.0, 131.0], [1641.0, 126.66666666666667], [1643.0, 125.0], [1647.0, 126.0], [1665.0, 99.0], [1695.0, 81.0], [1691.0, 78.0], [1693.0, 79.0], [1681.0, 112.6], [1683.0, 117.75], [1675.0, 110.0], [1677.0, 112.75000000000001], [1679.0, 113.5], [1697.0, 82.33333333333333], [1721.0, 105.0], [1719.0, 103.0], [1723.0, 106.0], [1725.0, 106.0], [1671.0, 104.0], [1667.0, 101.0], [1673.0, 108.0], [1755.0, 84.0], [1759.0, 87.25], [1729.0, 108.0], [1753.0, 84.0], [1757.0, 85.0], [1751.0, 91.0], [1747.0, 103.20000000000002], [1749.0, 91.55555555555554], [1733.0, 114.85714285714286], [1739.0, 108.0], [1741.0, 101.66666666666667], [1743.0, 96.5], [1783.0, 101.0], [1763.0, 89.33333333333334], [1773.0, 96.0], [1775.0, 98.0], [1767.0, 92.0], [1761.0, 88.0], [1735.0, 115.66666666666667], [1807.0, 99.0], [1793.0, 106.33333333333333], [1825.0, 86.25000000000001], [1849.0, 107.0], [1847.0, 105.0], [1851.0, 108.0], [1843.0, 104.0], [1841.0, 102.0], [1833.0, 97.0], [1837.0, 99.33333333333333], [1839.0, 100.0], [1835.0, 98.0], [1827.0, 88.33333333333333], [1809.0, 98.0], [1803.0, 108.33333333333333], [1795.0, 107.5], [1811.0, 98.0], [1813.0, 96.0], [1815.0, 93.0], [1819.0, 92.0], [1823.0, 89.89999999999999], [1805.0, 104.0], [1799.0, 111.0], [1797.0, 108.0], [1865.0, 116.6], [1873.0, 106.60000000000001], [1867.0, 111.0], [1869.0, 112.0], [1903.0, 117.33333333333333], [1901.0, 115.0], [1875.0, 98.625], [1905.0, 118.08333333333334], [1907.0, 120.5], [1909.0, 120.6], [1911.0, 123.2], [1917.0, 119.07142857142857], [1919.0, 114.16666666666667], [1899.0, 115.0], [1879.0, 97.0], [1885.0, 108.0], [1977.0, 108.66666666666667], [1921.0, 116.66666666666667], [1925.0, 96.0], [1941.0, 92.0], [1953.0, 98.5], [1963.0, 103.0], [1965.0, 104.0], [1981.0, 111.0], [1983.0, 111.0], [1979.0, 110.5], [1959.0, 102.0], [1973.0, 106.0], [1993.0, 113.4], [1989.0, 113.0], [1991.0, 113.4], [2013.0, 104.66666666666667], [2007.0, 108.66666666666667], [2009.0, 106.0], [2019.0, 100.8], [2031.0, 92.33333333333333], [2025.0, 99.0], [1997.0, 108.5], [2017.0, 103.0], [2035.0, 110.29824561403505], [2015.0, 107.5], [2098.0, 90.5], [2066.0, 102.5], [2050.0, 107.0], [2090.0, 93.33333333333333], [2082.0, 97.0], [2074.0, 100.0], [2122.0, 101.5], [2126.0, 107.5], [2134.0, 100.0], [2130.0, 107.0], [2118.0, 111.0], [2170.0, 110.0], [2154.0, 103.0], [2146.0, 109.0], [2150.0, 103.5], [2094.0, 89.66666666666667], [2106.0, 93.0], [2110.0, 97.0], [2194.0, 105.0], [2182.0, 109.6], [2190.0, 108.0], [2186.0, 108.5], [2198.0, 106.6], [2274.0, 36.44444444444445], [2278.0, 131.0], [2290.0, 136.25], [2294.0, 138.5], [2298.0, 140.0], [2302.0, 47.0], [2318.0, 141.0], [2310.0, 136.33333333333331], [2322.0, 142.0], [2306.0, 142.0], [2326.0, 141.0], [2314.0, 140.66666666666666], [2374.0, 158.83333333333334], [2378.0, 162.0], [2386.0, 81.8888888888889], [2394.0, 116.22727272727272], [2390.0, 51.666666666666664], [2398.0, 279.27272727272737], [2370.0, 157.0], [2350.0, 146.0], [2342.0, 143.0], [2346.0, 146.0], [2067.0, 102.0], [2071.0, 100.0], [2087.0, 116.0], [2075.0, 100.0], [2099.0, 90.66666666666667], [2103.0, 93.6], [2111.0, 98.0], [2107.0, 94.0], [2127.0, 104.125], [2147.0, 104.33333333333333], [2151.0, 107.0], [2155.0, 101.0], [2171.0, 109.0], [2135.0, 102.5], [2195.0, 106.33333333333333], [2179.0, 109.25], [2187.0, 106.5], [2191.0, 106.0], [2199.0, 106.0], [2279.0, 42.893617021276604], [2295.0, 79.16666666666667], [2299.0, 140.33333333333334], [2303.0, 91.91954022988506], [2291.0, 136.0], [2283.0, 133.0], [2287.0, 135.5], [2323.0, 121.5], [2315.0, 142.0], [2311.0, 140.6], [2307.0, 132.0], [2327.0, 139.5], [2319.0, 127.0], [2331.0, 137.33333333333334], [2339.0, 158.0], [2371.0, 157.5], [2379.0, 163.0], [2383.0, 112.00000000000003], [2387.0, 135.28571428571428], [2391.0, 56.07692307692306], [2395.0, 150.0], [2359.0, 150.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2394.074910012033, 296.0237668311096]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 77184.46666666666, "minX": 1.6333152E12, "maxY": 8194700.416666667, "series": [{"data": [[1.63331556E12, 8194700.416666667], [1.63331526E12, 8079708.133333334], [1.6333152E12, 4612428.333333333], [1.63331586E12, 7877312.916666667], [1.63331532E12, 7738424.916666667], [1.63331598E12, 7916369.916666667], [1.63331592E12, 7920057.65], [1.63331562E12, 7733560.016666667], [1.63331604E12, 7652992.65], [1.63331574E12, 7915290.866666666], [1.63331568E12, 8092140.066666666], [1.63331538E12, 8010512.783333333], [1.6333158E12, 7915151.533333333], [1.6333155E12, 7786064.333333333], [1.63331544E12, 7789191.633333334], [1.6333161E12, 3687022.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63331556E12, 171558.23333333334], [1.63331526E12, 168190.0], [1.6333152E12, 95858.65], [1.63331586E12, 164968.03333333333], [1.63331532E12, 162025.46666666667], [1.63331598E12, 165836.76666666666], [1.63331592E12, 165842.3], [1.63331562E12, 161974.5], [1.63331604E12, 160239.8], [1.63331574E12, 165817.4], [1.63331568E12, 169519.2], [1.63331538E12, 167654.46666666667], [1.6333158E12, 165814.63333333333], [1.6333155E12, 162970.5], [1.63331544E12, 163025.83333333334], [1.6333161E12, 77184.46666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6333161E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 68.75973570928068, "minX": 1.6333152E12, "maxY": 555.1125320518025, "series": [{"data": [[1.63331556E12, 555.1125320518025], [1.63331526E12, 190.8570307390451], [1.6333152E12, 78.21958482462446], [1.63331586E12, 410.33712915289664], [1.63331532E12, 92.53429941795959], [1.63331598E12, 68.88235097846298], [1.63331592E12, 69.28341924828622], [1.63331562E12, 516.9726193526367], [1.63331604E12, 395.39333195206626], [1.63331574E12, 68.75973570928068], [1.63331568E12, 188.56949340645164], [1.63331538E12, 485.9249315158934], [1.6333158E12, 69.58790649558665], [1.6333155E12, 554.909311603435], [1.63331544E12, 527.9800254560897], [1.6333161E12, 473.2746791884712]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6333161E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 68.6602763039348, "minX": 1.6333152E12, "maxY": 554.8292183392749, "series": [{"data": [[1.63331556E12, 554.8292183392749], [1.63331526E12, 190.67320143884857], [1.6333152E12, 78.10702934860453], [1.63331586E12, 410.14604122293446], [1.63331532E12, 92.40362196391672], [1.63331598E12, 68.75410820640242], [1.63331592E12, 69.05563618771151], [1.63331562E12, 516.808540438978], [1.63331604E12, 394.57044442141984], [1.63331574E12, 68.6602763039348], [1.63331568E12, 188.4662488575523], [1.63331538E12, 485.58940889138347], [1.6333158E12, 69.48704386565018], [1.6333155E12, 554.5541125541183], [1.63331544E12, 527.6207721680162], [1.6333161E12, 472.9637608430713]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6333161E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6333152E12, "maxY": 0.32380816034359744, "series": [{"data": [[1.63331556E12, 0.08422970859068825], [1.63331526E12, 0.04452256376716759], [1.6333152E12, 0.32380816034359744], [1.63331586E12, 0.11050363090546335], [1.63331532E12, 0.0448051615546116], [1.63331598E12, 0.04456048447640178], [1.63331592E12, 0.041472732429141186], [1.63331562E12, 0.1358442223930308], [1.63331604E12, 0.12553955592389326], [1.63331574E12, 0.04902058931491344], [1.63331568E12, 0.07112547329938637], [1.63331538E12, 0.05189940262054837], [1.6333158E12, 0.044216041246058053], [1.6333155E12, 0.05609031491384477], [1.63331544E12, 0.11188799321170875], [1.6333161E12, 0.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6333161E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.6333152E12, "maxY": 2501.0, "series": [{"data": [[1.63331556E12, 1287.0], [1.63331526E12, 1999.0], [1.6333152E12, 273.0], [1.63331586E12, 2501.0], [1.63331532E12, 1246.0], [1.63331598E12, 143.0], [1.63331592E12, 145.0], [1.63331562E12, 1199.0], [1.63331604E12, 1855.0], [1.63331574E12, 197.0], [1.63331568E12, 1120.0], [1.63331538E12, 1680.0], [1.6333158E12, 136.0], [1.6333155E12, 1495.0], [1.63331544E12, 1271.0], [1.6333161E12, 1161.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63331556E12, 1145.9900000000016], [1.63331526E12, 113.0], [1.6333152E12, 115.0], [1.63331586E12, 1170.0], [1.63331532E12, 1163.9900000000016], [1.63331598E12, 110.0], [1.63331592E12, 114.0], [1.63331562E12, 1080.0], [1.63331604E12, 1113.9900000000016], [1.63331574E12, 112.0], [1.63331568E12, 114.0], [1.63331538E12, 1045.0], [1.6333158E12, 111.0], [1.6333155E12, 1450.0], [1.63331544E12, 1135.0], [1.6333161E12, 1087.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63331556E12, 1173.0], [1.63331526E12, 142.99947273254293], [1.6333152E12, 126.0], [1.63331586E12, 2486.999472732543], [1.63331532E12, 1244.9984181976288], [1.63331598E12, 140.99367279051512], [1.63331592E12, 139.99947273254293], [1.63331562E12, 1104.999472732543], [1.63331604E12, 1175.9984181976288], [1.63331574E12, 133.99947273254293], [1.63331568E12, 139.0], [1.63331538E12, 1062.999472732543], [1.6333158E12, 123.99947273254293], [1.6333155E12, 1493.999472732543], [1.63331544E12, 1157.0], [1.6333161E12, 1125.0]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63331556E12, 1168.0], [1.63331526E12, 131.0], [1.6333152E12, 122.99930519103873], [1.63331586E12, 2484.0], [1.63331532E12, 1227.0], [1.63331598E12, 116.99930519103873], [1.63331592E12, 134.0], [1.63331562E12, 1097.0], [1.63331604E12, 1159.0], [1.63331574E12, 131.0], [1.63331568E12, 127.0], [1.63331538E12, 1055.0], [1.6333158E12, 119.0], [1.6333155E12, 1464.0], [1.63331544E12, 1151.9993051910387], [1.6333161E12, 1118.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63331556E12, 13.0], [1.63331526E12, 26.0], [1.6333152E12, 16.0], [1.63331586E12, 11.0], [1.63331532E12, 29.0], [1.63331598E12, 17.0], [1.63331592E12, 30.0], [1.63331562E12, 8.0], [1.63331604E12, 10.0], [1.63331574E12, 21.0], [1.63331568E12, 11.0], [1.63331538E12, 14.0], [1.6333158E12, 25.0], [1.6333155E12, 6.0], [1.63331544E12, 6.0], [1.6333161E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63331556E12, 588.0], [1.63331526E12, 66.0], [1.6333152E12, 66.0], [1.63331586E12, 272.0], [1.63331532E12, 68.0], [1.63331598E12, 65.0], [1.63331592E12, 66.0], [1.63331562E12, 427.0], [1.63331604E12, 390.0], [1.63331574E12, 65.0], [1.63331568E12, 66.0], [1.63331538E12, 483.0], [1.6333158E12, 65.0], [1.6333155E12, 569.0], [1.63331544E12, 457.0], [1.6333161E12, 347.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6333161E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 1135.0, "series": [{"data": [[2.0, 51.5], [3.0, 33.0], [6.0, 42.0], [8.0, 49.5], [9.0, 35.0], [12.0, 62.5], [23.0, 49.0], [31.0, 71.0], [33.0, 28.0], [34.0, 53.5], [37.0, 85.0], [38.0, 30.0], [40.0, 101.5], [42.0, 81.5], [57.0, 56.0], [59.0, 74.0], [67.0, 51.0], [77.0, 67.0], [85.0, 98.0], [97.0, 70.0], [101.0, 68.0], [135.0, 41.0], [142.0, 199.5], [141.0, 58.0], [147.0, 72.0], [150.0, 57.0], [155.0, 57.0], [194.0, 66.0], [198.0, 40.0], [227.0, 43.0], [241.0, 40.0], [254.0, 51.0], [268.0, 41.0], [262.0, 41.5], [261.0, 239.0], [275.0, 61.0], [283.0, 60.0], [278.0, 46.0], [288.0, 65.0], [300.0, 34.0], [298.0, 48.0], [317.0, 44.0], [334.0, 54.0], [323.0, 56.0], [333.0, 50.0], [344.0, 61.0], [340.0, 33.0], [346.0, 41.0], [360.0, 75.0], [354.0, 249.5], [382.0, 67.0], [368.0, 65.5], [376.0, 63.0], [454.0, 246.0], [473.0, 274.0], [501.0, 106.0], [540.0, 60.0], [530.0, 272.0], [531.0, 62.0], [536.0, 255.0], [568.0, 316.0], [574.0, 238.5], [564.0, 66.0], [607.0, 269.0], [581.0, 241.0], [592.0, 66.0], [635.0, 246.0], [639.0, 50.0], [636.0, 260.0], [617.0, 55.0], [634.0, 59.0], [615.0, 241.0], [666.0, 304.0], [655.0, 266.0], [651.0, 245.0], [671.0, 69.0], [661.0, 59.0], [684.0, 266.0], [677.0, 278.0], [672.0, 43.0], [673.0, 57.0], [682.0, 39.0], [689.0, 45.0], [693.0, 65.0], [674.0, 47.0], [728.0, 118.0], [711.0, 573.0], [707.0, 46.0], [716.0, 62.0], [757.0, 81.0], [747.0, 284.0], [748.0, 288.0], [762.0, 47.0], [752.0, 61.0], [778.0, 71.0], [812.0, 66.0], [828.0, 66.0], [831.0, 65.0], [826.0, 408.0], [803.0, 400.0], [836.0, 286.0], [859.0, 307.0], [871.0, 62.0], [872.0, 71.0], [879.0, 358.5], [927.0, 64.0], [919.0, 404.0], [957.0, 106.0], [937.0, 98.0], [953.0, 63.0], [946.0, 70.5], [958.0, 67.0], [949.0, 64.0], [985.0, 65.0], [977.0, 60.0], [972.0, 66.0], [971.0, 67.0], [973.0, 65.0], [974.0, 66.0], [969.0, 67.0], [968.0, 63.0], [970.0, 67.0], [987.0, 65.0], [988.0, 65.0], [986.0, 68.0], [983.0, 66.0], [982.0, 67.0], [981.0, 66.0], [980.0, 63.0], [978.0, 67.0], [979.0, 62.0], [989.0, 66.0], [966.0, 81.5], [965.0, 63.0], [967.0, 67.0], [984.0, 66.0], [963.0, 63.0], [962.0, 66.0], [960.0, 68.0], [961.0, 64.0], [964.0, 67.0], [975.0, 63.0], [991.0, 67.0], [990.0, 66.0], [976.0, 63.0], [995.0, 65.0], [1022.0, 67.0], [1009.0, 64.0], [1010.0, 67.0], [1023.0, 66.0], [1008.0, 67.0], [994.0, 68.0], [1019.0, 68.0], [1018.0, 66.0], [1021.0, 67.0], [1020.0, 67.0], [996.0, 68.0], [997.0, 66.0], [998.0, 67.0], [1016.0, 66.0], [999.0, 67.0], [1017.0, 66.0], [1002.0, 64.0], [1013.0, 63.0], [1014.0, 65.0], [1015.0, 65.5], [1012.0, 65.0], [1011.0, 64.0], [993.0, 65.0], [1006.0, 66.0], [1007.0, 67.0], [992.0, 66.0], [1005.0, 65.0], [1004.0, 67.0], [1003.0, 64.0], [1000.0, 66.0], [1001.0, 65.0], [1030.0, 65.0], [1031.0, 61.0], [1033.0, 66.0], [1035.0, 64.0], [1037.0, 68.0], [1036.0, 63.0], [1034.0, 70.0], [1024.0, 72.0], [1045.0, 69.0], [1054.0, 42.0], [1084.0, 69.0], [1039.0, 67.0], [1060.0, 64.0], [1062.0, 52.0], [1025.0, 69.0], [1038.0, 76.0], [1027.0, 65.0], [1028.0, 67.0], [1029.0, 65.0], [1041.0, 65.0], [1043.0, 67.0], [1044.0, 364.0], [1026.0, 66.0], [1098.0, 429.0], [1109.0, 347.0], [1117.0, 313.0], [1127.0, 61.0], [1148.0, 63.5], [1229.0, 183.0], [1217.0, 314.0], [1249.0, 94.0], [1256.0, 281.0], [1266.0, 412.5], [1257.0, 76.0], [1236.0, 66.0], [1297.0, 79.0], [1304.0, 395.5], [1294.0, 43.0], [1404.0, 1066.5], [1406.0, 87.0], [1365.0, 1069.0], [1385.0, 93.0], [1392.0, 474.0], [1393.0, 390.0], [1457.0, 97.0], [1449.0, 346.0], [1462.0, 377.5], [1431.0, 98.0], [1418.0, 429.5], [1490.0, 73.0], [1477.0, 563.0], [1528.0, 97.0], [1514.0, 463.0], [1550.0, 108.5], [1596.0, 175.5], [1569.0, 555.0], [1560.0, 176.0], [1588.0, 114.0], [1558.0, 129.0], [1545.0, 494.0], [1541.0, 460.0], [1579.0, 573.0], [1593.0, 494.0], [1619.0, 198.0], [1641.0, 983.0], [1662.0, 150.0], [1634.0, 198.0], [1629.0, 266.0], [1687.0, 222.0], [1707.0, 247.0], [1778.0, 353.0], [1773.0, 389.0], [1751.0, 337.0], [1758.0, 483.0], [1776.0, 289.0], [1742.0, 259.0], [1753.0, 260.0], [1775.0, 281.0], [1781.0, 1047.0], [1800.0, 1135.0], [1836.0, 97.0], [1833.0, 540.0], [1824.0, 517.5], [1854.0, 533.5], [1851.0, 715.0], [1797.0, 1077.0], [1799.0, 349.0], [1795.0, 1101.0], [1794.0, 286.5], [1822.0, 533.0], [1846.0, 560.0], [1844.0, 574.0], [1849.0, 513.0], [1803.0, 502.0], [1802.0, 348.0], [1812.0, 309.5], [1813.0, 311.0], [1889.0, 497.0], [1899.0, 613.0], [1913.0, 499.0], [1914.0, 503.5], [1884.0, 532.0], [1908.0, 554.0], [1877.0, 402.0], [1860.0, 542.0], [1912.0, 586.0], [1890.0, 550.0], [1894.0, 493.0], [1927.0, 465.0], [1979.0, 896.0], [1939.0, 868.0], [1944.0, 744.0], [1952.0, 528.0], [1942.0, 546.0], [1923.0, 549.0], [1967.0, 505.0], [1961.0, 255.0], [1920.0, 509.5], [2018.0, 468.5], [2047.0, 775.0], [2030.0, 861.0], [2151.0, 869.0], [2125.0, 646.0], [2114.0, 126.0], [2156.0, 873.0], [2157.0, 826.0], [2130.0, 602.0], [2132.0, 947.0], [2134.0, 565.0], [2065.0, 558.0], [2141.0, 577.0], [2058.0, 984.0], [2092.0, 1071.5], [2053.0, 837.0], [2100.0, 659.0], [2088.0, 829.5], [2080.0, 491.5], [2188.0, 797.0], [2231.0, 751.0], [2209.0, 673.0], [2178.0, 803.0], [2177.0, 671.0], [2212.0, 592.0], [2219.0, 900.0], [2292.0, 862.0], [2280.0, 839.0], [2286.0, 798.0], [2281.0, 946.0], [2203.0, 557.0], [2297.0, 873.0], [2301.0, 839.0], [2245.0, 846.0], [2266.0, 650.0], [2268.0, 624.0], [2253.0, 807.0], [2249.0, 617.0], [2259.0, 820.0], [2187.0, 706.0], [2180.0, 926.0], [2248.0, 965.0], [2335.0, 787.0], [2384.0, 758.0], [2395.0, 801.0], [2396.0, 777.0], [2377.0, 777.0], [2314.0, 740.0], [2356.0, 763.0], [2351.0, 879.0], [2350.0, 729.0], [2355.0, 738.0], [2347.0, 832.0], [2341.0, 889.0], [2312.0, 903.5], [2359.0, 763.0], [2362.0, 875.0], [2325.0, 861.0], [2333.0, 854.0], [2321.0, 699.0], [2400.0, 817.0], [2410.0, 758.0], [2409.0, 728.0], [2414.0, 820.5], [2428.0, 813.0], [2429.0, 780.0], [2430.0, 777.0], [2418.0, 818.0], [2479.0, 802.0], [2438.0, 860.5], [2444.0, 801.0], [2464.0, 783.0], [2442.0, 777.0], [2520.0, 771.0], [2571.0, 712.0], [2589.0, 800.0], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2589.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 1135.0, "series": [{"data": [[2.0, 51.5], [3.0, 33.0], [6.0, 42.0], [8.0, 49.5], [9.0, 35.0], [12.0, 62.0], [23.0, 49.0], [31.0, 71.0], [33.0, 28.0], [34.0, 53.5], [37.0, 84.0], [38.0, 30.0], [40.0, 101.0], [42.0, 80.5], [57.0, 56.0], [59.0, 74.0], [67.0, 51.0], [77.0, 67.0], [85.0, 98.0], [97.0, 70.0], [101.0, 67.0], [135.0, 41.0], [142.0, 199.5], [141.0, 57.0], [147.0, 72.0], [150.0, 56.0], [155.0, 57.0], [194.0, 66.0], [198.0, 39.0], [227.0, 42.0], [241.0, 40.0], [254.0, 51.0], [268.0, 40.0], [262.0, 41.0], [261.0, 239.0], [275.0, 61.0], [283.0, 59.0], [278.0, 46.0], [288.0, 65.0], [300.0, 34.0], [298.0, 48.0], [317.0, 43.0], [334.0, 54.0], [323.0, 56.0], [333.0, 50.0], [344.0, 61.0], [340.0, 33.0], [346.0, 41.0], [360.0, 75.0], [354.0, 248.0], [382.0, 67.0], [368.0, 65.0], [376.0, 63.0], [454.0, 245.0], [473.0, 274.0], [501.0, 106.0], [540.0, 60.0], [530.0, 272.0], [531.0, 62.0], [536.0, 255.0], [568.0, 316.0], [574.0, 238.5], [564.0, 66.0], [607.0, 268.0], [581.0, 240.0], [592.0, 66.0], [635.0, 246.0], [639.0, 50.0], [636.0, 260.0], [617.0, 55.0], [634.0, 58.0], [615.0, 241.0], [666.0, 303.5], [655.0, 266.0], [651.0, 245.0], [671.0, 69.0], [661.0, 59.0], [684.0, 266.0], [677.0, 278.0], [672.0, 42.0], [673.0, 57.0], [682.0, 39.0], [689.0, 45.0], [693.0, 65.0], [674.0, 47.0], [728.0, 118.0], [711.0, 573.0], [707.0, 46.0], [716.0, 62.0], [757.0, 81.0], [747.0, 284.0], [748.0, 288.0], [762.0, 46.5], [752.0, 61.0], [778.0, 71.0], [812.0, 65.0], [828.0, 65.0], [831.0, 64.0], [826.0, 407.5], [803.0, 400.0], [836.0, 286.0], [859.0, 307.0], [871.0, 62.0], [872.0, 70.0], [879.0, 358.0], [927.0, 63.0], [919.0, 404.0], [957.0, 106.0], [937.0, 98.0], [953.0, 63.0], [946.0, 70.0], [958.0, 67.0], [949.0, 64.0], [985.0, 65.0], [977.0, 60.0], [972.0, 66.0], [971.0, 67.0], [973.0, 65.0], [974.0, 66.0], [969.0, 67.0], [968.0, 63.0], [970.0, 67.0], [987.0, 65.0], [988.0, 65.0], [986.0, 68.0], [983.0, 66.0], [982.0, 67.0], [981.0, 66.0], [980.0, 63.0], [978.0, 66.0], [979.0, 62.0], [989.0, 66.0], [966.0, 81.5], [965.0, 63.0], [967.0, 67.0], [984.0, 66.0], [963.0, 63.0], [962.0, 66.0], [960.0, 68.0], [961.0, 64.0], [964.0, 67.0], [975.0, 63.0], [991.0, 67.0], [990.0, 66.0], [976.0, 63.0], [995.0, 65.0], [1022.0, 67.0], [1009.0, 64.0], [1010.0, 67.0], [1023.0, 66.0], [1008.0, 67.0], [994.0, 68.0], [1019.0, 68.0], [1018.0, 65.0], [1021.0, 67.0], [1020.0, 67.0], [996.0, 68.0], [997.0, 66.0], [998.0, 66.0], [1016.0, 66.0], [999.0, 67.0], [1017.0, 66.0], [1002.0, 64.0], [1013.0, 63.0], [1014.0, 65.0], [1015.0, 65.0], [1012.0, 65.0], [1011.0, 64.0], [993.0, 65.0], [1006.0, 65.0], [1007.0, 67.0], [992.0, 65.0], [1005.0, 65.0], [1004.0, 67.0], [1003.0, 64.0], [1000.0, 66.0], [1001.0, 65.0], [1030.0, 65.0], [1031.0, 61.0], [1033.0, 66.0], [1035.0, 64.0], [1037.0, 68.0], [1036.0, 63.0], [1034.0, 70.0], [1024.0, 71.0], [1045.0, 69.0], [1054.0, 42.0], [1084.0, 69.0], [1039.0, 67.0], [1060.0, 63.0], [1062.0, 52.0], [1025.0, 69.0], [1038.0, 76.0], [1027.0, 65.0], [1028.0, 66.0], [1029.0, 64.0], [1041.0, 65.0], [1043.0, 67.0], [1044.0, 363.5], [1026.0, 66.0], [1098.0, 428.5], [1109.0, 346.0], [1117.0, 313.0], [1127.0, 61.0], [1148.0, 63.0], [1229.0, 183.0], [1217.0, 314.0], [1249.0, 94.0], [1256.0, 281.0], [1266.0, 411.5], [1257.0, 76.0], [1236.0, 66.0], [1297.0, 79.0], [1304.0, 395.0], [1294.0, 43.0], [1404.0, 1066.5], [1406.0, 86.0], [1365.0, 1069.0], [1385.0, 93.0], [1392.0, 474.0], [1393.0, 389.0], [1457.0, 97.0], [1449.0, 345.0], [1462.0, 377.0], [1431.0, 98.0], [1418.0, 429.0], [1490.0, 73.0], [1477.0, 562.0], [1528.0, 97.0], [1514.0, 462.0], [1550.0, 108.0], [1596.0, 175.5], [1569.0, 555.0], [1560.0, 176.0], [1588.0, 114.0], [1558.0, 128.0], [1545.0, 493.0], [1541.0, 459.0], [1579.0, 572.0], [1593.0, 493.0], [1619.0, 198.0], [1641.0, 982.0], [1662.0, 150.0], [1634.0, 198.0], [1629.0, 266.0], [1687.0, 222.0], [1707.0, 246.0], [1778.0, 353.0], [1773.0, 389.0], [1751.0, 337.0], [1758.0, 483.0], [1776.0, 288.5], [1742.0, 259.0], [1753.0, 260.0], [1775.0, 281.0], [1781.0, 1039.0], [1800.0, 1135.0], [1836.0, 97.0], [1833.0, 540.0], [1824.0, 517.0], [1854.0, 533.0], [1851.0, 714.0], [1797.0, 1077.0], [1799.0, 349.0], [1795.0, 1101.0], [1794.0, 286.0], [1822.0, 533.0], [1846.0, 560.0], [1844.0, 574.0], [1849.0, 513.0], [1803.0, 502.0], [1802.0, 348.0], [1812.0, 309.5], [1813.0, 311.0], [1889.0, 496.0], [1899.0, 613.0], [1913.0, 499.0], [1914.0, 503.5], [1884.0, 531.5], [1908.0, 554.0], [1877.0, 401.0], [1860.0, 541.0], [1912.0, 586.0], [1890.0, 550.0], [1894.0, 493.0], [1927.0, 464.0], [1979.0, 896.0], [1939.0, 868.0], [1944.0, 743.5], [1952.0, 528.0], [1942.0, 546.0], [1923.0, 549.0], [1967.0, 505.0], [1961.0, 255.0], [1920.0, 509.0], [2018.0, 468.0], [2047.0, 775.0], [2030.0, 861.0], [2151.0, 869.0], [2125.0, 645.0], [2114.0, 125.0], [2156.0, 873.0], [2157.0, 826.0], [2130.0, 602.0], [2132.0, 947.0], [2134.0, 565.0], [2065.0, 558.0], [2141.0, 577.0], [2058.0, 984.0], [2092.0, 1071.5], [2053.0, 837.0], [2100.0, 658.0], [2088.0, 829.5], [2080.0, 491.5], [2188.0, 797.0], [2231.0, 751.0], [2209.0, 673.0], [2178.0, 803.0], [2177.0, 671.0], [2212.0, 592.0], [2219.0, 900.0], [2292.0, 861.0], [2280.0, 838.5], [2286.0, 798.0], [2281.0, 946.0], [2203.0, 557.0], [2297.0, 873.0], [2301.0, 838.0], [2245.0, 846.0], [2266.0, 650.0], [2268.0, 624.0], [2253.0, 807.0], [2249.0, 617.0], [2259.0, 819.0], [2187.0, 705.0], [2180.0, 926.0], [2248.0, 965.0], [2335.0, 786.0], [2384.0, 758.0], [2395.0, 800.0], [2396.0, 777.0], [2377.0, 776.0], [2314.0, 740.0], [2356.0, 762.0], [2351.0, 879.0], [2350.0, 728.5], [2355.0, 737.0], [2347.0, 832.0], [2341.0, 889.0], [2312.0, 903.0], [2359.0, 763.0], [2362.0, 875.0], [2325.0, 861.0], [2333.0, 854.0], [2321.0, 699.0], [2400.0, 817.0], [2410.0, 758.0], [2409.0, 728.0], [2414.0, 820.0], [2428.0, 813.0], [2429.0, 779.0], [2430.0, 777.0], [2418.0, 817.0], [2479.0, 801.0], [2438.0, 860.0], [2444.0, 801.0], [2464.0, 783.0], [2442.0, 776.0], [2520.0, 770.0], [2571.0, 712.0], [2589.0, 800.0], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2589.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 464.96666666666664, "minX": 1.6333152E12, "maxY": 1034.3666666666666, "series": [{"data": [[1.63331556E12, 1034.3666666666666], [1.63331526E12, 1019.25], [1.6333152E12, 582.9666666666667], [1.63331586E12, 993.2], [1.63331532E12, 995.6333333333333], [1.63331598E12, 999.2166666666667], [1.63331592E12, 999.4333333333333], [1.63331562E12, 974.8666666666667], [1.63331604E12, 963.7], [1.63331574E12, 998.8833333333333], [1.63331568E12, 1022.0166666666667], [1.63331538E12, 998.2166666666667], [1.6333158E12, 999.6833333333333], [1.6333155E12, 981.75], [1.63331544E12, 973.85], [1.6333161E12, 464.96666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6333161E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 464.96666666666664, "minX": 1.6333152E12, "maxY": 1033.4833333333333, "series": [{"data": [[1.63331556E12, 1033.4833333333333], [1.63331526E12, 1019.3333333333334], [1.6333152E12, 582.0833333333334], [1.63331586E12, 993.7833333333333], [1.63331532E12, 976.45], [1.63331598E12, 999.0166666666667], [1.63331592E12, 999.05], [1.63331562E12, 975.75], [1.63331604E12, 965.3], [1.63331574E12, 998.9], [1.63331568E12, 1021.2], [1.63331538E12, 1009.9666666666667], [1.6333158E12, 998.8833333333333], [1.6333155E12, 981.75], [1.63331544E12, 982.0833333333334], [1.6333161E12, 464.96666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6333161E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 464.96666666666664, "minX": 1.6333152E12, "maxY": 1033.4833333333333, "series": [{"data": [[1.63331556E12, 1033.4833333333333], [1.63331526E12, 1019.3333333333334], [1.6333152E12, 582.0833333333334], [1.63331586E12, 993.7833333333333], [1.63331532E12, 976.45], [1.63331598E12, 999.0166666666667], [1.63331592E12, 999.05], [1.63331562E12, 975.75], [1.63331604E12, 965.3], [1.63331574E12, 998.9], [1.63331568E12, 1021.2], [1.63331538E12, 1009.9666666666667], [1.6333158E12, 998.8833333333333], [1.6333155E12, 981.75], [1.63331544E12, 982.0833333333334], [1.6333161E12, 464.96666666666664]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6333161E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 464.96666666666664, "minX": 1.6333152E12, "maxY": 1033.4833333333333, "series": [{"data": [[1.63331556E12, 1033.4833333333333], [1.63331526E12, 1019.3333333333334], [1.6333152E12, 582.0833333333334], [1.63331586E12, 993.7833333333333], [1.63331532E12, 976.45], [1.63331598E12, 999.0166666666667], [1.63331592E12, 999.05], [1.63331562E12, 975.75], [1.63331604E12, 965.3], [1.63331574E12, 998.9], [1.63331568E12, 1021.2], [1.63331538E12, 1009.9666666666667], [1.6333158E12, 998.8833333333333], [1.6333155E12, 981.75], [1.63331544E12, 982.0833333333334], [1.6333161E12, 464.96666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6333161E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

