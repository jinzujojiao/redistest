/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 16415.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 12.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 12.0], [9.1, 12.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 12.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 13.0], [12.8, 13.0], [12.9, 13.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 16.0], [18.9, 16.0], [19.0, 16.0], [19.1, 16.0], [19.2, 16.0], [19.3, 16.0], [19.4, 16.0], [19.5, 16.0], [19.6, 16.0], [19.7, 16.0], [19.8, 16.0], [19.9, 16.0], [20.0, 16.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 17.0], [21.3, 17.0], [21.4, 17.0], [21.5, 17.0], [21.6, 17.0], [21.7, 17.0], [21.8, 17.0], [21.9, 17.0], [22.0, 17.0], [22.1, 17.0], [22.2, 17.0], [22.3, 17.0], [22.4, 17.0], [22.5, 17.0], [22.6, 17.0], [22.7, 18.0], [22.8, 18.0], [22.9, 18.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 18.0], [23.7, 18.0], [23.8, 18.0], [23.9, 18.0], [24.0, 18.0], [24.1, 18.0], [24.2, 18.0], [24.3, 18.0], [24.4, 18.0], [24.5, 18.0], [24.6, 18.0], [24.7, 18.0], [24.8, 18.0], [24.9, 18.0], [25.0, 18.0], [25.1, 18.0], [25.2, 18.0], [25.3, 19.0], [25.4, 19.0], [25.5, 19.0], [25.6, 19.0], [25.7, 19.0], [25.8, 19.0], [25.9, 19.0], [26.0, 19.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 19.0], [26.5, 19.0], [26.6, 19.0], [26.7, 19.0], [26.8, 19.0], [26.9, 19.0], [27.0, 19.0], [27.1, 19.0], [27.2, 19.0], [27.3, 19.0], [27.4, 19.0], [27.5, 19.0], [27.6, 19.0], [27.7, 19.0], [27.8, 19.0], [27.9, 20.0], [28.0, 20.0], [28.1, 20.0], [28.2, 20.0], [28.3, 20.0], [28.4, 20.0], [28.5, 20.0], [28.6, 20.0], [28.7, 20.0], [28.8, 20.0], [28.9, 20.0], [29.0, 20.0], [29.1, 20.0], [29.2, 20.0], [29.3, 20.0], [29.4, 20.0], [29.5, 20.0], [29.6, 20.0], [29.7, 20.0], [29.8, 20.0], [29.9, 20.0], [30.0, 20.0], [30.1, 20.0], [30.2, 20.0], [30.3, 20.0], [30.4, 20.0], [30.5, 20.0], [30.6, 20.0], [30.7, 21.0], [30.8, 21.0], [30.9, 21.0], [31.0, 21.0], [31.1, 21.0], [31.2, 21.0], [31.3, 21.0], [31.4, 21.0], [31.5, 21.0], [31.6, 21.0], [31.7, 21.0], [31.8, 21.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 21.0], [32.8, 21.0], [32.9, 21.0], [33.0, 21.0], [33.1, 21.0], [33.2, 21.0], [33.3, 21.0], [33.4, 21.0], [33.5, 22.0], [33.6, 22.0], [33.7, 22.0], [33.8, 22.0], [33.9, 22.0], [34.0, 22.0], [34.1, 22.0], [34.2, 22.0], [34.3, 22.0], [34.4, 22.0], [34.5, 22.0], [34.6, 22.0], [34.7, 22.0], [34.8, 22.0], [34.9, 22.0], [35.0, 22.0], [35.1, 22.0], [35.2, 22.0], [35.3, 22.0], [35.4, 22.0], [35.5, 22.0], [35.6, 22.0], [35.7, 22.0], [35.8, 22.0], [35.9, 22.0], [36.0, 22.0], [36.1, 22.0], [36.2, 22.0], [36.3, 23.0], [36.4, 23.0], [36.5, 23.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 23.0], [37.6, 23.0], [37.7, 23.0], [37.8, 23.0], [37.9, 23.0], [38.0, 23.0], [38.1, 23.0], [38.2, 23.0], [38.3, 23.0], [38.4, 23.0], [38.5, 23.0], [38.6, 23.0], [38.7, 23.0], [38.8, 23.0], [38.9, 23.0], [39.0, 23.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 25.0], [42.0, 25.0], [42.1, 25.0], [42.2, 25.0], [42.3, 25.0], [42.4, 25.0], [42.5, 25.0], [42.6, 25.0], [42.7, 25.0], [42.8, 25.0], [42.9, 25.0], [43.0, 25.0], [43.1, 25.0], [43.2, 25.0], [43.3, 25.0], [43.4, 25.0], [43.5, 25.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 26.0], [44.8, 26.0], [44.9, 26.0], [45.0, 26.0], [45.1, 26.0], [45.2, 26.0], [45.3, 26.0], [45.4, 26.0], [45.5, 26.0], [45.6, 26.0], [45.7, 26.0], [45.8, 26.0], [45.9, 26.0], [46.0, 26.0], [46.1, 26.0], [46.2, 26.0], [46.3, 26.0], [46.4, 26.0], [46.5, 26.0], [46.6, 26.0], [46.7, 26.0], [46.8, 26.0], [46.9, 26.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 27.0], [47.5, 27.0], [47.6, 27.0], [47.7, 27.0], [47.8, 27.0], [47.9, 27.0], [48.0, 27.0], [48.1, 27.0], [48.2, 27.0], [48.3, 27.0], [48.4, 27.0], [48.5, 27.0], [48.6, 27.0], [48.7, 27.0], [48.8, 27.0], [48.9, 27.0], [49.0, 27.0], [49.1, 27.0], [49.2, 27.0], [49.3, 27.0], [49.4, 27.0], [49.5, 27.0], [49.6, 27.0], [49.7, 27.0], [49.8, 27.0], [49.9, 27.0], [50.0, 27.0], [50.1, 28.0], [50.2, 28.0], [50.3, 28.0], [50.4, 28.0], [50.5, 28.0], [50.6, 28.0], [50.7, 28.0], [50.8, 28.0], [50.9, 28.0], [51.0, 28.0], [51.1, 28.0], [51.2, 28.0], [51.3, 28.0], [51.4, 28.0], [51.5, 28.0], [51.6, 28.0], [51.7, 28.0], [51.8, 28.0], [51.9, 28.0], [52.0, 28.0], [52.1, 28.0], [52.2, 28.0], [52.3, 28.0], [52.4, 28.0], [52.5, 28.0], [52.6, 29.0], [52.7, 29.0], [52.8, 29.0], [52.9, 29.0], [53.0, 29.0], [53.1, 29.0], [53.2, 29.0], [53.3, 29.0], [53.4, 29.0], [53.5, 29.0], [53.6, 29.0], [53.7, 29.0], [53.8, 29.0], [53.9, 29.0], [54.0, 29.0], [54.1, 29.0], [54.2, 29.0], [54.3, 29.0], [54.4, 29.0], [54.5, 29.0], [54.6, 29.0], [54.7, 29.0], [54.8, 29.0], [54.9, 29.0], [55.0, 29.0], [55.1, 30.0], [55.2, 30.0], [55.3, 30.0], [55.4, 30.0], [55.5, 30.0], [55.6, 30.0], [55.7, 30.0], [55.8, 30.0], [55.9, 30.0], [56.0, 30.0], [56.1, 30.0], [56.2, 30.0], [56.3, 30.0], [56.4, 30.0], [56.5, 30.0], [56.6, 30.0], [56.7, 30.0], [56.8, 30.0], [56.9, 30.0], [57.0, 30.0], [57.1, 30.0], [57.2, 30.0], [57.3, 31.0], [57.4, 31.0], [57.5, 31.0], [57.6, 31.0], [57.7, 31.0], [57.8, 31.0], [57.9, 31.0], [58.0, 31.0], [58.1, 31.0], [58.2, 31.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 32.0], [59.5, 32.0], [59.6, 32.0], [59.7, 32.0], [59.8, 32.0], [59.9, 32.0], [60.0, 32.0], [60.1, 32.0], [60.2, 32.0], [60.3, 32.0], [60.4, 32.0], [60.5, 32.0], [60.6, 32.0], [60.7, 32.0], [60.8, 32.0], [60.9, 32.0], [61.0, 32.0], [61.1, 32.0], [61.2, 32.0], [61.3, 33.0], [61.4, 33.0], [61.5, 33.0], [61.6, 33.0], [61.7, 33.0], [61.8, 33.0], [61.9, 33.0], [62.0, 33.0], [62.1, 33.0], [62.2, 33.0], [62.3, 33.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 34.0], [63.0, 34.0], [63.1, 34.0], [63.2, 34.0], [63.3, 34.0], [63.4, 34.0], [63.5, 34.0], [63.6, 34.0], [63.7, 34.0], [63.8, 34.0], [63.9, 34.0], [64.0, 34.0], [64.1, 34.0], [64.2, 34.0], [64.3, 34.0], [64.4, 35.0], [64.5, 35.0], [64.6, 35.0], [64.7, 35.0], [64.8, 35.0], [64.9, 35.0], [65.0, 35.0], [65.1, 35.0], [65.2, 35.0], [65.3, 35.0], [65.4, 35.0], [65.5, 35.0], [65.6, 36.0], [65.7, 36.0], [65.8, 36.0], [65.9, 36.0], [66.0, 36.0], [66.1, 36.0], [66.2, 36.0], [66.3, 36.0], [66.4, 36.0], [66.5, 36.0], [66.6, 37.0], [66.7, 37.0], [66.8, 37.0], [66.9, 37.0], [67.0, 37.0], [67.1, 37.0], [67.2, 37.0], [67.3, 37.0], [67.4, 38.0], [67.5, 38.0], [67.6, 38.0], [67.7, 38.0], [67.8, 38.0], [67.9, 38.0], [68.0, 39.0], [68.1, 39.0], [68.2, 39.0], [68.3, 39.0], [68.4, 39.0], [68.5, 40.0], [68.6, 40.0], [68.7, 40.0], [68.8, 40.0], [68.9, 41.0], [69.0, 41.0], [69.1, 41.0], [69.2, 42.0], [69.3, 42.0], [69.4, 43.0], [69.5, 43.0], [69.6, 44.0], [69.7, 45.0], [69.8, 45.0], [69.9, 46.0], [70.0, 48.0], [70.1, 49.0], [70.2, 50.0], [70.3, 52.0], [70.4, 53.0], [70.5, 54.0], [70.6, 56.0], [70.7, 57.0], [70.8, 59.0], [70.9, 60.0], [71.0, 62.0], [71.1, 63.0], [71.2, 65.0], [71.3, 66.0], [71.4, 68.0], [71.5, 69.0], [71.6, 71.0], [71.7, 72.0], [71.8, 74.0], [71.9, 75.0], [72.0, 77.0], [72.1, 78.0], [72.2, 80.0], [72.3, 81.0], [72.4, 83.0], [72.5, 84.0], [72.6, 86.0], [72.7, 87.0], [72.8, 89.0], [72.9, 90.0], [73.0, 92.0], [73.1, 93.0], [73.2, 95.0], [73.3, 96.0], [73.4, 97.0], [73.5, 99.0], [73.6, 100.0], [73.7, 102.0], [73.8, 104.0], [73.9, 106.0], [74.0, 107.0], [74.1, 109.0], [74.2, 110.0], [74.3, 112.0], [74.4, 113.0], [74.5, 115.0], [74.6, 116.0], [74.7, 117.0], [74.8, 119.0], [74.9, 120.0], [75.0, 122.0], [75.1, 123.0], [75.2, 124.0], [75.3, 126.0], [75.4, 127.0], [75.5, 128.0], [75.6, 129.0], [75.7, 131.0], [75.8, 132.0], [75.9, 133.0], [76.0, 134.0], [76.1, 135.0], [76.2, 137.0], [76.3, 138.0], [76.4, 139.0], [76.5, 140.0], [76.6, 141.0], [76.7, 142.0], [76.8, 143.0], [76.9, 144.0], [77.0, 146.0], [77.1, 147.0], [77.2, 148.0], [77.3, 149.0], [77.4, 150.0], [77.5, 151.0], [77.6, 152.0], [77.7, 154.0], [77.8, 155.0], [77.9, 156.0], [78.0, 157.0], [78.1, 158.0], [78.2, 159.0], [78.3, 160.0], [78.4, 161.0], [78.5, 162.0], [78.6, 164.0], [78.7, 165.0], [78.8, 166.0], [78.9, 167.0], [79.0, 168.0], [79.1, 169.0], [79.2, 170.0], [79.3, 171.0], [79.4, 172.0], [79.5, 173.0], [79.6, 174.0], [79.7, 176.0], [79.8, 177.0], [79.9, 178.0], [80.0, 179.0], [80.1, 180.0], [80.2, 181.0], [80.3, 182.0], [80.4, 183.0], [80.5, 184.0], [80.6, 186.0], [80.7, 187.0], [80.8, 188.0], [80.9, 189.0], [81.0, 190.0], [81.1, 191.0], [81.2, 192.0], [81.3, 193.0], [81.4, 194.0], [81.5, 195.0], [81.6, 197.0], [81.7, 198.0], [81.8, 199.0], [81.9, 200.0], [82.0, 201.0], [82.1, 202.0], [82.2, 203.0], [82.3, 204.0], [82.4, 205.0], [82.5, 206.0], [82.6, 207.0], [82.7, 208.0], [82.8, 209.0], [82.9, 210.0], [83.0, 211.0], [83.1, 212.0], [83.2, 213.0], [83.3, 214.0], [83.4, 215.0], [83.5, 216.0], [83.6, 217.0], [83.7, 218.0], [83.8, 219.0], [83.9, 220.0], [84.0, 221.0], [84.1, 223.0], [84.2, 224.0], [84.3, 225.0], [84.4, 226.0], [84.5, 227.0], [84.6, 228.0], [84.7, 229.0], [84.8, 230.0], [84.9, 231.0], [85.0, 232.0], [85.1, 233.0], [85.2, 234.0], [85.3, 235.0], [85.4, 236.0], [85.5, 238.0], [85.6, 239.0], [85.7, 240.0], [85.8, 241.0], [85.9, 242.0], [86.0, 243.0], [86.1, 244.0], [86.2, 245.0], [86.3, 246.0], [86.4, 247.0], [86.5, 249.0], [86.6, 250.0], [86.7, 251.0], [86.8, 252.0], [86.9, 254.0], [87.0, 255.0], [87.1, 256.0], [87.2, 257.0], [87.3, 258.0], [87.4, 260.0], [87.5, 261.0], [87.6, 262.0], [87.7, 263.0], [87.8, 264.0], [87.9, 266.0], [88.0, 267.0], [88.1, 268.0], [88.2, 269.0], [88.3, 270.0], [88.4, 271.0], [88.5, 272.0], [88.6, 274.0], [88.7, 275.0], [88.8, 276.0], [88.9, 277.0], [89.0, 278.0], [89.1, 280.0], [89.2, 281.0], [89.3, 282.0], [89.4, 283.0], [89.5, 284.0], [89.6, 285.0], [89.7, 287.0], [89.8, 288.0], [89.9, 289.0], [90.0, 291.0], [90.1, 292.0], [90.2, 294.0], [90.3, 295.0], [90.4, 297.0], [90.5, 298.0], [90.6, 299.0], [90.7, 301.0], [90.8, 302.0], [90.9, 304.0], [91.0, 305.0], [91.1, 306.0], [91.2, 308.0], [91.3, 309.0], [91.4, 310.0], [91.5, 312.0], [91.6, 313.0], [91.7, 314.0], [91.8, 316.0], [91.9, 317.0], [92.0, 318.0], [92.1, 320.0], [92.2, 321.0], [92.3, 323.0], [92.4, 324.0], [92.5, 325.0], [92.6, 327.0], [92.7, 328.0], [92.8, 330.0], [92.9, 331.0], [93.0, 332.0], [93.1, 334.0], [93.2, 335.0], [93.3, 337.0], [93.4, 338.0], [93.5, 340.0], [93.6, 341.0], [93.7, 343.0], [93.8, 344.0], [93.9, 346.0], [94.0, 347.0], [94.1, 348.0], [94.2, 350.0], [94.3, 351.0], [94.4, 352.0], [94.5, 354.0], [94.6, 355.0], [94.7, 357.0], [94.8, 358.0], [94.9, 360.0], [95.0, 361.0], [95.1, 363.0], [95.2, 364.0], [95.3, 366.0], [95.4, 367.0], [95.5, 368.0], [95.6, 370.0], [95.7, 371.0], [95.8, 373.0], [95.9, 374.0], [96.0, 376.0], [96.1, 377.0], [96.2, 379.0], [96.3, 380.0], [96.4, 382.0], [96.5, 383.0], [96.6, 384.0], [96.7, 386.0], [96.8, 388.0], [96.9, 389.0], [97.0, 391.0], [97.1, 393.0], [97.2, 394.0], [97.3, 396.0], [97.4, 397.0], [97.5, 399.0], [97.6, 401.0], [97.7, 403.0], [97.8, 405.0], [97.9, 407.0], [98.0, 409.0], [98.1, 411.0], [98.2, 413.0], [98.3, 415.0], [98.4, 417.0], [98.5, 420.0], [98.6, 423.0], [98.7, 426.0], [98.8, 429.0], [98.9, 432.0], [99.0, 435.0], [99.1, 438.0], [99.2, 442.0], [99.3, 447.0], [99.4, 451.0], [99.5, 457.0], [99.6, 464.0], [99.7, 473.0], [99.8, 490.0], [99.9, 543.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 660354.0, "series": [{"data": [[0.0, 660354.0], [100.0, 74889.0], [200.0, 78315.0], [300.0, 62126.0], [400.0, 20723.0], [500.0, 627.0], [600.0, 3.0], [700.0, 2.0], [800.0, 4.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 8.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 3.0], [2000.0, 1.0], [4700.0, 1.0], [5100.0, 3.0], [5000.0, 2.0], [4900.0, 1.0], [5300.0, 8.0], [5200.0, 1.0], [5400.0, 2.0], [5500.0, 2.0], [5600.0, 3.0], [5800.0, 1.0], [5700.0, 3.0], [6300.0, 8.0], [6400.0, 18.0], [6500.0, 27.0], [6600.0, 40.0], [6700.0, 36.0], [6800.0, 27.0], [6900.0, 3.0], [8100.0, 2.0], [8500.0, 1.0], [8600.0, 2.0], [8700.0, 2.0], [8200.0, 1.0], [8300.0, 1.0], [8900.0, 4.0], [9000.0, 1.0], [9200.0, 1.0], [9500.0, 16.0], [9400.0, 5.0], [9600.0, 10.0], [9700.0, 14.0], [9800.0, 11.0], [10000.0, 4.0], [10100.0, 2.0], [9900.0, 17.0], [10200.0, 3.0], [10600.0, 2.0], [10300.0, 1.0], [11300.0, 1.0], [12300.0, 2.0], [12600.0, 2.0], [12500.0, 1.0], [13200.0, 6.0], [12900.0, 3.0], [13300.0, 1.0], [13100.0, 1.0], [12800.0, 2.0], [13500.0, 3.0], [13600.0, 3.0], [13700.0, 3.0], [13800.0, 3.0], [13400.0, 1.0], [14300.0, 1.0], [14200.0, 1.0], [13900.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [14400.0, 4.0], [14700.0, 19.0], [14800.0, 26.0], [14500.0, 4.0], [14600.0, 3.0], [14900.0, 15.0], [15000.0, 12.0], [15300.0, 5.0], [15100.0, 7.0], [15200.0, 1.0], [15700.0, 30.0], [15800.0, 35.0], [15600.0, 25.0], [15400.0, 15.0], [15500.0, 22.0], [15900.0, 83.0], [16000.0, 95.0], [16100.0, 55.0], [16200.0, 38.0], [16300.0, 29.0], [16400.0, 5.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 601.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 896450.0, "series": [{"data": [[0.0, 896450.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 601.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 294.34144968332134, "minX": 1.63353636E12, "maxY": 1200.0, "series": [{"data": [[1.63353648E12, 1200.0], [1.63353714E12, 1200.0], [1.63353654E12, 1200.0], [1.63353684E12, 1200.0], [1.6335372E12, 1111.7013689799633], [1.6335369E12, 1200.0], [1.6335366E12, 1200.0], [1.63353726E12, 294.34144968332134], [1.63353666E12, 1200.0], [1.63353696E12, 1200.0], [1.63353636E12, 1192.1362632588996], [1.63353702E12, 1200.0], [1.63353642E12, 1200.0], [1.63353672E12, 1200.0], [1.63353708E12, 1200.0], [1.63353678E12, 1200.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353726E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 18.0, "maxY": 16278.5, "series": [{"data": [[18.0, 9.833333333333332], [39.0, 13.200000000000003], [56.0, 20.08823529411765], [69.0, 16.133333333333336], [86.0, 15.710526315789476], [96.0, 16.433333333333334], [113.0, 16.051282051282055], [122.0, 17.366666666666664], [138.0, 14.806451612903226], [155.0, 17.124999999999996], [171.0, 20.2], [179.0, 59.87150837988826], [201.0, 15.31746031746031], [204.0, 18.068181818181824], [215.0, 21.755555555555556], [208.0, 16.70731707317073], [222.0, 21.648936170212764], [221.0, 18.895833333333332], [219.0, 21.331932773109255], [218.0, 23.21276595744681], [231.0, 22.74839743589742], [229.0, 20.382978723404253], [228.0, 20.851063829787233], [227.0, 21.292887029288703], [225.0, 21.857142857142854], [224.0, 18.648275862068967], [239.0, 15.852941176470587], [233.0, 17.97619047619047], [232.0, 18.71428571428571], [253.0, 19.6875], [269.0, 13.75], [285.0, 19.578947368421055], [295.0, 16.714285714285715], [318.0, 15.533333333333337], [314.0, 16.204545454545453], [308.0, 18.90476190476191], [335.0, 18.500000000000007], [334.0, 18.91489361702128], [331.0, 22.42222222222222], [330.0, 19.25263157894737], [327.0, 21.17391304347826], [326.0, 20.723404255319153], [323.0, 17.44444444444445], [321.0, 26.217391304347824], [350.0, 22.67015706806283], [351.0, 19.409090909090907], [349.0, 22.285403050108922], [348.0, 40.82839632277834], [347.0, 23.210526315789473], [346.0, 20.392670157068068], [344.0, 23.357638888888875], [342.0, 19.357894736842102], [339.0, 21.91489361702128], [337.0, 23.499999999999996], [341.0, 21.216783216783213], [340.0, 19.553191489361698], [366.0, 17.244444444444444], [365.0, 19.553191489361705], [361.0, 15.863636363636363], [359.0, 24.043478260869566], [355.0, 17.704545454545453], [382.0, 16.525], [377.0, 18.954545454545457], [375.0, 20.612834224598956], [374.0, 21.062500000000004], [369.0, 18.604651162790702], [390.0, 18.388888888888893], [402.0, 16.12121212121212], [429.0, 18.272727272727273], [418.0, 13.837837837837839], [445.0, 12.633333333333335], [463.0, 19.25641025641026], [472.0, 14.645161290322577], [489.0, 16.324324324324323], [511.0, 17.57894736842106], [500.0, 22.648648648648656], [540.0, 16.666666666666668], [538.0, 65.59311740890683], [532.0, 15.19047619047619], [521.0, 14.81081081081081], [639.0, 20.90756302521009], [638.0, 25.79020979020979], [636.0, 25.52112676056338], [635.0, 20.576623376623385], [634.0, 21.827526132404174], [633.0, 21.874564459930298], [631.0, 21.460000000000004], [632.0, 21.12565445026178], [655.0, 20.58035714285713], [662.0, 16.351351351351354], [657.0, 23.3324607329843], [656.0, 25.094736842105256], [654.0, 23.851063829787236], [653.0, 21.638297872340434], [651.0, 22.468085106382976], [648.0, 17.999999999999996], [646.0, 20.908450704225352], [645.0, 24.68085106382979], [644.0, 23.170212765957444], [642.0, 24.217391304347828], [641.0, 18.829787234042556], [686.0, 14.760000000000002], [673.0, 16.057142857142857], [709.0, 12.200000000000001], [750.0, 135.31756756756758], [752.0, 124.0], [759.0, 122.0], [764.0, 122.0], [754.0, 123.0], [746.0, 38.479452054794514], [748.0, 95.5], [737.0, 21.282051282051285], [795.0, 58.36170212765958], [781.0, 80.5], [783.0, 80.0], [778.0, 81.0], [769.0, 104.17307692307689], [794.0, 79.0], [779.0, 81.0], [816.0, 31.05405405405406], [824.0, 26.0], [825.0, 26.0], [821.0, 27.0], [828.0, 24.0], [820.0, 26.5], [822.0, 28.0], [819.0, 26.0], [804.0, 40.0], [805.0, 40.0], [835.0, 24.0], [852.0, 12.25], [857.0, 10.6], [849.0, 15.0], [854.0, 12.0], [844.0, 20.0], [846.0, 16.333333333333332], [845.0, 18.0], [834.0, 23.0], [841.0, 21.0], [984.0, 14473.769230769232], [972.0, 9128.093749999998], [967.0, 14237.873015873016], [986.0, 16278.5], [991.0, 9995.75], [989.0, 11374.0], [988.0, 16196.0], [987.0, 16255.0], [985.0, 16263.0], [968.0, 4900.0], [969.0, 882.6363636363636], [970.0, 3260.6000000000004], [971.0, 8504.692307692309], [973.0, 13084.041509433962], [975.0, 16078.0], [976.0, 13320.034482758621], [977.0, 10728.0], [978.0, 11897.649659863951], [981.0, 11006.538461538461], [980.0, 9611.0], [979.0, 5535.0], [994.0, 11758.75], [993.0, 11093.333333333334], [996.0, 10949.263157894737], [997.0, 10002.333333333334], [995.0, 8113.333333333334], [992.0, 6785.0], [998.0, 10982.561403508775], [999.0, 2161.026022304832], [1016.0, 82.5], [1009.0, 209.0], [1010.0, 96.0], [1017.0, 190.0], [1022.0, 96.0], [1023.0, 290.0], [1013.0, 112.16666666666664], [1014.0, 56.5], [1012.0, 209.0], [1011.0, 188.4], [1000.0, 73.76923076923077], [1001.0, 82.37500000000003], [1003.0, 86.46153846153848], [1005.0, 120.30624999999996], [1006.0, 103.0], [1002.0, 160.0], [1056.0, 213.0], [1051.0, 212.47058823529414], [1028.0, 134.0], [1035.0, 201.0], [1074.0, 242.11111111111111], [1072.0, 241.66666666666666], [1076.0, 245.75], [1077.0, 253.5], [1081.0, 254.29166666666669], [1082.0, 257.5], [1083.0, 261.9090909090909], [1084.0, 265.3333333333333], [1086.0, 267.13513513513516], [1087.0, 270.0588235294118], [1085.0, 272.0], [1079.0, 259.125], [1075.0, 245.8], [1058.0, 214.22222222222226], [1059.0, 246.60000000000005], [1060.0, 215.0], [1061.0, 214.33333333333334], [1063.0, 220.9166666666667], [1064.0, 225.09523809523807], [1065.0, 225.4], [1068.0, 230.27272727272728], [1071.0, 245.69230769230768], [1070.0, 233.66666666666666], [1066.0, 232.66666666666666], [1057.0, 211.16666666666669], [1040.0, 198.75], [1048.0, 247.5], [1050.0, 198.5], [1053.0, 240.57142857142858], [1054.0, 216.0], [1055.0, 225.00000000000003], [1096.0, 301.0], [1114.0, 265.5833333333333], [1091.0, 281.5], [1089.0, 272.7037037037037], [1088.0, 272.5], [1118.0, 230.0], [1119.0, 237.66666666666666], [1116.0, 274.09999999999997], [1115.0, 267.6666666666667], [1117.0, 265.50000000000006], [1112.0, 259.1333333333333], [1113.0, 265.5], [1109.0, 297.69999999999993], [1111.0, 280.5], [1108.0, 290.7741935483871], [1107.0, 305.6666666666667], [1104.0, 325.54761904761904], [1105.0, 325.0], [1106.0, 314.0], [1090.0, 280.4], [1093.0, 287.9130434782609], [1092.0, 283.75], [1094.0, 295.375], [1097.0, 305.2872340425533], [1100.0, 312.77777777777777], [1101.0, 313.0], [1138.0, 148.83333333333334], [1136.0, 173.28571428571428], [1141.0, 19.69320066334992], [1140.0, 149.33333333333334], [1139.0, 146.8], [1142.0, 137.42857142857142], [1143.0, 123.65217391304348], [1144.0, 124.83333333333333], [1146.0, 110.81249999999999], [1145.0, 128.66666666666666], [1148.0, 87.25000000000003], [1147.0, 86.66666666666667], [1151.0, 32.17460317460317], [1150.0, 59.625], [1120.0, 231.40625000000003], [1122.0, 223.03125000000003], [1124.0, 206.75000000000003], [1126.0, 211.00000000000003], [1127.0, 224.5], [1132.0, 206.3181818181818], [1134.0, 183.69999999999996], [1135.0, 189.33333333333331], [1133.0, 181.25], [1123.0, 202.33333333333334], [1121.0, 230.33333333333334], [1200.0, 87.79554364908961], [1194.0, 34.9], [1195.0, 37.5], [1196.0, 18.043478260869566], [1197.0, 39.57142857142856], [1198.0, 17.56862745098039], [1199.0, 50.0], [1193.0, 20.25], [1192.0, 20.232558139534888], [1190.0, 21.0], [1191.0, 22.5], [1185.0, 12.0], [1186.0, 18.0], [1189.0, 18.0], [1183.0, 7.0], [1152.0, 53.0], [1154.0, 19.0], [1160.0, 42.0], [1156.0, 40.340206185567006], [1157.0, 28.333333333333332], [1165.0, 92.1639344262295], [1162.0, 43.73913043478261], [1163.0, 44.666666666666664], [1161.0, 37.62962962962962], [1166.0, 20.333333333333332], [1167.0, 17.5], [1181.0, 21.0], [1178.0, 17.0], [1175.0, 33.18181818181819], [1171.0, 26.2], [1173.0, 29.0], [1172.0, 29.0], [1174.0, 29.0], [1170.0, 22.444444444444443], [1169.0, 14.666666666666668], [1168.0, 7.0], [1176.0, 19.0], [1180.0, 22.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[1186.5530782252326, 99.13667698681238]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19775.583333333332, "minX": 1.63353636E12, "maxY": 8063486.6, "series": [{"data": [[1.63353648E12, 7974420.4], [1.63353714E12, 8001180.2], [1.63353654E12, 7970027.0], [1.63353684E12, 7944731.666666667], [1.6335372E12, 7848076.866666666], [1.6335369E12, 7962571.533333333], [1.6335366E12, 7831302.066666666], [1.63353726E12, 945912.3333333334], [1.63353666E12, 8063486.6], [1.63353696E12, 7965899.866666666], [1.63353636E12, 7355084.133333334], [1.63353702E12, 7825177.933333334], [1.63353642E12, 7956048.0], [1.63353672E12, 7967497.466666667], [1.63353708E12, 7956713.666666667], [1.63353678E12, 7974952.933333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63353648E12, 166716.1], [1.63353714E12, 167275.55], [1.63353654E12, 166624.25], [1.63353684E12, 166095.41666666666], [1.6335372E12, 164074.71666666667], [1.6335369E12, 166468.38333333333], [1.6335366E12, 163724.01666666666], [1.63353726E12, 19775.583333333332], [1.63353666E12, 168578.15], [1.63353696E12, 166537.96666666667], [1.63353636E12, 152662.16666666666], [1.63353702E12, 163595.98333333334], [1.63353642E12, 165586.11666666667], [1.63353672E12, 166571.36666666667], [1.63353708E12, 166345.91666666666], [1.63353678E12, 166727.23333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353726E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.292470091484795, "minX": 1.63353636E12, "maxY": 286.20262100423133, "series": [{"data": [[1.63353648E12, 92.05152091889538], [1.63353714E12, 98.95587280986383], [1.63353654E12, 92.86210640607925], [1.63353684E12, 73.10691244239587], [1.6335372E12, 61.39525691699596], [1.6335369E12, 98.5854302864122], [1.6335366E12, 86.47576628189631], [1.63353726E12, 24.292470091484795], [1.63353666E12, 91.67361764657363], [1.63353696E12, 91.54253434502098], [1.63353636E12, 286.20262100423133], [1.63353702E12, 86.4834373989825], [1.63353642E12, 83.19352409638529], [1.63353672E12, 86.88988403569279], [1.63353708E12, 91.043185811093], [1.63353678E12, 88.84294347434157]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353726E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.161857846586862, "minX": 1.63353636E12, "maxY": 285.6398110270424, "series": [{"data": [[1.63353648E12, 91.90044742729302], [1.63353714E12, 98.80823308208097], [1.63353654E12, 92.7175645201703], [1.63353684E12, 72.94211981566822], [1.6335372E12, 61.25052163734743], [1.6335369E12, 98.43177448210129], [1.6335366E12, 86.31443482991324], [1.63353726E12, 24.161857846586862], [1.63353666E12, 91.52163719517436], [1.63353696E12, 91.40348296954842], [1.63353636E12, 285.6398110270424], [1.63353702E12, 86.34921823162087], [1.63353642E12, 83.04303882195494], [1.63353672E12, 86.74589780436403], [1.63353708E12, 90.89828494938457], [1.63353678E12, 88.70426696938299]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353726E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63353636E12, "maxY": 194.55826666183953, "series": [{"data": [[1.63353648E12, 0.3397108417643324], [1.63353714E12, 0.29286676982977755], [1.63353654E12, 0.2666332581642021], [1.63353684E12, 0.2913782991202339], [1.6335372E12, 0.23978354170554014], [1.6335369E12, 0.3684228126201733], [1.6335366E12, 0.39705557350015896], [1.63353726E12, 0.0], [1.63353666E12, 0.3041094985718303], [1.63353696E12, 0.23394725406958974], [1.63353636E12, 194.55826666183953], [1.63353702E12, 0.23589159024788817], [1.63353642E12, 0.6889223560910289], [1.63353672E12, 0.31786585569628917], [1.63353708E12, 0.2730360578934176], [1.63353678E12, 0.3253146806450527]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353726E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.63353636E12, "maxY": 16415.0, "series": [{"data": [[1.63353648E12, 514.0], [1.63353714E12, 527.0], [1.63353654E12, 547.0], [1.63353684E12, 474.0], [1.6335372E12, 405.0], [1.6335369E12, 516.0], [1.6335366E12, 489.0], [1.63353726E12, 111.0], [1.63353666E12, 490.0], [1.63353696E12, 483.0], [1.63353636E12, 16415.0], [1.63353702E12, 474.0], [1.63353642E12, 527.0], [1.63353672E12, 475.0], [1.63353708E12, 456.0], [1.63353678E12, 464.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63353648E12, 471.0], [1.63353714E12, 442.0], [1.63353654E12, 433.0], [1.63353684E12, 422.0], [1.6335372E12, 378.0], [1.6335369E12, 465.0], [1.6335366E12, 416.0], [1.63353726E12, 96.0], [1.63353666E12, 440.0], [1.63353696E12, 431.0], [1.63353636E12, 386.0], [1.63353702E12, 442.0], [1.63353642E12, 457.9900000000016], [1.63353672E12, 443.0], [1.63353708E12, 412.0], [1.63353678E12, 414.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63353648E12, 513.9984181976288], [1.63353714E12, 457.9994727325429], [1.63353654E12, 464.0], [1.63353684E12, 474.0], [1.6335372E12, 402.0], [1.6335369E12, 510.99894546508585], [1.6335366E12, 466.9994727325429], [1.63353726E12, 111.0], [1.63353666E12, 488.9994727325429], [1.63353696E12, 463.0], [1.63353636E12, 423.0], [1.63353702E12, 473.9994727325429], [1.63353642E12, 495.0], [1.63353672E12, 471.9994727325429], [1.63353708E12, 451.9978909301717], [1.63353678E12, 452.9994727325429]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63353648E12, 506.0], [1.63353714E12, 452.0], [1.63353654E12, 456.0], [1.63353684E12, 469.99930519103873], [1.6335372E12, 398.0], [1.6335369E12, 503.0], [1.6335366E12, 455.0], [1.63353726E12, 110.0], [1.63353666E12, 475.0], [1.63353696E12, 459.0], [1.63353636E12, 419.0], [1.63353702E12, 464.99930519103873], [1.63353642E12, 490.0], [1.63353672E12, 464.99930519103873], [1.63353708E12, 430.0], [1.63353678E12, 451.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63353648E12, 5.0], [1.63353714E12, 4.0], [1.63353654E12, 4.0], [1.63353684E12, 5.0], [1.6335372E12, 5.0], [1.6335369E12, 4.0], [1.6335366E12, 5.0], [1.63353726E12, 5.0], [1.63353666E12, 5.0], [1.63353696E12, 4.0], [1.63353636E12, 4.0], [1.63353702E12, 5.0], [1.63353642E12, 5.0], [1.63353672E12, 4.0], [1.63353708E12, 5.0], [1.63353678E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63353648E12, 29.0], [1.63353714E12, 25.0], [1.63353654E12, 31.0], [1.63353684E12, 28.0], [1.6335372E12, 25.0], [1.6335369E12, 28.0], [1.6335366E12, 28.0], [1.63353726E12, 21.0], [1.63353666E12, 29.0], [1.63353696E12, 26.0], [1.63353636E12, 25.0], [1.63353702E12, 28.0], [1.63353642E12, 27.0], [1.63353672E12, 27.0], [1.63353708E12, 29.0], [1.63353678E12, 30.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353726E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 7.0, "maxY": 6643.0, "series": [{"data": [[7.0, 6630.0], [9.0, 11.0], [17.0, 21.0], [25.0, 19.0], [26.0, 21.0], [28.0, 12.0], [30.0, 22.5], [31.0, 18.0], [38.0, 27.0], [39.0, 16.0], [43.0, 17.0], [42.0, 20.5], [49.0, 38.0], [53.0, 21.0], [74.0, 39.5], [73.0, 25.0], [79.0, 35.0], [76.0, 35.5], [92.0, 33.0], [95.0, 57.0], [104.0, 63.0], [118.0, 39.0], [127.0, 66.0], [124.0, 69.5], [137.0, 54.0], [144.0, 55.5], [159.0, 20.0], [164.0, 87.0], [182.0, 44.0], [177.0, 18.0], [190.0, 22.0], [201.0, 73.0], [212.0, 23.0], [245.0, 23.0], [244.0, 20.5], [255.0, 88.0], [264.0, 26.0], [268.0, 22.0], [256.0, 75.5], [276.0, 22.5], [277.0, 21.0], [275.0, 21.0], [286.0, 21.0], [272.0, 48.0], [284.0, 32.0], [288.0, 20.0], [291.0, 21.0], [297.0, 30.0], [295.0, 34.0], [294.0, 20.0], [293.0, 22.0], [312.0, 53.0], [305.0, 24.0], [306.0, 20.0], [320.0, 22.0], [333.0, 23.0], [323.0, 21.0], [329.0, 20.0], [342.0, 21.0], [348.0, 24.0], [360.0, 21.0], [353.0, 23.0], [393.0, 21.0], [397.0, 24.0], [390.0, 106.5], [409.0, 23.0], [407.0, 22.0], [406.0, 24.0], [402.0, 22.0], [414.0, 22.0], [401.0, 171.0], [400.0, 18.0], [422.0, 20.0], [423.0, 22.0], [431.0, 19.0], [436.0, 21.0], [437.0, 22.0], [440.0, 24.0], [433.0, 21.0], [434.0, 20.0], [450.0, 21.0], [461.0, 21.0], [448.0, 21.0], [457.0, 60.0], [459.0, 20.0], [456.0, 132.5], [477.0, 24.0], [467.0, 51.0], [490.0, 23.0], [481.0, 22.0], [484.0, 20.5], [486.0, 20.0], [489.0, 22.0], [508.0, 128.5], [503.0, 21.0], [496.0, 19.0], [511.0, 20.0], [528.0, 24.0], [536.0, 21.0], [515.0, 26.0], [540.0, 22.0], [517.0, 22.0], [533.0, 22.0], [534.0, 19.0], [531.0, 48.5], [532.0, 23.0], [569.0, 20.0], [570.0, 20.0], [557.0, 21.0], [558.0, 21.0], [560.0, 22.0], [555.0, 126.0], [553.0, 177.0], [567.0, 31.0], [544.0, 20.0], [550.0, 21.0], [582.0, 26.0], [593.0, 31.0], [576.0, 22.0], [591.0, 171.0], [578.0, 22.0], [601.0, 22.0], [579.0, 23.0], [600.0, 22.0], [590.0, 24.0], [612.0, 22.0], [625.0, 23.0], [608.0, 30.0], [610.0, 24.0], [616.0, 80.0], [611.0, 33.0], [627.0, 172.0], [609.0, 23.0], [626.0, 22.0], [660.0, 181.0], [649.0, 151.5], [670.0, 91.0], [667.0, 162.0], [646.0, 141.0], [643.0, 102.0], [642.0, 154.0], [687.0, 185.0], [684.0, 159.0], [676.0, 150.5], [700.0, 180.5], [692.0, 131.5], [733.0, 23.0], [708.0, 219.0], [727.0, 194.0], [709.0, 99.0], [714.0, 20.0], [732.0, 22.0], [721.0, 21.0], [734.0, 23.0], [724.0, 21.0], [723.0, 21.0], [741.0, 23.0], [766.0, 28.0], [756.0, 22.0], [743.0, 21.0], [750.0, 24.0], [752.0, 165.5], [745.0, 171.0], [761.0, 18.0], [736.0, 50.5], [738.0, 21.0], [770.0, 22.0], [776.0, 22.0], [771.0, 22.0], [772.0, 21.0], [783.0, 23.0], [779.0, 22.0], [768.0, 34.0], [799.0, 21.0], [773.0, 22.0], [790.0, 22.0], [789.0, 21.0], [829.0, 20.0], [831.0, 211.0], [809.0, 190.0], [808.0, 21.0], [801.0, 21.0], [825.0, 21.0], [805.0, 21.0], [807.0, 23.0], [861.0, 202.0], [856.0, 213.0], [854.0, 139.0], [860.0, 193.0], [849.0, 22.0], [875.0, 187.0], [887.0, 21.0], [921.0, 22.0], [911.0, 194.0], [916.0, 21.0], [923.0, 22.0], [912.0, 234.0], [927.0, 193.0], [907.0, 245.0], [896.0, 122.5], [908.0, 19.0], [953.0, 22.0], [948.0, 24.0], [947.0, 23.0], [946.0, 22.0], [945.0, 24.0], [939.0, 22.0], [941.0, 22.0], [950.0, 23.0], [931.0, 22.0], [954.0, 22.0], [932.0, 180.0], [956.0, 23.0], [957.0, 20.0], [987.0, 22.0], [991.0, 22.0], [988.0, 23.0], [981.0, 22.0], [979.0, 35.0], [980.0, 24.0], [976.0, 22.0], [977.0, 21.0], [978.0, 22.0], [983.0, 21.0], [982.0, 22.0], [986.0, 22.0], [972.0, 21.0], [970.0, 23.0], [969.0, 24.0], [971.0, 20.0], [962.0, 22.0], [961.0, 22.0], [975.0, 22.0], [967.0, 22.0], [965.0, 23.0], [984.0, 22.0], [963.0, 22.0], [985.0, 22.0], [990.0, 22.0], [989.0, 22.0], [992.0, 22.0], [1009.0, 22.0], [1007.0, 22.0], [1006.0, 22.0], [1003.0, 22.0], [1002.0, 22.0], [1004.0, 22.0], [1001.0, 22.0], [1000.0, 22.0], [1005.0, 22.0], [993.0, 21.0], [1008.0, 22.0], [1010.0, 22.0], [996.0, 22.0], [995.0, 22.0], [997.0, 22.0], [999.0, 22.0], [1016.0, 21.0], [1019.0, 22.0], [998.0, 22.0], [1012.0, 22.0], [1013.0, 22.0], [1014.0, 22.0], [1011.0, 22.0], [994.0, 22.0], [1044.0, 225.0], [1042.0, 23.0], [1039.0, 227.0], [1051.0, 210.0], [1052.0, 240.5], [1061.0, 23.0], [1035.0, 222.0], [1033.0, 23.0], [1138.0, 27.0], [1119.0, 27.0], [1099.0, 24.0], [1106.0, 317.5], [1111.0, 238.0], [1131.0, 259.0], [1129.0, 214.0], [1141.0, 144.0], [1170.0, 24.0], [1206.0, 277.0], [1208.0, 26.0], [1184.0, 188.5], [1274.0, 25.0], [1243.0, 315.0], [1257.0, 27.0], [1279.0, 28.0], [1218.0, 282.0], [1250.0, 27.0], [1217.0, 26.0], [1277.0, 305.0], [1235.0, 25.0], [1302.0, 28.0], [1317.0, 25.0], [1315.0, 29.0], [1281.0, 30.0], [1294.0, 281.5], [1323.0, 297.0], [1326.0, 180.0], [1308.0, 28.0], [1394.0, 151.0], [1345.0, 6643.0], [1379.0, 158.0], [1403.0, 114.0], [1371.0, 259.0], [1369.0, 31.0], [1354.0, 282.0], [1350.0, 30.0], [1407.0, 31.0], [1374.0, 238.0], [1440.0, 332.0], [1446.0, 293.0], [1468.0, 31.0], [1459.0, 296.0], [1442.0, 298.0], [1433.0, 34.0], [1436.0, 33.0], [1454.0, 32.0], [1462.0, 240.0], [1490.0, 33.0], [1474.0, 34.0], [1481.0, 33.0], [1520.0, 36.0], [1496.0, 181.5], [1534.0, 31.0], [1566.0, 256.5], [1547.0, 256.0], [1573.0, 261.0], [1581.0, 47.0], [1559.0, 35.0], [1585.0, 38.0], [1569.0, 261.0], [1552.0, 47.0], [1658.0, 83.0], [1616.0, 256.0], [1639.0, 79.0], [1645.0, 90.0], [1611.0, 67.0], [1657.0, 136.0], [1634.0, 59.0], [1659.0, 93.0], [1610.0, 51.0], [1627.0, 62.0], [1607.0, 37.0], [1637.0, 41.0], [1684.0, 243.0], [1720.0, 114.0], [1691.0, 84.0], [1690.0, 140.0], [1686.0, 108.0], [1727.0, 143.0], [1678.0, 138.0], [1719.0, 138.0], [1782.0, 192.0], [1740.0, 165.0], [1766.0, 150.0], [1746.0, 161.0], [1748.0, 230.0], [1756.0, 153.5], [1787.0, 204.0], [1734.0, 175.0], [1780.0, 176.5], [1791.0, 164.5], [1828.0, 221.0], [1837.0, 199.0], [1832.0, 161.0], [1833.0, 165.0], [1813.0, 207.0], [1821.0, 168.0], [1807.0, 224.0], [1799.0, 217.0], [1810.0, 240.0], [1847.0, 214.0], [1852.0, 232.0], [1916.0, 151.0], [1872.0, 253.0], [1899.0, 262.0], [1891.0, 225.0], [1883.0, 137.0], [1873.0, 210.0], [1880.0, 134.5], [1927.0, 183.0], [1974.0, 231.0], [1932.0, 267.0], [1968.0, 244.0], [1947.0, 185.0], [1952.0, 205.0], [1981.0, 253.0], [1926.0, 214.0], [1945.0, 252.0], [1941.0, 213.0], [1960.0, 215.0], [1957.0, 194.0], [1959.0, 155.0], [1956.0, 235.5], [1949.0, 259.0], [1992.0, 92.0], [2019.0, 178.0], [1990.0, 81.0], [2028.0, 250.5], [2027.0, 194.0], [2022.0, 196.0], [2029.0, 97.0], [2001.0, 138.0], [2006.0, 236.0], [1991.0, 205.0], [2011.0, 181.0], [2015.0, 208.0], [1999.0, 211.0], [1993.0, 165.0], [2040.0, 165.0], [2043.0, 267.0], [2034.0, 221.0], [2074.0, 238.0], [2084.0, 173.0], [2098.0, 236.0], [2152.0, 193.5], [2164.0, 178.0], [2136.0, 222.0], [2132.0, 192.0], [2130.0, 219.0], [2048.0, 172.0], [2106.0, 199.5], [2052.0, 183.0], [2220.0, 269.5], [2194.0, 216.5], [2182.0, 251.0], [2071.0, 204.0], [2089.0, 308.0], [2095.0, 213.0], [2113.0, 237.0], [2079.0, 242.0], [2117.0, 204.0], [2121.0, 232.0], [2049.0, 254.0], [2065.0, 203.0], [2057.0, 253.0], [2053.0, 189.0], [2163.0, 234.0], [2175.0, 254.0], [2173.0, 204.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2220.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 7.0, "maxY": 6643.0, "series": [{"data": [[7.0, 6397.5], [9.0, 11.0], [17.0, 21.0], [25.0, 19.0], [26.0, 21.0], [28.0, 12.0], [30.0, 22.5], [31.0, 18.0], [38.0, 27.0], [39.0, 16.0], [43.0, 17.0], [42.0, 20.5], [49.0, 38.0], [53.0, 21.0], [74.0, 39.0], [73.0, 25.0], [79.0, 33.0], [76.0, 35.5], [92.0, 33.0], [95.0, 57.0], [104.0, 63.0], [118.0, 38.0], [127.0, 65.0], [124.0, 69.0], [137.0, 54.0], [144.0, 55.0], [159.0, 19.0], [164.0, 87.0], [182.0, 43.0], [177.0, 18.0], [190.0, 21.5], [201.0, 73.0], [212.0, 23.0], [245.0, 23.0], [244.0, 20.5], [255.0, 88.0], [264.0, 25.0], [268.0, 22.0], [256.0, 75.5], [276.0, 22.5], [277.0, 20.0], [275.0, 21.0], [286.0, 21.0], [272.0, 48.0], [284.0, 31.0], [288.0, 20.0], [291.0, 21.0], [297.0, 30.0], [295.0, 34.0], [294.0, 20.0], [293.0, 22.0], [312.0, 53.0], [305.0, 24.0], [306.0, 20.0], [320.0, 21.0], [333.0, 22.0], [323.0, 21.0], [329.0, 20.0], [342.0, 21.0], [348.0, 24.0], [360.0, 21.0], [353.0, 23.0], [393.0, 21.0], [397.0, 24.0], [390.0, 106.0], [409.0, 23.0], [407.0, 22.0], [406.0, 24.0], [402.0, 22.0], [414.0, 21.0], [401.0, 171.0], [400.0, 18.0], [422.0, 20.0], [423.0, 22.0], [431.0, 19.0], [436.0, 21.0], [437.0, 22.0], [440.0, 23.5], [433.0, 21.0], [434.0, 20.0], [450.0, 21.0], [461.0, 21.0], [448.0, 21.0], [457.0, 60.0], [459.0, 20.0], [456.0, 132.5], [477.0, 24.0], [467.0, 51.0], [490.0, 23.0], [481.0, 22.0], [484.0, 20.0], [486.0, 20.0], [489.0, 22.0], [508.0, 128.0], [503.0, 21.0], [496.0, 19.0], [511.0, 20.0], [528.0, 24.0], [536.0, 21.0], [515.0, 25.0], [540.0, 22.0], [517.0, 22.0], [533.0, 22.0], [534.0, 19.0], [531.0, 48.5], [532.0, 23.0], [569.0, 20.0], [570.0, 20.0], [557.0, 21.0], [558.0, 21.0], [560.0, 22.0], [555.0, 126.0], [553.0, 177.0], [567.0, 31.0], [544.0, 20.0], [550.0, 20.5], [582.0, 26.0], [593.0, 31.0], [576.0, 22.0], [591.0, 171.0], [578.0, 22.0], [601.0, 22.0], [579.0, 23.0], [600.0, 22.0], [590.0, 24.0], [612.0, 22.0], [625.0, 22.0], [608.0, 30.0], [610.0, 23.0], [616.0, 80.0], [611.0, 32.5], [627.0, 172.0], [609.0, 23.0], [626.0, 22.0], [660.0, 180.5], [649.0, 151.0], [670.0, 90.5], [667.0, 162.0], [646.0, 141.0], [643.0, 102.0], [642.0, 154.0], [687.0, 185.0], [684.0, 159.0], [676.0, 150.5], [700.0, 180.5], [692.0, 131.0], [733.0, 22.0], [708.0, 218.5], [727.0, 193.0], [709.0, 99.0], [714.0, 20.0], [732.0, 22.0], [721.0, 21.0], [734.0, 23.0], [724.0, 20.0], [723.0, 21.0], [741.0, 23.0], [766.0, 28.0], [756.0, 21.0], [743.0, 21.0], [750.0, 23.0], [752.0, 165.0], [745.0, 170.5], [761.0, 18.0], [736.0, 50.5], [738.0, 21.0], [770.0, 21.5], [776.0, 21.0], [771.0, 22.0], [772.0, 21.0], [783.0, 23.0], [779.0, 22.0], [768.0, 34.0], [799.0, 21.0], [773.0, 22.0], [790.0, 22.0], [789.0, 21.0], [829.0, 20.0], [831.0, 211.0], [809.0, 190.0], [808.0, 21.0], [801.0, 21.0], [825.0, 21.0], [805.0, 21.0], [807.0, 23.0], [861.0, 202.0], [856.0, 213.0], [854.0, 139.0], [860.0, 193.0], [849.0, 22.0], [875.0, 187.0], [887.0, 21.0], [921.0, 22.0], [911.0, 194.0], [916.0, 21.0], [923.0, 22.0], [912.0, 234.0], [927.0, 193.0], [907.0, 245.0], [896.0, 122.5], [908.0, 18.0], [953.0, 21.0], [948.0, 24.0], [947.0, 23.0], [946.0, 22.0], [945.0, 24.0], [939.0, 21.0], [941.0, 22.0], [950.0, 23.0], [931.0, 22.0], [954.0, 22.0], [932.0, 180.0], [956.0, 23.0], [957.0, 20.0], [987.0, 22.0], [991.0, 22.0], [988.0, 23.0], [981.0, 22.0], [979.0, 35.0], [980.0, 24.0], [976.0, 22.0], [977.0, 21.0], [978.0, 22.0], [983.0, 21.0], [982.0, 22.0], [986.0, 22.0], [972.0, 21.0], [970.0, 22.5], [969.0, 24.0], [971.0, 20.0], [962.0, 22.0], [961.0, 22.0], [975.0, 22.0], [967.0, 22.0], [965.0, 23.0], [984.0, 22.0], [963.0, 22.0], [985.0, 22.0], [990.0, 21.0], [989.0, 22.0], [992.0, 22.0], [1009.0, 21.0], [1007.0, 22.0], [1006.0, 22.0], [1003.0, 22.0], [1002.0, 22.0], [1004.0, 22.0], [1001.0, 22.0], [1000.0, 22.0], [1005.0, 22.0], [993.0, 21.0], [1008.0, 22.0], [1010.0, 22.0], [996.0, 22.0], [995.0, 22.0], [997.0, 22.0], [999.0, 22.0], [1016.0, 21.0], [1019.0, 22.0], [998.0, 22.0], [1012.0, 22.0], [1013.0, 22.0], [1014.0, 22.0], [1011.0, 22.0], [994.0, 22.0], [1044.0, 225.0], [1042.0, 22.0], [1039.0, 227.0], [1051.0, 209.0], [1052.0, 240.5], [1061.0, 22.0], [1035.0, 222.0], [1033.0, 23.0], [1138.0, 26.0], [1119.0, 27.0], [1099.0, 24.0], [1106.0, 317.0], [1111.0, 238.0], [1131.0, 259.0], [1129.0, 214.0], [1141.0, 144.0], [1170.0, 24.0], [1206.0, 277.0], [1208.0, 26.0], [1184.0, 188.0], [1274.0, 25.0], [1243.0, 315.0], [1257.0, 27.0], [1279.0, 28.0], [1218.0, 282.0], [1250.0, 27.0], [1217.0, 26.0], [1277.0, 305.0], [1235.0, 25.0], [1302.0, 28.0], [1317.0, 25.0], [1315.0, 29.0], [1281.0, 29.0], [1294.0, 281.0], [1323.0, 297.0], [1326.0, 180.0], [1308.0, 28.0], [1394.0, 151.0], [1345.0, 6643.0], [1379.0, 157.5], [1403.0, 113.0], [1371.0, 258.0], [1369.0, 31.0], [1354.0, 282.0], [1350.0, 29.0], [1407.0, 31.0], [1374.0, 238.0], [1440.0, 332.0], [1446.0, 293.0], [1468.0, 31.0], [1459.0, 296.0], [1442.0, 298.0], [1433.0, 33.0], [1436.0, 33.0], [1454.0, 32.0], [1462.0, 240.0], [1490.0, 33.0], [1474.0, 34.0], [1481.0, 32.0], [1520.0, 36.0], [1496.0, 181.0], [1534.0, 31.0], [1566.0, 256.0], [1547.0, 256.0], [1573.0, 261.0], [1581.0, 47.0], [1559.0, 35.0], [1585.0, 38.0], [1569.0, 260.0], [1552.0, 47.0], [1658.0, 83.0], [1616.0, 256.0], [1639.0, 79.0], [1645.0, 90.0], [1611.0, 67.0], [1657.0, 136.0], [1634.0, 59.0], [1659.0, 92.0], [1610.0, 50.5], [1627.0, 62.0], [1607.0, 37.0], [1637.0, 41.0], [1684.0, 243.0], [1720.0, 114.0], [1691.0, 84.0], [1690.0, 139.5], [1686.0, 108.0], [1727.0, 143.0], [1678.0, 138.0], [1719.0, 137.0], [1782.0, 192.0], [1740.0, 165.0], [1766.0, 150.0], [1746.0, 160.5], [1748.0, 230.0], [1756.0, 153.0], [1787.0, 204.0], [1734.0, 175.0], [1780.0, 176.0], [1791.0, 163.5], [1828.0, 220.5], [1837.0, 199.0], [1832.0, 161.0], [1833.0, 164.0], [1813.0, 207.0], [1821.0, 168.0], [1807.0, 224.0], [1799.0, 217.0], [1810.0, 240.0], [1847.0, 214.0], [1852.0, 232.0], [1916.0, 151.0], [1872.0, 253.0], [1899.0, 262.0], [1891.0, 225.0], [1883.0, 137.0], [1873.0, 210.0], [1880.0, 134.0], [1927.0, 183.0], [1974.0, 231.0], [1932.0, 267.0], [1968.0, 244.0], [1947.0, 185.0], [1952.0, 205.0], [1981.0, 253.0], [1926.0, 214.0], [1945.0, 252.0], [1941.0, 213.0], [1960.0, 214.5], [1957.0, 193.0], [1959.0, 155.0], [1956.0, 235.0], [1949.0, 259.0], [1992.0, 92.0], [2019.0, 178.0], [1990.0, 81.0], [2028.0, 250.0], [2027.0, 194.0], [2022.0, 196.0], [2029.0, 97.0], [2001.0, 138.0], [2006.0, 236.0], [1991.0, 205.0], [2011.0, 181.0], [2015.0, 208.0], [1999.0, 210.0], [1993.0, 165.0], [2040.0, 164.0], [2043.0, 267.0], [2034.0, 221.0], [2074.0, 238.0], [2084.0, 172.0], [2098.0, 236.0], [2152.0, 193.0], [2164.0, 177.5], [2136.0, 222.0], [2132.0, 192.0], [2130.0, 218.0], [2048.0, 172.0], [2106.0, 199.0], [2052.0, 183.0], [2220.0, 269.5], [2194.0, 216.5], [2182.0, 251.0], [2071.0, 204.0], [2089.0, 308.0], [2095.0, 212.0], [2113.0, 237.0], [2079.0, 242.0], [2117.0, 204.0], [2121.0, 232.0], [2049.0, 254.0], [2065.0, 203.0], [2057.0, 253.0], [2053.0, 189.0], [2163.0, 234.0], [2175.0, 254.0], [2173.0, 204.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2220.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.733333333333333, "minX": 1.6335363E12, "maxY": 1009.7666666666667, "series": [{"data": [[1.63353648E12, 997.9166666666666], [1.63353714E12, 1001.9166666666666], [1.63353654E12, 998.3166666666667], [1.63353684E12, 994.3666666666667], [1.6335372E12, 983.0166666666667], [1.6335369E12, 996.8166666666667], [1.6335363E12, 13.733333333333333], [1.6335366E12, 979.7666666666667], [1.63353726E12, 117.61666666666666], [1.63353666E12, 1009.7666666666667], [1.63353696E12, 997.9666666666667], [1.63353636E12, 907.0333333333333], [1.63353702E12, 978.8833333333333], [1.63353642E12, 996.4333333333333], [1.63353672E12, 997.1166666666667], [1.63353708E12, 996.0833333333334], [1.63353678E12, 998.5833333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353726E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 118.41666666666667, "minX": 1.63353636E12, "maxY": 1009.45, "series": [{"data": [[1.63353648E12, 998.3], [1.63353714E12, 1001.65], [1.63353654E12, 997.75], [1.63353684E12, 994.5833333333334], [1.6335372E12, 982.4833333333333], [1.6335369E12, 996.8166666666667], [1.6335366E12, 980.3833333333333], [1.63353726E12, 118.41666666666667], [1.63353666E12, 1009.45], [1.63353696E12, 997.2333333333333], [1.63353636E12, 920.7666666666667], [1.63353702E12, 979.6166666666667], [1.63353642E12, 996.0], [1.63353672E12, 997.4333333333333], [1.63353708E12, 996.0833333333334], [1.63353678E12, 998.3666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63353726E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 118.41666666666667, "minX": 1.63353636E12, "maxY": 1009.45, "series": [{"data": [[1.63353648E12, 998.3], [1.63353714E12, 1001.65], [1.63353654E12, 997.75], [1.63353684E12, 994.5833333333334], [1.6335372E12, 982.4833333333333], [1.6335369E12, 996.8166666666667], [1.6335366E12, 980.3833333333333], [1.63353726E12, 118.41666666666667], [1.63353666E12, 1009.45], [1.63353696E12, 997.2333333333333], [1.63353636E12, 920.7666666666667], [1.63353702E12, 979.6166666666667], [1.63353642E12, 996.0], [1.63353672E12, 997.4333333333333], [1.63353708E12, 996.0833333333334], [1.63353678E12, 998.3666666666667]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353726E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 118.41666666666667, "minX": 1.63353636E12, "maxY": 1009.45, "series": [{"data": [[1.63353648E12, 998.3], [1.63353714E12, 1001.65], [1.63353654E12, 997.75], [1.63353684E12, 994.5833333333334], [1.6335372E12, 982.4833333333333], [1.6335369E12, 996.8166666666667], [1.6335366E12, 980.3833333333333], [1.63353726E12, 118.41666666666667], [1.63353666E12, 1009.45], [1.63353696E12, 997.2333333333333], [1.63353636E12, 920.7666666666667], [1.63353702E12, 979.6166666666667], [1.63353642E12, 996.0], [1.63353672E12, 997.4333333333333], [1.63353708E12, 996.0833333333334], [1.63353678E12, 998.3666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63353726E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

