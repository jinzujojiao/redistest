/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 3066.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 6.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 11.0], [5.3, 11.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 12.0], [8.0, 12.0], [8.1, 12.0], [8.2, 12.0], [8.3, 12.0], [8.4, 12.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 13.0], [9.6, 13.0], [9.7, 13.0], [9.8, 13.0], [9.9, 13.0], [10.0, 13.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 16.0], [15.3, 16.0], [15.4, 16.0], [15.5, 16.0], [15.6, 16.0], [15.7, 16.0], [15.8, 16.0], [15.9, 17.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 17.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 18.0], [18.2, 18.0], [18.3, 18.0], [18.4, 18.0], [18.5, 18.0], [18.6, 18.0], [18.7, 18.0], [18.8, 18.0], [18.9, 18.0], [19.0, 18.0], [19.1, 18.0], [19.2, 18.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 21.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 21.0], [24.7, 21.0], [24.8, 21.0], [24.9, 21.0], [25.0, 21.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 22.0], [26.3, 22.0], [26.4, 22.0], [26.5, 22.0], [26.6, 22.0], [26.7, 22.0], [26.8, 22.0], [26.9, 22.0], [27.0, 22.0], [27.1, 22.0], [27.2, 22.0], [27.3, 22.0], [27.4, 22.0], [27.5, 22.0], [27.6, 22.0], [27.7, 22.0], [27.8, 22.0], [27.9, 22.0], [28.0, 22.0], [28.1, 22.0], [28.2, 22.0], [28.3, 22.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 23.0], [30.3, 23.0], [30.4, 23.0], [30.5, 23.0], [30.6, 23.0], [30.7, 23.0], [30.8, 24.0], [30.9, 24.0], [31.0, 24.0], [31.1, 24.0], [31.2, 24.0], [31.3, 24.0], [31.4, 24.0], [31.5, 24.0], [31.6, 24.0], [31.7, 24.0], [31.8, 24.0], [31.9, 24.0], [32.0, 24.0], [32.1, 24.0], [32.2, 24.0], [32.3, 24.0], [32.4, 24.0], [32.5, 24.0], [32.6, 24.0], [32.7, 24.0], [32.8, 24.0], [32.9, 24.0], [33.0, 24.0], [33.1, 25.0], [33.2, 25.0], [33.3, 25.0], [33.4, 25.0], [33.5, 25.0], [33.6, 25.0], [33.7, 25.0], [33.8, 25.0], [33.9, 25.0], [34.0, 25.0], [34.1, 25.0], [34.2, 25.0], [34.3, 25.0], [34.4, 25.0], [34.5, 25.0], [34.6, 25.0], [34.7, 25.0], [34.8, 25.0], [34.9, 25.0], [35.0, 25.0], [35.1, 25.0], [35.2, 25.0], [35.3, 25.0], [35.4, 26.0], [35.5, 26.0], [35.6, 26.0], [35.7, 26.0], [35.8, 26.0], [35.9, 26.0], [36.0, 26.0], [36.1, 26.0], [36.2, 26.0], [36.3, 26.0], [36.4, 26.0], [36.5, 26.0], [36.6, 26.0], [36.7, 26.0], [36.8, 26.0], [36.9, 26.0], [37.0, 26.0], [37.1, 26.0], [37.2, 26.0], [37.3, 26.0], [37.4, 26.0], [37.5, 26.0], [37.6, 26.0], [37.7, 27.0], [37.8, 27.0], [37.9, 27.0], [38.0, 27.0], [38.1, 27.0], [38.2, 27.0], [38.3, 27.0], [38.4, 27.0], [38.5, 27.0], [38.6, 27.0], [38.7, 27.0], [38.8, 27.0], [38.9, 27.0], [39.0, 27.0], [39.1, 27.0], [39.2, 27.0], [39.3, 27.0], [39.4, 27.0], [39.5, 27.0], [39.6, 27.0], [39.7, 27.0], [39.8, 27.0], [39.9, 28.0], [40.0, 28.0], [40.1, 28.0], [40.2, 28.0], [40.3, 28.0], [40.4, 28.0], [40.5, 28.0], [40.6, 28.0], [40.7, 28.0], [40.8, 28.0], [40.9, 28.0], [41.0, 28.0], [41.1, 28.0], [41.2, 28.0], [41.3, 28.0], [41.4, 28.0], [41.5, 28.0], [41.6, 28.0], [41.7, 28.0], [41.8, 28.0], [41.9, 28.0], [42.0, 29.0], [42.1, 29.0], [42.2, 29.0], [42.3, 29.0], [42.4, 29.0], [42.5, 29.0], [42.6, 29.0], [42.7, 29.0], [42.8, 29.0], [42.9, 29.0], [43.0, 29.0], [43.1, 29.0], [43.2, 29.0], [43.3, 29.0], [43.4, 29.0], [43.5, 29.0], [43.6, 29.0], [43.7, 29.0], [43.8, 29.0], [43.9, 29.0], [44.0, 30.0], [44.1, 30.0], [44.2, 30.0], [44.3, 30.0], [44.4, 30.0], [44.5, 30.0], [44.6, 30.0], [44.7, 30.0], [44.8, 30.0], [44.9, 30.0], [45.0, 30.0], [45.1, 30.0], [45.2, 30.0], [45.3, 30.0], [45.4, 30.0], [45.5, 30.0], [45.6, 30.0], [45.7, 30.0], [45.8, 30.0], [45.9, 31.0], [46.0, 31.0], [46.1, 31.0], [46.2, 31.0], [46.3, 31.0], [46.4, 31.0], [46.5, 31.0], [46.6, 31.0], [46.7, 31.0], [46.8, 31.0], [46.9, 31.0], [47.0, 31.0], [47.1, 31.0], [47.2, 31.0], [47.3, 31.0], [47.4, 31.0], [47.5, 31.0], [47.6, 32.0], [47.7, 32.0], [47.8, 32.0], [47.9, 32.0], [48.0, 32.0], [48.1, 32.0], [48.2, 32.0], [48.3, 32.0], [48.4, 32.0], [48.5, 32.0], [48.6, 32.0], [48.7, 32.0], [48.8, 32.0], [48.9, 32.0], [49.0, 32.0], [49.1, 33.0], [49.2, 33.0], [49.3, 33.0], [49.4, 33.0], [49.5, 33.0], [49.6, 33.0], [49.7, 33.0], [49.8, 33.0], [49.9, 33.0], [50.0, 33.0], [50.1, 33.0], [50.2, 33.0], [50.3, 33.0], [50.4, 34.0], [50.5, 34.0], [50.6, 34.0], [50.7, 34.0], [50.8, 34.0], [50.9, 34.0], [51.0, 34.0], [51.1, 34.0], [51.2, 34.0], [51.3, 34.0], [51.4, 34.0], [51.5, 35.0], [51.6, 35.0], [51.7, 35.0], [51.8, 35.0], [51.9, 35.0], [52.0, 35.0], [52.1, 35.0], [52.2, 35.0], [52.3, 35.0], [52.4, 35.0], [52.5, 36.0], [52.6, 36.0], [52.7, 36.0], [52.8, 36.0], [52.9, 36.0], [53.0, 36.0], [53.1, 36.0], [53.2, 37.0], [53.3, 37.0], [53.4, 37.0], [53.5, 37.0], [53.6, 37.0], [53.7, 37.0], [53.8, 38.0], [53.9, 38.0], [54.0, 38.0], [54.1, 38.0], [54.2, 39.0], [54.3, 39.0], [54.4, 39.0], [54.5, 40.0], [54.6, 40.0], [54.7, 40.0], [54.8, 41.0], [54.9, 41.0], [55.0, 42.0], [55.1, 43.0], [55.2, 44.0], [55.3, 45.0], [55.4, 46.0], [55.5, 47.0], [55.6, 49.0], [55.7, 50.0], [55.8, 52.0], [55.9, 54.0], [56.0, 56.0], [56.1, 58.0], [56.2, 60.0], [56.3, 62.0], [56.4, 64.0], [56.5, 66.0], [56.6, 68.0], [56.7, 70.0], [56.8, 72.0], [56.9, 75.0], [57.0, 77.0], [57.1, 80.0], [57.2, 83.0], [57.3, 85.0], [57.4, 88.0], [57.5, 90.0], [57.6, 93.0], [57.7, 95.0], [57.8, 97.0], [57.9, 100.0], [58.0, 102.0], [58.1, 105.0], [58.2, 107.0], [58.3, 109.0], [58.4, 111.0], [58.5, 113.0], [58.6, 115.0], [58.7, 117.0], [58.8, 120.0], [58.9, 122.0], [59.0, 124.0], [59.1, 127.0], [59.2, 129.0], [59.3, 131.0], [59.4, 132.0], [59.5, 134.0], [59.6, 136.0], [59.7, 138.0], [59.8, 140.0], [59.9, 142.0], [60.0, 143.0], [60.1, 145.0], [60.2, 147.0], [60.3, 149.0], [60.4, 151.0], [60.5, 153.0], [60.6, 154.0], [60.7, 156.0], [60.8, 158.0], [60.9, 160.0], [61.0, 161.0], [61.1, 163.0], [61.2, 165.0], [61.3, 167.0], [61.4, 168.0], [61.5, 170.0], [61.6, 172.0], [61.7, 173.0], [61.8, 175.0], [61.9, 176.0], [62.0, 178.0], [62.1, 179.0], [62.2, 181.0], [62.3, 183.0], [62.4, 184.0], [62.5, 186.0], [62.6, 188.0], [62.7, 189.0], [62.8, 191.0], [62.9, 192.0], [63.0, 194.0], [63.1, 195.0], [63.2, 197.0], [63.3, 199.0], [63.4, 201.0], [63.5, 202.0], [63.6, 204.0], [63.7, 206.0], [63.8, 208.0], [63.9, 209.0], [64.0, 211.0], [64.1, 213.0], [64.2, 214.0], [64.3, 216.0], [64.4, 217.0], [64.5, 219.0], [64.6, 221.0], [64.7, 222.0], [64.8, 224.0], [64.9, 226.0], [65.0, 227.0], [65.1, 228.0], [65.2, 230.0], [65.3, 232.0], [65.4, 234.0], [65.5, 235.0], [65.6, 237.0], [65.7, 238.0], [65.8, 240.0], [65.9, 242.0], [66.0, 243.0], [66.1, 245.0], [66.2, 247.0], [66.3, 249.0], [66.4, 251.0], [66.5, 252.0], [66.6, 254.0], [66.7, 256.0], [66.8, 258.0], [66.9, 259.0], [67.0, 261.0], [67.1, 263.0], [67.2, 264.0], [67.3, 266.0], [67.4, 267.0], [67.5, 269.0], [67.6, 271.0], [67.7, 272.0], [67.8, 274.0], [67.9, 276.0], [68.0, 277.0], [68.1, 279.0], [68.2, 280.0], [68.3, 282.0], [68.4, 283.0], [68.5, 285.0], [68.6, 286.0], [68.7, 288.0], [68.8, 289.0], [68.9, 291.0], [69.0, 293.0], [69.1, 294.0], [69.2, 296.0], [69.3, 298.0], [69.4, 299.0], [69.5, 301.0], [69.6, 303.0], [69.7, 304.0], [69.8, 306.0], [69.9, 308.0], [70.0, 310.0], [70.1, 311.0], [70.2, 313.0], [70.3, 314.0], [70.4, 316.0], [70.5, 317.0], [70.6, 319.0], [70.7, 320.0], [70.8, 322.0], [70.9, 323.0], [71.0, 325.0], [71.1, 327.0], [71.2, 329.0], [71.3, 330.0], [71.4, 332.0], [71.5, 334.0], [71.6, 335.0], [71.7, 337.0], [71.8, 339.0], [71.9, 341.0], [72.0, 342.0], [72.1, 344.0], [72.2, 346.0], [72.3, 348.0], [72.4, 349.0], [72.5, 351.0], [72.6, 353.0], [72.7, 354.0], [72.8, 356.0], [72.9, 358.0], [73.0, 359.0], [73.1, 361.0], [73.2, 362.0], [73.3, 364.0], [73.4, 366.0], [73.5, 368.0], [73.6, 369.0], [73.7, 371.0], [73.8, 373.0], [73.9, 375.0], [74.0, 377.0], [74.1, 378.0], [74.2, 380.0], [74.3, 381.0], [74.4, 383.0], [74.5, 385.0], [74.6, 387.0], [74.7, 389.0], [74.8, 390.0], [74.9, 392.0], [75.0, 394.0], [75.1, 396.0], [75.2, 398.0], [75.3, 400.0], [75.4, 402.0], [75.5, 403.0], [75.6, 405.0], [75.7, 407.0], [75.8, 409.0], [75.9, 410.0], [76.0, 412.0], [76.1, 413.0], [76.2, 415.0], [76.3, 417.0], [76.4, 419.0], [76.5, 421.0], [76.6, 422.0], [76.7, 424.0], [76.8, 426.0], [76.9, 428.0], [77.0, 430.0], [77.1, 431.0], [77.2, 433.0], [77.3, 435.0], [77.4, 437.0], [77.5, 438.0], [77.6, 440.0], [77.7, 442.0], [77.8, 444.0], [77.9, 446.0], [78.0, 448.0], [78.1, 450.0], [78.2, 451.0], [78.3, 453.0], [78.4, 455.0], [78.5, 456.0], [78.6, 458.0], [78.7, 460.0], [78.8, 462.0], [78.9, 464.0], [79.0, 465.0], [79.1, 467.0], [79.2, 469.0], [79.3, 471.0], [79.4, 473.0], [79.5, 474.0], [79.6, 476.0], [79.7, 478.0], [79.8, 479.0], [79.9, 481.0], [80.0, 483.0], [80.1, 485.0], [80.2, 487.0], [80.3, 489.0], [80.4, 491.0], [80.5, 493.0], [80.6, 495.0], [80.7, 497.0], [80.8, 498.0], [80.9, 500.0], [81.0, 502.0], [81.1, 504.0], [81.2, 506.0], [81.3, 508.0], [81.4, 509.0], [81.5, 511.0], [81.6, 513.0], [81.7, 514.0], [81.8, 516.0], [81.9, 518.0], [82.0, 519.0], [82.1, 521.0], [82.2, 523.0], [82.3, 525.0], [82.4, 527.0], [82.5, 528.0], [82.6, 530.0], [82.7, 532.0], [82.8, 534.0], [82.9, 536.0], [83.0, 538.0], [83.1, 539.0], [83.2, 541.0], [83.3, 543.0], [83.4, 545.0], [83.5, 547.0], [83.6, 549.0], [83.7, 550.0], [83.8, 552.0], [83.9, 554.0], [84.0, 555.0], [84.1, 557.0], [84.2, 558.0], [84.3, 560.0], [84.4, 562.0], [84.5, 563.0], [84.6, 565.0], [84.7, 567.0], [84.8, 569.0], [84.9, 571.0], [85.0, 573.0], [85.1, 574.0], [85.2, 576.0], [85.3, 578.0], [85.4, 580.0], [85.5, 582.0], [85.6, 584.0], [85.7, 586.0], [85.8, 588.0], [85.9, 589.0], [86.0, 591.0], [86.1, 593.0], [86.2, 595.0], [86.3, 596.0], [86.4, 598.0], [86.5, 600.0], [86.6, 601.0], [86.7, 603.0], [86.8, 605.0], [86.9, 607.0], [87.0, 609.0], [87.1, 611.0], [87.2, 613.0], [87.3, 614.0], [87.4, 616.0], [87.5, 618.0], [87.6, 619.0], [87.7, 621.0], [87.8, 623.0], [87.9, 624.0], [88.0, 626.0], [88.1, 628.0], [88.2, 630.0], [88.3, 631.0], [88.4, 633.0], [88.5, 635.0], [88.6, 637.0], [88.7, 639.0], [88.8, 641.0], [88.9, 643.0], [89.0, 645.0], [89.1, 646.0], [89.2, 648.0], [89.3, 650.0], [89.4, 652.0], [89.5, 654.0], [89.6, 656.0], [89.7, 657.0], [89.8, 659.0], [89.9, 661.0], [90.0, 663.0], [90.1, 665.0], [90.2, 666.0], [90.3, 668.0], [90.4, 670.0], [90.5, 672.0], [90.6, 674.0], [90.7, 676.0], [90.8, 678.0], [90.9, 679.0], [91.0, 681.0], [91.1, 683.0], [91.2, 684.0], [91.3, 686.0], [91.4, 687.0], [91.5, 689.0], [91.6, 691.0], [91.7, 693.0], [91.8, 694.0], [91.9, 696.0], [92.0, 698.0], [92.1, 700.0], [92.2, 701.0], [92.3, 703.0], [92.4, 705.0], [92.5, 706.0], [92.6, 708.0], [92.7, 710.0], [92.8, 712.0], [92.9, 713.0], [93.0, 715.0], [93.1, 717.0], [93.2, 719.0], [93.3, 720.0], [93.4, 722.0], [93.5, 724.0], [93.6, 726.0], [93.7, 728.0], [93.8, 730.0], [93.9, 732.0], [94.0, 734.0], [94.1, 736.0], [94.2, 737.0], [94.3, 739.0], [94.4, 741.0], [94.5, 743.0], [94.6, 745.0], [94.7, 747.0], [94.8, 749.0], [94.9, 751.0], [95.0, 753.0], [95.1, 756.0], [95.2, 758.0], [95.3, 760.0], [95.4, 762.0], [95.5, 764.0], [95.6, 766.0], [95.7, 768.0], [95.8, 770.0], [95.9, 772.0], [96.0, 774.0], [96.1, 776.0], [96.2, 778.0], [96.3, 780.0], [96.4, 783.0], [96.5, 785.0], [96.6, 787.0], [96.7, 789.0], [96.8, 792.0], [96.9, 794.0], [97.0, 796.0], [97.1, 799.0], [97.2, 801.0], [97.3, 803.0], [97.4, 806.0], [97.5, 808.0], [97.6, 811.0], [97.7, 814.0], [97.8, 816.0], [97.9, 819.0], [98.0, 822.0], [98.1, 825.0], [98.2, 827.0], [98.3, 830.0], [98.4, 833.0], [98.5, 837.0], [98.6, 841.0], [98.7, 845.0], [98.8, 850.0], [98.9, 855.0], [99.0, 861.0], [99.1, 866.0], [99.2, 873.0], [99.3, 880.0], [99.4, 887.0], [99.5, 896.0], [99.6, 906.0], [99.7, 920.0], [99.8, 936.0], [99.9, 1184.0], [100.0, 3066.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 521033.0, "series": [{"data": [[0.0, 521033.0], [600.0, 50466.0], [700.0, 45370.0], [3000.0, 3.0], [200.0, 54650.0], [800.0, 21612.0], [900.0, 3186.0], [1000.0, 46.0], [1100.0, 108.0], [300.0, 52882.0], [1200.0, 560.0], [1300.0, 206.0], [1400.0, 77.0], [100.0, 48973.0], [400.0, 50188.0], [500.0, 50657.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 728199.0, "series": [{"data": [[0.0, 728199.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 171815.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2225.833268368768, "minX": 1.6334244E12, "maxY": 2400.0, "series": [{"data": [[1.63342476E12, 2400.0], [1.63342446E12, 2400.0], [1.6334244E12, 2225.833268368768], [1.63342506E12, 2400.0], [1.633425E12, 2400.0], [1.6334247E12, 2400.0], [1.63342464E12, 2400.0], [1.6334253E12, 2346.607755267163], [1.63342524E12, 2400.0], [1.63342494E12, 2400.0], [1.63342488E12, 2400.0], [1.63342458E12, 2400.0], [1.63342452E12, 2400.0], [1.63342518E12, 2400.0], [1.63342512E12, 2400.0], [1.63342482E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334253E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 439.0, "maxY": 636.0, "series": [{"data": [[441.0, 253.61403508771934], [443.0, 250.11842105263165], [442.0, 241.76470588235296], [445.0, 251.3333333333333], [439.0, 210.33333333333334], [440.0, 168.42857142857142], [444.0, 253.5], [446.0, 252.83333333333334], [447.0, 237.6], [449.0, 216.75], [451.0, 123.07692307692308], [452.0, 148.55797101449272], [455.0, 23.333333333333332], [453.0, 23.666666666666668], [456.0, 25.428571428571427], [459.0, 36.25], [454.0, 21.4], [460.0, 34.368421052631575], [461.0, 36.0], [463.0, 41.333333333333336], [467.0, 46.88235294117647], [468.0, 45.333333333333336], [479.0, 63.0], [475.0, 53.0], [483.0, 70.0], [487.0, 66.0], [482.0, 66.4], [485.0, 68.0], [488.0, 70.75], [495.0, 89.0], [493.0, 84.0], [492.0, 81.5], [494.0, 85.0], [484.0, 66.0], [486.0, 68.5], [491.0, 82.5], [490.0, 73.75], [496.0, 91.2], [502.0, 93.0], [498.0, 92.0], [499.0, 96.0], [510.0, 91.92592592592594], [509.0, 93.5], [500.0, 91.0], [497.0, 93.0], [503.0, 93.17241379310346], [501.0, 94.0], [505.0, 92.00000000000001], [506.0, 91.16666666666667], [507.0, 92.28571428571429], [504.0, 92.55555555555556], [517.0, 67.0], [525.0, 58.44444444444444], [515.0, 75.6818181818182], [514.0, 80.45454545454545], [527.0, 48.4], [526.0, 46.6], [518.0, 67.72222222222221], [537.0, 31.22222222222222], [539.0, 25.499999999999996], [542.0, 25.923076923076923], [543.0, 28.0], [540.0, 24.666666666666668], [541.0, 25.0], [536.0, 40.333333333333336], [528.0, 41.5], [530.0, 41.333333333333336], [531.0, 41.0], [534.0, 44.666666666666664], [532.0, 45.25], [533.0, 45.333333333333336], [535.0, 44.875], [516.0, 67.33333333333334], [520.0, 60.333333333333336], [521.0, 60.84615384615385], [522.0, 56.9], [524.0, 57.57142857142857], [546.0, 32.5], [550.0, 19.125], [544.0, 30.0], [558.0, 21.0], [549.0, 28.75], [548.0, 27.0], [557.0, 19.5], [555.0, 17.0], [556.0, 18.0], [554.0, 16.0], [552.0, 17.0], [553.0, 14.0], [567.0, 28.375], [601.0, 68.65384615384615], [591.0, 67.33333333333333], [594.0, 66.0], [590.0, 65.8], [589.0, 64.5], [588.0, 63.0], [593.0, 66.0], [603.0, 54.333333333333336], [604.0, 44.0], [605.0, 63.0], [607.0, 50.333333333333336], [609.0, 70.66666666666667], [620.0, 76.66666666666667], [619.0, 63.0], [621.0, 67.0], [611.0, 56.25], [610.0, 53.0], [613.0, 57.0], [612.0, 61.0], [614.0, 57.0], [624.0, 76.0], [637.0, 61.666666666666664], [639.0, 42.0], [632.0, 86.0], [634.0, 83.4], [635.0, 74.33333333333333], [636.0, 73.875], [628.0, 93.5], [631.0, 77.5], [625.0, 92.5], [622.0, 77.0], [623.0, 72.0], [608.0, 50.0], [616.0, 62.0], [618.0, 82.5], [641.0, 43.333333333333336], [640.0, 43.285714285714285], [644.0, 44.25], [642.0, 44.0], [643.0, 43.666666666666664], [645.0, 47.125], [649.0, 50.5], [652.0, 46.333333333333336], [651.0, 50.0], [654.0, 44.0], [648.0, 49.00000000000001], [647.0, 47.0], [668.0, 31.0], [667.0, 29.0], [670.0, 32.666666666666664], [671.0, 33.0], [657.0, 34.125], [658.0, 30.0], [660.0, 28.0], [659.0, 35.0], [661.0, 26.333333333333332], [656.0, 40.0], [655.0, 36.0], [678.0, 39.0], [674.0, 35.0], [676.0, 37.0], [677.0, 37.5], [675.0, 36.0], [679.0, 40.5], [697.0, 33.2], [699.0, 26.8], [700.0, 23.444444444444443], [701.0, 19.428571428571427], [703.0, 21.0], [698.0, 29.5], [688.0, 49.25], [689.0, 49.44444444444444], [695.0, 39.5], [693.0, 49.2], [691.0, 45.0], [690.0, 51.333333333333336], [681.0, 41.0], [684.0, 43.57142857142858], [682.0, 42.0], [672.0, 35.0], [687.0, 47.0], [718.0, 33.0], [706.0, 22.0], [709.0, 25.0], [708.0, 23.0], [715.0, 29.0], [712.0, 28.0], [710.0, 26.0], [717.0, 32.5], [716.0, 31.666666666666668], [719.0, 34.0], [711.0, 27.0], [730.0, 34.45454545454545], [732.0, 28.0], [733.0, 29.0], [729.0, 36.83333333333333], [723.0, 37.0], [724.0, 40.0], [725.0, 42.0], [727.0, 42.73333333333333], [726.0, 42.333333333333336], [720.0, 34.666666666666664], [740.0, 19.5], [737.0, 24.857142857142858], [741.0, 20.0], [744.0, 23.5], [747.0, 28.4], [745.0, 25.666666666666668], [743.0, 22.0], [752.0, 33.25], [757.0, 36.0], [758.0, 37.5], [759.0, 38.0], [755.0, 34.0], [760.0, 39.0], [763.0, 44.625], [765.0, 45.0], [762.0, 43.0], [761.0, 39.83333333333333], [746.0, 27.0], [750.0, 34.0], [749.0, 30.333333333333332], [769.0, 46.5], [768.0, 44.5], [786.0, 39.0], [770.0, 46.44444444444444], [788.0, 41.0], [789.0, 41.0], [790.0, 43.0], [776.0, 49.0], [775.0, 49.0], [784.0, 36.5], [794.0, 49.5], [797.0, 54.0], [796.0, 52.0], [798.0, 60.3888888888889], [792.0, 45.0], [793.0, 46.0], [783.0, 39.0], [782.0, 41.142857142857146], [780.0, 45.1], [807.0, 28.0], [814.0, 32.8], [800.0, 50.14285714285714], [815.0, 33.5], [813.0, 31.75], [803.0, 42.0], [806.0, 31.8], [804.0, 36.0], [801.0, 43.5], [817.0, 35.6], [819.0, 38.0], [820.0, 41.285714285714285], [822.0, 43.25], [823.0, 44.0], [816.0, 34.0], [829.0, 31.166666666666668], [830.0, 30.0], [831.0, 30.0], [825.0, 43.54545454545454], [824.0, 45.0], [826.0, 39.8], [810.0, 28.0], [809.0, 27.0], [808.0, 27.0], [839.0, 27.0], [834.0, 27.0], [833.0, 28.0], [841.0, 27.0], [835.0, 24.666666666666668], [849.0, 36.0], [860.0, 48.666666666666664], [850.0, 38.4], [852.0, 40.5], [853.0, 40.5], [854.0, 41.0], [859.0, 47.2], [856.0, 43.0], [857.0, 44.0], [858.0, 45.5], [867.0, 62.0], [864.0, 53.8], [878.0, 47.333333333333336], [877.0, 51.0], [876.0, 51.5], [875.0, 51.0], [872.0, 54.0], [865.0, 56.0], [866.0, 57.83333333333333], [870.0, 57.0], [883.0, 32.0], [884.0, 31.5], [886.0, 33.857142857142854], [887.0, 35.666666666666664], [871.0, 56.5], [882.0, 33.111111111111114], [881.0, 41.46153846153847], [880.0, 45.5], [893.0, 39.5], [892.0, 38.0], [890.0, 36.0], [888.0, 36.0], [894.0, 41.0], [895.0, 44.0], [869.0, 61.0], [868.0, 60.0], [908.0, 38.454545454545446], [902.0, 46.086956521739125], [907.0, 30.0], [900.0, 43.25], [898.0, 44.0], [903.0, 36.8], [920.0, 45.166666666666664], [921.0, 45.5], [912.0, 38.0], [924.0, 49.0], [923.0, 47.0], [916.0, 40.666666666666664], [914.0, 39.0], [913.0, 39.0], [917.0, 44.0], [918.0, 42.0], [919.0, 43.0], [922.0, 47.0], [897.0, 42.0], [909.0, 34.6], [910.0, 36.0], [911.0, 37.0], [906.0, 26.0], [905.0, 36.166666666666664], [904.0, 31.0], [929.0, 23.666666666666668], [928.0, 51.666666666666664], [930.0, 20.0], [931.0, 18.666666666666668], [934.0, 17.0], [937.0, 20.5], [939.0, 22.5], [935.0, 19.0], [956.0, 38.0], [954.0, 35.0], [945.0, 27.0], [957.0, 37.0], [958.0, 39.0], [942.0, 23.5], [941.0, 23.0], [943.0, 26.0], [960.0, 39.66666666666667], [969.0, 46.5], [968.0, 44.333333333333336], [965.0, 43.333333333333336], [970.0, 47.0], [967.0, 43.666666666666664], [973.0, 50.5], [972.0, 49.0], [982.0, 38.0], [983.0, 29.0], [981.0, 33.28571428571429], [979.0, 42.12500000000001], [980.0, 36.5], [984.0, 29.0], [985.0, 28.666666666666668], [986.0, 28.0], [987.0, 28.5], [977.0, 54.0], [976.0, 48.0], [988.0, 28.0], [991.0, 27.5], [978.0, 46.666666666666664], [994.0, 29.0], [1005.0, 37.142857142857146], [1011.0, 41.85714285714286], [1012.0, 41.5], [1015.0, 41.5], [997.0, 31.5], [999.0, 33.666666666666664], [1016.0, 37.4], [1019.0, 27.666666666666668], [1020.0, 26.0], [1017.0, 33.0], [1018.0, 31.0], [1008.0, 39.5], [1023.0, 27.428571428571427], [1021.0, 31.499999999999996], [1006.0, 38.0], [1007.0, 38.5], [992.0, 28.0], [1010.0, 41.0], [1001.0, 35.5], [1004.0, 37.0], [1003.0, 36.0], [995.0, 30.0], [1076.0, 37.75], [1028.0, 20.0], [1024.0, 26.2], [1052.0, 33.0], [1048.0, 29.5], [1046.0, 29.0], [1050.0, 32.0], [1054.0, 34.0], [1026.0, 21.0], [1044.0, 27.0], [1036.0, 25.0], [1070.0, 43.2], [1068.0, 42.142857142857146], [1066.0, 41.0], [1064.0, 40.333333333333336], [1062.0, 38.5], [1084.0, 31.0], [1086.0, 32.0], [1078.0, 32.5], [1074.0, 46.0], [1058.0, 37.0], [1060.0, 37.5], [1090.0, 28.666666666666668], [1092.0, 27.666666666666668], [1088.0, 29.0], [1116.0, 36.0], [1118.0, 38.0], [1114.0, 34.4], [1098.0, 30.0], [1096.0, 29.0], [1094.0, 28.0], [1110.0, 32.0], [1112.0, 32.5], [1126.0, 45.2], [1128.0, 49.2], [1130.0, 49.0], [1122.0, 42.0], [1144.0, 36.0], [1142.0, 29.666666666666668], [1140.0, 33.666666666666664], [1138.0, 38.142857142857146], [1100.0, 30.0], [1158.0, 32.5], [1156.0, 31.0], [1154.0, 28.0], [1178.0, 50.0], [1182.0, 50.0], [1162.0, 35.0], [1184.0, 24.6], [1206.0, 33.882352941176464], [1204.0, 42.0], [1186.0, 54.0], [1192.0, 55.0], [1194.0, 56.0], [1198.0, 54.9375], [1196.0, 58.0], [1174.0, 44.5], [1172.0, 45.0], [1230.0, 49.333333333333336], [1218.0, 37.0], [1220.0, 40.0], [1226.0, 42.666666666666664], [1248.0, 44.0], [1270.0, 10.133333333333333], [1256.0, 39.5], [1258.0, 10.0], [1254.0, 46.0], [1260.0, 11.0], [1224.0, 41.0], [1240.0, 40.0], [1238.0, 38.5], [1242.0, 41.5], [1244.0, 45.0], [1246.0, 42.0], [1236.0, 54.0], [1232.0, 51.5], [1288.0, 67.4], [1290.0, 74.5], [1280.0, 14.0], [1310.0, 35.0], [1296.0, 74.0], [1298.0, 26.666666666666668], [1302.0, 49.66666666666667], [1304.0, 12.2], [1282.0, 39.5], [1292.0, 67.25], [1312.0, 36.0], [1342.0, 28.333333333333336], [1340.0, 149.0], [1334.0, 116.0], [1330.0, 131.0], [1332.0, 106.5], [1338.0, 147.0], [1322.0, 87.4], [1324.0, 56.2], [1326.0, 81.0], [1318.0, 38.0], [1316.0, 38.333333333333336], [1320.0, 39.5], [1392.0, 48.44444444444444], [1346.0, 78.0], [1352.0, 46.0], [1358.0, 48.0], [1396.0, 51.0], [1376.0, 48.0], [1398.0, 52.333333333333336], [1406.0, 56.6], [1404.0, 55.5], [1402.0, 54.5], [1400.0, 54.0], [1378.0, 49.0], [1384.0, 50.0], [1380.0, 11.533333333333331], [1382.0, 50.0], [1388.0, 47.0], [1390.0, 45.5], [1354.0, 47.0], [1362.0, 46.0], [1364.0, 49.333333333333336], [1344.0, 53.0], [1374.0, 48.0], [1366.0, 46.0], [1370.0, 47.0], [1360.0, 50.0], [1350.0, 48.0], [1348.0, 47.0], [1416.0, 51.666666666666664], [1414.0, 78.12500000000001], [1412.0, 56.0], [1410.0, 58.0], [1408.0, 57.25], [1438.0, 33.0], [1432.0, 39.0], [1434.0, 32.0], [1436.0, 32.5], [1430.0, 33.0], [1424.0, 37.75], [1426.0, 36.0], [1428.0, 33.0], [1418.0, 43.5], [1420.0, 40.5], [1422.0, 39.2], [1468.0, 19.5], [1462.0, 23.5], [1464.0, 21.4], [1460.0, 30.176470588235293], [1458.0, 39.0], [1452.0, 44.699999999999996], [1454.0, 42.333333333333336], [1450.0, 44.0], [1448.0, 43.0], [1446.0, 14.055555555555557], [1444.0, 40.5], [1442.0, 37.0], [1486.0, 32.0], [1522.0, 53.0], [1484.0, 30.5], [1496.0, 37.0], [1490.0, 34.0], [1498.0, 38.0], [1478.0, 11.176470588235293], [1480.0, 27.0], [1514.0, 46.5], [1518.0, 50.5], [1512.0, 45.0], [1506.0, 42.0], [1534.0, 46.5], [1524.0, 55.666666666666664], [1526.0, 56.0], [1530.0, 55.7], [1508.0, 43.0], [1550.0, 44.857142857142854], [1540.0, 40.5], [1562.0, 17.0], [1556.0, 76.0], [1554.0, 10.0], [1552.0, 31.6], [1542.0, 40.94444444444444], [1544.0, 35.714285714285715], [1546.0, 50.63636363636363], [1586.0, 22.0], [1584.0, 32.75], [1588.0, 35.0], [1590.0, 41.5], [1592.0, 57.0], [1572.0, 26.666666666666668], [1576.0, 26.0], [1574.0, 11.88235294117647], [1580.0, 29.0], [1582.0, 33.0], [1570.0, 23.75], [1568.0, 22.857142857142858], [1548.0, 53.285714285714285], [1602.0, 20.0], [1600.0, 19.25], [1626.0, 36.0], [1630.0, 38.0], [1610.0, 26.0], [1614.0, 29.8], [1650.0, 16.0], [1656.0, 21.0], [1660.0, 25.0], [1654.0, 20.333333333333332], [1648.0, 20.0], [1632.0, 37.0], [1638.0, 17.32352941176471], [1642.0, 19.0], [1646.0, 19.0], [1634.0, 36.0], [1612.0, 28.0], [1604.0, 22.0], [1606.0, 22.0], [1616.0, 31.166666666666668], [1618.0, 32.0], [1622.0, 33.0], [1620.0, 33.0], [1624.0, 39.0], [1678.0, 39.0], [1668.0, 32.5], [1664.0, 29.333333333333332], [1672.0, 39.0], [1670.0, 36.0], [1666.0, 16.416666666666664], [1674.0, 40.5], [1682.0, 36.0], [1684.0, 32.333333333333336], [1686.0, 32.0], [1688.0, 30.666666666666668], [1694.0, 26.5], [1680.0, 37.0], [1708.0, 32.0], [1710.0, 33.5], [1702.0, 26.0], [1706.0, 12.416666666666666], [1700.0, 25.0], [1698.0, 26.666666666666668], [1696.0, 24.0], [1712.0, 35.5], [1714.0, 37.0], [1720.0, 41.0], [1726.0, 44.0], [1718.0, 38.0], [1716.0, 36.0], [1740.0, 57.0], [1730.0, 48.125], [1728.0, 45.0], [1756.0, 30.5], [1754.0, 32.0], [1748.0, 32.714285714285715], [1752.0, 33.0], [1734.0, 52.0], [1732.0, 51.0], [1738.0, 55.5], [1742.0, 58.125], [1778.0, 49.8], [1780.0, 48.0], [1784.0, 45.0], [1782.0, 48.0], [1788.0, 15.342857142857145], [1790.0, 42.0], [1786.0, 45.333333333333336], [1776.0, 52.333333333333336], [1764.0, 34.5], [1774.0, 53.0], [1772.0, 52.0], [1770.0, 49.5], [1766.0, 36.0], [1744.0, 56.5], [1746.0, 47.888888888888886], [1800.0, 35.333333333333336], [1798.0, 34.0], [1820.0, 84.03225806451614], [1806.0, 38.5], [1804.0, 14.124999999999996], [1840.0, 23.0], [1842.0, 112.33333333333333], [1824.0, 24.75], [1850.0, 256.0], [1854.0, 32.0], [1846.0, 26.333333333333332], [1848.0, 387.3577981651377], [1844.0, 25.333333333333332], [1808.0, 40.5], [1812.0, 42.8], [1814.0, 39.0], [1816.0, 27.0], [1832.0, 17.333333333333332], [1834.0, 19.0], [1836.0, 20.333333333333332], [1838.0, 211.42758620689654], [1828.0, 21.0], [1830.0, 16.333333333333332], [1826.0, 23.5], [1818.0, 23.0], [1870.0, 273.0], [1860.0, 26.333333333333332], [1858.0, 32.16666666666667], [1884.0, 230.66666666666666], [1882.0, 636.0], [1886.0, 116.71428571428571], [1868.0, 79.75], [1862.0, 500.99999999999983], [1864.0, 20.0], [1872.0, 187.66666666666666], [1892.0, 29.0], [1894.0, 311.5], [1898.0, 20.666666666666668], [1900.0, 191.33333333333334], [1902.0, 532.0], [1890.0, 222.0], [1888.0, 610.3947368421052], [1908.0, 19.0], [1910.0, 512.3727810650886], [1904.0, 22.0], [1912.0, 18.5], [1918.0, 242.0], [1916.0, 243.0], [1876.0, 20.5], [1878.0, 228.0], [1880.0, 27.0], [1928.0, 26.0], [1942.0, 265.29838709677426], [1930.0, 27.5], [1940.0, 41.5], [1938.0, 305.4881889763777], [1944.0, 39.21739130434783], [1932.0, 29.0], [1934.0, 345.42477876106193], [1968.0, 25.0], [1956.0, 99.0], [1980.0, 123.66666666666667], [1978.0, 168.5], [1976.0, 169.0], [1974.0, 170.0], [1982.0, 166.0], [1958.0, 52.14285714285714], [1960.0, 122.66666666666667], [1964.0, 172.5], [1962.0, 173.33333333333334], [1972.0, 100.0], [1922.0, 445.4406779661019], [1920.0, 464.0], [1926.0, 428.5], [1948.0, 12.0], [1950.0, 180.5], [1946.0, 224.06918238993714], [1990.0, 78.66666666666666], [1984.0, 111.0], [1994.0, 39.0], [1992.0, 162.0], [2002.0, 41.0], [2014.0, 99.0], [2012.0, 148.0], [2010.0, 149.0], [2008.0, 152.0], [2004.0, 156.2], [1996.0, 39.5], [1988.0, 100.0], [1986.0, 164.0], [2034.0, 86.0], [2032.0, 140.0], [1998.0, 161.0], [2038.0, 142.0], [2042.0, 47.0], [2046.0, 137.0], [2016.0, 49.0], [2020.0, 54.0], [2028.0, 142.0], [2030.0, 140.0], [2026.0, 142.0], [2022.0, 145.0], [2024.0, 143.5], [2018.0, 115.0], [2056.0, 59.333333333333336], [2048.0, 94.5], [2104.0, 39.33333333333333], [2100.0, 67.0], [2088.0, 37.875], [2092.0, 119.0], [2096.0, 67.66666666666667], [2068.0, 64.0], [2064.0, 63.0], [2060.0, 60.0], [2072.0, 62.25], [2076.0, 61.333333333333336], [2148.0, 27.5], [2160.0, 94.0], [2156.0, 96.0], [2144.0, 46.5], [2116.0, 35.5], [2128.0, 30.0], [2124.0, 80.0], [2136.0, 28.0], [2140.0, 27.0], [2132.0, 54.0], [2080.0, 59.6], [2084.0, 35.0], [2180.0, 48.25], [2176.0, 45.0], [2200.0, 66.5], [2208.0, 68.5], [2212.0, 69.0], [2204.0, 69.33333333333333], [2272.0, 71.6], [2276.0, 65.0], [2280.0, 61.2], [2284.0, 53.08333333333333], [2292.0, 39.0], [2296.0, 45.0], [2192.0, 66.5], [2240.0, 59.0], [2244.0, 56.5], [2248.0, 61.0], [2260.0, 64.44444444444444], [2264.0, 67.0], [2268.0, 69.5], [2256.0, 60.5], [2252.0, 60.0], [2232.0, 66.0], [2228.0, 69.0], [2224.0, 69.0], [2236.0, 60.0], [2360.0, 31.0], [2320.0, 47.5], [2328.0, 35.0], [2400.0, 213.16857190916247], [2324.0, 39.0], [2344.0, 41.0], [2352.0, 45.0], [2356.0, 46.0], [2364.0, 32.0], [2308.0, 27.0], [2368.0, 33.0], [2384.0, 45.66666666666667], [2388.0, 42.285714285714285], [2392.0, 37.33333333333333], [2396.0, 28.0], [2372.0, 32.0], [2376.0, 33.0], [2380.0, 32.0], [2073.0, 61.0], [2053.0, 56.83333333333333], [2049.0, 54.0], [2109.0, 41.0], [2097.0, 101.0], [2101.0, 66.66666666666667], [2089.0, 79.5], [2093.0, 41.0], [2069.0, 62.75], [2057.0, 96.0], [2065.0, 77.8], [2077.0, 103.25], [2145.0, 64.0], [2157.0, 36.0], [2149.0, 99.0], [2165.0, 73.33333333333333], [2173.0, 44.5], [2161.0, 66.0], [2113.0, 36.0], [2121.0, 72.0], [2117.0, 109.0], [2125.0, 56.0], [2141.0, 28.0], [2137.0, 104.0], [2133.0, 106.0], [2085.0, 60.42857142857143], [2081.0, 33.25], [2185.0, 52.0], [2181.0, 51.0], [2197.0, 64.5], [2273.0, 71.5], [2277.0, 72.0], [2281.0, 59.111111111111114], [2285.0, 51.0], [2289.0, 48.25], [2293.0, 42.0], [2297.0, 45.0], [2217.0, 70.0], [2233.0, 62.5], [2229.0, 70.0], [2221.0, 69.66666666666667], [2225.0, 69.0], [2237.0, 61.25], [2177.0, 67.0], [2193.0, 64.33333333333333], [2189.0, 57.0], [2209.0, 69.0], [2241.0, 58.0], [2269.0, 70.33333333333333], [2265.0, 67.0], [2245.0, 60.0], [2261.0, 66.0], [2305.0, 62.0], [2313.0, 57.857142857142854], [2337.0, 31.666666666666668], [2321.0, 44.00000000000001], [2329.0, 27.25], [2325.0, 39.5], [2333.0, 36.0], [2369.0, 33.0], [2381.0, 32.0], [2385.0, 50.46153846153847], [2397.0, 12.272727272727272], [2393.0, 32.470588235294116], [2373.0, 33.5], [2377.0, 33.0], [2341.0, 21.25], [2349.0, 45.0], [2345.0, 42.0], [2353.0, 45.0], [2357.0, 46.0], [1029.0, 18.0], [1055.0, 36.0], [1053.0, 34.333333333333336], [1051.0, 32.0], [1025.0, 22.0], [1043.0, 26.0], [1039.0, 25.0], [1073.0, 45.0], [1069.0, 43.0], [1067.0, 42.0], [1057.0, 35.0], [1081.0, 30.5], [1087.0, 31.25], [1079.0, 31.666666666666668], [1075.0, 43.099999999999994], [1059.0, 37.0], [1063.0, 5.0], [1031.0, 22.0], [1143.0, 15.181818181818182], [1119.0, 39.0], [1113.0, 32.0], [1091.0, 28.0], [1093.0, 27.0], [1105.0, 29.0], [1107.0, 30.0], [1111.0, 32.0], [1127.0, 47.42857142857143], [1133.0, 46.833333333333336], [1135.0, 41.5], [1121.0, 40.0], [1145.0, 25.0], [1149.0, 27.5], [1151.0, 29.333333333333332], [1141.0, 31.5], [1137.0, 38.25000000000001], [1103.0, 31.0], [1097.0, 6.0], [1161.0, 32.0], [1159.0, 33.0], [1157.0, 31.5], [1155.0, 29.25], [1153.0, 29.0], [1177.0, 47.75], [1179.0, 49.0], [1181.0, 51.0], [1183.0, 51.0], [1165.0, 36.666666666666664], [1167.0, 39.0], [1211.0, 30.0], [1207.0, 29.0], [1209.0, 30.0], [1205.0, 39.0], [1185.0, 53.0], [1203.0, 44.666666666666664], [1201.0, 48.25], [1199.0, 50.42857142857143], [1187.0, 54.0], [1189.0, 55.0], [1171.0, 43.0], [1169.0, 40.333333333333336], [1163.0, 36.0], [1229.0, 19.200000000000003], [1223.0, 40.75], [1219.0, 39.0], [1227.0, 44.33333333333333], [1231.0, 50.666666666666664], [1279.0, 24.428571428571423], [1267.0, 9.0], [1269.0, 9.5], [1249.0, 44.0], [1257.0, 10.0], [1251.0, 48.0], [1259.0, 8.0], [1263.0, 8.0], [1261.0, 8.0], [1221.0, 40.0], [1225.0, 42.0], [1237.0, 43.5], [1239.0, 39.333333333333336], [1243.0, 42.0], [1241.0, 41.00000000000001], [1235.0, 53.0], [1233.0, 52.0], [1291.0, 72.66666666666667], [1283.0, 16.0], [1289.0, 43.5], [1281.0, 15.0], [1309.0, 35.0], [1305.0, 62.5], [1303.0, 62.5], [1297.0, 25.5], [1299.0, 28.666666666666668], [1301.0, 67.0], [1293.0, 23.0], [1343.0, 91.75], [1341.0, 112.6], [1337.0, 145.66666666666666], [1335.0, 144.6], [1329.0, 127.5], [1331.0, 138.0], [1333.0, 89.5], [1325.0, 99.0], [1327.0, 47.5], [1321.0, 42.5], [1319.0, 39.0], [1315.0, 36.0], [1397.0, 51.0], [1347.0, 47.33333333333333], [1345.0, 66.625], [1393.0, 50.0], [1407.0, 58.0], [1405.0, 56.0], [1403.0, 55.0], [1401.0, 54.0], [1399.0, 53.0], [1381.0, 50.0], [1377.0, 50.0], [1387.0, 48.25], [1389.0, 46.0], [1391.0, 47.0], [1357.0, 48.0], [1355.0, 47.0], [1367.0, 46.0], [1371.0, 46.0], [1373.0, 46.6], [1361.0, 50.0], [1351.0, 47.0], [1349.0, 48.0], [1439.0, 35.545454545454554], [1409.0, 57.0], [1413.0, 53.6], [1415.0, 8.882352941176471], [1411.0, 58.2], [1433.0, 31.333333333333332], [1435.0, 32.5], [1431.0, 30.142857142857142], [1429.0, 33.666666666666664], [1427.0, 35.0], [1417.0, 45.33333333333333], [1457.0, 41.5], [1441.0, 37.5], [1459.0, 34.0], [1451.0, 44.0], [1455.0, 42.0], [1449.0, 42.0], [1443.0, 38.0], [1445.0, 39.333333333333336], [1447.0, 42.4], [1421.0, 41.0], [1419.0, 44.0], [1483.0, 31.0], [1485.0, 31.0], [1495.0, 36.0], [1501.0, 40.0], [1499.0, 39.25], [1503.0, 42.0], [1487.0, 32.0], [1533.0, 46.166666666666664], [1535.0, 44.333333333333336], [1525.0, 55.0], [1529.0, 58.0], [1531.0, 48.0], [1509.0, 13.631578947368421], [1521.0, 53.0], [1545.0, 50.0], [1541.0, 41.06666666666666], [1537.0, 42.23529411764705], [1567.0, 22.0], [1563.0, 18.0], [1561.0, 15.0], [1555.0, 73.0], [1553.0, 45.599999999999994], [1539.0, 12.461538461538462], [1543.0, 34.4], [1551.0, 25.666666666666668], [1585.0, 23.25], [1589.0, 44.166666666666664], [1597.0, 29.125], [1599.0, 25.833333333333332], [1595.0, 33.25], [1587.0, 23.0], [1577.0, 24.0], [1581.0, 28.333333333333332], [1575.0, 28.0], [1573.0, 30.2], [1571.0, 25.0], [1549.0, 57.0], [1547.0, 53.5], [1603.0, 21.0], [1607.0, 23.5], [1605.0, 11.799999999999999], [1601.0, 19.0], [1609.0, 24.0], [1611.0, 27.0], [1649.0, 15.0], [1653.0, 19.75], [1657.0, 22.0], [1659.0, 24.0], [1663.0, 28.0], [1661.0, 26.0], [1635.0, 33.875], [1637.0, 27.0], [1639.0, 19.666666666666668], [1643.0, 20.5], [1645.0, 20.333333333333332], [1647.0, 18.333333333333332], [1641.0, 22.0], [1623.0, 35.5], [1617.0, 31.333333333333332], [1627.0, 36.0], [1619.0, 32.5], [1621.0, 32.5], [1625.0, 35.0], [1671.0, 39.0], [1667.0, 32.0], [1665.0, 31.0], [1695.0, 24.0], [1691.0, 16.285714285714292], [1669.0, 34.6], [1675.0, 40.0], [1677.0, 39.0], [1679.0, 38.0], [1717.0, 38.0], [1721.0, 42.5], [1725.0, 44.0], [1719.0, 39.0], [1707.0, 32.0], [1711.0, 34.0], [1681.0, 33.5], [1689.0, 28.75], [1743.0, 58.0], [1735.0, 53.0], [1729.0, 45.0], [1731.0, 13.73076923076923], [1737.0, 55.0], [1739.0, 57.0], [1741.0, 60.0], [1767.0, 45.47826086956522], [1765.0, 34.5], [1763.0, 33.0], [1791.0, 30.0], [1785.0, 45.0], [1783.0, 46.0], [1787.0, 44.0], [1781.0, 46.0], [1777.0, 51.666666666666664], [1779.0, 49.5], [1789.0, 42.5], [1771.0, 23.04878048780488], [1773.0, 52.0], [1775.0, 53.0], [1745.0, 52.25], [1747.0, 40.666666666666664], [1753.0, 15.419354838709676], [1749.0, 31.0], [1755.0, 31.0], [1759.0, 31.833333333333336], [1805.0, 38.0], [1795.0, 32.5], [1793.0, 31.5], [1821.0, 65.0], [1815.0, 30.75], [1817.0, 25.5], [1819.0, 24.5], [1799.0, 35.0], [1797.0, 33.0], [1803.0, 36.0], [1807.0, 40.09090909090909], [1841.0, 23.666666666666668], [1851.0, 30.4], [1847.0, 26.5], [1843.0, 289.5], [1845.0, 289.0], [1849.0, 29.0], [1855.0, 32.666666666666664], [1853.0, 121.6], [1829.0, 18.0], [1827.0, 22.0], [1825.0, 24.0], [1831.0, 16.5], [1833.0, 18.0], [1809.0, 43.33333333333334], [1811.0, 42.0], [1813.0, 39.333333333333336], [1867.0, 188.33333333333334], [1859.0, 29.6], [1857.0, 98.0], [1887.0, 32.0], [1881.0, 332.0], [1883.0, 28.0], [1877.0, 608.278606965174], [1879.0, 25.0], [1863.0, 22.285714285714285], [1871.0, 14.0], [1915.0, 469.2237762237762], [1919.0, 20.0], [1909.0, 18.0], [1913.0, 258.5], [1911.0, 499.5], [1907.0, 22.0], [1905.0, 22.5], [1891.0, 98.22222222222223], [1895.0, 573.8479999999998], [1897.0, 22.0], [1899.0, 540.6363636363634], [1903.0, 24.0], [1901.0, 533.0], [1889.0, 221.33333333333334], [1861.0, 24.75], [1873.0, 18.0], [1865.0, 16.0], [1875.0, 21.0], [1931.0, 355.1285714285715], [1929.0, 405.2327044025156], [1951.0, 179.0], [1935.0, 60.9], [1933.0, 362.0], [1971.0, 29.0], [1941.0, 43.0], [1937.0, 179.0], [1939.0, 288.0], [1949.0, 32.0], [1947.0, 202.7890625], [1957.0, 85.0], [1953.0, 179.0], [1961.0, 174.0], [1963.0, 172.66666666666666], [1975.0, 31.0], [1977.0, 104.5], [1979.0, 100.5], [1981.0, 166.6], [1983.0, 35.0], [1997.0, 38.0], [1999.0, 80.0], [2035.0, 121.0], [2039.0, 58.50746268656716], [2041.0, 139.0], [2017.0, 123.75], [2045.0, 48.5], [2047.0, 50.333333333333336], [2043.0, 93.375], [2037.0, 52.75], [2009.0, 55.900000000000006], [2005.0, 126.0], [2007.0, 152.0], [1989.0, 51.0], [2003.0, 100.0], [2013.0, 97.5], [2015.0, 99.0], [2019.0, 52.5], [2031.0, 99.0], [2029.0, 125.6], [2023.0, 54.5], [2021.0, 144.0], [2025.0, 99.0], [2027.0, 99.5], [2062.0, 85.66666666666667], [2050.0, 94.5], [2074.0, 72.5], [2070.0, 130.5], [2078.0, 65.0], [2082.0, 34.5], [2090.0, 40.0], [2094.0, 99.5], [2106.0, 35.0], [2118.0, 32.5], [2166.0, 39.0], [2174.0, 66.5], [2146.0, 63.5], [2154.0, 97.0], [2158.0, 65.5], [2142.0, 28.0], [2138.0, 78.66666666666667], [2134.0, 105.0], [2126.0, 108.0], [2202.0, 68.0], [2182.0, 50.0], [2218.0, 70.33333333333333], [2190.0, 64.33333333333333], [2214.0, 70.5], [2186.0, 54.0], [2198.0, 65.0], [2206.0, 68.0], [2274.0, 72.0], [2278.0, 68.33333333333333], [2282.0, 57.0], [2286.0, 50.0], [2294.0, 40.6], [2298.0, 44.5], [2302.0, 60.73333333333334], [2290.0, 46.5], [2242.0, 58.666666666666664], [2258.0, 61.333333333333336], [2266.0, 68.0], [2270.0, 70.0], [2230.0, 69.0], [2234.0, 66.5], [2178.0, 85.0], [2226.0, 68.0], [2222.0, 70.5], [2318.0, 47.0], [2306.0, 63.0], [2362.0, 31.0], [2326.0, 36.0], [2330.0, 35.0], [2322.0, 41.0], [2334.0, 37.0], [2382.0, 339.1558441558441], [2378.0, 33.5], [2390.0, 29.0], [2386.0, 50.75], [2394.0, 23.307692307692307], [2346.0, 42.0], [2342.0, 41.0], [2338.0, 17.0], [2358.0, 33.888888888888886], [2354.0, 45.5], [2079.0, 33.666666666666664], [2063.0, 62.5], [2055.0, 57.5], [2067.0, 98.0], [2051.0, 101.22222222222223], [2111.0, 37.0], [2103.0, 45.0], [2099.0, 44.0], [2091.0, 99.25], [2095.0, 70.25], [2059.0, 98.5], [2071.0, 61.0], [2075.0, 63.0], [2115.0, 32.5], [2163.0, 39.0], [2167.0, 65.5], [2171.0, 79.8], [2175.0, 65.5], [2147.0, 41.2], [2155.0, 96.5], [2159.0, 36.0], [2119.0, 51.875], [2123.0, 108.0], [2139.0, 47.5], [2135.0, 27.0], [2143.0, 29.5], [2131.0, 30.0], [2083.0, 78.0], [2087.0, 37.0], [2275.0, 72.66666666666667], [2235.0, 56.5], [2191.0, 57.0], [2195.0, 62.5], [2279.0, 65.0], [2283.0, 55.0], [2295.0, 43.6], [2299.0, 46.0], [2303.0, 64.0], [2291.0, 44.44444444444444], [2255.0, 61.0], [2251.0, 59.75], [2247.0, 53.0], [2215.0, 70.0], [2211.0, 66.0], [2239.0, 59.0], [2179.0, 83.16666666666667], [2231.0, 69.0], [2227.0, 63.5], [2219.0, 69.0], [2259.0, 61.0], [2267.0, 62.25], [2263.0, 67.0], [2271.0, 71.0], [2323.0, 41.0], [2315.0, 50.9375], [2311.0, 61.0], [2307.0, 61.0], [2359.0, 30.666666666666668], [2363.0, 33.0], [2367.0, 32.0], [2347.0, 43.0], [2351.0, 44.0], [2331.0, 35.5], [2335.0, 37.0], [2375.0, 33.0], [2379.0, 31.5], [2387.0, 43.68750000000001], [2383.0, 68.67857142857147], [2391.0, 30.57142857142857], [2395.0, 18.363636363636367], [2327.0, 36.0], [2319.0, 47.0], [2343.0, 41.0], [2339.0, 22.5]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2392.1378040637082, 212.80056376712608]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 84989.5, "minX": 1.6334244E12, "maxY": 8202492.316666666, "series": [{"data": [[1.63342476E12, 7761326.066666666], [1.63342446E12, 8060866.266666667], [1.6334244E12, 4065804.4], [1.63342506E12, 7918189.066666666], [1.633425E12, 8138476.266666667], [1.6334247E12, 7935793.316666666], [1.63342464E12, 8202492.316666666], [1.6334253E12, 4247417.3], [1.63342524E12, 7824204.383333334], [1.63342494E12, 7681836.45], [1.63342488E12, 8097188.533333333], [1.63342458E12, 7591215.683333334], [1.63342452E12, 7873316.766666667], [1.63342518E12, 8135266.55], [1.63342512E12, 7530810.416666667], [1.63342482E12, 7855465.433333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63342476E12, 163495.78333333333], [1.63342446E12, 168763.9], [1.6334244E12, 84989.5], [1.63342506E12, 166877.53333333333], [1.633425E12, 171520.13333333333], [1.6334247E12, 167128.03333333333], [1.63342464E12, 172714.18333333332], [1.6334253E12, 89436.85], [1.63342524E12, 164764.98333333334], [1.63342494E12, 161895.36666666667], [1.63342488E12, 170640.6], [1.63342458E12, 159835.7], [1.63342452E12, 165660.7], [1.63342518E12, 171308.6], [1.63342512E12, 158636.08333333334], [1.63342482E12, 165527.61666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334253E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22.278270731869863, "minX": 1.6334244E12, "maxY": 333.1662425784577, "series": [{"data": [[1.63342476E12, 321.2858991164601], [1.63342446E12, 199.61966589616335], [1.6334244E12, 29.367309816149902], [1.63342506E12, 22.278270731869863], [1.633425E12, 99.15049331429472], [1.6334247E12, 304.18096126303334], [1.63342464E12, 262.95500620437576], [1.6334253E12, 288.15202439859246], [1.63342524E12, 71.06741895704134], [1.63342494E12, 286.8831276003172], [1.63342488E12, 333.1662425784577], [1.63342458E12, 295.00964719813334], [1.63342452E12, 158.60812852538297], [1.63342518E12, 201.73726197439876], [1.63342512E12, 231.68851653653775], [1.63342482E12, 251.44075263573836]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334253E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22.204416572152855, "minX": 1.6334244E12, "maxY": 333.0371077184039, "series": [{"data": [[1.63342476E12, 321.0812209530007], [1.63342446E12, 199.39430154592085], [1.6334244E12, 28.95608393425617], [1.63342506E12, 22.204416572152855], [1.633425E12, 99.04592366610515], [1.6334247E12, 303.9037404656436], [1.63342464E12, 262.6273024672469], [1.6334253E12, 287.8117822798986], [1.63342524E12, 70.80583475513974], [1.63342494E12, 286.77411202420797], [1.63342488E12, 333.0371077184039], [1.63342458E12, 294.67452025214385], [1.63342452E12, 158.32248858447468], [1.63342518E12, 201.4489504126848], [1.63342512E12, 231.48188437582237], [1.63342482E12, 251.30852011904986]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334253E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0014004294650359311, "minX": 1.6334244E12, "maxY": 1.346931238248719, "series": [{"data": [[1.63342476E12, 0.7569670247357082], [1.63342446E12, 0.05085329267692949], [1.6334244E12, 1.1769635548626067], [1.63342506E12, 0.040930015344585964], [1.633425E12, 0.04142866415682154], [1.6334247E12, 0.10263797755054468], [1.63342464E12, 0.05986817720335736], [1.6334253E12, 0.0014004294650359311], [1.63342524E12, 0.4128756524823916], [1.63342494E12, 0.08248805143898574], [1.63342488E12, 0.050221830756181786], [1.63342458E12, 0.07280674259046428], [1.63342452E12, 1.346931238248719], [1.63342518E12, 0.04659777734451129], [1.63342512E12, 0.07883147644530251], [1.63342482E12, 0.05789376334684104]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334253E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.6334244E12, "maxY": 3066.0, "series": [{"data": [[1.63342476E12, 934.0], [1.63342446E12, 3066.0], [1.6334244E12, 390.0], [1.63342506E12, 92.0], [1.633425E12, 925.0], [1.6334247E12, 939.0], [1.63342464E12, 893.0], [1.6334253E12, 975.0], [1.63342524E12, 1265.0], [1.63342494E12, 945.0], [1.63342488E12, 994.0], [1.63342458E12, 907.0], [1.63342452E12, 1362.0], [1.63342518E12, 941.0], [1.63342512E12, 950.0], [1.63342482E12, 905.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63342476E12, 889.0], [1.63342446E12, 43.0], [1.6334244E12, 44.0], [1.63342506E12, 43.0], [1.633425E12, 41.0], [1.6334247E12, 809.9900000000016], [1.63342464E12, 829.0], [1.6334253E12, 860.0], [1.63342524E12, 1201.0], [1.63342494E12, 820.0], [1.63342488E12, 867.0], [1.63342458E12, 843.0], [1.63342452E12, 844.0], [1.63342518E12, 369.9900000000016], [1.63342512E12, 881.0], [1.63342482E12, 819.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63342476E12, 933.9994727325429], [1.63342446E12, 64.0], [1.6334244E12, 67.0], [1.63342506E12, 80.99736366271463], [1.633425E12, 76.0], [1.6334247E12, 838.0], [1.63342464E12, 881.9989454650859], [1.6334253E12, 897.9994727325429], [1.63342524E12, 1262.0], [1.63342494E12, 892.9994727325429], [1.63342488E12, 917.9989454650859], [1.63342458E12, 905.9989454650859], [1.63342452E12, 886.0], [1.63342518E12, 400.0], [1.63342512E12, 921.9994727325429], [1.63342482E12, 840.0]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63342476E12, 928.9993051910387], [1.63342446E12, 61.0], [1.6334244E12, 66.0], [1.63342506E12, 60.99861038207746], [1.633425E12, 75.0], [1.6334247E12, 830.0], [1.63342464E12, 870.0], [1.6334253E12, 888.0], [1.63342524E12, 1249.9986103820775], [1.63342494E12, 885.9993051910387], [1.63342488E12, 907.0], [1.63342458E12, 888.0], [1.63342452E12, 876.0], [1.63342518E12, 392.0], [1.63342512E12, 908.0], [1.63342482E12, 833.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63342476E12, 4.0], [1.63342446E12, 4.0], [1.6334244E12, 4.0], [1.63342506E12, 4.0], [1.633425E12, 4.0], [1.6334247E12, 4.0], [1.63342464E12, 4.0], [1.6334253E12, 5.0], [1.63342524E12, 5.0], [1.63342494E12, 5.0], [1.63342488E12, 4.0], [1.63342458E12, 5.0], [1.63342452E12, 5.0], [1.63342518E12, 5.0], [1.63342512E12, 4.0], [1.63342482E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63342476E12, 240.0], [1.63342446E12, 23.0], [1.6334244E12, 24.0], [1.63342506E12, 22.0], [1.633425E12, 23.0], [1.6334247E12, 272.0], [1.63342464E12, 149.0], [1.6334253E12, 287.0], [1.63342524E12, 28.0], [1.63342494E12, 303.0], [1.63342488E12, 338.0], [1.63342458E12, 192.0], [1.63342452E12, 288.0], [1.63342518E12, 25.0], [1.63342512E12, 321.0], [1.63342482E12, 90.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334253E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 21.0, "maxY": 700.0, "series": [{"data": [[21.0, 13.0], [33.0, 14.0], [32.0, 22.5], [39.0, 41.0], [41.0, 23.0], [40.0, 13.0], [48.0, 18.0], [52.0, 24.0], [61.0, 27.0], [71.0, 36.0], [68.0, 28.0], [73.0, 15.0], [78.0, 74.5], [81.0, 38.0], [82.0, 32.5], [88.0, 34.0], [90.0, 25.0], [97.0, 21.0], [107.0, 48.0], [110.0, 17.0], [119.0, 64.0], [120.0, 64.0], [141.0, 26.0], [142.0, 24.0], [140.0, 21.0], [138.0, 22.0], [139.0, 47.0], [143.0, 58.0], [150.0, 66.5], [146.0, 35.5], [147.0, 23.0], [149.0, 12.0], [148.0, 39.0], [163.0, 20.0], [168.0, 19.0], [191.0, 140.0], [192.0, 21.5], [193.0, 23.0], [203.0, 69.0], [206.0, 139.0], [212.0, 24.0], [210.0, 22.0], [218.0, 21.0], [225.0, 56.0], [231.0, 86.0], [237.0, 23.0], [238.0, 21.0], [247.0, 23.0], [244.0, 20.0], [245.0, 27.0], [267.0, 23.0], [263.0, 126.0], [285.0, 24.0], [276.0, 89.5], [287.0, 25.0], [283.0, 110.0], [274.0, 132.0], [301.0, 24.0], [295.0, 118.0], [298.0, 23.0], [288.0, 19.0], [308.0, 96.0], [317.0, 22.0], [323.0, 23.0], [324.0, 21.0], [329.0, 22.0], [334.0, 125.5], [326.0, 23.0], [322.0, 22.0], [332.0, 19.0], [367.0, 126.0], [364.0, 122.0], [370.0, 121.0], [377.0, 89.0], [381.0, 22.0], [396.0, 22.5], [389.0, 22.0], [400.0, 25.0], [414.0, 21.0], [421.0, 20.0], [422.0, 134.0], [429.0, 133.0], [419.0, 122.0], [447.0, 23.0], [435.0, 23.0], [440.0, 22.0], [438.0, 23.0], [436.0, 33.0], [441.0, 21.0], [442.0, 20.0], [446.0, 73.5], [432.0, 20.0], [455.0, 30.0], [462.0, 22.0], [460.0, 22.0], [479.0, 21.0], [466.0, 142.0], [473.0, 24.0], [487.0, 20.0], [485.0, 148.0], [482.0, 23.0], [510.0, 24.0], [500.0, 23.0], [501.0, 182.0], [530.0, 24.0], [531.0, 23.0], [540.0, 140.0], [532.0, 22.0], [517.0, 21.0], [529.0, 22.0], [523.0, 31.0], [543.0, 20.0], [518.0, 21.0], [555.0, 22.5], [546.0, 22.0], [564.0, 22.0], [568.0, 24.0], [550.0, 23.0], [562.0, 23.0], [572.0, 21.0], [577.0, 150.0], [597.0, 22.0], [580.0, 23.0], [586.0, 22.0], [591.0, 172.0], [585.0, 22.0], [576.0, 23.0], [637.0, 209.0], [614.0, 108.0], [633.0, 22.0], [668.0, 35.0], [670.0, 194.5], [652.0, 22.0], [662.0, 21.0], [694.0, 234.0], [692.0, 204.5], [675.0, 22.0], [721.0, 218.0], [722.0, 25.0], [719.0, 123.0], [707.0, 22.0], [713.0, 207.0], [739.0, 92.0], [745.0, 21.0], [767.0, 204.0], [769.0, 25.0], [768.0, 229.0], [798.0, 21.0], [799.0, 349.0], [796.0, 194.0], [812.0, 24.0], [819.0, 22.0], [816.0, 21.0], [820.0, 22.0], [836.0, 197.5], [841.0, 23.0], [858.0, 21.0], [851.0, 20.0], [837.0, 21.0], [865.0, 23.0], [864.0, 21.0], [895.0, 21.0], [886.0, 208.0], [913.0, 28.0], [898.0, 22.0], [921.0, 20.0], [915.0, 21.0], [909.0, 183.0], [923.0, 186.0], [934.0, 21.0], [949.0, 22.0], [933.0, 22.0], [939.0, 22.0], [950.0, 23.0], [956.0, 21.0], [930.0, 21.0], [946.0, 24.0], [989.0, 23.0], [979.0, 23.0], [984.0, 23.0], [985.0, 23.0], [962.0, 20.0], [974.0, 22.0], [973.0, 22.0], [971.0, 22.0], [990.0, 22.0], [988.0, 22.0], [987.0, 22.0], [986.0, 22.0], [983.0, 23.0], [991.0, 21.0], [982.0, 22.0], [981.0, 22.0], [978.0, 22.0], [976.0, 21.0], [977.0, 22.0], [1007.0, 23.0], [1010.0, 22.0], [1001.0, 22.0], [1003.0, 22.0], [1011.0, 22.0], [1014.0, 23.0], [1015.0, 23.0], [1013.0, 22.0], [1012.0, 23.0], [997.0, 23.0], [1008.0, 23.0], [999.0, 22.0], [998.0, 22.0], [1009.0, 22.0], [994.0, 22.0], [995.0, 22.0], [996.0, 22.0], [992.0, 22.0], [993.0, 21.0], [1002.0, 22.0], [1000.0, 22.0], [1004.0, 23.0], [1005.0, 22.0], [1006.0, 22.0], [1040.0, 22.0], [1045.0, 23.0], [1069.0, 22.0], [1083.0, 24.0], [1058.0, 277.0], [1096.0, 316.0], [1089.0, 23.0], [1103.0, 23.0], [1095.0, 22.0], [1185.0, 27.0], [1190.0, 25.0], [1173.0, 23.0], [1195.0, 269.0], [1191.0, 25.0], [1181.0, 24.0], [1161.0, 24.0], [1187.0, 23.0], [1164.0, 305.0], [1247.0, 25.0], [1272.0, 25.0], [1226.0, 27.0], [1234.0, 26.0], [1339.0, 277.0], [1314.0, 72.0], [1317.0, 33.0], [1307.0, 28.0], [1342.0, 28.0], [1316.0, 27.0], [1301.0, 28.0], [1296.0, 29.0], [1324.0, 276.0], [1282.0, 29.0], [1329.0, 28.0], [1351.0, 28.0], [1404.0, 285.5], [1375.0, 60.0], [1368.0, 28.0], [1344.0, 28.0], [1397.0, 30.0], [1360.0, 25.0], [1434.0, 30.0], [1409.0, 29.0], [1449.0, 29.0], [1455.0, 32.0], [1452.0, 231.0], [1466.0, 34.0], [1431.0, 232.0], [1481.0, 35.0], [1534.0, 36.0], [1530.0, 31.0], [1472.0, 33.0], [1539.0, 37.0], [1591.0, 398.0], [1573.0, 38.0], [1653.0, 430.0], [1620.0, 105.5], [1647.0, 109.0], [1602.0, 208.0], [1645.0, 78.0], [1605.0, 76.0], [1649.0, 222.0], [1648.0, 278.0], [1608.0, 221.0], [1600.0, 115.0], [1623.0, 185.0], [1642.0, 94.5], [1632.0, 112.0], [1675.0, 338.0], [1700.0, 352.0], [1682.0, 353.0], [1706.0, 191.0], [1755.0, 39.0], [1732.0, 353.0], [1736.0, 341.5], [1772.0, 361.0], [1769.0, 182.0], [1766.0, 185.0], [1754.0, 218.5], [1803.0, 285.0], [1850.0, 415.5], [1816.0, 349.0], [1797.0, 343.0], [1832.0, 313.0], [1846.0, 396.0], [1812.0, 220.0], [1811.0, 354.0], [1836.0, 215.0], [1837.0, 489.0], [1884.0, 301.0], [1877.0, 360.0], [1879.0, 267.0], [1874.0, 410.0], [1875.0, 368.0], [1893.0, 388.0], [1858.0, 411.0], [1867.0, 316.0], [1861.0, 218.0], [1955.0, 40.0], [1942.0, 313.0], [1951.0, 325.0], [1936.0, 335.0], [1946.0, 334.0], [1920.0, 269.5], [2018.0, 349.0], [2046.0, 380.0], [1994.0, 389.0], [1996.0, 320.5], [2027.0, 411.0], [1991.0, 353.0], [2166.0, 360.0], [2088.0, 446.0], [2138.0, 450.0], [2054.0, 399.0], [2128.0, 498.0], [2202.0, 480.0], [2226.0, 519.5], [2192.0, 475.0], [2216.0, 500.0], [2274.0, 606.0], [2306.0, 593.0], [2314.0, 550.0], [2324.0, 616.0], [2396.0, 676.0], [2412.0, 429.0], [2532.0, 561.0], [2434.0, 638.0], [2484.0, 663.0], [2454.0, 517.5], [2556.0, 464.5], [2642.0, 624.0], [2604.0, 570.5], [2768.0, 557.0], [2754.0, 530.0], [2696.0, 621.0], [2738.0, 577.0], [2740.0, 613.0], [2912.0, 556.0], [2856.0, 512.0], [2890.0, 532.0], [2892.0, 542.0], [2898.0, 539.5], [2888.0, 532.0], [2936.0, 576.0], [2924.0, 515.0], [2816.0, 574.0], [2830.0, 542.0], [2832.0, 521.0], [2876.0, 561.0], [2988.0, 555.0], [3036.0, 482.0], [2982.0, 479.0], [2986.0, 556.0], [2954.0, 524.0], [2948.0, 504.0], [2946.0, 509.0], [3012.0, 449.0], [3076.0, 511.0], [3108.0, 480.0], [3090.0, 451.0], [3216.0, 429.0], [2139.0, 417.0], [2081.0, 412.0], [2109.0, 472.0], [2123.0, 452.0], [2067.0, 393.0], [2165.0, 509.0], [2091.0, 364.0], [2181.0, 426.0], [2301.0, 551.0], [2221.0, 437.0], [2199.0, 495.0], [2233.0, 554.0], [2231.0, 525.0], [2227.0, 519.0], [2189.0, 430.0], [2219.0, 362.0], [2365.0, 487.0], [2469.0, 516.0], [2537.0, 583.0], [2559.0, 573.0], [2547.0, 447.0], [2509.0, 443.0], [2687.0, 641.0], [2567.0, 700.0], [2651.0, 638.0], [2661.0, 604.0], [2645.0, 481.0], [2561.0, 593.0], [2601.0, 530.0], [2799.0, 531.0], [2703.0, 568.0], [2719.0, 618.0], [2767.0, 546.0], [2695.0, 407.0], [2691.0, 631.0], [2751.0, 531.0], [2723.0, 515.0], [2755.0, 580.0], [2777.0, 511.0], [2783.0, 524.0], [2861.0, 450.0], [2885.0, 501.0], [2853.0, 485.0], [2937.0, 507.0], [2939.0, 523.0], [2865.0, 549.0], [2881.0, 549.0], [2971.0, 554.0], [2991.0, 539.0], [3037.0, 518.0], [3041.0, 483.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3216.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 21.0, "maxY": 699.0, "series": [{"data": [[21.0, 13.0], [33.0, 14.0], [32.0, 22.0], [39.0, 41.0], [41.0, 22.0], [40.0, 13.0], [48.0, 18.0], [52.0, 24.0], [61.0, 26.0], [71.0, 36.0], [68.0, 27.0], [73.0, 15.0], [78.0, 74.5], [81.0, 38.0], [82.0, 32.5], [88.0, 33.0], [90.0, 25.0], [97.0, 21.0], [107.0, 48.0], [110.0, 17.0], [119.0, 64.0], [120.0, 63.5], [141.0, 26.0], [142.0, 24.0], [140.0, 21.0], [138.0, 22.0], [139.0, 47.0], [143.0, 58.0], [150.0, 66.0], [146.0, 35.5], [147.0, 23.0], [149.0, 12.0], [148.0, 39.0], [163.0, 20.0], [168.0, 19.0], [191.0, 140.0], [192.0, 21.0], [193.0, 23.0], [203.0, 69.0], [206.0, 139.0], [212.0, 24.0], [210.0, 22.0], [218.0, 21.0], [225.0, 56.0], [231.0, 86.0], [237.0, 22.0], [238.0, 21.0], [247.0, 23.0], [244.0, 20.0], [245.0, 27.0], [267.0, 22.0], [263.0, 125.0], [285.0, 24.0], [276.0, 89.5], [287.0, 25.0], [283.0, 110.0], [274.0, 131.5], [301.0, 24.0], [295.0, 118.0], [298.0, 22.0], [288.0, 19.0], [308.0, 95.5], [317.0, 21.0], [323.0, 23.0], [324.0, 21.0], [329.0, 21.0], [334.0, 125.0], [326.0, 23.0], [322.0, 22.0], [332.0, 19.0], [367.0, 126.0], [364.0, 122.0], [370.0, 121.0], [377.0, 89.0], [381.0, 22.0], [396.0, 22.0], [389.0, 21.0], [400.0, 25.0], [414.0, 21.0], [421.0, 20.0], [422.0, 134.0], [429.0, 133.0], [419.0, 122.0], [447.0, 22.0], [435.0, 23.0], [440.0, 21.0], [438.0, 23.0], [436.0, 32.0], [441.0, 21.0], [442.0, 20.0], [446.0, 73.5], [432.0, 20.0], [455.0, 30.0], [462.0, 21.0], [460.0, 22.0], [479.0, 20.0], [466.0, 142.0], [473.0, 24.0], [487.0, 20.0], [485.0, 148.0], [482.0, 23.0], [510.0, 23.0], [500.0, 22.5], [501.0, 182.0], [530.0, 24.0], [531.0, 23.0], [540.0, 139.5], [532.0, 21.5], [517.0, 20.0], [529.0, 21.0], [523.0, 31.0], [543.0, 20.0], [518.0, 21.0], [555.0, 22.0], [546.0, 22.0], [564.0, 22.0], [568.0, 24.0], [550.0, 23.0], [562.0, 22.0], [572.0, 21.0], [577.0, 150.0], [597.0, 22.0], [580.0, 22.0], [586.0, 22.0], [591.0, 172.0], [585.0, 22.0], [576.0, 23.0], [637.0, 208.0], [614.0, 107.5], [633.0, 22.0], [668.0, 34.5], [670.0, 194.5], [652.0, 22.0], [662.0, 20.0], [694.0, 234.0], [692.0, 204.5], [675.0, 21.0], [721.0, 218.0], [722.0, 24.0], [719.0, 123.0], [707.0, 22.0], [713.0, 207.0], [739.0, 92.0], [745.0, 20.0], [767.0, 203.0], [769.0, 24.0], [768.0, 229.0], [798.0, 21.0], [799.0, 348.0], [796.0, 194.0], [812.0, 23.0], [819.0, 21.0], [816.0, 21.0], [820.0, 22.0], [836.0, 197.0], [841.0, 22.0], [858.0, 21.0], [851.0, 20.0], [837.0, 21.0], [865.0, 23.0], [864.0, 21.0], [895.0, 21.0], [886.0, 208.0], [913.0, 28.0], [898.0, 22.0], [921.0, 20.0], [915.0, 20.0], [909.0, 183.0], [923.0, 186.0], [934.0, 21.0], [949.0, 22.0], [933.0, 21.0], [939.0, 21.0], [950.0, 23.0], [956.0, 21.0], [930.0, 21.0], [946.0, 24.0], [989.0, 23.0], [979.0, 23.0], [984.0, 23.0], [985.0, 23.0], [962.0, 20.0], [974.0, 22.0], [973.0, 21.0], [971.0, 22.0], [990.0, 22.0], [988.0, 22.0], [987.0, 22.0], [986.0, 22.0], [983.0, 23.0], [991.0, 21.0], [982.0, 22.0], [981.0, 22.0], [978.0, 22.0], [976.0, 21.0], [977.0, 22.0], [1007.0, 22.0], [1010.0, 22.0], [1001.0, 22.0], [1003.0, 22.0], [1011.0, 22.0], [1014.0, 22.0], [1015.0, 23.0], [1013.0, 22.0], [1012.0, 22.0], [997.0, 23.0], [1008.0, 23.0], [999.0, 22.0], [998.0, 21.0], [1009.0, 22.0], [994.0, 22.0], [995.0, 22.0], [996.0, 22.0], [992.0, 22.0], [993.0, 21.0], [1002.0, 22.0], [1000.0, 22.0], [1004.0, 22.0], [1005.0, 22.0], [1006.0, 22.0], [1040.0, 22.0], [1045.0, 23.0], [1069.0, 22.0], [1083.0, 24.0], [1058.0, 277.0], [1096.0, 316.0], [1089.0, 23.0], [1103.0, 23.0], [1095.0, 21.0], [1185.0, 27.0], [1190.0, 25.0], [1173.0, 23.0], [1195.0, 269.0], [1191.0, 25.0], [1181.0, 24.0], [1161.0, 24.0], [1187.0, 23.0], [1164.0, 305.0], [1247.0, 25.0], [1272.0, 25.0], [1226.0, 27.0], [1234.0, 26.0], [1339.0, 277.0], [1314.0, 71.0], [1317.0, 33.0], [1307.0, 28.0], [1342.0, 28.0], [1316.0, 26.0], [1301.0, 28.0], [1296.0, 29.0], [1324.0, 276.0], [1282.0, 29.0], [1329.0, 28.0], [1351.0, 28.0], [1404.0, 285.0], [1375.0, 60.0], [1368.0, 28.0], [1344.0, 27.0], [1397.0, 30.0], [1360.0, 25.0], [1434.0, 30.0], [1409.0, 29.0], [1449.0, 29.0], [1455.0, 31.0], [1452.0, 231.0], [1466.0, 34.0], [1431.0, 232.0], [1481.0, 35.0], [1534.0, 35.0], [1530.0, 31.0], [1472.0, 33.0], [1539.0, 37.0], [1591.0, 398.0], [1573.0, 38.0], [1653.0, 430.0], [1620.0, 105.0], [1647.0, 109.0], [1602.0, 208.0], [1645.0, 78.0], [1605.0, 76.0], [1649.0, 222.0], [1648.0, 277.5], [1608.0, 220.0], [1600.0, 115.0], [1623.0, 185.0], [1642.0, 94.0], [1632.0, 112.0], [1675.0, 338.0], [1700.0, 351.5], [1682.0, 353.0], [1706.0, 191.0], [1755.0, 39.0], [1732.0, 353.0], [1736.0, 341.5], [1772.0, 361.0], [1769.0, 181.0], [1766.0, 184.0], [1754.0, 218.0], [1803.0, 285.0], [1850.0, 415.5], [1816.0, 349.0], [1797.0, 343.0], [1832.0, 313.0], [1846.0, 396.0], [1812.0, 220.0], [1811.0, 354.0], [1836.0, 215.0], [1837.0, 489.0], [1884.0, 301.0], [1877.0, 360.0], [1879.0, 266.0], [1874.0, 406.5], [1875.0, 367.0], [1893.0, 388.0], [1858.0, 411.0], [1867.0, 316.0], [1861.0, 217.0], [1955.0, 40.0], [1942.0, 313.0], [1951.0, 325.0], [1936.0, 335.0], [1946.0, 333.5], [1920.0, 269.5], [2018.0, 349.0], [2046.0, 379.5], [1994.0, 389.0], [1996.0, 320.5], [2027.0, 411.0], [1991.0, 353.0], [2166.0, 359.5], [2088.0, 446.0], [2138.0, 450.0], [2054.0, 399.0], [2128.0, 498.0], [2202.0, 480.0], [2226.0, 519.5], [2192.0, 475.0], [2216.0, 500.0], [2274.0, 606.0], [2306.0, 592.5], [2314.0, 550.0], [2324.0, 616.0], [2396.0, 676.0], [2412.0, 428.5], [2532.0, 560.5], [2434.0, 638.0], [2484.0, 663.0], [2454.0, 516.5], [2556.0, 464.5], [2642.0, 623.0], [2604.0, 570.0], [2768.0, 557.0], [2754.0, 529.5], [2696.0, 621.0], [2738.0, 577.0], [2740.0, 613.0], [2912.0, 555.0], [2856.0, 512.0], [2890.0, 532.0], [2892.0, 541.5], [2898.0, 539.0], [2888.0, 532.0], [2936.0, 575.5], [2924.0, 514.5], [2816.0, 573.0], [2830.0, 542.0], [2832.0, 521.0], [2876.0, 561.0], [2988.0, 555.0], [3036.0, 481.0], [2982.0, 478.5], [2986.0, 556.0], [2954.0, 524.0], [2948.0, 504.0], [2946.0, 509.0], [3012.0, 449.0], [3076.0, 510.5], [3108.0, 479.5], [3090.0, 451.0], [3216.0, 429.0], [2139.0, 417.0], [2081.0, 411.0], [2109.0, 472.0], [2123.0, 452.0], [2067.0, 393.0], [2165.0, 509.0], [2091.0, 364.0], [2181.0, 425.0], [2301.0, 551.0], [2221.0, 437.0], [2199.0, 494.0], [2233.0, 554.0], [2231.0, 525.0], [2227.0, 519.0], [2189.0, 429.5], [2219.0, 362.0], [2365.0, 486.0], [2469.0, 516.0], [2537.0, 583.0], [2559.0, 573.0], [2547.0, 447.0], [2509.0, 442.0], [2687.0, 641.0], [2567.0, 699.0], [2651.0, 638.0], [2661.0, 604.0], [2645.0, 481.0], [2561.0, 593.0], [2601.0, 530.0], [2799.0, 531.0], [2703.0, 568.0], [2719.0, 618.0], [2767.0, 546.0], [2695.0, 407.0], [2691.0, 631.0], [2751.0, 530.0], [2723.0, 515.0], [2755.0, 580.0], [2777.0, 511.0], [2783.0, 523.0], [2861.0, 450.0], [2885.0, 500.0], [2853.0, 485.0], [2937.0, 506.0], [2939.0, 522.0], [2865.0, 549.0], [2881.0, 549.0], [2971.0, 554.0], [2991.0, 539.0], [3037.0, 518.0], [3041.0, 483.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3216.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 513.1, "minX": 1.6334244E12, "maxY": 1027.4333333333334, "series": [{"data": [[1.63342476E12, 978.55], [1.63342446E12, 1017.4166666666666], [1.6334244E12, 513.1], [1.63342506E12, 998.9], [1.633425E12, 1027.4333333333334], [1.6334247E12, 997.4666666666667], [1.63342464E12, 998.0], [1.6334253E12, 535.55], [1.63342524E12, 986.6166666666667], [1.63342494E12, 969.4333333333333], [1.63342488E12, 1021.8], [1.63342458E12, 997.0833333333334], [1.63342452E12, 992.0333333333333], [1.63342518E12, 997.0], [1.63342512E12, 978.7166666666667], [1.63342482E12, 991.1833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334253E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 513.1, "minX": 1.6334244E12, "maxY": 1034.2166666666667, "series": [{"data": [[1.63342476E12, 979.0166666666667], [1.63342446E12, 1016.65], [1.6334244E12, 513.1], [1.63342506E12, 999.2666666666667], [1.633425E12, 1027.0666666666666], [1.6334247E12, 1000.7666666666667], [1.63342464E12, 1034.2166666666667], [1.6334253E12, 535.55], [1.63342524E12, 986.6166666666667], [1.63342494E12, 969.4333333333333], [1.63342488E12, 1021.8], [1.63342458E12, 957.1], [1.63342452E12, 992.8], [1.63342518E12, 1025.8], [1.63342512E12, 949.9166666666666], [1.63342482E12, 991.1833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6334253E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 513.1, "minX": 1.6334244E12, "maxY": 1034.2166666666667, "series": [{"data": [[1.63342476E12, 979.0166666666667], [1.63342446E12, 1016.65], [1.6334244E12, 513.1], [1.63342506E12, 999.2666666666667], [1.633425E12, 1027.0666666666666], [1.6334247E12, 1000.7666666666667], [1.63342464E12, 1034.2166666666667], [1.6334253E12, 535.55], [1.63342524E12, 986.6166666666667], [1.63342494E12, 969.4333333333333], [1.63342488E12, 1021.8], [1.63342458E12, 957.1], [1.63342452E12, 992.8], [1.63342518E12, 1025.8], [1.63342512E12, 949.9166666666666], [1.63342482E12, 991.1833333333333]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334253E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 513.1, "minX": 1.6334244E12, "maxY": 1034.2166666666667, "series": [{"data": [[1.63342476E12, 979.0166666666667], [1.63342446E12, 1016.65], [1.6334244E12, 513.1], [1.63342506E12, 999.2666666666667], [1.633425E12, 1027.0666666666666], [1.6334247E12, 1000.7666666666667], [1.63342464E12, 1034.2166666666667], [1.6334253E12, 535.55], [1.63342524E12, 986.6166666666667], [1.63342494E12, 969.4333333333333], [1.63342488E12, 1021.8], [1.63342458E12, 957.1], [1.63342452E12, 992.8], [1.63342518E12, 1025.8], [1.63342512E12, 949.9166666666666], [1.63342482E12, 991.1833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6334253E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

