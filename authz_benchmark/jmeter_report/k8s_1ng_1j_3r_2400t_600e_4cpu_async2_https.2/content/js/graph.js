/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 9825.0, "series": [{"data": [[0.0, 3.0], [0.1, 5.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 12.0], [9.1, 12.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 17.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 18.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 18.0], [21.9, 18.0], [22.0, 18.0], [22.1, 18.0], [22.2, 18.0], [22.3, 18.0], [22.4, 18.0], [22.5, 18.0], [22.6, 18.0], [22.7, 18.0], [22.8, 18.0], [22.9, 18.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 19.0], [23.4, 19.0], [23.5, 19.0], [23.6, 19.0], [23.7, 19.0], [23.8, 19.0], [23.9, 19.0], [24.0, 19.0], [24.1, 19.0], [24.2, 19.0], [24.3, 19.0], [24.4, 19.0], [24.5, 19.0], [24.6, 19.0], [24.7, 19.0], [24.8, 19.0], [24.9, 19.0], [25.0, 19.0], [25.1, 19.0], [25.2, 19.0], [25.3, 19.0], [25.4, 19.0], [25.5, 19.0], [25.6, 19.0], [25.7, 20.0], [25.8, 20.0], [25.9, 20.0], [26.0, 20.0], [26.1, 20.0], [26.2, 20.0], [26.3, 20.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 20.0], [26.8, 20.0], [26.9, 20.0], [27.0, 20.0], [27.1, 20.0], [27.2, 20.0], [27.3, 20.0], [27.4, 20.0], [27.5, 20.0], [27.6, 20.0], [27.7, 20.0], [27.8, 20.0], [27.9, 20.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 21.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 21.0], [29.0, 21.0], [29.1, 21.0], [29.2, 21.0], [29.3, 21.0], [29.4, 21.0], [29.5, 21.0], [29.6, 21.0], [29.7, 21.0], [29.8, 21.0], [29.9, 21.0], [30.0, 21.0], [30.1, 21.0], [30.2, 21.0], [30.3, 21.0], [30.4, 22.0], [30.5, 22.0], [30.6, 22.0], [30.7, 22.0], [30.8, 22.0], [30.9, 22.0], [31.0, 22.0], [31.1, 22.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 23.0], [32.7, 23.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 23.0], [33.4, 23.0], [33.5, 23.0], [33.6, 23.0], [33.7, 23.0], [33.8, 23.0], [33.9, 23.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 24.0], [35.8, 24.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 25.0], [37.1, 25.0], [37.2, 25.0], [37.3, 25.0], [37.4, 25.0], [37.5, 25.0], [37.6, 25.0], [37.7, 25.0], [37.8, 25.0], [37.9, 25.0], [38.0, 25.0], [38.1, 25.0], [38.2, 25.0], [38.3, 25.0], [38.4, 25.0], [38.5, 25.0], [38.6, 25.0], [38.7, 25.0], [38.8, 25.0], [38.9, 25.0], [39.0, 26.0], [39.1, 26.0], [39.2, 26.0], [39.3, 26.0], [39.4, 26.0], [39.5, 26.0], [39.6, 26.0], [39.7, 26.0], [39.8, 26.0], [39.9, 26.0], [40.0, 26.0], [40.1, 26.0], [40.2, 26.0], [40.3, 26.0], [40.4, 26.0], [40.5, 26.0], [40.6, 26.0], [40.7, 26.0], [40.8, 26.0], [40.9, 27.0], [41.0, 27.0], [41.1, 27.0], [41.2, 27.0], [41.3, 27.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 27.0], [42.2, 27.0], [42.3, 27.0], [42.4, 27.0], [42.5, 27.0], [42.6, 28.0], [42.7, 28.0], [42.8, 28.0], [42.9, 28.0], [43.0, 28.0], [43.1, 28.0], [43.2, 28.0], [43.3, 28.0], [43.4, 28.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 29.0], [44.3, 29.0], [44.4, 29.0], [44.5, 29.0], [44.6, 29.0], [44.7, 29.0], [44.8, 29.0], [44.9, 29.0], [45.0, 29.0], [45.1, 29.0], [45.2, 29.0], [45.3, 29.0], [45.4, 29.0], [45.5, 29.0], [45.6, 30.0], [45.7, 30.0], [45.8, 30.0], [45.9, 30.0], [46.0, 30.0], [46.1, 30.0], [46.2, 30.0], [46.3, 30.0], [46.4, 30.0], [46.5, 30.0], [46.6, 30.0], [46.7, 30.0], [46.8, 31.0], [46.9, 31.0], [47.0, 31.0], [47.1, 31.0], [47.2, 31.0], [47.3, 31.0], [47.4, 31.0], [47.5, 31.0], [47.6, 31.0], [47.7, 31.0], [47.8, 32.0], [47.9, 32.0], [48.0, 32.0], [48.1, 32.0], [48.2, 32.0], [48.3, 32.0], [48.4, 32.0], [48.5, 32.0], [48.6, 33.0], [48.7, 33.0], [48.8, 33.0], [48.9, 33.0], [49.0, 33.0], [49.1, 33.0], [49.2, 33.0], [49.3, 34.0], [49.4, 34.0], [49.5, 34.0], [49.6, 34.0], [49.7, 34.0], [49.8, 34.0], [49.9, 35.0], [50.0, 35.0], [50.1, 35.0], [50.2, 35.0], [50.3, 36.0], [50.4, 36.0], [50.5, 36.0], [50.6, 36.0], [50.7, 37.0], [50.8, 37.0], [50.9, 37.0], [51.0, 38.0], [51.1, 38.0], [51.2, 39.0], [51.3, 39.0], [51.4, 40.0], [51.5, 41.0], [51.6, 42.0], [51.7, 43.0], [51.8, 44.0], [51.9, 45.0], [52.0, 47.0], [52.1, 48.0], [52.2, 49.0], [52.3, 51.0], [52.4, 52.0], [52.5, 54.0], [52.6, 55.0], [52.7, 57.0], [52.8, 58.0], [52.9, 60.0], [53.0, 61.0], [53.1, 63.0], [53.2, 65.0], [53.3, 67.0], [53.4, 69.0], [53.5, 70.0], [53.6, 72.0], [53.7, 74.0], [53.8, 76.0], [53.9, 78.0], [54.0, 81.0], [54.1, 83.0], [54.2, 84.0], [54.3, 86.0], [54.4, 88.0], [54.5, 90.0], [54.6, 91.0], [54.7, 93.0], [54.8, 95.0], [54.9, 97.0], [55.0, 99.0], [55.1, 101.0], [55.2, 103.0], [55.3, 105.0], [55.4, 106.0], [55.5, 108.0], [55.6, 110.0], [55.7, 112.0], [55.8, 114.0], [55.9, 115.0], [56.0, 117.0], [56.1, 119.0], [56.2, 120.0], [56.3, 122.0], [56.4, 123.0], [56.5, 125.0], [56.6, 126.0], [56.7, 128.0], [56.8, 129.0], [56.9, 131.0], [57.0, 132.0], [57.1, 134.0], [57.2, 135.0], [57.3, 136.0], [57.4, 138.0], [57.5, 139.0], [57.6, 141.0], [57.7, 142.0], [57.8, 143.0], [57.9, 145.0], [58.0, 146.0], [58.1, 148.0], [58.2, 149.0], [58.3, 151.0], [58.4, 152.0], [58.5, 154.0], [58.6, 155.0], [58.7, 156.0], [58.8, 157.0], [58.9, 159.0], [59.0, 160.0], [59.1, 161.0], [59.2, 163.0], [59.3, 164.0], [59.4, 165.0], [59.5, 167.0], [59.6, 168.0], [59.7, 170.0], [59.8, 171.0], [59.9, 172.0], [60.0, 174.0], [60.1, 175.0], [60.2, 176.0], [60.3, 178.0], [60.4, 179.0], [60.5, 180.0], [60.6, 182.0], [60.7, 183.0], [60.8, 184.0], [60.9, 186.0], [61.0, 187.0], [61.1, 188.0], [61.2, 189.0], [61.3, 191.0], [61.4, 192.0], [61.5, 193.0], [61.6, 194.0], [61.7, 196.0], [61.8, 197.0], [61.9, 198.0], [62.0, 199.0], [62.1, 200.0], [62.2, 202.0], [62.3, 203.0], [62.4, 204.0], [62.5, 205.0], [62.6, 206.0], [62.7, 207.0], [62.8, 209.0], [62.9, 210.0], [63.0, 211.0], [63.1, 212.0], [63.2, 213.0], [63.3, 215.0], [63.4, 216.0], [63.5, 217.0], [63.6, 218.0], [63.7, 219.0], [63.8, 220.0], [63.9, 221.0], [64.0, 223.0], [64.1, 224.0], [64.2, 225.0], [64.3, 226.0], [64.4, 228.0], [64.5, 229.0], [64.6, 230.0], [64.7, 231.0], [64.8, 233.0], [64.9, 234.0], [65.0, 235.0], [65.1, 236.0], [65.2, 237.0], [65.3, 238.0], [65.4, 240.0], [65.5, 241.0], [65.6, 242.0], [65.7, 243.0], [65.8, 245.0], [65.9, 246.0], [66.0, 247.0], [66.1, 249.0], [66.2, 250.0], [66.3, 251.0], [66.4, 252.0], [66.5, 254.0], [66.6, 255.0], [66.7, 256.0], [66.8, 258.0], [66.9, 259.0], [67.0, 260.0], [67.1, 262.0], [67.2, 263.0], [67.3, 264.0], [67.4, 265.0], [67.5, 267.0], [67.6, 268.0], [67.7, 269.0], [67.8, 270.0], [67.9, 272.0], [68.0, 273.0], [68.1, 274.0], [68.2, 276.0], [68.3, 277.0], [68.4, 278.0], [68.5, 279.0], [68.6, 281.0], [68.7, 282.0], [68.8, 283.0], [68.9, 284.0], [69.0, 286.0], [69.1, 287.0], [69.2, 288.0], [69.3, 289.0], [69.4, 290.0], [69.5, 292.0], [69.6, 293.0], [69.7, 294.0], [69.8, 296.0], [69.9, 297.0], [70.0, 298.0], [70.1, 300.0], [70.2, 301.0], [70.3, 302.0], [70.4, 304.0], [70.5, 305.0], [70.6, 306.0], [70.7, 308.0], [70.8, 309.0], [70.9, 310.0], [71.0, 312.0], [71.1, 313.0], [71.2, 314.0], [71.3, 316.0], [71.4, 317.0], [71.5, 319.0], [71.6, 320.0], [71.7, 321.0], [71.8, 322.0], [71.9, 324.0], [72.0, 325.0], [72.1, 326.0], [72.2, 328.0], [72.3, 329.0], [72.4, 330.0], [72.5, 332.0], [72.6, 333.0], [72.7, 335.0], [72.8, 336.0], [72.9, 338.0], [73.0, 339.0], [73.1, 341.0], [73.2, 342.0], [73.3, 344.0], [73.4, 345.0], [73.5, 346.0], [73.6, 347.0], [73.7, 349.0], [73.8, 350.0], [73.9, 351.0], [74.0, 353.0], [74.1, 354.0], [74.2, 355.0], [74.3, 357.0], [74.4, 358.0], [74.5, 359.0], [74.6, 360.0], [74.7, 362.0], [74.8, 363.0], [74.9, 364.0], [75.0, 366.0], [75.1, 367.0], [75.2, 369.0], [75.3, 370.0], [75.4, 372.0], [75.5, 373.0], [75.6, 375.0], [75.7, 376.0], [75.8, 378.0], [75.9, 379.0], [76.0, 380.0], [76.1, 381.0], [76.2, 383.0], [76.3, 384.0], [76.4, 386.0], [76.5, 387.0], [76.6, 389.0], [76.7, 390.0], [76.8, 391.0], [76.9, 393.0], [77.0, 394.0], [77.1, 396.0], [77.2, 397.0], [77.3, 399.0], [77.4, 400.0], [77.5, 402.0], [77.6, 404.0], [77.7, 405.0], [77.8, 407.0], [77.9, 408.0], [78.0, 410.0], [78.1, 411.0], [78.2, 413.0], [78.3, 414.0], [78.4, 416.0], [78.5, 417.0], [78.6, 419.0], [78.7, 420.0], [78.8, 421.0], [78.9, 423.0], [79.0, 424.0], [79.1, 425.0], [79.2, 427.0], [79.3, 428.0], [79.4, 430.0], [79.5, 431.0], [79.6, 433.0], [79.7, 435.0], [79.8, 436.0], [79.9, 438.0], [80.0, 440.0], [80.1, 442.0], [80.2, 443.0], [80.3, 445.0], [80.4, 447.0], [80.5, 448.0], [80.6, 450.0], [80.7, 451.0], [80.8, 453.0], [80.9, 454.0], [81.0, 456.0], [81.1, 457.0], [81.2, 459.0], [81.3, 460.0], [81.4, 462.0], [81.5, 463.0], [81.6, 465.0], [81.7, 466.0], [81.8, 468.0], [81.9, 469.0], [82.0, 471.0], [82.1, 473.0], [82.2, 474.0], [82.3, 476.0], [82.4, 478.0], [82.5, 479.0], [82.6, 481.0], [82.7, 483.0], [82.8, 484.0], [82.9, 486.0], [83.0, 488.0], [83.1, 489.0], [83.2, 491.0], [83.3, 493.0], [83.4, 494.0], [83.5, 496.0], [83.6, 497.0], [83.7, 499.0], [83.8, 500.0], [83.9, 502.0], [84.0, 503.0], [84.1, 505.0], [84.2, 506.0], [84.3, 508.0], [84.4, 510.0], [84.5, 511.0], [84.6, 513.0], [84.7, 514.0], [84.8, 516.0], [84.9, 517.0], [85.0, 519.0], [85.1, 520.0], [85.2, 522.0], [85.3, 523.0], [85.4, 525.0], [85.5, 526.0], [85.6, 528.0], [85.7, 529.0], [85.8, 531.0], [85.9, 533.0], [86.0, 534.0], [86.1, 536.0], [86.2, 538.0], [86.3, 540.0], [86.4, 541.0], [86.5, 543.0], [86.6, 545.0], [86.7, 547.0], [86.8, 548.0], [86.9, 550.0], [87.0, 552.0], [87.1, 554.0], [87.2, 555.0], [87.3, 557.0], [87.4, 559.0], [87.5, 560.0], [87.6, 562.0], [87.7, 563.0], [87.8, 565.0], [87.9, 567.0], [88.0, 569.0], [88.1, 570.0], [88.2, 572.0], [88.3, 574.0], [88.4, 576.0], [88.5, 578.0], [88.6, 580.0], [88.7, 582.0], [88.8, 584.0], [88.9, 586.0], [89.0, 588.0], [89.1, 590.0], [89.2, 592.0], [89.3, 593.0], [89.4, 595.0], [89.5, 597.0], [89.6, 599.0], [89.7, 601.0], [89.8, 603.0], [89.9, 605.0], [90.0, 607.0], [90.1, 609.0], [90.2, 611.0], [90.3, 613.0], [90.4, 614.0], [90.5, 616.0], [90.6, 618.0], [90.7, 620.0], [90.8, 622.0], [90.9, 624.0], [91.0, 626.0], [91.1, 627.0], [91.2, 629.0], [91.3, 631.0], [91.4, 633.0], [91.5, 635.0], [91.6, 636.0], [91.7, 638.0], [91.8, 640.0], [91.9, 642.0], [92.0, 644.0], [92.1, 646.0], [92.2, 648.0], [92.3, 650.0], [92.4, 652.0], [92.5, 654.0], [92.6, 656.0], [92.7, 658.0], [92.8, 660.0], [92.9, 662.0], [93.0, 664.0], [93.1, 666.0], [93.2, 668.0], [93.3, 670.0], [93.4, 672.0], [93.5, 674.0], [93.6, 676.0], [93.7, 679.0], [93.8, 681.0], [93.9, 683.0], [94.0, 685.0], [94.1, 687.0], [94.2, 689.0], [94.3, 691.0], [94.4, 693.0], [94.5, 695.0], [94.6, 697.0], [94.7, 699.0], [94.8, 701.0], [94.9, 704.0], [95.0, 706.0], [95.1, 709.0], [95.2, 711.0], [95.3, 714.0], [95.4, 716.0], [95.5, 719.0], [95.6, 722.0], [95.7, 725.0], [95.8, 728.0], [95.9, 730.0], [96.0, 733.0], [96.1, 736.0], [96.2, 739.0], [96.3, 742.0], [96.4, 745.0], [96.5, 748.0], [96.6, 751.0], [96.7, 754.0], [96.8, 757.0], [96.9, 760.0], [97.0, 763.0], [97.1, 766.0], [97.2, 769.0], [97.3, 772.0], [97.4, 775.0], [97.5, 779.0], [97.6, 783.0], [97.7, 787.0], [97.8, 791.0], [97.9, 795.0], [98.0, 800.0], [98.1, 805.0], [98.2, 810.0], [98.3, 815.0], [98.4, 821.0], [98.5, 827.0], [98.6, 832.0], [98.7, 838.0], [98.8, 846.0], [98.9, 853.0], [99.0, 861.0], [99.1, 868.0], [99.2, 876.0], [99.3, 883.0], [99.4, 892.0], [99.5, 903.0], [99.6, 916.0], [99.7, 932.0], [99.8, 951.0], [99.9, 1080.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 495004.0, "series": [{"data": [[0.0, 495004.0], [600.0, 45751.0], [700.0, 29566.0], [800.0, 13268.0], [900.0, 3677.0], [1000.0, 309.0], [1100.0, 210.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 7.0], [1600.0, 1.0], [1800.0, 2.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 4.0], [2300.0, 7.0], [2200.0, 4.0], [2400.0, 13.0], [2500.0, 10.0], [2600.0, 10.0], [2700.0, 4.0], [2800.0, 15.0], [2900.0, 15.0], [3000.0, 12.0], [3100.0, 14.0], [3300.0, 6.0], [3200.0, 6.0], [3500.0, 1.0], [3700.0, 2.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 6.0], [5000.0, 3.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5400.0, 3.0], [5600.0, 2.0], [6800.0, 1.0], [7100.0, 2.0], [7400.0, 3.0], [7200.0, 1.0], [7300.0, 3.0], [7600.0, 3.0], [7500.0, 1.0], [7800.0, 5.0], [7700.0, 6.0], [8000.0, 1.0], [8100.0, 3.0], [8200.0, 4.0], [8400.0, 4.0], [8600.0, 10.0], [8500.0, 4.0], [8700.0, 13.0], [8300.0, 2.0], [9000.0, 14.0], [9100.0, 24.0], [9200.0, 53.0], [8800.0, 8.0], [8900.0, 10.0], [9300.0, 36.0], [9400.0, 53.0], [9500.0, 72.0], [9600.0, 56.0], [9700.0, 29.0], [9800.0, 1.0], [100.0, 63028.0], [200.0, 72680.0], [300.0, 65211.0], [400.0, 57814.0], [500.0, 52770.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 573.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 754314.0, "series": [{"data": [[0.0, 754314.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 144983.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 573.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2045.2872675701217, "minX": 1.63357392E12, "maxY": 2400.0, "series": [{"data": [[1.63357404E12, 2400.0], [1.6335747E12, 2400.0], [1.63357434E12, 2400.0], [1.63357464E12, 2400.0], [1.63357398E12, 2400.0], [1.63357428E12, 2400.0], [1.63357392E12, 2045.2872675701217], [1.63357458E12, 2400.0], [1.63357422E12, 2400.0], [1.63357452E12, 2400.0], [1.63357416E12, 2400.0], [1.63357482E12, 2299.0723172804583], [1.63357476E12, 2400.0], [1.63357446E12, 2400.0], [1.6335741E12, 2400.0], [1.6335744E12, 2400.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63357482E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 572.0, "maxY": 9556.0, "series": [{"data": [[572.0, 7851.0], [573.0, 7958.8], [581.0, 4235.833333333334], [580.0, 1268.4285714285716], [582.0, 1434.1666666666667], [583.0, 328.5], [585.0, 4518.432432432432], [586.0, 3023.285714285715], [587.0, 144.5], [588.0, 60.0], [594.0, 128.5], [606.0, 406.6], [604.0, 341.0], [600.0, 8.5], [601.0, 1514.0333333333335], [595.0, 1339.0], [599.0, 1066.5555555555557], [612.0, 31.214285714285715], [610.0, 3626.1538461538466], [609.0, 4228.148514851486], [622.0, 4746.5], [621.0, 56.5], [619.0, 1897.9], [618.0, 57.666666666666664], [617.0, 58.0], [616.0, 1553.0], [611.0, 1590.716666666667], [613.0, 702.3170731707318], [631.0, 4769.0], [632.0, 5041.374999999998], [628.0, 1371.272727272727], [626.0, 1183.6153846153845], [634.0, 2081.538461538462], [625.0, 62.0], [639.0, 1086.4583333333335], [637.0, 3015.142857142857], [635.0, 6908.7692307692305], [636.0, 2534.5454545454545], [633.0, 3269.8571428571427], [627.0, 405.7142857142857], [642.0, 172.0], [644.0, 5457.4], [645.0, 5499.8125], [646.0, 6688.615384615385], [647.0, 2195.8441558441564], [657.0, 35.714285714285715], [671.0, 36.0], [670.0, 36.0], [668.0, 449.0], [669.0, 3308.0], [667.0, 1468.2857142857142], [664.0, 135.25], [665.0, 49.0], [666.0, 227.24999999999997], [659.0, 43.0], [660.0, 42.0], [662.0, 49.766666666666666], [663.0, 480.0], [661.0, 43.0], [658.0, 40.0], [641.0, 1427.5555555555557], [640.0, 21.0], [648.0, 4811.879999999999], [649.0, 4787.925925925926], [651.0, 2397.75], [652.0, 2027.7195121951218], [653.0, 9411.888888888887], [655.0, 3648.4985163204747], [654.0, 9556.0], [650.0, 5735.733333333334], [678.0, 18.11764705882353], [673.0, 44.677419354838705], [672.0, 39.130434782608695], [685.0, 8.0], [687.0, 8.0], [675.0, 22.0], [676.0, 10.0], [677.0, 13.0], [679.0, 23.333333333333336], [696.0, 36.0], [698.0, 36.5], [697.0, 36.5], [703.0, 38.6], [702.0, 35.25], [701.0, 28.0], [700.0, 25.0], [699.0, 37.13793103448275], [690.0, 21.5], [692.0, 23.0], [694.0, 31.545454545454547], [693.0, 30.461538461538463], [682.0, 26.444444444444443], [680.0, 24.0], [683.0, 34.166666666666664], [734.0, 26.375], [735.0, 30.714285714285715], [720.0, 24.0], [733.0, 22.0], [728.0, 12.599999999999998], [724.0, 17.166666666666668], [713.0, 21.833333333333336], [712.0, 18.0], [723.0, 28.0], [718.0, 33.0], [719.0, 34.6], [704.0, 42.199999999999996], [706.0, 29.0], [708.0, 37.0], [705.0, 36.2], [710.0, 15.0], [711.0, 16.0], [709.0, 12.941176470588234], [717.0, 27.833333333333336], [714.0, 24.25], [715.0, 30.333333333333332], [764.0, 28.3], [766.0, 10.0], [767.0, 11.0], [755.0, 48.583333333333336], [753.0, 29.0], [754.0, 31.5], [752.0, 27.857142857142858], [763.0, 45.1764705882353], [765.0, 6.5], [762.0, 35.16666666666667], [761.0, 31.777777777777775], [760.0, 27.0], [738.0, 35.5], [744.0, 45.0], [746.0, 40.5], [745.0, 45.0], [750.0, 44.5], [737.0, 35.0], [736.0, 34.0], [748.0, 46.5], [740.0, 39.333333333333336], [741.0, 43.888888888888886], [743.0, 51.0], [742.0, 52.0], [759.0, 46.897959183673464], [757.0, 55.125], [798.0, 28.818181818181817], [799.0, 32.333333333333336], [793.0, 21.333333333333336], [795.0, 24.0], [796.0, 25.0], [794.0, 24.0], [781.0, 47.16666666666667], [780.0, 28.714285714285715], [778.0, 24.724137931034484], [779.0, 27.0], [777.0, 18.142857142857142], [776.0, 20.5], [785.0, 23.333333333333332], [782.0, 39.333333333333336], [791.0, 16.833333333333336], [790.0, 15.0], [789.0, 13.666666666666666], [786.0, 9.5], [788.0, 24.0], [792.0, 19.166666666666664], [774.0, 36.2], [772.0, 30.571428571428573], [773.0, 42.5], [770.0, 22.857142857142858], [769.0, 20.0], [768.0, 19.0], [771.0, 26.6], [830.0, 13.0], [824.0, 19.6], [807.0, 7.0], [805.0, 6.0], [804.0, 18.0], [814.0, 26.25], [801.0, 39.75], [802.0, 27.875000000000004], [811.0, 17.642857142857146], [809.0, 9.5], [812.0, 22.0], [813.0, 24.0], [831.0, 14.25], [817.0, 28.333333333333332], [816.0, 27.0], [826.0, 7.75], [827.0, 9.0], [821.0, 31.500000000000004], [820.0, 44.333333333333336], [819.0, 37.300000000000004], [818.0, 33.333333333333336], [822.0, 18.666666666666668], [858.0, 33.333333333333336], [863.0, 45.0], [862.0, 44.565217391304344], [861.0, 36.333333333333336], [859.0, 35.0], [849.0, 13.5], [848.0, 11.0], [844.0, 24.0], [841.0, 29.5], [842.0, 27.0], [846.0, 9.666666666666666], [832.0, 17.444444444444443], [835.0, 22.666666666666668], [845.0, 55.0], [851.0, 22.0], [836.0, 35.99999999999999], [855.0, 28.666666666666668], [854.0, 26.0], [852.0, 22.666666666666668], [857.0, 31.0], [838.0, 40.0], [837.0, 42.0], [839.0, 45.0], [880.0, 26.0], [885.0, 18.666666666666668], [883.0, 18.333333333333332], [882.0, 18.0], [879.0, 34.94117647058823], [864.0, 38.46153846153846], [866.0, 20.333333333333332], [867.0, 15.0], [869.0, 27.0], [868.0, 10.666666666666666], [871.0, 19.0], [870.0, 16.0], [875.0, 26.400000000000002], [878.0, 30.0], [876.0, 28.333333333333332], [873.0, 23.0], [874.0, 23.0], [872.0, 21.5], [920.0, 9.0], [911.0, 35.37349397590363], [905.0, 13.0], [897.0, 9.5], [917.0, 9.0], [926.0, 11.0], [925.0, 12.0], [927.0, 12.125], [922.0, 10.0], [923.0, 11.0], [954.0, 21.5], [928.0, 9.0], [931.0, 12.8], [938.0, 15.0], [945.0, 18.0], [956.0, 22.0], [939.0, 27.0], [947.0, 17.0], [958.0, 24.0], [944.0, 17.0], [967.0, 30.0], [961.0, 27.2], [962.0, 28.5], [960.0, 24.0], [971.0, 34.0], [972.0, 34.0], [968.0, 31.25], [990.0, 44.0], [991.0, 45.5], [983.0, 40.333333333333336], [982.0, 40.0], [979.0, 39.0], [977.0, 37.333333333333336], [989.0, 45.0], [987.0, 42.0], [984.0, 41.0], [964.0, 29.5], [966.0, 30.0], [970.0, 31.75], [1023.0, 63.0], [1019.0, 65.66666666666667], [1008.0, 57.277777777777786], [1010.0, 52.23529411764706], [1006.0, 54.5], [1004.0, 47.0], [993.0, 43.8], [997.0, 48.0], [994.0, 51.0], [1002.0, 53.8], [1003.0, 45.0], [1017.0, 61.0], [1018.0, 60.0], [1016.0, 58.833333333333336], [1020.0, 60.0], [1011.0, 55.5], [1012.0, 98.0], [1015.0, 55.0], [1030.0, 35.0], [1028.0, 54.4], [1034.0, 110.0], [1038.0, 10.0], [1024.0, 64.0], [1052.0, 22.0], [1026.0, 78.0], [1086.0, 110.01666666666664], [1042.0, 12.0], [1046.0, 17.5], [1058.0, 23.5], [1146.0, 111.0], [1092.0, 99.0], [1088.0, 117.5], [1116.0, 117.0], [1114.0, 111.91666666666666], [1112.0, 126.14285714285714], [1120.0, 116.0], [1122.0, 115.0], [1130.0, 144.6764705882353], [1150.0, 115.25], [1144.0, 123.66666666666667], [1138.0, 132.25], [1136.0, 139.375], [1140.0, 106.66666666666667], [1104.0, 100.0], [1108.0, 102.0], [1158.0, 112.0], [1160.0, 130.5], [1154.0, 112.0], [1180.0, 142.28571428571428], [1178.0, 126.25], [1176.0, 126.0], [1164.0, 116.0], [1206.0, 135.5], [1184.0, 175.51492537313433], [1214.0, 178.5], [1210.0, 163.0], [1208.0, 169.05555555555557], [1168.0, 118.0], [1166.0, 131.0], [1172.0, 127.77777777777777], [1266.0, 303.0], [1216.0, 180.0], [1250.0, 392.4285714285714], [1268.0, 315.5], [1278.0, 283.0], [1274.0, 281.3333333333333], [1260.0, 398.6666666666667], [1262.0, 271.0], [1218.0, 202.0], [1240.0, 227.0], [1242.0, 228.66666666666666], [1338.0, 392.3333333333333], [1284.0, 292.4285714285714], [1312.0, 326.0], [1342.0, 407.0], [1340.0, 405.0], [1334.0, 375.6666666666667], [1336.0, 380.44444444444446], [1330.0, 379.0], [1328.0, 368.0], [1332.0, 382.3333333333333], [1322.0, 372.6666666666667], [1326.0, 356.0], [1288.0, 297.5], [1282.0, 285.5], [1308.0, 328.0], [1310.0, 330.0], [1306.0, 330.0], [1300.0, 321.25], [1348.0, 423.6666666666667], [1352.0, 397.4], [1396.0, 446.1818181818182], [1400.0, 440.6], [1406.0, 433.0], [1366.0, 402.5], [1364.0, 408.0], [1360.0, 512.5], [1344.0, 382.0], [1346.0, 388.16666666666663], [1356.0, 393.0], [1354.0, 399.0], [1456.0, 464.0], [1408.0, 445.3333333333333], [1442.0, 443.0], [1466.0, 376.0], [1468.0, 447.0], [1460.0, 712.0], [1448.0, 425.7142857142857], [1450.0, 423.44444444444446], [1452.0, 422.0], [1454.0, 392.5], [1446.0, 419.0], [1444.0, 444.0], [1418.0, 446.0], [1416.0, 566.5], [1414.0, 468.0], [1412.0, 443.0], [1424.0, 458.3968253968256], [1428.0, 548.0], [1432.0, 435.0], [1434.0, 466.0], [1438.0, 455.96428571428567], [1436.0, 391.0], [1426.0, 629.0], [1422.0, 330.0], [1478.0, 487.0], [1472.0, 448.0], [1512.0, 465.6666666666667], [1492.0, 446.0], [1494.0, 451.6666666666667], [1482.0, 471.0], [1514.0, 451.0], [1518.0, 470.25], [1484.0, 474.0], [1526.0, 579.0], [1588.0, 438.0], [1558.0, 488.0], [1560.0, 457.0], [1586.0, 519.0], [1568.0, 512.0], [1582.0, 522.0], [1576.0, 478.0], [1580.0, 436.0], [1566.0, 496.0], [1584.0, 506.25], [1540.0, 483.0], [1608.0, 521.0], [1604.0, 525.0], [1658.0, 529.0], [1692.0, 526.0], [1670.0, 531.0], [1682.0, 524.0], [1674.0, 514.5], [1672.0, 561.0], [1694.0, 513.0], [1686.0, 447.0], [1688.0, 470.0], [1684.0, 467.0], [1790.0, 540.0], [1772.0, 459.0], [1778.0, 553.3333333333334], [1776.0, 459.0], [1786.0, 493.25], [1788.0, 502.5], [1804.0, 561.0], [1848.0, 684.2270916334664], [1846.0, 631.5326086956521], [1844.0, 176.19221967963367], [1842.0, 20.478723404255312], [1806.0, 13.363636363636362], [1840.0, 28.95744680851064], [1850.0, 498.7142857142857], [1854.0, 469.0], [1852.0, 442.3293768545993], [1802.0, 541.8], [1800.0, 72.81249999999997], [1794.0, 533.25], [1810.0, 50.58000000000002], [1822.0, 539.5], [1830.0, 150.37984496124037], [1838.0, 25.344827586206907], [1832.0, 21.916666666666668], [1836.0, 18.41304347826087], [1826.0, 22.72916666666667], [1828.0, 510.0], [1824.0, 654.0], [1818.0, 27.978260869565215], [1816.0, 24.8263888888889], [1814.0, 482.0], [1812.0, 592.0], [1870.0, 90.5], [1886.0, 490.25], [1878.0, 452.29411764705884], [1884.0, 233.33333333333331], [1882.0, 81.33333333333333], [1872.0, 215.66666666666666], [1876.0, 85.0], [1900.0, 489.0], [1898.0, 66.0], [1894.0, 207.0], [1890.0, 213.33333333333331], [1888.0, 76.0], [1892.0, 70.66666666666667], [1904.0, 339.33333333333337], [1866.0, 94.75], [1858.0, 124.47826086956515], [1856.0, 222.91810344827596], [1860.0, 102.0], [1862.0, 101.0], [1864.0, 99.0], [1868.0, 93.6], [1908.0, 182.66666666666666], [1914.0, 158.5], [1912.0, 53.5], [1910.0, 55.2], [1916.0, 48.0], [1970.0, 672.3333333333334], [1930.0, 446.33333333333337], [1934.0, 33.0], [1932.0, 35.5], [1976.0, 46.38770685579196], [1972.0, 23.0188679245283], [1974.0, 22.72395833333333], [1980.0, 552.0], [1954.0, 15.666666666666666], [1952.0, 15.5], [1978.0, 511.2841309823682], [1956.0, 228.0], [1924.0, 463.0], [1936.0, 461.85], [1938.0, 353.0], [1948.0, 444.0], [1922.0, 43.0], [1920.0, 44.75], [1944.0, 443.0], [1942.0, 21.0], [1940.0, 25.0], [1960.0, 542.5], [1964.0, 642.0], [1996.0, 402.0], [1984.0, 614.0], [2026.0, 625.0], [2030.0, 159.66666666666666], [2028.0, 162.75], [2020.0, 239.5], [2004.0, 268.3333333333333], [2010.0, 170.16666666666666], [2008.0, 170.0], [2012.0, 169.0], [2014.0, 265.3333333333333], [2016.0, 510.25], [2018.0, 165.33333333333334], [2046.0, 153.0], [2038.0, 246.0], [2036.0, 158.0], [2032.0, 158.5], [1998.0, 174.0], [2034.0, 158.0], [2042.0, 154.5], [2044.0, 153.0], [2000.0, 605.0], [2164.0, 418.0], [2124.0, 505.87499999999994], [2128.0, 400.0], [2068.0, 469.0], [2076.0, 138.0], [2064.0, 141.66666666666666], [2056.0, 147.66666666666666], [2048.0, 150.5], [2052.0, 150.0], [2104.0, 124.57142857142857], [2092.0, 130.0], [2084.0, 137.0], [2100.0, 126.33333333333333], [2132.0, 460.5], [2136.0, 486.0], [2148.0, 528.0], [2160.0, 416.0], [2168.0, 317.6666666666667], [2172.0, 372.8571428571429], [2116.0, 118.0], [2112.0, 119.0], [2152.0, 413.0], [2156.0, 103.5], [2188.0, 450.70833333333326], [2220.0, 140.0], [2180.0, 420.2307692307692], [2176.0, 422.0], [2232.0, 328.0], [2228.0, 55.333333333333336], [2224.0, 57.0], [2236.0, 52.0], [2276.0, 347.625], [2284.0, 193.0], [2300.0, 348.75], [2240.0, 49.0], [2292.0, 25.0], [2288.0, 187.0], [2252.0, 336.0], [2264.0, 385.66666666666663], [2256.0, 337.0], [2216.0, 325.28571428571433], [2212.0, 126.14285714285714], [2208.0, 64.0], [2376.0, 132.33333333333334], [2340.0, 362.0], [2380.0, 362.0], [2336.0, 354.0], [2388.0, 218.8], [2396.0, 330.6666666666667], [2400.0, 202.98186824423445], [2384.0, 14.333333333333334], [2328.0, 10.0], [2324.0, 12.333333333333334], [2320.0, 14.0], [2308.0, 17.5], [2360.0, 289.8421052631581], [2153.0, 413.0], [2125.0, 400.5], [2073.0, 219.0], [2049.0, 205.5], [2057.0, 145.1], [2053.0, 149.0], [2069.0, 141.0], [2061.0, 143.0], [2105.0, 123.5], [2101.0, 126.66666666666667], [2097.0, 127.0], [2089.0, 132.0], [2085.0, 138.0], [2129.0, 572.6666666666666], [2133.0, 578.75], [2149.0, 411.0], [2077.0, 138.0], [2169.0, 485.9459459459459], [2173.0, 434.1363636363636], [2165.0, 420.25], [2277.0, 189.5], [2177.0, 251.5], [2233.0, 468.5], [2237.0, 50.5], [2181.0, 187.0], [2197.0, 70.0], [2281.0, 272.2307692307692], [2285.0, 133.33333333333334], [2297.0, 348.0], [2273.0, 366.75], [2201.0, 68.0], [2241.0, 331.0], [2269.0, 342.16666666666663], [2265.0, 340.0], [2253.0, 100.4], [2213.0, 237.50000000000003], [2217.0, 320.6315789473685], [2229.0, 137.0], [2225.0, 57.0], [2309.0, 184.0], [2305.0, 351.0], [2385.0, 565.0], [2377.0, 16.25], [2369.0, 21.0], [2337.0, 354.6666666666667], [2365.0, 358.0], [2333.0, 351.0], [2349.0, 368.0], [2329.0, 180.0], [2325.0, 12.0], [2321.0, 12.5], [2389.0, 370.0], [2393.0, 347.25], [2397.0, 332.0], [1029.0, 97.73584905660378], [1025.0, 91.66666666666667], [1039.0, 11.0], [1051.0, 33.85714285714286], [1085.0, 65.1875], [1045.0, 56.33333333333333], [1041.0, 12.0], [1043.0, 13.0], [1057.0, 23.0], [1059.0, 24.5], [1063.0, 26.0], [1103.0, 102.0], [1089.0, 137.0], [1091.0, 204.0], [1119.0, 115.0], [1117.0, 115.0], [1115.0, 113.83333333333333], [1113.0, 110.0], [1111.0, 152.66666666666666], [1097.0, 135.25], [1149.0, 122.6], [1147.0, 110.0], [1151.0, 112.5], [1121.0, 132.0], [1131.0, 133.0], [1133.0, 154.0], [1135.0, 105.0], [1127.0, 117.0], [1145.0, 137.5], [1139.0, 108.18749999999999], [1143.0, 107.0], [1101.0, 212.0], [1095.0, 137.5], [1109.0, 128.0], [1107.0, 116.0], [1165.0, 115.5], [1159.0, 112.0], [1183.0, 133.66666666666666], [1153.0, 112.0], [1179.0, 128.0], [1167.0, 137.75], [1213.0, 180.10000000000002], [1211.0, 168.57142857142858], [1209.0, 162.0], [1207.0, 154.50000000000003], [1169.0, 122.18181818181819], [1163.0, 114.5], [1161.0, 115.66666666666667], [1171.0, 120.33333333333333], [1175.0, 124.66666666666667], [1267.0, 274.6666666666667], [1221.0, 214.0], [1243.0, 271.25925925925907], [1217.0, 196.9591836734694], [1245.0, 291.5], [1255.0, 371.0], [1251.0, 395.0], [1277.0, 282.6666666666667], [1279.0, 283.0], [1273.0, 278.0], [1263.0, 273.0], [1239.0, 221.0], [1241.0, 208.0], [1293.0, 309.0357142857143], [1295.0, 316.5], [1283.0, 289.0], [1281.0, 286.8999999999999], [1289.0, 297.8888888888889], [1343.0, 384.25], [1339.0, 389.6666666666667], [1335.0, 467.5], [1331.0, 366.0], [1329.0, 369.0], [1319.0, 357.62068965517244], [1321.0, 359.0], [1323.0, 368.0], [1327.0, 375.0], [1309.0, 328.5], [1301.0, 325.1428571428571], [1299.0, 318.4], [1303.0, 327.42857142857144], [1365.0, 391.0], [1403.0, 432.0], [1361.0, 412.0], [1363.0, 405.0], [1347.0, 378.0], [1367.0, 400.0], [1345.0, 392.5], [1355.0, 390.0], [1461.0, 425.375], [1413.0, 451.0], [1409.0, 454.0], [1423.0, 367.3333333333333], [1441.0, 419.0], [1471.0, 540.0], [1465.0, 451.0], [1457.0, 456.0], [1459.0, 519.0], [1443.0, 356.0], [1451.0, 422.0], [1453.0, 546.0], [1455.0, 370.0], [1447.0, 397.5], [1411.0, 468.5], [1415.0, 444.0], [1421.0, 420.5], [1425.0, 496.03030303030306], [1427.0, 457.2857142857143], [1433.0, 433.0], [1439.0, 432.0], [1435.0, 434.0], [1437.0, 422.0], [1479.0, 472.5], [1511.0, 481.0], [1475.0, 448.0], [1501.0, 478.0], [1477.0, 464.0], [1495.0, 429.0], [1491.0, 396.0], [1513.0, 458.6666666666667], [1487.0, 470.0], [1507.0, 479.0], [1585.0, 441.0], [1565.0, 512.0], [1553.0, 529.0], [1557.0, 563.4285714285714], [1555.0, 514.0], [1593.0, 520.0], [1597.0, 524.0], [1587.0, 502.0], [1583.0, 524.0], [1539.0, 514.0], [1645.0, 545.0], [1611.0, 528.0], [1659.0, 517.5], [1675.0, 532.0], [1681.0, 470.0], [1687.0, 519.0], [1677.0, 446.0], [1713.0, 520.0], [1791.0, 530.7777777777778], [1789.0, 558.0], [1771.0, 525.0], [1769.0, 516.0], [1761.0, 517.0], [1773.0, 536.0], [1779.0, 485.0], [1787.0, 528.6666666666666], [1781.0, 540.5], [1785.0, 504.6666666666667], [1783.0, 530.0], [1805.0, 36.895833333333336], [1801.0, 65.3265306122449], [1843.0, 480.0], [1841.0, 19.926315789473673], [1847.0, 705.0386473429951], [1849.0, 604.0205128205129], [1845.0, 452.1560283687942], [1853.0, 367.24999999999983], [1855.0, 308.0189274447953], [1825.0, 22.40425531914893], [1827.0, 15.399999999999995], [1851.0, 542.9024390243903], [1793.0, 478.0], [1821.0, 24.425531914893604], [1823.0, 17.434782608695652], [1795.0, 513.4], [1811.0, 48.47826086956522], [1831.0, 320.38655462184863], [1835.0, 500.17241379310343], [1839.0, 17.32460732984292], [1833.0, 20.7304964539007], [1817.0, 28.45833333333334], [1871.0, 280.0], [1881.0, 476.0], [1877.0, 213.33333333333331], [1873.0, 88.0], [1879.0, 81.0], [1903.0, 166.5], [1899.0, 65.0], [1887.0, 143.00000000000003], [1857.0, 158.96800000000002], [1869.0, 92.33333333333333], [1863.0, 99.0], [1861.0, 102.0], [1897.0, 307.5], [1911.0, 123.66666666666667], [1907.0, 58.0], [1919.0, 45.5], [1891.0, 72.5], [1893.0, 70.0], [1889.0, 74.0], [1971.0, 532.5], [1927.0, 316.5], [1923.0, 246.5], [1921.0, 43.5], [1925.0, 39.75], [1931.0, 116.6], [1953.0, 597.0], [1955.0, 13.666666666666666], [1977.0, 455.5423476968794], [1983.0, 586.5], [1981.0, 757.0], [1973.0, 37.877551020408156], [1975.0, 22.42105263157895], [1969.0, 547.5], [1933.0, 33.25], [1957.0, 541.1666666666666], [1937.0, 633.0], [1939.0, 27.6], [1941.0, 22.0], [1959.0, 299.66666666666663], [1963.0, 467.0], [1961.0, 585.75], [1965.0, 571.625], [2019.0, 312.0], [2017.0, 240.0], [2027.0, 610.5], [2023.0, 825.0], [2021.0, 311.5], [2031.0, 353.5], [2029.0, 161.0], [1991.0, 458.0], [2003.0, 653.0], [1985.0, 602.0], [2009.0, 169.0], [2005.0, 171.16666666666666], [2011.0, 168.0], [2047.0, 203.83333333333334], [2035.0, 313.0], [1999.0, 173.0], [2043.0, 154.4], [2039.0, 156.0], [2045.0, 153.5], [2037.0, 156.0], [2001.0, 333.0], [2154.0, 258.5], [2122.0, 486.25], [2070.0, 614.0], [2110.0, 119.6], [2054.0, 149.0], [2058.0, 144.0], [2062.0, 143.0], [2106.0, 122.5], [2094.0, 129.75], [2086.0, 134.5], [2090.0, 132.5], [2102.0, 125.8], [2130.0, 479.3333333333333], [2138.0, 525.5], [2134.0, 405.2], [2142.0, 407.0], [2170.0, 392.56000000000006], [2158.0, 101.75], [2174.0, 252.5], [2114.0, 118.0], [2146.0, 503.0], [2186.0, 427.4460431654676], [2226.0, 301.0], [2222.0, 140.0], [2230.0, 239.5], [2182.0, 81.0], [2254.0, 336.0], [2242.0, 333.0], [2250.0, 43.0], [2286.0, 186.5], [2206.0, 66.5], [2198.0, 71.0], [2298.0, 363.0], [2262.0, 337.0], [2210.0, 177.0], [2218.0, 100.5], [2370.0, 20.0], [2314.0, 350.0], [2342.0, 366.0], [2362.0, 23.0], [2310.0, 17.0], [2382.0, 362.0], [2318.0, 351.0], [2326.0, 10.25], [2390.0, 223.66666666666669], [2394.0, 170.0], [2386.0, 13.0], [2378.0, 16.0], [2175.0, 331.0], [2163.0, 418.0], [2067.0, 330.6], [2059.0, 144.0], [2051.0, 150.5], [2055.0, 149.0], [2079.0, 137.0], [2075.0, 138.5], [2107.0, 121.25000000000001], [2099.0, 125.0], [2087.0, 133.5], [2083.0, 136.0], [2127.0, 400.5], [2131.0, 436.75], [2143.0, 408.0], [2147.0, 409.0], [2155.0, 324.85714285714283], [2151.0, 105.5], [2171.0, 329.32000000000005], [2167.0, 404.1176470588235], [2187.0, 390.5142857142857], [2179.0, 467.4230769230769], [2183.0, 238.0], [2231.0, 306.0], [2271.0, 344.0], [2255.0, 337.0], [2259.0, 37.0], [2287.0, 187.0], [2283.0, 28.0], [2275.0, 30.0], [2207.0, 66.0], [2203.0, 70.0], [2199.0, 69.0], [2195.0, 71.5], [2191.0, 74.6], [2267.0, 650.0], [2211.0, 345.7142857142857], [2227.0, 56.0], [2335.0, 266.5], [2375.0, 282.66666666666663], [2339.0, 356.0], [2387.0, 404.3333333333333], [2399.0, 353.051282051282], [2383.0, 14.4], [2379.0, 15.0], [2359.0, 308.6666666666667], [2331.0, 9.5], [2327.0, 10.0], [2315.0, 15.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[2387.546853434427, 208.69556824874735]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52486.7, "minX": 1.63357392E12, "maxY": 8264517.933333334, "series": [{"data": [[1.63357404E12, 7851272.066666666], [1.6335747E12, 8238319.966666667], [1.63357434E12, 8223955.133333334], [1.63357464E12, 7656979.666666667], [1.63357398E12, 8056430.533333333], [1.63357428E12, 7644382.866666666], [1.63357392E12, 2534592.4], [1.63357458E12, 7980677.666666667], [1.63357422E12, 7979745.733333333], [1.63357452E12, 8264517.933333334], [1.63357416E12, 7981210.2], [1.63357482E12, 5875043.016666667], [1.63357476E12, 7729555.516666667], [1.63357446E12, 7736388.466666667], [1.6335741E12, 8098234.4], [1.6335744E12, 7954598.633333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63357404E12, 163800.73333333334], [1.6335747E12, 172210.4], [1.63357434E12, 171932.06666666668], [1.63357464E12, 160066.71666666667], [1.63357398E12, 167422.06666666668], [1.63357428E12, 159816.21666666667], [1.63357392E12, 52486.7], [1.63357458E12, 166846.91666666666], [1.63357422E12, 166827.43333333332], [1.63357452E12, 172780.98333333334], [1.63357416E12, 166858.05], [1.63357482E12, 122814.58333333333], [1.63357476E12, 161578.06666666668], [1.63357446E12, 161739.5], [1.6335741E12, 169304.6], [1.6335744E12, 166301.38333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63357482E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19.89095398578525, "minX": 1.63357392E12, "maxY": 499.34252547536244, "series": [{"data": [[1.63357404E12, 246.7975005511014], [1.6335747E12, 298.1300749935354], [1.63357434E12, 298.6426050637796], [1.63357464E12, 149.72146968300666], [1.63357398E12, 313.37599563737274], [1.63357428E12, 20.33966108779294], [1.63357392E12, 499.34252547536244], [1.63357458E12, 87.87428476103031], [1.63357422E12, 19.89095398578525], [1.63357452E12, 262.3570404497662], [1.63357416E12, 20.037214966054478], [1.63357482E12, 262.44899716714144], [1.63357476E12, 260.15358643974815], [1.63357446E12, 249.69136121149288], [1.6335741E12, 255.22215098310303], [1.6335744E12, 291.8524326766988]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63357482E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19.778087356935607, "minX": 1.63357392E12, "maxY": 498.8849669082887, "series": [{"data": [[1.63357404E12, 246.64178522374726], [1.6335747E12, 297.96045060770246], [1.63357434E12, 298.51824451207824], [1.63357464E12, 149.59051626701938], [1.63357398E12, 313.20558878937067], [1.63357428E12, 20.22915759591774], [1.63357392E12, 498.8849669082887], [1.63357458E12, 87.75175577612856], [1.63357422E12, 19.778087356935607], [1.63357452E12, 262.22261062873594], [1.63357416E12, 19.909940115765277], [1.63357482E12, 262.2398413597739], [1.63357476E12, 259.966151037002], [1.63357446E12, 249.56229564618786], [1.6335741E12, 255.0511442099025], [1.6335744E12, 291.723510016903]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63357482E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.46940478881566083, "minX": 1.63357392E12, "maxY": 229.9722659943293, "series": [{"data": [[1.63357404E12, 1.242789072965602], [1.6335747E12, 0.5945500387897603], [1.63357434E12, 0.647348313151591], [1.63357464E12, 0.46940478881566083], [1.63357398E12, 2.199061374227466], [1.63357428E12, 0.5254706630209495], [1.63357392E12, 229.9722659943293], [1.63357458E12, 0.8191675702727543], [1.63357422E12, 0.5826854416230066], [1.63357452E12, 0.91072377853311], [1.63357416E12, 0.6920549133430121], [1.63357482E12, 1.0484759206798937], [1.63357476E12, 1.1782195273203513], [1.63357446E12, 0.5502495267595933], [1.6335741E12, 0.8870914710330787], [1.6335744E12, 1.1778105072888319]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63357482E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.63357392E12, "maxY": 9825.0, "series": [{"data": [[1.63357404E12, 1059.0], [1.6335747E12, 925.0], [1.63357434E12, 1261.0], [1.63357464E12, 1151.0], [1.63357398E12, 1004.0], [1.63357428E12, 174.0], [1.63357392E12, 9825.0], [1.63357458E12, 745.0], [1.63357422E12, 88.0], [1.63357452E12, 986.0], [1.63357416E12, 127.0], [1.63357482E12, 827.0], [1.63357476E12, 967.0], [1.63357446E12, 985.0], [1.6335741E12, 944.0], [1.6335744E12, 969.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63357404E12, 931.0], [1.6335747E12, 792.0], [1.63357434E12, 774.0], [1.63357464E12, 865.9900000000016], [1.63357398E12, 799.9900000000016], [1.63357428E12, 67.0], [1.63357392E12, 9441.61], [1.63357458E12, 46.0], [1.63357422E12, 45.0], [1.63357452E12, 914.0], [1.63357416E12, 49.9900000000016], [1.63357482E12, 803.0], [1.63357476E12, 671.0], [1.63357446E12, 636.0], [1.6335741E12, 597.0], [1.6335744E12, 760.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63357404E12, 1057.999472732543], [1.6335747E12, 836.9978909301717], [1.63357434E12, 905.9994727325429], [1.63357464E12, 905.9984181976288], [1.63357398E12, 843.9994727325429], [1.63357428E12, 168.99736366271463], [1.63357392E12, 9783.401891021742], [1.63357458E12, 81.0], [1.63357422E12, 85.0], [1.63357452E12, 982.9984181976288], [1.63357416E12, 126.0], [1.63357482E12, 827.0], [1.63357476E12, 720.9994727325429], [1.63357446E12, 672.0], [1.6335741E12, 716.9873455810302], [1.6335744E12, 937.0]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63357404E12, 959.0], [1.6335747E12, 820.0], [1.63357434E12, 865.9993051910387], [1.63357464E12, 892.0], [1.63357398E12, 835.0], [1.63357428E12, 152.99930519103873], [1.63357392E12, 9728.84516204834], [1.63357458E12, 74.0], [1.63357422E12, 81.0], [1.63357452E12, 942.0], [1.63357416E12, 103.99930519103873], [1.63357482E12, 822.9993051910387], [1.63357476E12, 711.0], [1.63357446E12, 665.9993051910387], [1.6335741E12, 689.0], [1.6335744E12, 923.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63357404E12, 3.0], [1.6335747E12, 4.0], [1.63357434E12, 3.0], [1.63357464E12, 4.0], [1.63357398E12, 4.0], [1.63357428E12, 4.0], [1.63357392E12, 4.0], [1.63357458E12, 3.0], [1.63357422E12, 4.0], [1.63357452E12, 4.0], [1.63357416E12, 4.0], [1.63357482E12, 4.0], [1.63357476E12, 5.0], [1.63357446E12, 3.0], [1.6335741E12, 3.0], [1.6335744E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63357404E12, 217.0], [1.6335747E12, 276.0], [1.63357434E12, 225.0], [1.63357464E12, 23.0], [1.63357398E12, 126.0], [1.63357428E12, 20.0], [1.63357392E12, 271.0], [1.63357458E12, 19.0], [1.63357422E12, 19.0], [1.63357452E12, 193.5], [1.63357416E12, 20.0], [1.63357482E12, 287.0], [1.63357476E12, 220.0], [1.63357446E12, 33.0], [1.6335741E12, 46.0], [1.6335744E12, 162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63357482E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 3.0, "maxY": 712.0, "series": [{"data": [[3.0, 5.0], [7.0, 31.0], [9.0, 21.0], [14.0, 26.5], [15.0, 13.0], [16.0, 12.0], [20.0, 9.5], [22.0, 16.5], [24.0, 10.0], [25.0, 13.0], [28.0, 19.0], [35.0, 26.0], [37.0, 20.0], [36.0, 20.0], [39.0, 16.0], [45.0, 12.0], [46.0, 13.0], [48.0, 15.5], [50.0, 26.5], [53.0, 18.0], [55.0, 22.0], [56.0, 17.0], [57.0, 33.0], [61.0, 24.0], [66.0, 18.0], [67.0, 23.0], [75.0, 22.0], [83.0, 19.0], [85.0, 25.0], [90.0, 23.0], [88.0, 16.0], [94.0, 21.0], [96.0, 20.5], [98.0, 19.0], [105.0, 22.0], [110.0, 17.0], [112.0, 19.0], [115.0, 19.0], [117.0, 18.0], [120.0, 20.0], [121.0, 17.0], [123.0, 17.0], [127.0, 24.0], [135.0, 20.0], [128.0, 18.0], [142.0, 16.0], [143.0, 19.0], [141.0, 18.0], [149.0, 23.0], [148.0, 102.0], [146.0, 19.0], [160.0, 22.0], [161.0, 22.0], [165.0, 22.0], [167.0, 21.0], [162.0, 23.0], [164.0, 21.5], [171.0, 17.0], [168.0, 53.5], [174.0, 16.0], [179.0, 21.0], [182.0, 19.5], [186.0, 20.0], [195.0, 27.0], [192.0, 19.0], [194.0, 24.0], [196.0, 282.5], [208.0, 24.0], [224.0, 109.5], [231.0, 19.0], [238.0, 30.0], [239.0, 15.0], [232.0, 17.0], [241.0, 94.0], [243.0, 98.0], [244.0, 16.5], [249.0, 18.0], [255.0, 21.0], [270.0, 28.0], [268.0, 23.0], [257.0, 185.0], [269.0, 18.0], [265.0, 22.0], [279.0, 43.0], [286.0, 18.0], [295.0, 22.0], [293.0, 20.0], [332.0, 17.0], [328.0, 18.0], [329.0, 21.0], [342.0, 19.0], [361.0, 55.0], [369.0, 39.0], [394.0, 139.5], [384.0, 21.0], [424.0, 18.0], [421.0, 20.0], [436.0, 16.0], [474.0, 133.0], [477.0, 19.0], [466.0, 20.0], [488.0, 27.0], [493.0, 19.0], [481.0, 20.0], [482.0, 19.0], [483.0, 19.0], [501.0, 18.0], [497.0, 93.0], [529.0, 20.0], [543.0, 19.0], [552.0, 22.0], [564.0, 19.0], [605.0, 285.0], [586.0, 17.0], [596.0, 19.0], [606.0, 20.0], [584.0, 19.0], [585.0, 20.0], [593.0, 18.0], [597.0, 19.0], [599.0, 20.0], [602.0, 21.0], [625.0, 19.0], [626.0, 32.0], [612.0, 23.0], [618.0, 18.0], [620.0, 20.0], [631.0, 20.0], [616.0, 18.0], [627.0, 197.0], [615.0, 19.0], [668.0, 19.0], [659.0, 22.0], [664.0, 22.0], [666.0, 20.0], [661.0, 19.0], [676.0, 19.0], [672.0, 20.0], [679.0, 19.0], [706.0, 19.0], [724.0, 21.0], [708.0, 20.0], [722.0, 20.0], [707.0, 20.0], [731.0, 17.0], [719.0, 20.0], [714.0, 19.0], [743.0, 18.0], [754.0, 18.0], [748.0, 19.0], [762.0, 162.0], [774.0, 222.0], [817.0, 19.0], [805.0, 233.0], [836.0, 86.0], [884.0, 186.5], [885.0, 20.0], [871.0, 213.0], [878.0, 177.0], [897.0, 237.0], [927.0, 186.0], [931.0, 255.0], [950.0, 234.5], [949.0, 19.0], [948.0, 179.0], [991.0, 19.0], [990.0, 20.0], [981.0, 21.0], [985.0, 20.0], [973.0, 20.0], [970.0, 20.0], [969.0, 19.0], [972.0, 22.0], [984.0, 20.0], [967.0, 19.0], [975.0, 22.0], [962.0, 19.0], [966.0, 23.0], [974.0, 20.0], [980.0, 19.0], [982.0, 20.0], [983.0, 21.0], [977.0, 20.0], [976.0, 20.0], [978.0, 19.0], [979.0, 20.0], [988.0, 20.0], [986.0, 20.0], [987.0, 19.0], [989.0, 20.0], [1008.0, 19.0], [1007.0, 20.0], [1013.0, 20.0], [1015.0, 19.0], [1014.0, 17.0], [1012.0, 20.0], [1011.0, 19.0], [1000.0, 19.0], [1001.0, 20.0], [997.0, 19.0], [998.0, 19.0], [999.0, 20.0], [1017.0, 19.0], [1023.0, 19.0], [1016.0, 20.0], [995.0, 20.0], [996.0, 20.0], [994.0, 20.0], [992.0, 19.0], [993.0, 19.0], [1010.0, 19.0], [1006.0, 22.0], [1003.0, 19.0], [1004.0, 19.0], [1005.0, 19.0], [1002.0, 19.0], [1009.0, 20.0], [1077.0, 270.0], [1038.0, 302.0], [1081.0, 24.0], [1086.0, 170.0], [1087.0, 222.0], [1034.0, 20.0], [1063.0, 20.0], [1071.0, 21.0], [1056.0, 20.0], [1035.0, 21.0], [1075.0, 58.5], [1040.0, 208.0], [1025.0, 20.0], [1138.0, 21.0], [1097.0, 25.0], [1114.0, 75.0], [1134.0, 23.0], [1103.0, 203.0], [1131.0, 313.0], [1121.0, 20.0], [1107.0, 182.0], [1129.0, 22.0], [1157.0, 311.0], [1197.0, 229.0], [1152.0, 269.0], [1175.0, 259.0], [1176.0, 116.5], [1177.0, 21.0], [1173.0, 249.0], [1212.0, 253.0], [1195.0, 296.0], [1196.0, 269.0], [1261.0, 264.0], [1268.0, 137.0], [1251.0, 22.0], [1225.0, 261.0], [1235.0, 264.0], [1228.0, 21.0], [1288.0, 155.0], [1334.0, 285.0], [1280.0, 24.0], [1354.0, 308.0], [1355.0, 257.0], [1370.0, 304.0], [1391.0, 26.0], [1361.0, 289.0], [1380.0, 26.0], [1399.0, 271.0], [1389.0, 256.0], [1407.0, 141.0], [1436.0, 298.5], [1452.0, 197.0], [1453.0, 248.0], [1428.0, 29.0], [1443.0, 276.0], [1435.0, 190.5], [1408.0, 33.0], [1414.0, 240.0], [1416.0, 280.0], [1432.0, 217.0], [1507.0, 42.0], [1479.0, 27.0], [1535.0, 30.0], [1488.0, 337.0], [1510.0, 322.0], [1515.0, 278.0], [1509.0, 352.0], [1585.0, 47.0], [1565.0, 212.0], [1539.0, 49.0], [1540.0, 31.0], [1580.0, 293.0], [1569.0, 342.0], [1556.0, 30.0], [1587.0, 209.0], [1568.0, 203.0], [1658.0, 285.0], [1634.0, 59.5], [1629.0, 91.0], [1638.0, 305.0], [1641.0, 112.0], [1605.0, 186.0], [1601.0, 36.0], [1613.0, 59.0], [1637.0, 306.0], [1616.0, 63.0], [1624.0, 37.0], [1695.0, 70.0], [1684.0, 320.5], [1707.0, 122.0], [1697.0, 122.0], [1702.0, 144.0], [1703.0, 393.0], [1720.0, 125.0], [1762.0, 170.5], [1773.0, 208.0], [1755.0, 221.0], [1738.0, 422.0], [1780.0, 326.0], [1808.0, 43.0], [1823.0, 303.0], [1825.0, 297.0], [1888.0, 438.0], [1871.0, 85.0], [1865.0, 246.0], [1918.0, 343.5], [1878.0, 254.0], [1908.0, 272.0], [1972.0, 362.0], [1940.0, 306.0], [1929.0, 354.0], [1921.0, 312.0], [1931.0, 290.0], [1996.0, 295.0], [2002.0, 71.0], [2006.0, 385.0], [2031.0, 336.0], [2030.0, 298.0], [2046.0, 331.0], [2040.0, 358.0], [2076.0, 370.0], [2048.0, 343.0], [2174.0, 299.0], [2284.0, 406.0], [2282.0, 525.0], [2266.0, 553.0], [2298.0, 478.0], [2286.0, 471.5], [2190.0, 474.0], [2224.0, 453.0], [2260.0, 543.0], [2406.0, 163.0], [2384.0, 194.0], [2376.0, 584.0], [2410.0, 574.0], [2330.0, 540.0], [2324.0, 373.0], [2356.0, 511.0], [2352.0, 518.0], [2538.0, 423.0], [2520.0, 506.0], [2446.0, 488.0], [2542.0, 572.0], [2460.0, 365.0], [2452.0, 201.0], [2658.0, 515.0], [2584.0, 712.0], [2578.0, 563.0], [2642.0, 546.0], [2590.0, 579.5], [2604.0, 476.0], [2602.0, 651.0], [2674.0, 536.0], [2626.0, 425.0], [2686.0, 390.0], [2622.0, 538.0], [2608.0, 513.5], [2620.0, 408.0], [2784.0, 554.0], [2778.0, 552.0], [2702.0, 630.0], [2756.0, 474.5], [2806.0, 520.0], [2732.0, 346.0], [2742.0, 335.0], [2710.0, 447.0], [2816.0, 425.0], [2914.0, 473.5], [2936.0, 401.0], [2916.0, 501.5], [2906.0, 450.0], [2822.0, 440.0], [2824.0, 451.0], [2904.0, 521.0], [3024.0, 467.0], [2986.0, 468.0], [3004.0, 418.0], [2974.0, 513.5], [3078.0, 501.0], [3114.0, 488.0], [3120.0, 200.0], [3240.0, 386.0], [2091.0, 275.0], [2269.0, 518.0], [2283.0, 500.0], [2273.0, 201.0], [2279.0, 455.0], [2413.0, 469.0], [2379.0, 45.0], [2377.0, 646.0], [2337.0, 506.0], [2339.0, 448.0], [2347.0, 468.0], [2397.0, 424.0], [2385.0, 320.0], [2421.0, 588.0], [2427.0, 510.0], [2325.0, 653.0], [2367.0, 564.0], [2435.0, 425.0], [2455.0, 495.0], [2493.0, 225.0], [2533.0, 614.0], [2497.0, 523.0], [2527.0, 373.0], [2551.0, 441.0], [2437.0, 496.0], [2439.0, 503.0], [2583.0, 167.0], [2657.0, 613.0], [2597.0, 545.0], [2679.0, 610.0], [2637.0, 419.0], [2687.0, 612.0], [2573.0, 658.0], [2561.0, 540.0], [2801.0, 516.0], [2777.0, 621.0], [2717.0, 361.0], [2739.0, 485.0], [2807.0, 462.0], [2783.0, 669.0], [2797.0, 397.0], [2791.0, 423.0], [2803.0, 461.0], [2907.0, 478.0], [2845.0, 703.0], [2917.0, 511.0], [2861.0, 218.0], [3085.0, 468.0], [3127.0, 478.0], [3149.0, 287.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3240.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 3.0, "maxY": 711.5, "series": [{"data": [[3.0, 5.0], [7.0, 31.0], [9.0, 21.0], [14.0, 26.5], [15.0, 13.0], [16.0, 11.0], [20.0, 9.5], [22.0, 16.5], [24.0, 10.0], [25.0, 13.0], [28.0, 19.0], [35.0, 26.0], [37.0, 20.0], [36.0, 20.0], [39.0, 16.0], [45.0, 12.0], [46.0, 13.0], [48.0, 15.0], [50.0, 26.5], [53.0, 18.0], [55.0, 22.0], [56.0, 17.0], [57.0, 33.0], [61.0, 24.0], [66.0, 18.0], [67.0, 23.0], [75.0, 22.0], [83.0, 19.0], [85.0, 25.0], [90.0, 22.5], [88.0, 16.0], [94.0, 21.0], [96.0, 20.0], [98.0, 19.0], [105.0, 22.0], [110.0, 17.0], [112.0, 19.0], [115.0, 19.0], [117.0, 18.0], [120.0, 20.0], [121.0, 17.0], [123.0, 16.0], [127.0, 23.0], [135.0, 20.0], [128.0, 18.0], [142.0, 16.0], [143.0, 19.0], [141.0, 18.0], [149.0, 22.0], [148.0, 102.0], [146.0, 19.0], [160.0, 22.0], [161.0, 21.0], [165.0, 22.0], [167.0, 21.0], [162.0, 22.5], [164.0, 21.0], [171.0, 17.0], [168.0, 52.5], [174.0, 16.0], [179.0, 21.0], [182.0, 19.0], [186.0, 20.0], [195.0, 26.0], [192.0, 19.0], [194.0, 23.0], [196.0, 282.0], [208.0, 23.5], [224.0, 108.5], [231.0, 19.0], [238.0, 29.5], [239.0, 15.0], [232.0, 17.0], [241.0, 94.0], [243.0, 98.0], [244.0, 16.0], [249.0, 18.0], [255.0, 21.0], [270.0, 28.0], [268.0, 22.0], [257.0, 185.0], [269.0, 18.0], [265.0, 22.0], [279.0, 43.0], [286.0, 18.0], [295.0, 22.0], [293.0, 20.0], [332.0, 17.0], [328.0, 17.5], [329.0, 21.0], [342.0, 19.0], [361.0, 55.0], [369.0, 39.0], [394.0, 139.5], [384.0, 20.5], [424.0, 18.0], [421.0, 20.0], [436.0, 16.0], [474.0, 133.0], [477.0, 19.0], [466.0, 20.0], [488.0, 26.0], [493.0, 19.0], [481.0, 20.0], [482.0, 19.0], [483.0, 19.0], [501.0, 18.0], [497.0, 92.0], [529.0, 20.0], [543.0, 19.0], [552.0, 21.5], [564.0, 19.0], [605.0, 285.0], [586.0, 17.0], [596.0, 19.0], [606.0, 20.0], [584.0, 19.0], [585.0, 20.0], [593.0, 18.0], [597.0, 19.0], [599.0, 19.0], [602.0, 21.0], [625.0, 19.0], [626.0, 32.0], [612.0, 23.0], [618.0, 18.0], [620.0, 19.5], [631.0, 20.0], [616.0, 18.0], [627.0, 197.0], [615.0, 19.0], [668.0, 19.0], [659.0, 22.0], [664.0, 22.0], [666.0, 20.0], [661.0, 19.0], [676.0, 19.0], [672.0, 20.0], [679.0, 19.0], [706.0, 19.0], [724.0, 21.0], [708.0, 20.0], [722.0, 20.0], [707.0, 20.0], [731.0, 17.0], [719.0, 20.0], [714.0, 19.0], [743.0, 18.0], [754.0, 18.0], [748.0, 19.0], [762.0, 162.0], [774.0, 222.0], [817.0, 19.0], [805.0, 233.0], [836.0, 86.0], [884.0, 186.5], [885.0, 20.0], [871.0, 213.0], [878.0, 177.0], [897.0, 237.0], [927.0, 186.0], [931.0, 255.0], [950.0, 234.5], [949.0, 19.0], [948.0, 179.0], [991.0, 19.0], [990.0, 20.0], [981.0, 21.0], [985.0, 20.0], [973.0, 20.0], [970.0, 20.0], [969.0, 19.0], [972.0, 22.0], [984.0, 19.0], [967.0, 19.0], [975.0, 22.0], [962.0, 19.0], [966.0, 23.0], [974.0, 20.0], [980.0, 19.0], [982.0, 20.0], [983.0, 21.0], [977.0, 19.0], [976.0, 20.0], [978.0, 19.0], [979.0, 20.0], [988.0, 20.0], [986.0, 20.0], [987.0, 19.0], [989.0, 20.0], [1008.0, 19.0], [1007.0, 20.0], [1013.0, 20.0], [1015.0, 19.0], [1014.0, 17.0], [1012.0, 19.0], [1011.0, 19.0], [1000.0, 19.0], [1001.0, 20.0], [997.0, 19.0], [998.0, 19.0], [999.0, 20.0], [1017.0, 19.0], [1023.0, 19.0], [1016.0, 20.0], [995.0, 20.0], [996.0, 20.0], [994.0, 20.0], [992.0, 19.0], [993.0, 19.0], [1010.0, 19.0], [1006.0, 22.0], [1003.0, 19.0], [1004.0, 19.0], [1005.0, 19.0], [1002.0, 19.0], [1009.0, 19.0], [1077.0, 270.0], [1038.0, 301.5], [1081.0, 24.0], [1086.0, 170.0], [1087.0, 222.0], [1034.0, 20.0], [1063.0, 20.0], [1071.0, 21.0], [1056.0, 20.0], [1035.0, 21.0], [1075.0, 58.5], [1040.0, 208.0], [1025.0, 20.0], [1138.0, 21.0], [1097.0, 25.0], [1114.0, 75.0], [1134.0, 22.0], [1103.0, 203.0], [1131.0, 313.0], [1121.0, 20.0], [1107.0, 181.0], [1129.0, 22.0], [1157.0, 311.0], [1197.0, 229.0], [1152.0, 269.0], [1175.0, 259.0], [1176.0, 116.5], [1177.0, 21.0], [1173.0, 248.0], [1212.0, 253.0], [1195.0, 295.0], [1196.0, 269.0], [1261.0, 264.0], [1268.0, 137.0], [1251.0, 21.0], [1225.0, 261.0], [1235.0, 263.0], [1228.0, 21.0], [1288.0, 155.0], [1334.0, 284.5], [1280.0, 24.0], [1354.0, 308.0], [1355.0, 257.0], [1370.0, 304.0], [1391.0, 26.0], [1361.0, 289.0], [1380.0, 26.0], [1399.0, 271.0], [1389.0, 256.0], [1407.0, 140.0], [1436.0, 298.5], [1452.0, 197.0], [1453.0, 248.0], [1428.0, 29.0], [1443.0, 276.0], [1435.0, 190.5], [1408.0, 33.0], [1414.0, 240.0], [1416.0, 280.0], [1432.0, 216.5], [1507.0, 42.0], [1479.0, 27.0], [1535.0, 30.0], [1488.0, 337.0], [1510.0, 322.0], [1515.0, 278.0], [1509.0, 352.0], [1585.0, 47.0], [1565.0, 212.0], [1539.0, 49.0], [1540.0, 31.0], [1580.0, 293.0], [1569.0, 342.0], [1556.0, 30.0], [1587.0, 209.0], [1568.0, 203.0], [1658.0, 284.5], [1634.0, 59.5], [1629.0, 91.0], [1638.0, 305.0], [1641.0, 112.0], [1605.0, 186.0], [1601.0, 36.0], [1613.0, 59.0], [1637.0, 306.0], [1616.0, 63.0], [1624.0, 37.0], [1695.0, 69.0], [1684.0, 320.5], [1707.0, 122.0], [1697.0, 122.0], [1702.0, 144.0], [1703.0, 393.0], [1720.0, 125.0], [1762.0, 170.5], [1773.0, 208.0], [1755.0, 221.0], [1738.0, 422.0], [1780.0, 326.0], [1808.0, 42.0], [1823.0, 303.0], [1825.0, 297.0], [1888.0, 438.0], [1871.0, 85.0], [1865.0, 245.0], [1918.0, 343.0], [1878.0, 254.0], [1908.0, 272.0], [1972.0, 362.0], [1940.0, 306.0], [1929.0, 354.0], [1921.0, 312.0], [1931.0, 290.0], [1996.0, 295.0], [2002.0, 70.0], [2006.0, 385.0], [2031.0, 336.0], [2030.0, 298.0], [2046.0, 331.0], [2040.0, 358.0], [2076.0, 370.0], [2048.0, 343.0], [2174.0, 299.0], [2284.0, 406.0], [2282.0, 525.0], [2266.0, 553.0], [2298.0, 478.0], [2286.0, 471.0], [2190.0, 473.5], [2224.0, 453.0], [2260.0, 543.0], [2406.0, 163.0], [2384.0, 194.0], [2376.0, 584.0], [2410.0, 574.0], [2330.0, 540.0], [2324.0, 373.0], [2356.0, 511.0], [2352.0, 518.0], [2538.0, 423.0], [2520.0, 506.0], [2446.0, 488.0], [2542.0, 572.0], [2460.0, 365.0], [2452.0, 201.0], [2658.0, 514.5], [2584.0, 711.5], [2578.0, 563.0], [2642.0, 546.0], [2590.0, 579.0], [2604.0, 475.0], [2602.0, 650.5], [2674.0, 536.0], [2626.0, 425.0], [2686.0, 390.0], [2622.0, 538.0], [2608.0, 513.5], [2620.0, 408.0], [2784.0, 554.0], [2778.0, 552.0], [2702.0, 630.0], [2756.0, 474.5], [2806.0, 520.0], [2732.0, 346.0], [2742.0, 334.0], [2710.0, 447.0], [2816.0, 424.0], [2914.0, 473.5], [2936.0, 400.0], [2916.0, 501.0], [2906.0, 450.0], [2822.0, 440.0], [2824.0, 451.0], [2904.0, 521.0], [3024.0, 467.0], [2986.0, 468.0], [3004.0, 418.0], [2974.0, 513.5], [3078.0, 501.0], [3114.0, 487.0], [3120.0, 200.0], [3240.0, 385.5], [2091.0, 275.0], [2269.0, 517.0], [2283.0, 500.0], [2273.0, 201.0], [2279.0, 455.0], [2413.0, 469.0], [2379.0, 44.0], [2377.0, 646.0], [2337.0, 506.0], [2339.0, 448.0], [2347.0, 468.0], [2397.0, 424.0], [2385.0, 320.0], [2421.0, 587.0], [2427.0, 510.0], [2325.0, 653.0], [2367.0, 564.0], [2435.0, 425.0], [2455.0, 495.0], [2493.0, 225.0], [2533.0, 614.0], [2497.0, 522.0], [2527.0, 373.0], [2551.0, 441.0], [2437.0, 496.0], [2439.0, 503.0], [2583.0, 167.0], [2657.0, 613.0], [2597.0, 545.0], [2679.0, 610.0], [2637.0, 419.0], [2687.0, 612.0], [2573.0, 658.0], [2561.0, 540.0], [2801.0, 516.0], [2777.0, 621.0], [2717.0, 360.0], [2739.0, 485.0], [2807.0, 461.0], [2783.0, 668.0], [2797.0, 396.0], [2791.0, 423.0], [2803.0, 461.0], [2907.0, 478.0], [2845.0, 703.0], [2917.0, 511.0], [2861.0, 217.0], [3085.0, 468.0], [3127.0, 478.0], [3149.0, 287.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3240.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 317.3, "minX": 1.63357392E12, "maxY": 1034.85, "series": [{"data": [[1.63357404E12, 982.4833333333333], [1.6335747E12, 1031.2], [1.63357434E12, 1004.2833333333333], [1.63357464E12, 957.6833333333333], [1.63357398E12, 1008.9666666666667], [1.63357428E12, 981.4333333333333], [1.63357392E12, 317.3], [1.63357458E12, 999.65], [1.63357422E12, 999.4166666666666], [1.63357452E12, 1034.85], [1.63357416E12, 999.5], [1.63357482E12, 735.4166666666666], [1.63357476E12, 967.5333333333333], [1.63357446E12, 968.5], [1.6335741E12, 1013.8], [1.6335744E12, 995.8166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63357482E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 317.3, "minX": 1.63357392E12, "maxY": 1034.6166666666666, "series": [{"data": [[1.63357404E12, 982.8833333333333], [1.6335747E12, 1031.2], [1.63357434E12, 1029.5333333333333], [1.63357464E12, 958.4833333333333], [1.63357398E12, 1008.5666666666667], [1.63357428E12, 956.9833333333333], [1.63357392E12, 317.3], [1.63357458E12, 999.0833333333334], [1.63357422E12, 998.9666666666667], [1.63357452E12, 1034.6166666666666], [1.63357416E12, 999.15], [1.63357482E12, 735.4166666666666], [1.63357476E12, 967.5333333333333], [1.63357446E12, 968.5], [1.6335741E12, 1013.8], [1.6335744E12, 995.8166666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63357482E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 317.3, "minX": 1.63357392E12, "maxY": 1034.6166666666666, "series": [{"data": [[1.63357404E12, 982.8833333333333], [1.6335747E12, 1031.2], [1.63357434E12, 1029.5333333333333], [1.63357464E12, 958.4833333333333], [1.63357398E12, 1008.5666666666667], [1.63357428E12, 956.9833333333333], [1.63357392E12, 317.3], [1.63357458E12, 999.0833333333334], [1.63357422E12, 998.9666666666667], [1.63357452E12, 1034.6166666666666], [1.63357416E12, 999.15], [1.63357482E12, 735.4166666666666], [1.63357476E12, 967.5333333333333], [1.63357446E12, 968.5], [1.6335741E12, 1013.8], [1.6335744E12, 995.8166666666667]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63357482E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 317.3, "minX": 1.63357392E12, "maxY": 1034.6166666666666, "series": [{"data": [[1.63357404E12, 982.8833333333333], [1.6335747E12, 1031.2], [1.63357434E12, 1029.5333333333333], [1.63357464E12, 958.4833333333333], [1.63357398E12, 1008.5666666666667], [1.63357428E12, 956.9833333333333], [1.63357392E12, 317.3], [1.63357458E12, 999.0833333333334], [1.63357422E12, 998.9666666666667], [1.63357452E12, 1034.6166666666666], [1.63357416E12, 999.15], [1.63357482E12, 735.4166666666666], [1.63357476E12, 967.5333333333333], [1.63357446E12, 968.5], [1.6335741E12, 1013.8], [1.6335744E12, 995.8166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63357482E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

