/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 18637.0, "series": [{"data": [[0.0, 3.0], [0.1, 27.0], [0.2, 38.0], [0.3, 49.0], [0.4, 60.0], [0.5, 74.0], [0.6, 84.0], [0.7, 93.0], [0.8, 101.0], [0.9, 108.0], [1.0, 115.0], [1.1, 122.0], [1.2, 130.0], [1.3, 137.0], [1.4, 144.0], [1.5, 150.0], [1.6, 156.0], [1.7, 161.0], [1.8, 167.0], [1.9, 173.0], [2.0, 178.0], [2.1, 185.0], [2.2, 193.0], [2.3, 199.0], [2.4, 205.0], [2.5, 211.0], [2.6, 216.0], [2.7, 221.0], [2.8, 226.0], [2.9, 231.0], [3.0, 236.0], [3.1, 242.0], [3.2, 247.0], [3.3, 253.0], [3.4, 258.0], [3.5, 262.0], [3.6, 266.0], [3.7, 270.0], [3.8, 276.0], [3.9, 281.0], [4.0, 285.0], [4.1, 289.0], [4.2, 292.0], [4.3, 295.0], [4.4, 297.0], [4.5, 299.0], [4.6, 300.0], [4.7, 302.0], [4.8, 303.0], [4.9, 304.0], [5.0, 304.0], [5.1, 305.0], [5.2, 306.0], [5.3, 307.0], [5.4, 307.0], [5.5, 308.0], [5.6, 309.0], [5.7, 309.0], [5.8, 310.0], [5.9, 310.0], [6.0, 311.0], [6.1, 311.0], [6.2, 312.0], [6.3, 312.0], [6.4, 312.0], [6.5, 313.0], [6.6, 313.0], [6.7, 313.0], [6.8, 314.0], [6.9, 314.0], [7.0, 314.0], [7.1, 315.0], [7.2, 315.0], [7.3, 315.0], [7.4, 316.0], [7.5, 316.0], [7.6, 316.0], [7.7, 317.0], [7.8, 317.0], [7.9, 317.0], [8.0, 317.0], [8.1, 318.0], [8.2, 318.0], [8.3, 318.0], [8.4, 318.0], [8.5, 319.0], [8.6, 319.0], [8.7, 319.0], [8.8, 319.0], [8.9, 320.0], [9.0, 320.0], [9.1, 320.0], [9.2, 320.0], [9.3, 320.0], [9.4, 321.0], [9.5, 321.0], [9.6, 321.0], [9.7, 321.0], [9.8, 322.0], [9.9, 322.0], [10.0, 322.0], [10.1, 322.0], [10.2, 322.0], [10.3, 323.0], [10.4, 323.0], [10.5, 323.0], [10.6, 323.0], [10.7, 323.0], [10.8, 323.0], [10.9, 324.0], [11.0, 324.0], [11.1, 324.0], [11.2, 324.0], [11.3, 324.0], [11.4, 324.0], [11.5, 325.0], [11.6, 325.0], [11.7, 325.0], [11.8, 325.0], [11.9, 325.0], [12.0, 325.0], [12.1, 326.0], [12.2, 326.0], [12.3, 326.0], [12.4, 326.0], [12.5, 326.0], [12.6, 326.0], [12.7, 326.0], [12.8, 327.0], [12.9, 327.0], [13.0, 327.0], [13.1, 327.0], [13.2, 327.0], [13.3, 327.0], [13.4, 328.0], [13.5, 328.0], [13.6, 328.0], [13.7, 328.0], [13.8, 328.0], [13.9, 328.0], [14.0, 328.0], [14.1, 328.0], [14.2, 329.0], [14.3, 329.0], [14.4, 329.0], [14.5, 329.0], [14.6, 329.0], [14.7, 329.0], [14.8, 329.0], [14.9, 330.0], [15.0, 330.0], [15.1, 330.0], [15.2, 330.0], [15.3, 330.0], [15.4, 330.0], [15.5, 330.0], [15.6, 330.0], [15.7, 331.0], [15.8, 331.0], [15.9, 331.0], [16.0, 331.0], [16.1, 331.0], [16.2, 331.0], [16.3, 331.0], [16.4, 331.0], [16.5, 332.0], [16.6, 332.0], [16.7, 332.0], [16.8, 332.0], [16.9, 332.0], [17.0, 332.0], [17.1, 332.0], [17.2, 332.0], [17.3, 332.0], [17.4, 333.0], [17.5, 333.0], [17.6, 333.0], [17.7, 333.0], [17.8, 333.0], [17.9, 333.0], [18.0, 333.0], [18.1, 333.0], [18.2, 334.0], [18.3, 334.0], [18.4, 334.0], [18.5, 334.0], [18.6, 334.0], [18.7, 334.0], [18.8, 334.0], [18.9, 334.0], [19.0, 334.0], [19.1, 335.0], [19.2, 335.0], [19.3, 335.0], [19.4, 335.0], [19.5, 335.0], [19.6, 335.0], [19.7, 335.0], [19.8, 335.0], [19.9, 335.0], [20.0, 335.0], [20.1, 336.0], [20.2, 336.0], [20.3, 336.0], [20.4, 336.0], [20.5, 336.0], [20.6, 336.0], [20.7, 336.0], [20.8, 336.0], [20.9, 336.0], [21.0, 337.0], [21.1, 337.0], [21.2, 337.0], [21.3, 337.0], [21.4, 337.0], [21.5, 337.0], [21.6, 337.0], [21.7, 337.0], [21.8, 337.0], [21.9, 337.0], [22.0, 338.0], [22.1, 338.0], [22.2, 338.0], [22.3, 338.0], [22.4, 338.0], [22.5, 338.0], [22.6, 338.0], [22.7, 338.0], [22.8, 338.0], [22.9, 338.0], [23.0, 339.0], [23.1, 339.0], [23.2, 339.0], [23.3, 339.0], [23.4, 339.0], [23.5, 339.0], [23.6, 339.0], [23.7, 339.0], [23.8, 339.0], [23.9, 339.0], [24.0, 339.0], [24.1, 340.0], [24.2, 340.0], [24.3, 340.0], [24.4, 340.0], [24.5, 340.0], [24.6, 340.0], [24.7, 340.0], [24.8, 340.0], [24.9, 340.0], [25.0, 340.0], [25.1, 341.0], [25.2, 341.0], [25.3, 341.0], [25.4, 341.0], [25.5, 341.0], [25.6, 341.0], [25.7, 341.0], [25.8, 341.0], [25.9, 341.0], [26.0, 341.0], [26.1, 341.0], [26.2, 342.0], [26.3, 342.0], [26.4, 342.0], [26.5, 342.0], [26.6, 342.0], [26.7, 342.0], [26.8, 342.0], [26.9, 342.0], [27.0, 342.0], [27.1, 342.0], [27.2, 342.0], [27.3, 343.0], [27.4, 343.0], [27.5, 343.0], [27.6, 343.0], [27.7, 343.0], [27.8, 343.0], [27.9, 343.0], [28.0, 343.0], [28.1, 343.0], [28.2, 343.0], [28.3, 343.0], [28.4, 344.0], [28.5, 344.0], [28.6, 344.0], [28.7, 344.0], [28.8, 344.0], [28.9, 344.0], [29.0, 344.0], [29.1, 344.0], [29.2, 344.0], [29.3, 344.0], [29.4, 344.0], [29.5, 345.0], [29.6, 345.0], [29.7, 345.0], [29.8, 345.0], [29.9, 345.0], [30.0, 345.0], [30.1, 345.0], [30.2, 345.0], [30.3, 345.0], [30.4, 345.0], [30.5, 345.0], [30.6, 345.0], [30.7, 346.0], [30.8, 346.0], [30.9, 346.0], [31.0, 346.0], [31.1, 346.0], [31.2, 346.0], [31.3, 346.0], [31.4, 346.0], [31.5, 346.0], [31.6, 346.0], [31.7, 346.0], [31.8, 347.0], [31.9, 347.0], [32.0, 347.0], [32.1, 347.0], [32.2, 347.0], [32.3, 347.0], [32.4, 347.0], [32.5, 347.0], [32.6, 347.0], [32.7, 347.0], [32.8, 347.0], [32.9, 348.0], [33.0, 348.0], [33.1, 348.0], [33.2, 348.0], [33.3, 348.0], [33.4, 348.0], [33.5, 348.0], [33.6, 348.0], [33.7, 348.0], [33.8, 348.0], [33.9, 348.0], [34.0, 348.0], [34.1, 349.0], [34.2, 349.0], [34.3, 349.0], [34.4, 349.0], [34.5, 349.0], [34.6, 349.0], [34.7, 349.0], [34.8, 349.0], [34.9, 349.0], [35.0, 349.0], [35.1, 349.0], [35.2, 350.0], [35.3, 350.0], [35.4, 350.0], [35.5, 350.0], [35.6, 350.0], [35.7, 350.0], [35.8, 350.0], [35.9, 350.0], [36.0, 350.0], [36.1, 350.0], [36.2, 350.0], [36.3, 351.0], [36.4, 351.0], [36.5, 351.0], [36.6, 351.0], [36.7, 351.0], [36.8, 351.0], [36.9, 351.0], [37.0, 351.0], [37.1, 351.0], [37.2, 351.0], [37.3, 351.0], [37.4, 351.0], [37.5, 352.0], [37.6, 352.0], [37.7, 352.0], [37.8, 352.0], [37.9, 352.0], [38.0, 352.0], [38.1, 352.0], [38.2, 352.0], [38.3, 352.0], [38.4, 352.0], [38.5, 352.0], [38.6, 353.0], [38.7, 353.0], [38.8, 353.0], [38.9, 353.0], [39.0, 353.0], [39.1, 353.0], [39.2, 353.0], [39.3, 353.0], [39.4, 353.0], [39.5, 353.0], [39.6, 353.0], [39.7, 353.0], [39.8, 354.0], [39.9, 354.0], [40.0, 354.0], [40.1, 354.0], [40.2, 354.0], [40.3, 354.0], [40.4, 354.0], [40.5, 354.0], [40.6, 354.0], [40.7, 354.0], [40.8, 354.0], [40.9, 355.0], [41.0, 355.0], [41.1, 355.0], [41.2, 355.0], [41.3, 355.0], [41.4, 355.0], [41.5, 355.0], [41.6, 355.0], [41.7, 355.0], [41.8, 355.0], [41.9, 355.0], [42.0, 355.0], [42.1, 356.0], [42.2, 356.0], [42.3, 356.0], [42.4, 356.0], [42.5, 356.0], [42.6, 356.0], [42.7, 356.0], [42.8, 356.0], [42.9, 356.0], [43.0, 356.0], [43.1, 356.0], [43.2, 357.0], [43.3, 357.0], [43.4, 357.0], [43.5, 357.0], [43.6, 357.0], [43.7, 357.0], [43.8, 357.0], [43.9, 357.0], [44.0, 357.0], [44.1, 357.0], [44.2, 357.0], [44.3, 357.0], [44.4, 358.0], [44.5, 358.0], [44.6, 358.0], [44.7, 358.0], [44.8, 358.0], [44.9, 358.0], [45.0, 358.0], [45.1, 358.0], [45.2, 358.0], [45.3, 358.0], [45.4, 358.0], [45.5, 359.0], [45.6, 359.0], [45.7, 359.0], [45.8, 359.0], [45.9, 359.0], [46.0, 359.0], [46.1, 359.0], [46.2, 359.0], [46.3, 359.0], [46.4, 359.0], [46.5, 359.0], [46.6, 359.0], [46.7, 360.0], [46.8, 360.0], [46.9, 360.0], [47.0, 360.0], [47.1, 360.0], [47.2, 360.0], [47.3, 360.0], [47.4, 360.0], [47.5, 360.0], [47.6, 360.0], [47.7, 360.0], [47.8, 361.0], [47.9, 361.0], [48.0, 361.0], [48.1, 361.0], [48.2, 361.0], [48.3, 361.0], [48.4, 361.0], [48.5, 361.0], [48.6, 361.0], [48.7, 361.0], [48.8, 361.0], [48.9, 362.0], [49.0, 362.0], [49.1, 362.0], [49.2, 362.0], [49.3, 362.0], [49.4, 362.0], [49.5, 362.0], [49.6, 362.0], [49.7, 362.0], [49.8, 362.0], [49.9, 362.0], [50.0, 363.0], [50.1, 363.0], [50.2, 363.0], [50.3, 363.0], [50.4, 363.0], [50.5, 363.0], [50.6, 363.0], [50.7, 363.0], [50.8, 363.0], [50.9, 363.0], [51.0, 364.0], [51.1, 364.0], [51.2, 364.0], [51.3, 364.0], [51.4, 364.0], [51.5, 364.0], [51.6, 364.0], [51.7, 364.0], [51.8, 364.0], [51.9, 364.0], [52.0, 364.0], [52.1, 365.0], [52.2, 365.0], [52.3, 365.0], [52.4, 365.0], [52.5, 365.0], [52.6, 365.0], [52.7, 365.0], [52.8, 365.0], [52.9, 365.0], [53.0, 365.0], [53.1, 366.0], [53.2, 366.0], [53.3, 366.0], [53.4, 366.0], [53.5, 366.0], [53.6, 366.0], [53.7, 366.0], [53.8, 366.0], [53.9, 366.0], [54.0, 366.0], [54.1, 367.0], [54.2, 367.0], [54.3, 367.0], [54.4, 367.0], [54.5, 367.0], [54.6, 367.0], [54.7, 367.0], [54.8, 367.0], [54.9, 367.0], [55.0, 367.0], [55.1, 368.0], [55.2, 368.0], [55.3, 368.0], [55.4, 368.0], [55.5, 368.0], [55.6, 368.0], [55.7, 368.0], [55.8, 368.0], [55.9, 368.0], [56.0, 368.0], [56.1, 369.0], [56.2, 369.0], [56.3, 369.0], [56.4, 369.0], [56.5, 369.0], [56.6, 369.0], [56.7, 369.0], [56.8, 369.0], [56.9, 369.0], [57.0, 369.0], [57.1, 370.0], [57.2, 370.0], [57.3, 370.0], [57.4, 370.0], [57.5, 370.0], [57.6, 370.0], [57.7, 370.0], [57.8, 370.0], [57.9, 370.0], [58.0, 370.0], [58.1, 371.0], [58.2, 371.0], [58.3, 371.0], [58.4, 371.0], [58.5, 371.0], [58.6, 371.0], [58.7, 371.0], [58.8, 371.0], [58.9, 371.0], [59.0, 371.0], [59.1, 372.0], [59.2, 372.0], [59.3, 372.0], [59.4, 372.0], [59.5, 372.0], [59.6, 372.0], [59.7, 372.0], [59.8, 372.0], [59.9, 372.0], [60.0, 372.0], [60.1, 373.0], [60.2, 373.0], [60.3, 373.0], [60.4, 373.0], [60.5, 373.0], [60.6, 373.0], [60.7, 373.0], [60.8, 373.0], [60.9, 373.0], [61.0, 374.0], [61.1, 374.0], [61.2, 374.0], [61.3, 374.0], [61.4, 374.0], [61.5, 374.0], [61.6, 374.0], [61.7, 374.0], [61.8, 374.0], [61.9, 375.0], [62.0, 375.0], [62.1, 375.0], [62.2, 375.0], [62.3, 375.0], [62.4, 375.0], [62.5, 375.0], [62.6, 375.0], [62.7, 375.0], [62.8, 376.0], [62.9, 376.0], [63.0, 376.0], [63.1, 376.0], [63.2, 376.0], [63.3, 376.0], [63.4, 376.0], [63.5, 376.0], [63.6, 377.0], [63.7, 377.0], [63.8, 377.0], [63.9, 377.0], [64.0, 377.0], [64.1, 377.0], [64.2, 377.0], [64.3, 377.0], [64.4, 377.0], [64.5, 378.0], [64.6, 378.0], [64.7, 378.0], [64.8, 378.0], [64.9, 378.0], [65.0, 378.0], [65.1, 378.0], [65.2, 378.0], [65.3, 379.0], [65.4, 379.0], [65.5, 379.0], [65.6, 379.0], [65.7, 379.0], [65.8, 379.0], [65.9, 379.0], [66.0, 379.0], [66.1, 380.0], [66.2, 380.0], [66.3, 380.0], [66.4, 380.0], [66.5, 380.0], [66.6, 380.0], [66.7, 380.0], [66.8, 380.0], [66.9, 381.0], [67.0, 381.0], [67.1, 381.0], [67.2, 381.0], [67.3, 381.0], [67.4, 381.0], [67.5, 381.0], [67.6, 381.0], [67.7, 382.0], [67.8, 382.0], [67.9, 382.0], [68.0, 382.0], [68.1, 382.0], [68.2, 382.0], [68.3, 382.0], [68.4, 383.0], [68.5, 383.0], [68.6, 383.0], [68.7, 383.0], [68.8, 383.0], [68.9, 383.0], [69.0, 383.0], [69.1, 383.0], [69.2, 384.0], [69.3, 384.0], [69.4, 384.0], [69.5, 384.0], [69.6, 384.0], [69.7, 384.0], [69.8, 384.0], [69.9, 385.0], [70.0, 385.0], [70.1, 385.0], [70.2, 385.0], [70.3, 385.0], [70.4, 385.0], [70.5, 385.0], [70.6, 385.0], [70.7, 386.0], [70.8, 386.0], [70.9, 386.0], [71.0, 386.0], [71.1, 386.0], [71.2, 386.0], [71.3, 386.0], [71.4, 387.0], [71.5, 387.0], [71.6, 387.0], [71.7, 387.0], [71.8, 387.0], [71.9, 387.0], [72.0, 388.0], [72.1, 388.0], [72.2, 388.0], [72.3, 388.0], [72.4, 388.0], [72.5, 388.0], [72.6, 388.0], [72.7, 389.0], [72.8, 389.0], [72.9, 389.0], [73.0, 389.0], [73.1, 389.0], [73.2, 389.0], [73.3, 390.0], [73.4, 390.0], [73.5, 390.0], [73.6, 390.0], [73.7, 390.0], [73.8, 390.0], [73.9, 390.0], [74.0, 391.0], [74.1, 391.0], [74.2, 391.0], [74.3, 391.0], [74.4, 391.0], [74.5, 391.0], [74.6, 392.0], [74.7, 392.0], [74.8, 392.0], [74.9, 392.0], [75.0, 392.0], [75.1, 392.0], [75.2, 393.0], [75.3, 393.0], [75.4, 393.0], [75.5, 393.0], [75.6, 393.0], [75.7, 393.0], [75.8, 393.0], [75.9, 394.0], [76.0, 394.0], [76.1, 394.0], [76.2, 394.0], [76.3, 394.0], [76.4, 394.0], [76.5, 395.0], [76.6, 395.0], [76.7, 395.0], [76.8, 395.0], [76.9, 395.0], [77.0, 395.0], [77.1, 396.0], [77.2, 396.0], [77.3, 396.0], [77.4, 396.0], [77.5, 396.0], [77.6, 396.0], [77.7, 397.0], [77.8, 397.0], [77.9, 397.0], [78.0, 397.0], [78.1, 397.0], [78.2, 398.0], [78.3, 398.0], [78.4, 398.0], [78.5, 398.0], [78.6, 398.0], [78.7, 398.0], [78.8, 399.0], [78.9, 399.0], [79.0, 399.0], [79.1, 399.0], [79.2, 399.0], [79.3, 400.0], [79.4, 400.0], [79.5, 400.0], [79.6, 400.0], [79.7, 400.0], [79.8, 401.0], [79.9, 401.0], [80.0, 401.0], [80.1, 401.0], [80.2, 401.0], [80.3, 402.0], [80.4, 402.0], [80.5, 402.0], [80.6, 402.0], [80.7, 402.0], [80.8, 403.0], [80.9, 403.0], [81.0, 403.0], [81.1, 403.0], [81.2, 403.0], [81.3, 404.0], [81.4, 404.0], [81.5, 404.0], [81.6, 404.0], [81.7, 405.0], [81.8, 405.0], [81.9, 405.0], [82.0, 405.0], [82.1, 405.0], [82.2, 406.0], [82.3, 406.0], [82.4, 406.0], [82.5, 406.0], [82.6, 407.0], [82.7, 407.0], [82.8, 407.0], [82.9, 407.0], [83.0, 407.0], [83.1, 408.0], [83.2, 408.0], [83.3, 408.0], [83.4, 408.0], [83.5, 409.0], [83.6, 409.0], [83.7, 409.0], [83.8, 409.0], [83.9, 410.0], [84.0, 410.0], [84.1, 410.0], [84.2, 410.0], [84.3, 411.0], [84.4, 411.0], [84.5, 411.0], [84.6, 411.0], [84.7, 412.0], [84.8, 412.0], [84.9, 412.0], [85.0, 412.0], [85.1, 413.0], [85.2, 413.0], [85.3, 413.0], [85.4, 414.0], [85.5, 414.0], [85.6, 414.0], [85.7, 414.0], [85.8, 415.0], [85.9, 415.0], [86.0, 415.0], [86.1, 415.0], [86.2, 416.0], [86.3, 416.0], [86.4, 416.0], [86.5, 417.0], [86.6, 417.0], [86.7, 417.0], [86.8, 417.0], [86.9, 418.0], [87.0, 418.0], [87.1, 418.0], [87.2, 419.0], [87.3, 419.0], [87.4, 419.0], [87.5, 419.0], [87.6, 420.0], [87.7, 420.0], [87.8, 420.0], [87.9, 421.0], [88.0, 421.0], [88.1, 421.0], [88.2, 422.0], [88.3, 422.0], [88.4, 422.0], [88.5, 423.0], [88.6, 423.0], [88.7, 423.0], [88.8, 424.0], [88.9, 424.0], [89.0, 424.0], [89.1, 425.0], [89.2, 425.0], [89.3, 425.0], [89.4, 426.0], [89.5, 426.0], [89.6, 426.0], [89.7, 427.0], [89.8, 427.0], [89.9, 428.0], [90.0, 428.0], [90.1, 428.0], [90.2, 429.0], [90.3, 429.0], [90.4, 430.0], [90.5, 430.0], [90.6, 431.0], [90.7, 431.0], [90.8, 432.0], [90.9, 432.0], [91.0, 433.0], [91.1, 433.0], [91.2, 434.0], [91.3, 434.0], [91.4, 435.0], [91.5, 435.0], [91.6, 436.0], [91.7, 436.0], [91.8, 437.0], [91.9, 437.0], [92.0, 438.0], [92.1, 438.0], [92.2, 439.0], [92.3, 439.0], [92.4, 440.0], [92.5, 440.0], [92.6, 441.0], [92.7, 442.0], [92.8, 442.0], [92.9, 443.0], [93.0, 444.0], [93.1, 444.0], [93.2, 445.0], [93.3, 446.0], [93.4, 447.0], [93.5, 447.0], [93.6, 448.0], [93.7, 449.0], [93.8, 450.0], [93.9, 451.0], [94.0, 452.0], [94.1, 453.0], [94.2, 454.0], [94.3, 455.0], [94.4, 456.0], [94.5, 457.0], [94.6, 458.0], [94.7, 459.0], [94.8, 461.0], [94.9, 462.0], [95.0, 463.0], [95.1, 464.0], [95.2, 466.0], [95.3, 467.0], [95.4, 469.0], [95.5, 470.0], [95.6, 472.0], [95.7, 473.0], [95.8, 475.0], [95.9, 477.0], [96.0, 479.0], [96.1, 482.0], [96.2, 485.0], [96.3, 489.0], [96.4, 493.0], [96.5, 497.0], [96.6, 503.0], [96.7, 509.0], [96.8, 518.0], [96.9, 527.0], [97.0, 536.0], [97.1, 549.0], [97.2, 562.0], [97.3, 575.0], [97.4, 590.0], [97.5, 604.0], [97.6, 618.0], [97.7, 631.0], [97.8, 643.0], [97.9, 652.0], [98.0, 663.0], [98.1, 676.0], [98.2, 689.0], [98.3, 700.0], [98.4, 712.0], [98.5, 726.0], [98.6, 740.0], [98.7, 754.0], [98.8, 768.0], [98.9, 782.0], [99.0, 797.0], [99.1, 811.0], [99.2, 826.0], [99.3, 841.0], [99.4, 858.0], [99.5, 880.0], [99.6, 916.0], [99.7, 1006.0], [99.8, 2920.0], [99.9, 17216.0], [100.0, 18637.0]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 1693546.0, "series": [{"data": [[0.0, 17668.0], [600.0, 18580.0], [700.0, 16419.0], [800.0, 12339.0], [900.0, 3053.0], [1000.0, 786.0], [17400.0, 246.0], [17100.0, 258.0], [17200.0, 478.0], [17300.0, 353.0], [16900.0, 181.0], [17000.0, 202.0], [1100.0, 128.0], [17500.0, 245.0], [17600.0, 37.0], [18400.0, 236.0], [18100.0, 58.0], [18200.0, 230.0], [18300.0, 223.0], [1200.0, 28.0], [18500.0, 172.0], [18600.0, 81.0], [1300.0, 188.0], [1400.0, 268.0], [1500.0, 271.0], [1600.0, 235.0], [100.0, 34597.0], [1700.0, 152.0], [2700.0, 84.0], [2800.0, 185.0], [2900.0, 205.0], [3000.0, 278.0], [3100.0, 444.0], [200.0, 50608.0], [3300.0, 220.0], [3200.0, 278.0], [3400.0, 149.0], [300.0, 1693546.0], [400.0, 391566.0], [500.0, 21213.0]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5499.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2188394.0, "series": [{"data": [[0.0, 2188394.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 72595.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5499.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 868.9497510444688, "minX": 1.63391946E12, "maxY": 1000.0, "series": [{"data": [[1.63392036E12, 868.9497510444688], [1.63392006E12, 1000.0], [1.63392E12, 1000.0], [1.6339197E12, 1000.0], [1.63392012E12, 1000.0], [1.63391982E12, 1000.0], [1.63391976E12, 1000.0], [1.63391946E12, 874.3977331965659], [1.63391988E12, 1000.0], [1.63391958E12, 1000.0], [1.63391952E12, 1000.0], [1.63392018E12, 1000.0], [1.63391964E12, 1000.0], [1.6339203E12, 1000.0], [1.63392024E12, 1000.0], [1.63391994E12, 1000.0]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63392036E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.5526315789473677, "minX": 1.0, "maxY": 2793.1428571428573, "series": [{"data": [[2.0, 3.5526315789473677], [4.0, 7.666666666666667], [5.0, 11.5], [7.0, 13.0], [9.0, 13.666666666666666], [10.0, 13.0], [11.0, 13.0], [12.0, 13.0], [13.0, 14.0], [15.0, 14.0], [16.0, 13.0], [17.0, 15.333333333333334], [18.0, 15.999999999999998], [19.0, 15.5], [20.0, 15.700000000000001], [21.0, 17.1], [24.0, 11.75], [25.0, 10.0], [28.0, 14.125], [29.0, 16.11111111111111], [30.0, 18.0], [31.0, 21.66666666666667], [32.0, 24.0], [35.0, 25.0], [34.0, 24.0], [37.0, 25.5], [36.0, 26.0], [39.0, 23.5], [38.0, 25.0], [41.0, 23.89473684210526], [40.0, 23.294117647058822], [43.0, 26.166666666666664], [42.0, 25.4], [45.0, 20.0], [44.0, 23.336734693877553], [47.0, 24.0], [46.0, 21.700000000000003], [49.0, 25.947368421052627], [51.0, 26.73291925465839], [50.0, 25.8], [53.0, 25.26666666666667], [52.0, 26.608187134502938], [55.0, 34.75], [54.0, 33.33333333333333], [57.0, 33.75], [56.0, 35.666666666666664], [59.0, 37.0], [58.0, 35.0], [61.0, 35.64285714285714], [60.0, 38.5], [63.0, 32.0], [62.0, 33.75], [67.0, 21.0], [66.0, 25.0], [65.0, 27.6], [64.0, 29.666666666666668], [71.0, 30.764705882352942], [70.0, 26.815789473684212], [69.0, 27.5], [68.0, 26.25], [75.0, 26.000000000000004], [73.0, 25.142857142857142], [72.0, 26.0], [79.0, 22.333333333333332], [78.0, 21.0], [77.0, 23.666666666666668], [76.0, 26.272727272727273], [83.0, 41.0], [82.0, 37.47222222222223], [81.0, 28.090909090909093], [80.0, 24.285714285714285], [87.0, 45.0], [86.0, 44.0], [85.0, 46.0], [84.0, 42.0], [91.0, 47.454545454545446], [90.0, 45.0], [95.0, 41.72727272727273], [94.0, 41.666666666666664], [99.0, 38.4], [98.0, 40.0], [97.0, 40.0], [96.0, 41.5], [103.0, 38.0], [102.0, 38.666666666666664], [101.0, 39.0], [107.0, 39.5], [106.0, 40.14285714285714], [105.0, 39.875], [104.0, 39.25000000000001], [111.0, 36.0], [109.0, 36.8], [108.0, 38.333333333333336], [115.0, 31.999999999999996], [114.0, 33.0], [113.0, 34.0], [112.0, 35.333333333333336], [119.0, 31.5], [118.0, 31.166666666666668], [117.0, 31.0], [116.0, 31.333333333333332], [123.0, 51.27586206896552], [121.0, 39.34782608695653], [120.0, 42.0342501297353], [127.0, 51.631578947368425], [126.0, 52.85714285714286], [124.0, 53.0], [135.0, 43.18181818181819], [133.0, 44.66666666666667], [132.0, 46.0], [131.0, 47.0], [130.0, 47.5], [129.0, 49.0], [128.0, 49.8095238095238], [143.0, 56.63636363636363], [142.0, 57.916666666666664], [141.0, 59.75], [140.0, 58.99999999999998], [139.0, 53.943396226415096], [138.0, 40.65217391304347], [137.0, 35.72727272727273], [136.0, 39.875], [150.0, 45.75], [149.0, 49.303030303030305], [148.0, 54.47058823529412], [147.0, 54.8], [146.0, 56.03703703703704], [145.0, 52.38095238095237], [144.0, 54.5], [159.0, 51.5], [158.0, 45.0], [157.0, 47.0], [156.0, 47.875], [155.0, 48.5], [154.0, 49.769230769230774], [152.0, 48.57142857142857], [166.0, 1173.22077922078], [167.0, 691.0], [165.0, 61.18181818181819], [164.0, 56.55555555555556], [163.0, 55.35294117647059], [162.0, 55.0], [160.0, 54.16666666666666], [171.0, 124.82786885245909], [170.0, 41.66666666666667], [172.0, 91.84615384615385], [173.0, 72.54545454545456], [175.0, 72.33333333333333], [174.0, 59.99999999999999], [169.0, 58.5], [168.0, 59.090909090909086], [176.0, 76.94736842105262], [178.0, 67.63999999999996], [179.0, 93.08888888888887], [180.0, 101.14285714285715], [181.0, 136.53684210526313], [182.0, 97.33333333333334], [183.0, 84.28571428571429], [177.0, 57.8], [184.0, 119.64583333333331], [185.0, 133.0769230769231], [186.0, 95.31851851851847], [188.0, 126.96527777777773], [189.0, 87.42857142857143], [190.0, 128.40740740740733], [191.0, 123.38961038961044], [187.0, 85.91666666666667], [194.0, 100.77777777777777], [195.0, 100.0], [196.0, 110.57216494845355], [197.0, 124.9029850746269], [198.0, 102.71084337349399], [199.0, 104.13095238095241], [193.0, 76.0], [192.0, 80.35714285714285], [200.0, 115.98989898989898], [201.0, 97.60919540229885], [203.0, 166.04054054054052], [206.0, 44.03999999999999], [207.0, 72.60000000000002], [205.0, 82.2], [204.0, 84.875], [202.0, 84.8], [208.0, 73.70833333333333], [209.0, 86.16091954022991], [210.0, 78.58823529411765], [211.0, 120.53012048192772], [212.0, 94.66666666666667], [213.0, 105.6], [214.0, 154.2692307692308], [215.0, 68.70833333333334], [216.0, 117.40000000000002], [217.0, 118.86915887850463], [218.0, 102.05555555555556], [219.0, 109.14285714285715], [221.0, 111.05882352941177], [222.0, 171.54255319148936], [223.0, 101.22222222222223], [220.0, 111.5], [224.0, 103.0], [225.0, 107.84496124031003], [227.0, 143.56701030927837], [228.0, 117.95454545454545], [230.0, 147.78881987577648], [231.0, 133.57142857142858], [226.0, 101.0], [234.0, 150.62068965517238], [235.0, 148.72727272727275], [236.0, 129.1333333333333], [238.0, 142.66666666666669], [239.0, 116.33333333333333], [237.0, 148.0], [233.0, 137.6153846153846], [232.0, 133.54545454545453], [240.0, 138.5], [241.0, 133.25000000000003], [242.0, 128.55555555555554], [243.0, 149.0], [245.0, 154.16666666666666], [246.0, 144.54545454545453], [247.0, 140.86363636363635], [244.0, 147.2], [248.0, 164.5625], [249.0, 165.18681318681317], [250.0, 135.6590909090909], [251.0, 133.18604651162792], [253.0, 144.19047619047618], [254.0, 160.14705882352936], [255.0, 104.96874999999999], [252.0, 115.24999999999999], [268.0, 163.97872340425533], [258.0, 96.58976441917143], [259.0, 132.96969696969694], [260.0, 93.8125], [261.0, 169.27027027027032], [262.0, 161.37735849056605], [263.0, 90.05555555555556], [257.0, 104.05660377358491], [256.0, 101.80769230769232], [264.0, 170.45569620253173], [266.0, 85.60000000000001], [265.0, 78.25925925925927], [267.0, 92.44444444444444], [269.0, 171.1764705882353], [270.0, 152.52173913043475], [271.0, 101.40579710144928], [284.0, 111.0], [272.0, 156.7479674796748], [273.0, 117.41176470588235], [275.0, 124.78947368421052], [274.0, 115.07142857142857], [276.0, 237.0], [278.0, 119.11764705882354], [277.0, 125.55172413793103], [279.0, 119.16666666666666], [287.0, 112.85], [283.0, 112.83333333333333], [282.0, 117.40909090909092], [281.0, 120.82352941176471], [280.0, 119.9], [300.0, 181.6], [288.0, 209.5], [291.0, 184.0], [290.0, 111.5], [289.0, 116.0], [301.0, 322.9047619047619], [302.0, 259.3793103448276], [303.0, 354.5], [292.0, 133.8], [293.0, 113.71428571428571], [294.0, 154.4], [295.0, 172.33333333333334], [296.0, 294.4], [297.0, 283.5555555555556], [298.0, 173.09375], [299.0, 337.0], [316.0, 165.82352941176472], [304.0, 339.04545454545456], [305.0, 248.6530612244898], [307.0, 141.22222222222223], [308.0, 252.09615384615375], [309.0, 318.9272727272728], [311.0, 293.46153846153845], [310.0, 141.0], [313.0, 228.21428571428578], [314.0, 234.82051282051285], [315.0, 204.7719298245614], [319.0, 144.0], [312.0, 140.5], [317.0, 144.33333333333334], [322.0, 172.85714285714286], [320.0, 206.81666666666666], [321.0, 143.0], [323.0, 198.0178571428571], [332.0, 153.43859649122814], [333.0, 159.22857142857143], [334.0, 189.50485436893197], [335.0, 238.00000000000009], [324.0, 199.55555555555554], [325.0, 178.33333333333334], [326.0, 176.95999999999998], [327.0, 156.0], [328.0, 172.0], [329.0, 209.09090909090915], [330.0, 208.85416666666669], [331.0, 195.09999999999997], [348.0, 139.0], [338.0, 217.51724137931035], [337.0, 218.24999999999997], [343.0, 178.0], [336.0, 172.8], [339.0, 239.99999999999997], [341.0, 923.7709923664127], [340.0, 181.0], [342.0, 133.0], [351.0, 168.5], [344.0, 179.78947368421052], [346.0, 164.5], [345.0, 164.25], [350.0, 163.0], [349.0, 164.0], [364.0, 165.33333333333334], [354.0, 135.5], [352.0, 172.80597014925377], [359.0, 179.5], [355.0, 173.78846153846152], [357.0, 136.66666666666669], [358.0, 153.79999999999998], [360.0, 98.33333333333333], [361.0, 153.0], [362.0, 101.6], [363.0, 178.88888888888889], [365.0, 160.44444444444443], [367.0, 125.58333333333333], [366.0, 174.14285714285714], [369.0, 136.5], [368.0, 151.9565217391304], [370.0, 137.5], [371.0, 168.20000000000002], [380.0, 160.91666666666663], [382.0, 165.25000000000003], [381.0, 171.33333333333334], [383.0, 148.86666666666665], [372.0, 118.4], [373.0, 155.80000000000004], [374.0, 147.7222222222222], [375.0, 131.2], [376.0, 139.99999999999997], [377.0, 132.0], [378.0, 142.33333333333334], [379.0, 152.9375], [385.0, 152.0], [384.0, 166.88235294117646], [387.0, 152.0], [386.0, 168.25], [396.0, 149.74647887323943], [398.0, 151.03125], [397.0, 151.83333333333331], [399.0, 176.4203389830508], [392.0, 163.4736842105263], [388.0, 155.27272727272728], [389.0, 191.3188720173535], [390.0, 156.06666666666666], [391.0, 156.85365853658536], [393.0, 117.5], [395.0, 146.05999999999997], [394.0, 162.00000000000003], [414.0, 142.33333333333334], [415.0, 141.0], [413.0, 142.16000000000005], [403.0, 154.4455659697189], [402.0, 172.44444444444446], [401.0, 164.0615384615385], [400.0, 158.0], [411.0, 177.90909090909093], [410.0, 177.42857142857144], [409.0, 177.44444444444446], [408.0, 181.69565217391306], [407.0, 184.9298245614035], [406.0, 192.1], [405.0, 169.38372093023258], [404.0, 166.87037037037024], [419.0, 164.64705882352942], [417.0, 244.26881720430123], [425.0, 267.0], [429.0, 243.30041152263377], [423.0, 160.4074074074074], [422.0, 159.11940298507466], [421.0, 159.03636363636363], [418.0, 150.33333333333331], [416.0, 142.0], [446.0, 231.11111111111128], [438.0, 175.56000000000003], [434.0, 187.37500000000003], [435.0, 134.83333333333334], [439.0, 145.66666666666666], [433.0, 132.06521739130434], [437.0, 220.0], [436.0, 146.46153846153848], [447.0, 272.5904761904763], [441.0, 150.0], [440.0, 148.25], [445.0, 165.2857142857143], [444.0, 162.31249999999997], [443.0, 158.73684210526315], [442.0, 153.75], [449.0, 261.625], [448.0, 280.63716814159307], [450.0, 289.95238095238096], [451.0, 187.2], [460.0, 243.4305555555556], [463.0, 191.5], [462.0, 189.02325581395345], [461.0, 186.0], [453.0, 239.5], [452.0, 190.7037037037037], [454.0, 319.61718749999983], [455.0, 306.31034482758616], [456.0, 259.6642335766424], [457.0, 262.8235294117647], [458.0, 260.3691275167785], [459.0, 263.5500000000002], [476.0, 209.48148148148147], [467.0, 530.9540918163666], [466.0, 199.33333333333331], [465.0, 196.08000000000007], [464.0, 192.22222222222226], [469.0, 93.66666666666666], [468.0, 202.87500000000003], [470.0, 193.49999999999997], [472.0, 201.125], [473.0, 161.33333333333334], [474.0, 206.83870967741936], [475.0, 225.8529411764706], [477.0, 190.4], [478.0, 188.6], [479.0, 219.92], [481.0, 198.2857142857143], [483.0, 183.20000000000005], [482.0, 209.08823529411765], [492.0, 242.46601941747568], [495.0, 157.88679245283024], [494.0, 185.49082568807344], [493.0, 214.82608695652175], [484.0, 192.78378378378378], [485.0, 167.54166666666669], [486.0, 96.73451327433632], [487.0, 160.0], [480.0, 215.99999999999997], [488.0, 162.02392344497622], [490.0, 222.30769230769238], [489.0, 209.6153846153846], [491.0, 227.81666666666672], [508.0, 230.36296296296297], [504.0, 207.68085106382983], [503.0, 231.5245098039216], [497.0, 169.0], [496.0, 161.96969696969697], [499.0, 179.7241379310345], [498.0, 169.41666666666663], [505.0, 216.58823529411765], [506.0, 212.84], [507.0, 221.2287234042553], [509.0, 236.07291666666669], [511.0, 238.26666666666668], [502.0, 203.04545454545453], [501.0, 196.8], [500.0, 204.12], [516.0, 193.3939393939394], [512.0, 220.63492063492058], [513.0, 194.25], [527.0, 265.0], [526.0, 267.8], [525.0, 263.1], [524.0, 257.0], [523.0, 258.05263157894734], [522.0, 263.6904761904761], [520.0, 262.17391304347825], [514.0, 222.66666666666666], [515.0, 240.33802816901408], [518.0, 228.07936507936506], [517.0, 186.99999999999997], [519.0, 252.43103448275858], [531.0, 289.19672131147547], [530.0, 269.6923076923079], [529.0, 267.8235294117647], [528.0, 266.51612903225816], [543.0, 279.4838709677419], [542.0, 243.2234042553191], [541.0, 258.51351351351343], [540.0, 231.8680203045685], [539.0, 216.14539007092205], [538.0, 226.00000000000006], [537.0, 224.78571428571428], [536.0, 224.8831168831169], [532.0, 282.4844720496895], [533.0, 287.73684210526324], [534.0, 269.01149425287343], [535.0, 230.99029126213577], [549.0, 307.1525423728813], [557.0, 218.65384615384616], [546.0, 309.85185185185185], [547.0, 309.9574468085106], [548.0, 313.13636363636357], [560.0, 492.25], [561.0, 544.0], [574.0, 494.0], [573.0, 494.0], [572.0, 493.6666666666667], [571.0, 494.5], [570.0, 495.5454545454545], [569.0, 496.6666666666667], [568.0, 500.3055555555555], [551.0, 313.2189781021896], [550.0, 334.2920353982303], [562.0, 490.9666666666667], [563.0, 333.77551020408157], [564.0, 335.75], [566.0, 338.5], [552.0, 323.820754716981], [553.0, 260.5895953757224], [555.0, 229.125], [554.0, 213.0], [558.0, 344.0389610389609], [544.0, 285.2758620689655], [545.0, 287.33333333333337], [602.0, 657.4070796460181], [588.0, 377.77333333333337], [585.0, 340.63736263736246], [584.0, 513.2499999999999], [586.0, 454.1666666666667], [587.0, 514.3913043478259], [589.0, 444.475], [590.0, 530.8965517241378], [591.0, 332.90000000000003], [593.0, 293.9166666666667], [592.0, 532.0], [607.0, 191.42857142857142], [606.0, 211.5], [605.0, 207.92857142857147], [603.0, 167.79069767441865], [604.0, 75.74074074074075], [601.0, 421.05555555555554], [600.0, 538.4999999999999], [583.0, 511.8], [582.0, 484.42857142857144], [581.0, 468.89473684210526], [580.0, 473.0], [579.0, 473.75], [577.0, 481.8636363636363], [594.0, 290.10497237569064], [595.0, 301.0], [596.0, 300.2380952380952], [599.0, 529.7692307692306], [598.0, 529.0], [597.0, 530.0975609756099], [632.0, 189.58823529411762], [611.0, 90.0], [609.0, 198.0], [610.0, 236.66255144032914], [623.0, 241.33333333333331], [608.0, 210.2], [612.0, 92.73333333333333], [613.0, 190.0], [614.0, 208.6], [615.0, 237.0], [633.0, 193.53125000000006], [635.0, 257.0], [634.0, 257.2307692307693], [636.0, 231.0], [638.0, 184.25], [637.0, 253.6176470588235], [639.0, 259.4310344827586], [625.0, 248.16666666666666], [624.0, 245.3589743589743], [627.0, 252.54166666666669], [626.0, 248.25], [629.0, 264.6666666666667], [628.0, 264.3214285714286], [631.0, 258.94117647058823], [630.0, 262.64000000000004], [618.0, 228.48000000000002], [617.0, 234.25], [616.0, 234.0], [619.0, 239.5], [620.0, 101.42857142857142], [621.0, 201.85714285714286], [622.0, 111.8], [644.0, 268.7936507936509], [643.0, 208.4], [655.0, 264.57692307692315], [654.0, 265.3333333333333], [645.0, 185.14285714285714], [646.0, 266.4375], [647.0, 206.66666666666666], [648.0, 268.95652173913044], [649.0, 172.5], [650.0, 195.552], [651.0, 261.0], [652.0, 263.25], [656.0, 263.4444444444445], [657.0, 262.90614886731396], [671.0, 287.3513513513514], [669.0, 273.2222222222222], [668.0, 235.15294117647056], [670.0, 307.38961038961025], [666.0, 251.04687500000026], [665.0, 234.45000000000005], [664.0, 232.53846153846155], [667.0, 303.6810344827586], [658.0, 225.4787560227775], [663.0, 243.2702702702703], [662.0, 227.82000000000002], [661.0, 228.4090909090909], [660.0, 234.8181818181818], [659.0, 234.9849624060151], [677.0, 318.12], [675.0, 312.875], [674.0, 305.357142857143], [673.0, 296.0], [672.0, 290.5], [676.0, 314.2916666666667], [679.0, 319.47058823529414], [697.0, 351.0], [696.0, 350.56249999999994], [699.0, 326.83333333333326], [698.0, 348.37142857142845], [700.0, 292.72727272727275], [701.0, 290.1428571428571], [702.0, 280.59259259259255], [703.0, 264.33333333333326], [680.0, 321.6], [681.0, 322.11428571428564], [682.0, 331.3061224489796], [685.0, 346.0434782608695], [684.0, 349.1538461538462], [683.0, 347.4714285714284], [686.0, 349.00000000000006], [687.0, 345.3589743589744], [688.0, 343.125], [691.0, 339.94736842105254], [690.0, 343.71874999999994], [689.0, 344.5833333333333], [692.0, 322.45454545454544], [693.0, 296.3333333333333], [694.0, 322.5], [695.0, 350.66], [728.0, 309.14529914529913], [716.0, 263.3333333333333], [704.0, 298.5581395348837], [710.0, 269.7608695652174], [709.0, 260.76000000000005], [708.0, 247.2], [706.0, 248.14285714285714], [705.0, 253.8367346938775], [729.0, 323.9142857142857], [730.0, 336.38888888888886], [734.0, 311.0], [733.0, 355.5846153846155], [732.0, 349.6666666666667], [731.0, 346.5], [735.0, 344.813953488372], [720.0, 242.578947368421], [722.0, 254.79545454545456], [721.0, 241.12499999999997], [725.0, 273.3779527559055], [724.0, 268.60000000000014], [712.0, 269.04166666666674], [713.0, 261.0999999999999], [714.0, 258.4], [715.0, 248.5454545454545], [717.0, 264.1944444444444], [718.0, 288.01754385964915], [726.0, 300.6041666666664], [727.0, 302.32692307692304], [743.0, 157.68000000000004], [738.0, 350.7352941176471], [736.0, 348.04999999999995], [737.0, 351.5], [751.0, 111.46153846153845], [739.0, 316.24999999999994], [740.0, 353.96491228070164], [741.0, 614.7541436464095], [742.0, 13.25], [754.0, 209.5609756097561], [753.0, 340.12698412698404], [752.0, 336.5], [764.0, 244.3], [765.0, 276.49999999999994], [767.0, 187.5], [762.0, 261.7619047619048], [763.0, 279.2790697674419], [760.0, 268.55172413793093], [761.0, 290.61428571428564], [755.0, 121.5], [756.0, 175.60000000000002], [757.0, 342.6491228070177], [759.0, 313.22727272727275], [758.0, 336.20689655172424], [746.0, 323.8947368421053], [745.0, 350.8888888888889], [744.0, 346.3333333333333], [747.0, 338.19047619047615], [748.0, 78.96202531645571], [749.0, 156.02941176470586], [750.0, 323.6470588235294], [794.0, 251.22302158273368], [771.0, 266.24], [775.0, 248.7741935483871], [774.0, 260.0], [772.0, 268.42441860465124], [792.0, 236.5], [793.0, 243.66666666666666], [795.0, 240.68354430379748], [796.0, 236.8888888888889], [797.0, 228.14285714285717], [799.0, 209.2], [784.0, 272.8709677419355], [798.0, 218.3], [776.0, 232.8161764705883], [778.0, 262.0], [777.0, 261.2162162162161], [780.0, 265.87820512820514], [779.0, 263.8], [781.0, 192.7575757575758], [782.0, 233.94117647058823], [783.0, 252.75], [769.0, 270.1690140845072], [785.0, 202.0], [786.0, 215.0], [788.0, 242.51612903225808], [789.0, 238.005347593583], [790.0, 239.00000000000003], [791.0, 253.42105263157893], [828.0, 1920.2187499999998], [820.0, 589.2045454545456], [802.0, 160.69811320754715], [801.0, 176.19587628865972], [800.0, 200.10869565217388], [805.0, 138.46153846153842], [804.0, 142.23076923076923], [807.0, 144.0], [806.0, 135.25], [815.0, 2290.7599999999998], [814.0, 2636.875000000001], [813.0, 485.8367346938777], [811.0, 115.18181818181819], [810.0, 118.5], [809.0, 126.13888888888891], [808.0, 134.34375], [821.0, 825.5229885057472], [822.0, 2420.7037037037035], [823.0, 2205.6071428571427], [824.0, 800.2063492063494], [826.0, 961.0], [825.0, 2585.3170731707314], [827.0, 2097.055555555555], [829.0, 1949.2037037037037], [830.0, 1731.2999999999997], [831.0, 1828.911764705883], [817.0, 2793.1428571428573], [816.0, 2188.8275862068967], [819.0, 2535.4074074074065], [818.0, 2531.8648648648655], [839.0, 2089.5793650793644], [843.0, 357.010540184454], [832.0, 1823.409090909091], [833.0, 2071.259259259259], [834.0, 1999.5813953488373], [836.0, 2401.1212121212116], [835.0, 1470.0], [838.0, 1692.75], [837.0, 2544.3636363636365], [848.0, 278.75], [849.0, 259.0], [860.0, 282.17964071856295], [861.0, 256.1081081081081], [856.0, 326.20134228187914], [858.0, 362.84937238493717], [857.0, 338.7142857142857], [859.0, 291.3333333333333], [850.0, 265.8871794871796], [851.0, 330.95073891625583], [852.0, 317.64516129032233], [853.0, 288.0], [855.0, 308.14285714285717], [854.0, 312.5483870967742], [840.0, 2319.7391304347816], [841.0, 2290.7037037037044], [842.0, 2552.24], [846.0, 303.08620689655174], [845.0, 282.8382899628252], [844.0, 271.7343485617596], [847.0, 287.581395348837], [867.0, 373.8870056497174], [866.0, 343.5603448275864], [865.0, 363.0], [864.0, 361.89024390243895], [870.0, 350.65891472868225], [869.0, 356.0], [868.0, 360.8275862068964], [888.0, 278.125], [891.0, 319.5182186234819], [890.0, 285.6666666666667], [893.0, 335.0], [892.0, 336.31746031746036], [895.0, 219.0], [894.0, 350.5909090909092], [876.0, 285.4545454545455], [875.0, 291.0], [874.0, 313.6105263157894], [872.0, 341.0454545454548], [877.0, 288.13207547169816], [878.0, 363.32575757575717], [879.0, 677.8509719222453], [880.0, 153.05882352941177], [882.0, 79.0], [885.0, 280.56862745098044], [887.0, 276.66666666666663], [886.0, 278.52941176470586], [900.0, 81.0], [899.0, 350.5454545454545], [901.0, 175.33333333333331], [902.0, 82.0], [909.0, 172.92307692307693], [908.0, 373.6], [906.0, 374.13636363636357], [905.0, 377.3333333333333], [904.0, 380.8461538461538], [910.0, 350.30769230769226], [911.0, 335.28125], [897.0, 361.58823529411774], [898.0, 362.83333333333337], [912.0, 351.6086956521739], [914.0, 377.0], [913.0, 373.85294117647084], [916.0, 368.7678571428571], [915.0, 374.0], [924.0, 150.0], [923.0, 363.0], [926.0, 352.4512195121951], [921.0, 150.0], [920.0, 373.27272727272714], [903.0, 378.68421052631584], [922.0, 363.32432432432427], [917.0, 284.7619047619049], [918.0, 136.0], [919.0, 261.12195121951214], [953.0, 330.5833333333333], [941.0, 335.6666666666667], [929.0, 187.86238532110093], [928.0, 354.4], [930.0, 343.1428571428572], [932.0, 318.2], [931.0, 352.5], [934.0, 352.3333333333333], [933.0, 352.0833333333333], [952.0, 333.0], [935.0, 354.5], [954.0, 309.0], [955.0, 308.2347826086959], [956.0, 309.4712643678161], [957.0, 331.61904761904765], [958.0, 302.4310344827585], [959.0, 336.0], [944.0, 335.1428571428571], [945.0, 293.0], [946.0, 265.28767123287673], [947.0, 248.18348623853217], [948.0, 321.5353982300884], [949.0, 365.04430379746833], [950.0, 314.625], [951.0, 329.2], [936.0, 311.75], [937.0, 320.4], [940.0, 338.40000000000003], [939.0, 350.83333333333337], [938.0, 353.42857142857156], [942.0, 194.66666666666666], [943.0, 193.0], [984.0, 381.56896551724134], [973.0, 359.61999999999995], [960.0, 315.1176470588235], [962.0, 336.0], [961.0, 334.75], [964.0, 337.67647058823536], [963.0, 336.0], [965.0, 337.9354838709677], [967.0, 314.26315789473676], [985.0, 374.27083333333337], [986.0, 374.06249999999994], [987.0, 356.0], [991.0, 356.75], [990.0, 373.31249999999994], [989.0, 372.8333333333333], [988.0, 373.5], [976.0, 371.08695652173907], [977.0, 363.84], [978.0, 357.07228915662654], [979.0, 370.85294117647055], [980.0, 361.1176470588235], [981.0, 315.6271186440677], [982.0, 306.5], [983.0, 384.0], [968.0, 315.8888888888889], [969.0, 307.8214285714286], [970.0, 329.81914893617034], [972.0, 354.3333333333333], [971.0, 360.4], [974.0, 362.875], [975.0, 367.55999999999995], [993.0, 334.0], [994.0, 366.7], [995.0, 346.2], [996.0, 312.06666666666666], [997.0, 332.7126099706744], [998.0, 315.0], [999.0, 337.8888888888889], [1000.0, 398.7501198921523], [1.0, 4.0]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}, {"data": [[990.6426872764839, 396.66944717995847]], "isOverall": false, "label": "AuthzUser-http2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.63391946E12, "maxY": 2.14843527E7, "series": [{"data": [[1.63392036E12, 1.38071646E7], [1.63392006E12, 2.11856571E7], [1.63392E12, 1.63609593E7], [1.6339197E12, 1.52170131E7], [1.63392012E12, 2.13023433E7], [1.63391982E12, 2.09142234E7], [1.63391976E12, 2.14843527E7], [1.63391946E12, 7831803.9], [1.63391988E12, 2.09347686E7], [1.63391958E12, 2.09755956E7], [1.63391952E12, 2.05467804E7], [1.63392018E12, 2.12154213E7], [1.63391964E12, 2.10356508E7], [1.6339203E12, 2.09563674E7], [1.63392024E12, 1.5179742E7], [1.63391994E12, 1.95486261E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63392036E12, 0.0], [1.63392006E12, 0.0], [1.63392E12, 0.0], [1.6339197E12, 0.0], [1.63392012E12, 0.0], [1.63391982E12, 0.0], [1.63391976E12, 0.0], [1.63391946E12, 0.0], [1.63391988E12, 0.0], [1.63391958E12, 0.0], [1.63391952E12, 0.0], [1.63392018E12, 0.0], [1.63391964E12, 0.0], [1.6339203E12, 0.0], [1.63392024E12, 0.0], [1.63391994E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63392036E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 340.8516854575694, "minX": 1.63391946E12, "maxY": 520.8338625715722, "series": [{"data": [[1.63392036E12, 340.8516854575694], [1.63392006E12, 372.82600722352913], [1.63392E12, 519.019222564787], [1.6339197E12, 375.1458850817397], [1.63392012E12, 371.0670668752232], [1.63391982E12, 377.70003526403735], [1.63391976E12, 469.7040721873849], [1.63391946E12, 396.34659559083093], [1.63391988E12, 377.5068760301407], [1.63391958E12, 376.8120338046563], [1.63391952E12, 384.4292041637851], [1.63392018E12, 372.37712692983223], [1.63391964E12, 375.4225163406945], [1.6339203E12, 376.4650959641023], [1.63392024E12, 520.8338625715722], [1.63391994E12, 373.5097720857173]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63392036E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 340.7364600621956, "minX": 1.63391946E12, "maxY": 520.581901787268, "series": [{"data": [[1.63392036E12, 340.7364600621956], [1.63392006E12, 372.71813903756697], [1.63392E12, 518.7637830136302], [1.6339197E12, 375.0444942575493], [1.63392012E12, 370.9653104501411], [1.63391982E12, 377.6035125502158], [1.63391976E12, 469.5951045478783], [1.63391946E12, 395.9707232582803], [1.63391988E12, 377.39849519999376], [1.63391958E12, 376.7170304141469], [1.63391952E12, 384.31814860394496], [1.63392018E12, 372.26238290634336], [1.63391964E12, 375.3276652225115], [1.6339203E12, 376.36570053167327], [1.63392024E12, 520.581901787268], [1.63391994E12, 373.40754414449833]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63392036E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.476339166547731E-4, "minX": 1.63391946E12, "maxY": 11.627944910622713, "series": [{"data": [[1.63392036E12, 3.529254659570016E-4], [1.63392006E12, 4.4136936399296467E-4], [1.63392E12, 3.78333561406757E-4], [1.6339197E12, 5.625611244298619E-4], [1.63392012E12, 5.131407303909124E-4], [1.63391982E12, 4.282061938766423E-4], [1.63391976E12, 4.658832472062361E-4], [1.63391946E12, 11.627944910622713], [1.63391988E12, 4.3407692598045424E-4], [1.63391958E12, 4.081171358967309E-4], [1.63391952E12, 5.384201215291204E-4], [1.63392018E12, 3.476339166547731E-4], [1.63391964E12, 4.8208159074403657E-4], [1.6339203E12, 5.027588894056057E-4], [1.63392024E12, 5.118861703973571E-4], [1.63391994E12, 4.3117096602507247E-4]], "isOverall": false, "label": "AuthzUser-http2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63392036E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.63391946E12, "maxY": 18637.0, "series": [{"data": [[1.63392036E12, 3181.0], [1.63392006E12, 897.0], [1.63392E12, 18637.0], [1.6339197E12, 905.0], [1.63392012E12, 933.0], [1.63391982E12, 1047.0], [1.63391976E12, 17614.0], [1.63391946E12, 3454.0], [1.63391988E12, 894.0], [1.63391958E12, 984.0], [1.63391952E12, 1763.0], [1.63392018E12, 1087.0], [1.63391964E12, 1086.0], [1.6339203E12, 1056.0], [1.63392024E12, 17427.0], [1.63391994E12, 915.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63392036E12, 530.0], [1.63392006E12, 764.0], [1.63392E12, 787.0], [1.6339197E12, 459.0], [1.63392012E12, 426.0], [1.63391982E12, 427.0], [1.63391976E12, 750.0], [1.63391946E12, 3382.0], [1.63391988E12, 784.0], [1.63391958E12, 765.9900000000016], [1.63391952E12, 777.0], [1.63392018E12, 812.0], [1.63391964E12, 923.0], [1.6339203E12, 752.9900000000016], [1.63392024E12, 758.0], [1.63391994E12, 439.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63392036E12, 559.9989454650859], [1.63392006E12, 876.0], [1.63392E12, 896.9994727325429], [1.6339197E12, 467.9994727325429], [1.63392012E12, 455.0], [1.63391982E12, 453.99894546508585], [1.63391976E12, 840.0], [1.63391946E12, 3446.0], [1.63391988E12, 867.9994727325429], [1.63391958E12, 881.9994727325429], [1.63391952E12, 879.9994727325429], [1.63392018E12, 937.0], [1.63391964E12, 999.0], [1.6339203E12, 859.0], [1.63392024E12, 863.9994727325429], [1.63391994E12, 448.9994727325429]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.63392036E12, 548.9993051910387], [1.63392006E12, 866.9993051910387], [1.63392E12, 885.0], [1.6339197E12, 464.0], [1.63392012E12, 453.0], [1.63391982E12, 449.0], [1.63391976E12, 832.9993051910387], [1.63391946E12, 3444.0], [1.63391988E12, 858.0], [1.63391958E12, 869.9993051910387], [1.63391952E12, 865.0], [1.63392018E12, 930.9986103820775], [1.63391964E12, 990.9993051910387], [1.6339203E12, 853.0], [1.63392024E12, 856.0], [1.63391994E12, 445.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.63392036E12, 3.0], [1.63392006E12, 5.0], [1.63392E12, 3.0], [1.6339197E12, 8.0], [1.63392012E12, 8.0], [1.63391982E12, 6.0], [1.63391976E12, 5.0], [1.63391946E12, 3.0], [1.63391988E12, 6.0], [1.63391958E12, 4.0], [1.63391952E12, 8.0], [1.63392018E12, 7.0], [1.63391964E12, 7.0], [1.6339203E12, 7.0], [1.63392024E12, 3.0], [1.63391994E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63392036E12, 172.0], [1.63392006E12, 367.0], [1.63392E12, 371.0], [1.6339197E12, 381.0], [1.63392012E12, 355.0], [1.63391982E12, 357.0], [1.63391976E12, 367.0], [1.63391946E12, 367.0], [1.63391988E12, 371.0], [1.63391958E12, 365.0], [1.63391952E12, 378.0], [1.63392018E12, 363.0], [1.63391964E12, 368.0], [1.6339203E12, 353.0], [1.63392024E12, 362.0], [1.63391994E12, 364.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63392036E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 200.0, "maxY": 18239.0, "series": [{"data": [[200.0, 1394.0], [292.0, 263.0], [760.0, 243.0], [770.0, 350.0], [1010.0, 188.5], [1059.0, 383.0], [1057.0, 403.0], [1043.0, 2923.0], [1067.0, 25.0], [1174.0, 114.0], [1194.0, 165.0], [1214.0, 291.0], [1207.0, 3215.0], [1216.0, 108.0], [1278.0, 255.0], [1360.0, 266.0], [1376.0, 433.0], [1356.0, 337.0], [1456.0, 392.0], [1521.0, 378.0], [1487.0, 336.0], [1625.0, 441.0], [1651.0, 18239.0], [1701.0, 291.0], [1686.0, 306.0], [1716.0, 403.0], [1736.0, 350.0], [1742.0, 430.0], [1844.0, 311.5], [1797.0, 312.0], [1822.0, 336.0], [1805.0, 358.0], [1828.0, 659.0], [1823.0, 359.0], [1801.0, 16953.0], [1870.0, 360.0], [1886.0, 319.0], [1936.0, 1344.5], [1960.0, 369.0], [1931.0, 479.0], [1971.0, 379.0], [2037.0, 437.0], [2032.0, 335.0], [2017.0, 378.0], [1988.0, 331.0], [2148.0, 338.0], [2048.0, 400.0], [2066.0, 363.0], [2068.0, 493.0], [2074.0, 390.0], [2142.0, 454.0], [2090.0, 415.0], [2152.0, 429.0], [2274.0, 437.0], [2298.0, 419.0], [2262.0, 430.0], [2258.0, 344.0], [2254.0, 449.0], [2228.0, 432.0], [2210.0, 430.0], [2214.0, 448.0], [2276.0, 436.0], [2286.0, 394.0], [2188.0, 444.0], [2272.0, 457.0], [2408.0, 410.0], [2340.0, 425.0], [2338.0, 372.0], [2346.0, 360.0], [2360.0, 425.0], [2370.0, 403.0], [2372.0, 406.0], [2430.0, 426.0], [2426.0, 417.0], [2422.0, 399.0], [2416.0, 392.0], [2420.0, 404.0], [2314.0, 404.0], [2404.0, 411.0], [2364.0, 308.0], [2310.0, 436.0], [2312.0, 430.0], [2392.0, 404.5], [2386.0, 422.0], [2442.0, 393.0], [2474.0, 373.0], [2468.0, 404.0], [2466.0, 411.0], [2534.0, 394.0], [2450.0, 390.0], [2444.0, 363.0], [2454.0, 422.0], [2438.0, 395.0], [2432.0, 402.0], [2480.0, 396.0], [2476.0, 403.0], [2478.0, 417.0], [2492.0, 395.0], [2482.0, 381.0], [2488.0, 407.0], [2506.0, 372.0], [2508.0, 405.0], [2512.0, 363.0], [2502.0, 400.0], [2516.0, 392.0], [2522.0, 398.0], [2542.0, 467.0], [2540.0, 352.0], [2548.0, 390.0], [2554.0, 402.0], [2496.0, 401.0], [2558.0, 391.0], [2550.0, 394.0], [2576.0, 377.0], [2628.0, 373.0], [2630.0, 353.0], [2562.0, 404.0], [2566.0, 373.0], [2622.0, 379.0], [2620.0, 368.0], [2608.0, 389.0], [2610.0, 389.0], [2614.0, 364.0], [2618.0, 394.0], [2598.0, 367.0], [2594.0, 357.0], [2592.0, 381.0], [2600.0, 387.0], [2606.0, 381.0], [2568.0, 392.0], [2570.0, 401.0], [2578.0, 381.0], [2582.0, 384.0], [2652.0, 383.0], [2654.0, 406.0], [2650.0, 373.0], [2648.0, 376.0], [2638.0, 377.0], [2644.0, 375.0], [2642.0, 372.0], [2640.0, 372.0], [2656.0, 368.0], [2658.0, 170.0], [2590.0, 369.0], [2586.0, 372.0], [2588.0, 393.0], [2584.0, 371.0], [2662.0, 340.0], [2670.0, 357.0], [2674.0, 371.0], [2676.0, 374.0], [2678.0, 384.0], [2668.0, 380.0], [2664.0, 377.0], [2634.0, 371.0], [2632.0, 377.0], [2684.0, 373.0], [2624.0, 369.0], [2794.0, 356.0], [2712.0, 361.0], [2734.0, 364.0], [2730.0, 345.0], [2736.0, 360.0], [2726.0, 365.0], [2728.0, 358.0], [2720.0, 370.0], [2724.0, 361.0], [2722.0, 351.0], [2762.0, 360.0], [2760.0, 361.0], [2758.0, 366.0], [2752.0, 364.0], [2756.0, 370.0], [2804.0, 357.0], [2798.0, 355.0], [2800.0, 354.0], [2802.0, 356.0], [2796.0, 354.0], [2810.0, 350.0], [2812.0, 366.0], [2814.0, 356.0], [2808.0, 348.0], [2806.0, 347.0], [2784.0, 359.0], [2788.0, 353.0], [2786.0, 361.0], [2718.0, 360.0], [2694.0, 370.0], [2700.0, 354.0], [2698.0, 385.0], [2692.0, 370.0], [2690.0, 374.0], [2688.0, 380.0], [2740.0, 362.0], [2738.0, 366.0], [2742.0, 366.0], [2746.0, 356.0], [2702.0, 364.0], [2710.0, 373.0], [2708.0, 373.0], [2704.0, 366.0], [2706.0, 235.0], [2790.0, 359.0], [2714.0, 363.0], [2716.0, 352.0], [2782.0, 354.0], [2780.0, 357.0], [2776.0, 351.0], [2774.0, 349.0], [2772.0, 359.0], [2768.0, 378.0], [2766.0, 371.0], [2770.0, 360.0], [2764.0, 359.0], [2844.0, 355.0], [2916.0, 346.0], [2914.0, 344.0], [2912.0, 341.0], [2918.0, 347.0], [2922.0, 341.0], [2842.0, 363.0], [2846.0, 344.0], [2840.0, 354.0], [2838.0, 355.0], [2836.0, 360.0], [2878.0, 349.0], [2874.0, 339.0], [2816.0, 350.0], [2818.0, 358.0], [2820.0, 367.0], [2824.0, 354.0], [2830.0, 353.0], [2826.0, 352.0], [2872.0, 349.0], [2870.0, 357.0], [2940.0, 354.0], [2938.0, 342.0], [2942.0, 346.0], [2882.0, 346.0], [2934.0, 345.0], [2926.0, 349.0], [2930.0, 382.0], [2932.0, 338.0], [2910.0, 336.0], [2904.0, 358.0], [2908.0, 346.0], [2902.0, 342.0], [2900.0, 352.0], [2898.0, 342.0], [2894.0, 343.0], [2890.0, 361.0], [2888.0, 353.0], [2886.0, 359.0], [2884.0, 335.0], [2924.0, 354.0], [2834.0, 337.0], [2848.0, 355.0], [2866.0, 353.0], [2862.0, 348.0], [2864.0, 350.0], [2860.0, 351.0], [2858.0, 345.0], [2856.0, 355.0], [2868.0, 348.0], [3002.0, 345.0], [2992.0, 366.0], [3062.0, 328.0], [2976.0, 334.0], [2978.0, 331.0], [2988.0, 339.0], [3012.0, 340.0], [3018.0, 333.0], [3008.0, 333.0], [3022.0, 331.0], [3034.0, 332.0], [2994.0, 343.0], [2996.0, 341.0], [3060.0, 339.0], [2952.0, 346.0], [2950.0, 341.0], [2956.0, 339.0], [2970.0, 341.0], [2972.0, 335.0], [3164.0, 344.0], [3168.0, 378.0], [3082.0, 330.0], [3088.0, 328.0], [3072.0, 321.0], [3428.0, 352.0], [3330.0, 361.0], [3548.0, 331.0], [3530.0, 355.0], [3528.0, 352.0], [3612.0, 327.0], [2071.0, 475.0], [2101.0, 361.0], [2097.0, 478.0], [2093.0, 366.0], [2173.0, 360.0], [2141.0, 366.0], [2107.0, 372.0], [2109.0, 400.0], [2295.0, 391.0], [2283.0, 418.0], [2297.0, 393.0], [2265.0, 433.0], [2301.0, 429.0], [2273.0, 399.0], [2285.0, 435.0], [2235.0, 320.0], [2209.0, 459.0], [2289.0, 429.0], [2419.0, 355.0], [2415.0, 397.0], [2407.0, 385.0], [2405.0, 411.0], [2359.0, 404.0], [2339.0, 340.0], [2369.0, 434.0], [2377.0, 404.0], [2427.0, 365.0], [2429.0, 392.0], [2431.0, 403.0], [2423.0, 393.0], [2425.0, 382.0], [2335.0, 420.0], [2319.0, 424.0], [2367.0, 394.0], [2307.0, 424.0], [2315.0, 413.0], [2341.0, 405.0], [2349.0, 426.0], [2347.0, 330.0], [2393.0, 419.0], [2399.0, 390.0], [2397.0, 426.0], [2389.0, 402.0], [2383.0, 424.0], [2541.0, 399.0], [2443.0, 396.0], [2535.0, 395.0], [2439.0, 323.0], [2441.0, 407.0], [2497.0, 394.0], [2465.0, 403.0], [2467.0, 394.0], [2469.0, 409.0], [2529.0, 381.0], [2533.0, 399.0], [2531.0, 389.0], [2449.0, 371.0], [2457.0, 160.0], [2475.0, 392.0], [2437.0, 397.0], [2493.0, 405.0], [2495.0, 406.0], [2435.0, 400.0], [2491.0, 399.0], [2483.0, 397.0], [2509.0, 346.0], [2501.0, 400.0], [2499.0, 404.0], [2503.0, 396.0], [2507.0, 419.0], [2505.0, 338.0], [2513.0, 416.0], [2515.0, 399.0], [2527.0, 421.0], [2521.0, 400.0], [2517.0, 397.0], [2539.0, 421.0], [2537.0, 398.0], [2551.0, 375.0], [2553.0, 391.0], [2557.0, 386.0], [2549.0, 371.0], [2545.0, 380.0], [2581.0, 379.0], [2631.0, 378.0], [2565.0, 393.0], [2561.0, 370.0], [2601.0, 390.0], [2597.0, 378.0], [2595.0, 377.0], [2603.0, 384.0], [2609.0, 378.0], [2569.0, 388.0], [2567.0, 371.0], [2571.0, 371.0], [2575.0, 372.0], [2573.0, 403.0], [2579.0, 369.0], [2655.0, 375.0], [2651.0, 364.0], [2649.0, 372.0], [2647.0, 301.0], [2639.0, 394.0], [2637.0, 373.0], [2641.0, 355.0], [2645.0, 393.0], [2657.0, 359.0], [2589.0, 216.0], [2587.0, 357.0], [2659.0, 386.0], [2663.0, 372.0], [2583.0, 365.0], [2585.0, 373.0], [2671.0, 373.0], [2669.0, 362.0], [2667.0, 370.0], [2679.0, 370.0], [2677.0, 381.0], [2681.0, 367.0], [2625.0, 383.0], [2627.0, 377.0], [2807.0, 356.0], [2731.0, 362.0], [2729.0, 356.0], [2733.0, 351.0], [2721.0, 360.0], [2723.0, 362.0], [2725.0, 368.0], [2759.0, 369.0], [2763.0, 363.0], [2761.0, 350.0], [2757.0, 371.0], [2755.0, 358.0], [2805.0, 360.0], [2803.0, 366.0], [2799.0, 351.0], [2797.0, 361.0], [2795.0, 365.0], [2813.0, 357.0], [2809.0, 356.0], [2811.0, 357.0], [2815.0, 341.0], [2789.0, 356.0], [2793.0, 341.0], [2787.0, 351.0], [2719.0, 364.0], [2715.0, 363.0], [2717.0, 354.0], [2737.0, 369.0], [2689.0, 363.0], [2693.0, 374.0], [2747.0, 371.0], [2745.0, 349.0], [2743.0, 370.0], [2749.0, 369.0], [2751.0, 365.0], [2741.0, 354.0], [2739.0, 359.0], [2695.0, 382.0], [2701.0, 371.0], [2699.0, 366.0], [2697.0, 377.0], [2703.0, 360.0], [2711.0, 364.0], [2709.0, 366.0], [2707.0, 367.0], [2705.0, 321.0], [2713.0, 359.0], [2765.0, 361.0], [2783.0, 355.0], [2781.0, 349.0], [2779.0, 357.0], [2777.0, 363.0], [2775.0, 362.0], [2767.0, 361.0], [2773.0, 362.0], [2771.0, 360.0], [2839.0, 341.0], [2837.0, 353.0], [2835.0, 353.0], [2847.0, 357.0], [2917.0, 348.0], [2923.0, 347.0], [2921.0, 367.0], [2845.0, 353.0], [2843.0, 345.0], [2841.0, 348.0], [2879.0, 347.0], [2817.0, 347.0], [2819.0, 355.0], [2825.0, 348.0], [2823.0, 337.0], [2875.0, 354.0], [2831.0, 347.0], [2827.0, 353.0], [2939.0, 345.0], [2943.0, 347.0], [2935.0, 337.0], [2925.0, 327.0], [2927.0, 343.0], [2933.0, 346.0], [2903.0, 346.0], [2899.0, 339.0], [2905.0, 350.0], [2909.0, 345.0], [2881.0, 348.0], [2887.0, 409.0], [2883.0, 343.0], [2885.0, 351.0], [2889.0, 341.0], [2895.0, 344.0], [2897.0, 44.0], [2891.0, 352.0], [2833.0, 348.0], [2853.0, 353.0], [2851.0, 349.0], [2849.0, 350.0], [2855.0, 351.0], [2863.0, 352.0], [2865.0, 354.0], [2857.0, 347.0], [2867.0, 345.0], [2869.0, 348.0], [2873.0, 345.0], [2871.0, 347.0], [2975.0, 342.0], [2945.0, 342.0], [2985.0, 338.0], [2983.0, 338.0], [3027.0, 330.0], [3025.0, 329.0], [3019.0, 336.0], [3065.0, 325.0], [3053.0, 282.0], [3033.0, 333.0], [2999.0, 348.0], [3005.0, 331.0], [2971.0, 336.0], [2963.0, 331.0], [2965.0, 340.0], [2949.0, 356.0], [2947.0, 347.0], [2953.0, 347.0], [2961.0, 343.0], [2967.0, 344.0], [3169.0, 401.0], [3083.0, 321.0], [3129.0, 335.0], [3293.0, 366.0], [3399.0, 351.0], [3485.0, 361.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3612.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 200.0, "maxY": 18239.0, "series": [{"data": [[200.0, 1390.5], [292.0, 263.0], [760.0, 243.0], [770.0, 350.0], [1010.0, 186.5], [1059.0, 382.0], [1057.0, 403.0], [1043.0, 2923.0], [1067.0, 25.0], [1174.0, 113.0], [1194.0, 164.0], [1214.0, 291.0], [1207.0, 3214.0], [1216.0, 108.0], [1278.0, 254.0], [1360.0, 266.0], [1376.0, 433.0], [1356.0, 337.0], [1456.0, 392.0], [1521.0, 378.0], [1487.0, 336.0], [1625.0, 441.0], [1651.0, 18239.0], [1701.0, 290.0], [1686.0, 306.0], [1716.0, 402.5], [1736.0, 350.0], [1742.0, 430.0], [1844.0, 311.0], [1797.0, 312.0], [1822.0, 336.0], [1805.0, 358.0], [1828.0, 658.5], [1823.0, 359.0], [1801.0, 16953.0], [1870.0, 359.5], [1886.0, 319.0], [1936.0, 1344.0], [1960.0, 369.0], [1931.0, 479.0], [1971.0, 379.0], [2037.0, 437.0], [2032.0, 335.0], [2017.0, 377.0], [1988.0, 331.0], [2148.0, 338.0], [2048.0, 400.0], [2066.0, 363.0], [2068.0, 493.0], [2074.0, 390.0], [2142.0, 454.0], [2090.0, 415.0], [2152.0, 429.0], [2274.0, 437.0], [2298.0, 419.0], [2262.0, 430.0], [2258.0, 344.0], [2254.0, 449.0], [2228.0, 432.0], [2210.0, 429.5], [2214.0, 447.5], [2276.0, 436.0], [2286.0, 394.0], [2188.0, 444.0], [2272.0, 455.5], [2408.0, 410.0], [2340.0, 424.0], [2338.0, 372.0], [2346.0, 360.0], [2360.0, 425.0], [2370.0, 403.0], [2372.0, 406.0], [2430.0, 426.0], [2426.0, 417.0], [2422.0, 399.0], [2416.0, 392.0], [2420.0, 404.0], [2314.0, 403.5], [2404.0, 411.0], [2364.0, 308.0], [2310.0, 436.0], [2312.0, 430.0], [2392.0, 404.0], [2386.0, 422.0], [2442.0, 393.0], [2474.0, 373.0], [2468.0, 404.0], [2466.0, 411.0], [2534.0, 394.0], [2450.0, 389.0], [2444.0, 363.0], [2454.0, 422.0], [2438.0, 395.0], [2432.0, 402.0], [2480.0, 396.0], [2476.0, 402.0], [2478.0, 417.0], [2492.0, 395.0], [2482.0, 381.0], [2488.0, 407.0], [2506.0, 372.0], [2508.0, 405.0], [2512.0, 363.0], [2502.0, 400.0], [2516.0, 392.0], [2522.0, 398.0], [2542.0, 467.0], [2540.0, 352.0], [2548.0, 390.0], [2554.0, 402.0], [2496.0, 401.0], [2558.0, 391.0], [2550.0, 394.0], [2576.0, 377.0], [2628.0, 373.0], [2630.0, 353.0], [2562.0, 404.0], [2566.0, 373.0], [2622.0, 379.0], [2620.0, 368.0], [2608.0, 389.0], [2610.0, 389.0], [2614.0, 364.0], [2618.0, 394.0], [2598.0, 367.0], [2594.0, 357.0], [2592.0, 381.0], [2600.0, 387.0], [2606.0, 381.0], [2568.0, 392.0], [2570.0, 400.0], [2578.0, 381.0], [2582.0, 383.0], [2652.0, 383.0], [2654.0, 406.0], [2650.0, 373.0], [2648.0, 376.0], [2638.0, 376.0], [2644.0, 375.0], [2642.0, 372.0], [2640.0, 372.0], [2656.0, 368.0], [2658.0, 170.0], [2590.0, 369.0], [2586.0, 372.0], [2588.0, 393.0], [2584.0, 371.0], [2662.0, 340.0], [2670.0, 357.0], [2674.0, 371.0], [2676.0, 374.0], [2678.0, 384.0], [2668.0, 379.0], [2664.0, 377.0], [2634.0, 371.0], [2632.0, 377.0], [2684.0, 373.0], [2624.0, 369.0], [2794.0, 356.0], [2712.0, 361.0], [2734.0, 364.0], [2730.0, 345.0], [2736.0, 360.0], [2726.0, 365.0], [2728.0, 358.0], [2720.0, 370.0], [2724.0, 361.0], [2722.0, 351.0], [2762.0, 360.0], [2760.0, 361.0], [2758.0, 366.0], [2752.0, 363.0], [2756.0, 370.0], [2804.0, 356.0], [2798.0, 355.0], [2800.0, 354.0], [2802.0, 356.0], [2796.0, 354.0], [2810.0, 350.0], [2812.0, 366.0], [2814.0, 356.0], [2808.0, 348.0], [2806.0, 347.0], [2784.0, 359.0], [2788.0, 353.0], [2786.0, 361.0], [2718.0, 360.0], [2694.0, 370.0], [2700.0, 354.0], [2698.0, 385.0], [2692.0, 370.0], [2690.0, 374.0], [2688.0, 380.0], [2740.0, 362.0], [2738.0, 366.0], [2742.0, 366.0], [2746.0, 356.0], [2702.0, 364.0], [2710.0, 373.0], [2708.0, 373.0], [2704.0, 366.0], [2706.0, 235.0], [2790.0, 359.0], [2714.0, 363.0], [2716.0, 352.0], [2782.0, 354.0], [2780.0, 356.0], [2776.0, 350.0], [2774.0, 349.0], [2772.0, 359.0], [2768.0, 378.0], [2766.0, 371.0], [2770.0, 360.0], [2764.0, 359.0], [2844.0, 355.0], [2916.0, 346.0], [2914.0, 344.0], [2912.0, 341.0], [2918.0, 347.0], [2922.0, 341.0], [2842.0, 363.0], [2846.0, 344.0], [2840.0, 354.0], [2838.0, 355.0], [2836.0, 360.0], [2878.0, 349.0], [2874.0, 339.0], [2816.0, 350.0], [2818.0, 358.0], [2820.0, 367.0], [2824.0, 354.0], [2830.0, 353.0], [2826.0, 352.0], [2872.0, 349.0], [2870.0, 357.0], [2940.0, 354.0], [2938.0, 342.0], [2942.0, 346.0], [2882.0, 346.0], [2934.0, 345.0], [2926.0, 349.0], [2930.0, 382.0], [2932.0, 338.0], [2910.0, 336.0], [2904.0, 358.0], [2908.0, 346.0], [2902.0, 342.0], [2900.0, 352.0], [2898.0, 342.0], [2894.0, 343.0], [2890.0, 361.0], [2888.0, 352.0], [2886.0, 359.0], [2884.0, 335.0], [2924.0, 354.0], [2834.0, 337.0], [2848.0, 355.0], [2866.0, 353.0], [2862.0, 348.0], [2864.0, 350.0], [2860.0, 351.0], [2858.0, 344.0], [2856.0, 355.0], [2868.0, 347.0], [3002.0, 345.0], [2992.0, 366.0], [3062.0, 328.0], [2976.0, 334.0], [2978.0, 331.0], [2988.0, 339.0], [3012.0, 340.0], [3018.0, 333.0], [3008.0, 333.0], [3022.0, 330.0], [3034.0, 332.0], [2994.0, 343.0], [2996.0, 341.0], [3060.0, 339.0], [2952.0, 346.0], [2950.0, 341.0], [2956.0, 339.0], [2970.0, 341.0], [2972.0, 335.0], [3164.0, 344.0], [3168.0, 378.0], [3082.0, 330.0], [3088.0, 328.0], [3072.0, 321.0], [3428.0, 352.0], [3330.0, 361.0], [3548.0, 331.0], [3530.0, 355.0], [3528.0, 352.0], [3612.0, 327.0], [2071.0, 475.0], [2101.0, 361.0], [2097.0, 478.0], [2093.0, 366.0], [2173.0, 360.0], [2141.0, 366.0], [2107.0, 372.0], [2109.0, 400.0], [2295.0, 391.0], [2283.0, 418.0], [2297.0, 393.0], [2265.0, 433.0], [2301.0, 428.0], [2273.0, 398.0], [2285.0, 435.0], [2235.0, 319.0], [2209.0, 459.0], [2289.0, 429.0], [2419.0, 355.0], [2415.0, 397.0], [2407.0, 385.0], [2405.0, 411.0], [2359.0, 404.0], [2339.0, 340.0], [2369.0, 434.0], [2377.0, 404.0], [2427.0, 365.0], [2429.0, 392.0], [2431.0, 403.0], [2423.0, 393.0], [2425.0, 382.0], [2335.0, 420.0], [2319.0, 424.0], [2367.0, 394.0], [2307.0, 424.0], [2315.0, 413.0], [2341.0, 405.0], [2349.0, 425.0], [2347.0, 330.0], [2393.0, 419.0], [2399.0, 390.0], [2397.0, 426.0], [2389.0, 402.0], [2383.0, 424.0], [2541.0, 399.0], [2443.0, 396.0], [2535.0, 395.0], [2439.0, 323.0], [2441.0, 407.0], [2497.0, 394.0], [2465.0, 403.0], [2467.0, 393.0], [2469.0, 409.0], [2529.0, 381.0], [2533.0, 399.0], [2531.0, 389.0], [2449.0, 371.0], [2457.0, 160.0], [2475.0, 392.0], [2437.0, 397.0], [2493.0, 405.0], [2495.0, 406.0], [2435.0, 400.0], [2491.0, 399.0], [2483.0, 397.0], [2509.0, 346.0], [2501.0, 400.0], [2499.0, 404.0], [2503.0, 396.0], [2507.0, 419.0], [2505.0, 337.0], [2513.0, 416.0], [2515.0, 399.0], [2527.0, 421.0], [2521.0, 400.0], [2517.0, 397.0], [2539.0, 421.0], [2537.0, 398.0], [2551.0, 375.0], [2553.0, 390.0], [2557.0, 386.0], [2549.0, 371.0], [2545.0, 380.0], [2581.0, 378.5], [2631.0, 378.0], [2565.0, 393.0], [2561.0, 370.0], [2601.0, 389.0], [2597.0, 377.0], [2595.0, 376.0], [2603.0, 384.0], [2609.0, 378.0], [2569.0, 388.0], [2567.0, 371.0], [2571.0, 371.0], [2575.0, 372.0], [2573.0, 403.0], [2579.0, 369.0], [2655.0, 375.0], [2651.0, 364.0], [2649.0, 372.0], [2647.0, 300.5], [2639.0, 394.0], [2637.0, 373.0], [2641.0, 355.0], [2645.0, 393.0], [2657.0, 359.0], [2589.0, 216.0], [2587.0, 357.0], [2659.0, 386.0], [2663.0, 372.0], [2583.0, 365.0], [2585.0, 373.0], [2671.0, 373.0], [2669.0, 362.0], [2667.0, 369.0], [2679.0, 370.0], [2677.0, 380.0], [2681.0, 367.0], [2625.0, 383.0], [2627.0, 377.0], [2807.0, 356.0], [2731.0, 361.0], [2729.0, 356.0], [2733.0, 351.0], [2721.0, 360.0], [2723.0, 362.0], [2725.0, 368.0], [2759.0, 369.0], [2763.0, 363.0], [2761.0, 350.0], [2757.0, 371.0], [2755.0, 358.0], [2805.0, 360.0], [2803.0, 366.0], [2799.0, 351.0], [2797.0, 361.0], [2795.0, 365.0], [2813.0, 357.0], [2809.0, 356.0], [2811.0, 357.0], [2815.0, 341.0], [2789.0, 356.0], [2793.0, 341.0], [2787.0, 351.0], [2719.0, 364.0], [2715.0, 363.0], [2717.0, 354.0], [2737.0, 369.0], [2689.0, 363.0], [2693.0, 373.0], [2747.0, 371.0], [2745.0, 349.0], [2743.0, 370.0], [2749.0, 369.0], [2751.0, 365.0], [2741.0, 354.0], [2739.0, 359.0], [2695.0, 382.0], [2701.0, 371.0], [2699.0, 366.0], [2697.0, 377.0], [2703.0, 360.0], [2711.0, 364.0], [2709.0, 366.0], [2707.0, 367.0], [2705.0, 321.0], [2713.0, 359.0], [2765.0, 361.0], [2783.0, 355.0], [2781.0, 349.0], [2779.0, 357.0], [2777.0, 363.0], [2775.0, 362.0], [2767.0, 361.0], [2773.0, 362.0], [2771.0, 360.0], [2839.0, 341.0], [2837.0, 353.0], [2835.0, 353.0], [2847.0, 357.0], [2917.0, 348.0], [2923.0, 347.0], [2921.0, 366.0], [2845.0, 353.0], [2843.0, 345.0], [2841.0, 348.0], [2879.0, 347.0], [2817.0, 347.0], [2819.0, 355.0], [2825.0, 348.0], [2823.0, 337.0], [2875.0, 354.0], [2831.0, 347.0], [2827.0, 353.0], [2939.0, 345.0], [2943.0, 347.0], [2935.0, 336.5], [2925.0, 327.0], [2927.0, 343.0], [2933.0, 346.0], [2903.0, 346.0], [2899.0, 339.0], [2905.0, 350.0], [2909.0, 345.0], [2881.0, 348.0], [2887.0, 409.0], [2883.0, 343.0], [2885.0, 351.0], [2889.0, 341.0], [2895.0, 344.0], [2897.0, 44.0], [2891.0, 352.0], [2833.0, 348.0], [2853.0, 353.0], [2851.0, 349.0], [2849.0, 350.0], [2855.0, 351.0], [2863.0, 352.0], [2865.0, 353.0], [2857.0, 347.0], [2867.0, 345.0], [2869.0, 348.0], [2873.0, 345.0], [2871.0, 347.0], [2975.0, 342.0], [2945.0, 341.0], [2985.0, 337.0], [2983.0, 338.0], [3027.0, 330.0], [3025.0, 329.0], [3019.0, 336.0], [3065.0, 325.0], [3053.0, 282.0], [3033.0, 333.0], [2999.0, 348.0], [3005.0, 331.0], [2971.0, 336.0], [2963.0, 331.0], [2965.0, 340.0], [2949.0, 356.0], [2947.0, 347.0], [2953.0, 347.0], [2961.0, 342.0], [2967.0, 343.0], [3169.0, 401.0], [3083.0, 321.0], [3129.0, 335.0], [3293.0, 366.0], [3399.0, 351.0], [3485.0, 361.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3612.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1007.7666666666667, "minX": 1.63391946E12, "maxY": 2718.85, "series": [{"data": [[1.63392036E12, 1730.6333333333334], [1.63392006E12, 2681.0333333333333], [1.63392E12, 2070.483333333333], [1.6339197E12, 1925.7166666666667], [1.63392012E12, 2695.8333333333335], [1.63391982E12, 2646.6833333333334], [1.63391976E12, 2718.85], [1.63391946E12, 1007.7666666666667], [1.63391988E12, 2649.3166666666666], [1.63391958E12, 2654.4666666666667], [1.63391952E12, 2600.2166666666667], [1.63392018E12, 2684.8166666666666], [1.63391964E12, 2662.0666666666666], [1.6339203E12, 2652.0833333333335], [1.63392024E12, 1920.95], [1.63391994E12, 2473.883333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63392036E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 991.1166666666667, "minX": 1.63391946E12, "maxY": 2718.85, "series": [{"data": [[1.63392036E12, 1747.3], [1.63392006E12, 2681.05], [1.63392E12, 2070.483333333333], [1.6339197E12, 1925.7166666666667], [1.63392012E12, 2695.8166666666666], [1.63391982E12, 2646.7], [1.63391976E12, 2718.85], [1.63391946E12, 991.1166666666667], [1.63391988E12, 2649.3], [1.63391958E12, 2654.4666666666667], [1.63391952E12, 2600.2], [1.63392018E12, 2684.8166666666666], [1.63391964E12, 2662.0666666666666], [1.6339203E12, 2652.0333333333333], [1.63392024E12, 1921.0], [1.63391994E12, 2473.883333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63392036E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 991.1166666666667, "minX": 1.63391946E12, "maxY": 2718.85, "series": [{"data": [[1.63392036E12, 1747.3], [1.63392006E12, 2681.05], [1.63392E12, 2070.483333333333], [1.6339197E12, 1925.7166666666667], [1.63392012E12, 2695.8166666666666], [1.63391982E12, 2646.7], [1.63391976E12, 2718.85], [1.63391946E12, 991.1166666666667], [1.63391988E12, 2649.3], [1.63391958E12, 2654.4666666666667], [1.63391952E12, 2600.2], [1.63392018E12, 2684.8166666666666], [1.63391964E12, 2662.0666666666666], [1.6339203E12, 2652.0333333333333], [1.63392024E12, 1921.0], [1.63391994E12, 2473.883333333333]], "isOverall": false, "label": "AuthzUser-http2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63392036E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 991.1166666666667, "minX": 1.63391946E12, "maxY": 2718.85, "series": [{"data": [[1.63392036E12, 1747.3], [1.63392006E12, 2681.05], [1.63392E12, 2070.483333333333], [1.6339197E12, 1925.7166666666667], [1.63392012E12, 2695.8166666666666], [1.63391982E12, 2646.7], [1.63391976E12, 2718.85], [1.63391946E12, 991.1166666666667], [1.63391988E12, 2649.3], [1.63391958E12, 2654.4666666666667], [1.63391952E12, 2600.2], [1.63392018E12, 2684.8166666666666], [1.63391964E12, 2662.0666666666666], [1.6339203E12, 2652.0333333333333], [1.63392024E12, 1921.0], [1.63391994E12, 2473.883333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63392036E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

