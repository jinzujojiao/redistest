/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 10611.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 11.0], [5.3, 11.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 12.0], [8.0, 12.0], [8.1, 12.0], [8.2, 12.0], [8.3, 12.0], [8.4, 12.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 13.0], [9.6, 13.0], [9.7, 13.0], [9.8, 13.0], [9.9, 13.0], [10.0, 13.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 16.0], [15.3, 16.0], [15.4, 16.0], [15.5, 16.0], [15.6, 16.0], [15.7, 16.0], [15.8, 16.0], [15.9, 16.0], [16.0, 16.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 17.0], [17.8, 17.0], [17.9, 17.0], [18.0, 17.0], [18.1, 17.0], [18.2, 17.0], [18.3, 18.0], [18.4, 18.0], [18.5, 18.0], [18.6, 18.0], [18.7, 18.0], [18.8, 18.0], [18.9, 18.0], [19.0, 18.0], [19.1, 18.0], [19.2, 18.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 18.0], [20.2, 18.0], [20.3, 18.0], [20.4, 18.0], [20.5, 18.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 19.0], [22.0, 19.0], [22.1, 19.0], [22.2, 19.0], [22.3, 19.0], [22.4, 19.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 19.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 20.0], [24.2, 20.0], [24.3, 20.0], [24.4, 20.0], [24.5, 20.0], [24.6, 20.0], [24.7, 20.0], [24.8, 20.0], [24.9, 20.0], [25.0, 20.0], [25.1, 20.0], [25.2, 20.0], [25.3, 20.0], [25.4, 20.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 21.0], [26.5, 21.0], [26.6, 21.0], [26.7, 21.0], [26.8, 21.0], [26.9, 21.0], [27.0, 21.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 22.0], [28.1, 22.0], [28.2, 22.0], [28.3, 22.0], [28.4, 22.0], [28.5, 22.0], [28.6, 22.0], [28.7, 22.0], [28.8, 22.0], [28.9, 22.0], [29.0, 22.0], [29.1, 22.0], [29.2, 22.0], [29.3, 22.0], [29.4, 22.0], [29.5, 22.0], [29.6, 22.0], [29.7, 22.0], [29.8, 22.0], [29.9, 22.0], [30.0, 22.0], [30.1, 22.0], [30.2, 22.0], [30.3, 22.0], [30.4, 22.0], [30.5, 23.0], [30.6, 23.0], [30.7, 23.0], [30.8, 23.0], [30.9, 23.0], [31.0, 23.0], [31.1, 23.0], [31.2, 23.0], [31.3, 23.0], [31.4, 23.0], [31.5, 23.0], [31.6, 23.0], [31.7, 23.0], [31.8, 23.0], [31.9, 23.0], [32.0, 23.0], [32.1, 23.0], [32.2, 23.0], [32.3, 23.0], [32.4, 23.0], [32.5, 23.0], [32.6, 23.0], [32.7, 23.0], [32.8, 23.0], [32.9, 23.0], [33.0, 24.0], [33.1, 24.0], [33.2, 24.0], [33.3, 24.0], [33.4, 24.0], [33.5, 24.0], [33.6, 24.0], [33.7, 24.0], [33.8, 24.0], [33.9, 24.0], [34.0, 24.0], [34.1, 24.0], [34.2, 24.0], [34.3, 24.0], [34.4, 24.0], [34.5, 24.0], [34.6, 24.0], [34.7, 24.0], [34.8, 24.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 25.0], [35.7, 25.0], [35.8, 25.0], [35.9, 25.0], [36.0, 25.0], [36.1, 25.0], [36.2, 25.0], [36.3, 25.0], [36.4, 25.0], [36.5, 25.0], [36.6, 25.0], [36.7, 25.0], [36.8, 25.0], [36.9, 25.0], [37.0, 25.0], [37.1, 25.0], [37.2, 25.0], [37.3, 25.0], [37.4, 25.0], [37.5, 25.0], [37.6, 25.0], [37.7, 25.0], [37.8, 25.0], [37.9, 25.0], [38.0, 25.0], [38.1, 26.0], [38.2, 26.0], [38.3, 26.0], [38.4, 26.0], [38.5, 26.0], [38.6, 26.0], [38.7, 26.0], [38.8, 26.0], [38.9, 26.0], [39.0, 26.0], [39.1, 26.0], [39.2, 26.0], [39.3, 26.0], [39.4, 26.0], [39.5, 26.0], [39.6, 26.0], [39.7, 26.0], [39.8, 26.0], [39.9, 26.0], [40.0, 26.0], [40.1, 26.0], [40.2, 26.0], [40.3, 26.0], [40.4, 26.0], [40.5, 26.0], [40.6, 26.0], [40.7, 27.0], [40.8, 27.0], [40.9, 27.0], [41.0, 27.0], [41.1, 27.0], [41.2, 27.0], [41.3, 27.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 27.0], [42.2, 27.0], [42.3, 27.0], [42.4, 27.0], [42.5, 27.0], [42.6, 27.0], [42.7, 27.0], [42.8, 27.0], [42.9, 27.0], [43.0, 27.0], [43.1, 27.0], [43.2, 27.0], [43.3, 28.0], [43.4, 28.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 28.0], [44.3, 28.0], [44.4, 28.0], [44.5, 28.0], [44.6, 28.0], [44.7, 28.0], [44.8, 28.0], [44.9, 28.0], [45.0, 28.0], [45.1, 28.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 29.0], [45.9, 29.0], [46.0, 29.0], [46.1, 29.0], [46.2, 29.0], [46.3, 29.0], [46.4, 29.0], [46.5, 29.0], [46.6, 29.0], [46.7, 29.0], [46.8, 29.0], [46.9, 29.0], [47.0, 29.0], [47.1, 29.0], [47.2, 29.0], [47.3, 29.0], [47.4, 29.0], [47.5, 29.0], [47.6, 29.0], [47.7, 29.0], [47.8, 29.0], [47.9, 29.0], [48.0, 29.0], [48.1, 29.0], [48.2, 29.0], [48.3, 30.0], [48.4, 30.0], [48.5, 30.0], [48.6, 30.0], [48.7, 30.0], [48.8, 30.0], [48.9, 30.0], [49.0, 30.0], [49.1, 30.0], [49.2, 30.0], [49.3, 30.0], [49.4, 30.0], [49.5, 30.0], [49.6, 30.0], [49.7, 30.0], [49.8, 30.0], [49.9, 30.0], [50.0, 30.0], [50.1, 30.0], [50.2, 30.0], [50.3, 30.0], [50.4, 30.0], [50.5, 30.0], [50.6, 30.0], [50.7, 31.0], [50.8, 31.0], [50.9, 31.0], [51.0, 31.0], [51.1, 31.0], [51.2, 31.0], [51.3, 31.0], [51.4, 31.0], [51.5, 31.0], [51.6, 31.0], [51.7, 31.0], [51.8, 31.0], [51.9, 31.0], [52.0, 31.0], [52.1, 31.0], [52.2, 31.0], [52.3, 31.0], [52.4, 31.0], [52.5, 31.0], [52.6, 31.0], [52.7, 31.0], [52.8, 31.0], [52.9, 32.0], [53.0, 32.0], [53.1, 32.0], [53.2, 32.0], [53.3, 32.0], [53.4, 32.0], [53.5, 32.0], [53.6, 32.0], [53.7, 32.0], [53.8, 32.0], [53.9, 32.0], [54.0, 32.0], [54.1, 32.0], [54.2, 32.0], [54.3, 32.0], [54.4, 32.0], [54.5, 32.0], [54.6, 32.0], [54.7, 32.0], [54.8, 32.0], [54.9, 33.0], [55.0, 33.0], [55.1, 33.0], [55.2, 33.0], [55.3, 33.0], [55.4, 33.0], [55.5, 33.0], [55.6, 33.0], [55.7, 33.0], [55.8, 33.0], [55.9, 33.0], [56.0, 33.0], [56.1, 33.0], [56.2, 33.0], [56.3, 33.0], [56.4, 33.0], [56.5, 33.0], [56.6, 33.0], [56.7, 34.0], [56.8, 34.0], [56.9, 34.0], [57.0, 34.0], [57.1, 34.0], [57.2, 34.0], [57.3, 34.0], [57.4, 34.0], [57.5, 34.0], [57.6, 34.0], [57.7, 34.0], [57.8, 34.0], [57.9, 34.0], [58.0, 34.0], [58.1, 34.0], [58.2, 35.0], [58.3, 35.0], [58.4, 35.0], [58.5, 35.0], [58.6, 35.0], [58.7, 35.0], [58.8, 35.0], [58.9, 35.0], [59.0, 35.0], [59.1, 35.0], [59.2, 35.0], [59.3, 35.0], [59.4, 36.0], [59.5, 36.0], [59.6, 36.0], [59.7, 36.0], [59.8, 36.0], [59.9, 36.0], [60.0, 36.0], [60.1, 36.0], [60.2, 36.0], [60.3, 37.0], [60.4, 37.0], [60.5, 37.0], [60.6, 37.0], [60.7, 37.0], [60.8, 37.0], [60.9, 37.0], [61.0, 38.0], [61.1, 38.0], [61.2, 38.0], [61.3, 38.0], [61.4, 38.0], [61.5, 38.0], [61.6, 39.0], [61.7, 39.0], [61.8, 39.0], [61.9, 39.0], [62.0, 39.0], [62.1, 40.0], [62.2, 40.0], [62.3, 40.0], [62.4, 41.0], [62.5, 41.0], [62.6, 41.0], [62.7, 42.0], [62.8, 42.0], [62.9, 43.0], [63.0, 43.0], [63.1, 44.0], [63.2, 45.0], [63.3, 45.0], [63.4, 46.0], [63.5, 48.0], [63.6, 49.0], [63.7, 50.0], [63.8, 52.0], [63.9, 53.0], [64.0, 55.0], [64.1, 56.0], [64.2, 58.0], [64.3, 59.0], [64.4, 61.0], [64.5, 62.0], [64.6, 64.0], [64.7, 66.0], [64.8, 67.0], [64.9, 69.0], [65.0, 70.0], [65.1, 72.0], [65.2, 74.0], [65.3, 76.0], [65.4, 77.0], [65.5, 79.0], [65.6, 81.0], [65.7, 83.0], [65.8, 85.0], [65.9, 86.0], [66.0, 88.0], [66.1, 90.0], [66.2, 91.0], [66.3, 93.0], [66.4, 94.0], [66.5, 96.0], [66.6, 97.0], [66.7, 99.0], [66.8, 100.0], [66.9, 102.0], [67.0, 104.0], [67.1, 105.0], [67.2, 107.0], [67.3, 108.0], [67.4, 110.0], [67.5, 111.0], [67.6, 113.0], [67.7, 114.0], [67.8, 116.0], [67.9, 117.0], [68.0, 119.0], [68.1, 120.0], [68.2, 121.0], [68.3, 123.0], [68.4, 124.0], [68.5, 125.0], [68.6, 126.0], [68.7, 127.0], [68.8, 128.0], [68.9, 130.0], [69.0, 131.0], [69.1, 132.0], [69.2, 133.0], [69.3, 134.0], [69.4, 135.0], [69.5, 136.0], [69.6, 137.0], [69.7, 138.0], [69.8, 140.0], [69.9, 141.0], [70.0, 142.0], [70.1, 143.0], [70.2, 145.0], [70.3, 146.0], [70.4, 147.0], [70.5, 149.0], [70.6, 150.0], [70.7, 151.0], [70.8, 153.0], [70.9, 154.0], [71.0, 155.0], [71.1, 156.0], [71.2, 157.0], [71.3, 158.0], [71.4, 159.0], [71.5, 160.0], [71.6, 161.0], [71.7, 162.0], [71.8, 163.0], [71.9, 164.0], [72.0, 165.0], [72.1, 167.0], [72.2, 168.0], [72.3, 169.0], [72.4, 170.0], [72.5, 171.0], [72.6, 172.0], [72.7, 173.0], [72.8, 174.0], [72.9, 175.0], [73.0, 176.0], [73.1, 178.0], [73.2, 179.0], [73.3, 180.0], [73.4, 181.0], [73.5, 182.0], [73.6, 183.0], [73.7, 184.0], [73.8, 185.0], [73.9, 186.0], [74.0, 187.0], [74.1, 189.0], [74.2, 190.0], [74.3, 191.0], [74.4, 192.0], [74.5, 193.0], [74.6, 194.0], [74.7, 195.0], [74.8, 196.0], [74.9, 198.0], [75.0, 199.0], [75.1, 200.0], [75.2, 201.0], [75.3, 202.0], [75.4, 203.0], [75.5, 204.0], [75.6, 205.0], [75.7, 207.0], [75.8, 208.0], [75.9, 209.0], [76.0, 210.0], [76.1, 212.0], [76.2, 213.0], [76.3, 214.0], [76.4, 215.0], [76.5, 216.0], [76.6, 217.0], [76.7, 218.0], [76.8, 220.0], [76.9, 221.0], [77.0, 222.0], [77.1, 223.0], [77.2, 224.0], [77.3, 225.0], [77.4, 226.0], [77.5, 227.0], [77.6, 229.0], [77.7, 230.0], [77.8, 231.0], [77.9, 232.0], [78.0, 233.0], [78.1, 234.0], [78.2, 235.0], [78.3, 236.0], [78.4, 238.0], [78.5, 239.0], [78.6, 240.0], [78.7, 241.0], [78.8, 242.0], [78.9, 243.0], [79.0, 245.0], [79.1, 246.0], [79.2, 247.0], [79.3, 249.0], [79.4, 250.0], [79.5, 251.0], [79.6, 252.0], [79.7, 253.0], [79.8, 254.0], [79.9, 256.0], [80.0, 257.0], [80.1, 258.0], [80.2, 259.0], [80.3, 260.0], [80.4, 261.0], [80.5, 263.0], [80.6, 264.0], [80.7, 265.0], [80.8, 266.0], [80.9, 267.0], [81.0, 268.0], [81.1, 269.0], [81.2, 271.0], [81.3, 272.0], [81.4, 273.0], [81.5, 274.0], [81.6, 275.0], [81.7, 277.0], [81.8, 278.0], [81.9, 279.0], [82.0, 280.0], [82.1, 281.0], [82.2, 282.0], [82.3, 283.0], [82.4, 285.0], [82.5, 286.0], [82.6, 287.0], [82.7, 288.0], [82.8, 289.0], [82.9, 291.0], [83.0, 292.0], [83.1, 293.0], [83.2, 295.0], [83.3, 296.0], [83.4, 297.0], [83.5, 298.0], [83.6, 300.0], [83.7, 301.0], [83.8, 302.0], [83.9, 303.0], [84.0, 304.0], [84.1, 306.0], [84.2, 307.0], [84.3, 308.0], [84.4, 309.0], [84.5, 311.0], [84.6, 312.0], [84.7, 313.0], [84.8, 315.0], [84.9, 316.0], [85.0, 317.0], [85.1, 318.0], [85.2, 320.0], [85.3, 321.0], [85.4, 322.0], [85.5, 324.0], [85.6, 325.0], [85.7, 326.0], [85.8, 327.0], [85.9, 329.0], [86.0, 330.0], [86.1, 331.0], [86.2, 332.0], [86.3, 334.0], [86.4, 335.0], [86.5, 336.0], [86.6, 338.0], [86.7, 339.0], [86.8, 340.0], [86.9, 342.0], [87.0, 343.0], [87.1, 344.0], [87.2, 346.0], [87.3, 347.0], [87.4, 348.0], [87.5, 350.0], [87.6, 351.0], [87.7, 352.0], [87.8, 354.0], [87.9, 355.0], [88.0, 356.0], [88.1, 358.0], [88.2, 359.0], [88.3, 361.0], [88.4, 362.0], [88.5, 363.0], [88.6, 365.0], [88.7, 366.0], [88.8, 367.0], [88.9, 368.0], [89.0, 370.0], [89.1, 371.0], [89.2, 372.0], [89.3, 374.0], [89.4, 375.0], [89.5, 376.0], [89.6, 378.0], [89.7, 379.0], [89.8, 381.0], [89.9, 382.0], [90.0, 384.0], [90.1, 385.0], [90.2, 387.0], [90.3, 389.0], [90.4, 390.0], [90.5, 392.0], [90.6, 393.0], [90.7, 395.0], [90.8, 396.0], [90.9, 398.0], [91.0, 399.0], [91.1, 401.0], [91.2, 402.0], [91.3, 404.0], [91.4, 405.0], [91.5, 407.0], [91.6, 408.0], [91.7, 410.0], [91.8, 411.0], [91.9, 413.0], [92.0, 414.0], [92.1, 416.0], [92.2, 417.0], [92.3, 418.0], [92.4, 420.0], [92.5, 422.0], [92.6, 423.0], [92.7, 425.0], [92.8, 426.0], [92.9, 428.0], [93.0, 429.0], [93.1, 431.0], [93.2, 432.0], [93.3, 434.0], [93.4, 436.0], [93.5, 437.0], [93.6, 439.0], [93.7, 441.0], [93.8, 442.0], [93.9, 444.0], [94.0, 445.0], [94.1, 447.0], [94.2, 449.0], [94.3, 451.0], [94.4, 452.0], [94.5, 454.0], [94.6, 456.0], [94.7, 458.0], [94.8, 460.0], [94.9, 462.0], [95.0, 464.0], [95.1, 466.0], [95.2, 467.0], [95.3, 469.0], [95.4, 471.0], [95.5, 473.0], [95.6, 475.0], [95.7, 477.0], [95.8, 478.0], [95.9, 481.0], [96.0, 483.0], [96.1, 485.0], [96.2, 487.0], [96.3, 488.0], [96.4, 490.0], [96.5, 493.0], [96.6, 495.0], [96.7, 497.0], [96.8, 499.0], [96.9, 501.0], [97.0, 504.0], [97.1, 506.0], [97.2, 509.0], [97.3, 512.0], [97.4, 515.0], [97.5, 518.0], [97.6, 521.0], [97.7, 524.0], [97.8, 527.0], [97.9, 531.0], [98.0, 534.0], [98.1, 537.0], [98.2, 540.0], [98.3, 544.0], [98.4, 549.0], [98.5, 553.0], [98.6, 557.0], [98.7, 562.0], [98.8, 569.0], [98.9, 576.0], [99.0, 585.0], [99.1, 594.0], [99.2, 602.0], [99.3, 614.0], [99.4, 633.0], [99.5, 654.0], [99.6, 685.0], [99.7, 725.0], [99.8, 788.0], [99.9, 928.0], [100.0, 10611.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 599743.0, "series": [{"data": [[0.0, 599743.0], [600.0, 4296.0], [700.0, 1484.0], [800.0, 604.0], [900.0, 388.0], [1000.0, 12.0], [1100.0, 36.0], [1200.0, 9.0], [1300.0, 9.0], [1400.0, 4.0], [1500.0, 17.0], [1600.0, 6.0], [1700.0, 84.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 1.0], [2100.0, 9.0], [2200.0, 2.0], [2300.0, 3.0], [2400.0, 4.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 3.0], [3200.0, 11.0], [3300.0, 17.0], [3400.0, 7.0], [3500.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4800.0, 2.0], [4700.0, 1.0], [5000.0, 3.0], [5100.0, 1.0], [5300.0, 3.0], [5200.0, 2.0], [5400.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6200.0, 2.0], [6400.0, 6.0], [6600.0, 14.0], [6500.0, 20.0], [6700.0, 4.0], [6800.0, 6.0], [6900.0, 7.0], [7100.0, 7.0], [7000.0, 2.0], [7400.0, 8.0], [7300.0, 8.0], [7200.0, 9.0], [7500.0, 7.0], [7600.0, 5.0], [7700.0, 4.0], [7800.0, 5.0], [7900.0, 6.0], [8100.0, 4.0], [8000.0, 1.0], [8400.0, 5.0], [8300.0, 7.0], [8500.0, 5.0], [8600.0, 4.0], [8700.0, 5.0], [8200.0, 2.0], [8800.0, 7.0], [8900.0, 7.0], [9000.0, 9.0], [9200.0, 7.0], [9100.0, 7.0], [9300.0, 13.0], [9400.0, 21.0], [9500.0, 37.0], [9600.0, 18.0], [9700.0, 14.0], [10000.0, 29.0], [9800.0, 26.0], [10200.0, 11.0], [9900.0, 21.0], [10100.0, 29.0], [10300.0, 14.0], [10400.0, 4.0], [10600.0, 1.0], [100.0, 74842.0], [200.0, 76570.0], [300.0, 66812.0], [400.0, 52110.0], [500.0, 21025.0]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 633.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 870434.0, "series": [{"data": [[0.0, 870434.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 27510.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 633.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 689.9310163243813, "minX": 1.63912296E12, "maxY": 1200.0, "series": [{"data": [[1.6391232E12, 1200.0], [1.63912386E12, 689.9310163243813], [1.63912326E12, 1200.0], [1.63912356E12, 1200.0], [1.63912296E12, 1157.9805963085719], [1.63912362E12, 1200.0], [1.63912302E12, 1200.0], [1.63912332E12, 1200.0], [1.63912338E12, 1200.0], [1.63912368E12, 1200.0], [1.63912308E12, 1200.0], [1.63912374E12, 1200.0], [1.63912314E12, 1200.0], [1.63912344E12, 1200.0], [1.6391235E12, 1200.0], [1.6391238E12, 1187.8872008359122]], "isOverall": false, "label": "app1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912386E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.43478260869565, "minX": 113.0, "maxY": 9390.0, "series": [{"data": [[113.0, 13.583333333333336], [131.0, 13.92], [154.0, 16.0], [179.0, 12.68], [202.0, 9.43478260869565], [227.0, 13.041666666666666], [251.0, 13.384615384615387], [273.0, 14.88888888888889], [294.0, 13.884615384615387], [315.0, 15.514285714285716], [328.0, 15.464285714285712], [348.0, 17.666666666666668], [372.0, 18.066666666666666], [390.0, 15.566666666666666], [408.0, 16.413793103448278], [427.0, 14.935483870967744], [444.0, 19.718750000000004], [456.0, 2809.1588785046742], [457.0, 1855.6307692307691], [461.0, 127.0], [460.0, 20.852941176470587], [459.0, 7757.0], [462.0, 20.5], [464.0, 468.047619047619], [468.0, 4235.75], [469.0, 623.0], [471.0, 2038.7499999999998], [472.0, 3156.333333333333], [474.0, 21.0], [486.0, 16.88235294117647], [500.0, 18.34285714285714], [519.0, 1512.981751824817], [514.0, 25.0], [513.0, 19.02777777777778], [527.0, 4185.387096774194], [525.0, 2158.157894736842], [526.0, 1621.3991935483878], [516.0, 976.0], [517.0, 40.5], [518.0, 1471.2], [533.0, 4895.261904761904], [534.0, 3471.936507936507], [535.0, 1607.4285714285716], [529.0, 2970.709677419355], [530.0, 4489.558441558442], [532.0, 6830.2], [531.0, 9390.0], [528.0, 2093.5], [537.0, 2602.842105263158], [538.0, 1845.9285714285718], [539.0, 409.375], [540.0, 1548.7380952380954], [541.0, 444.0], [542.0, 334.26315789473676], [543.0, 442.7027027027027], [536.0, 62.8], [521.0, 3221.857142857143], [522.0, 18.624999999999996], [523.0, 23.0], [524.0, 2143.305785123969], [548.0, 641.5454545454544], [544.0, 171.91666666666666], [549.0, 562.0], [550.0, 562.6956521739131], [551.0, 550.2222222222222], [575.0, 88.10526315789473], [561.0, 48.33333333333332], [562.0, 571.0], [564.0, 594.8], [566.0, 620.4285714285714], [556.0, 738.7333333333332], [557.0, 593.9999999999999], [558.0, 576.0], [559.0, 562.3333333333334], [579.0, 663.5], [576.0, 1032.7857142857142], [588.0, 570.0], [589.0, 19.25714285714286], [590.0, 621.0], [580.0, 678.7692307692307], [581.0, 640.5], [582.0, 721.3200000000002], [583.0, 1062.2], [598.0, 870.0], [600.0, 543.5555555555555], [602.0, 113.31372549019609], [603.0, 616.0], [604.0, 666.5714285714286], [605.0, 690.0], [606.0, 715.0], [607.0, 544.6], [599.0, 818.8260869565219], [584.0, 759.9230769230769], [585.0, 517.0], [586.0, 527.0], [587.0, 587.6666666666666], [613.0, 479.0], [608.0, 123.42857142857142], [620.0, 23.595238095238088], [617.0, 20.749999999999996], [610.0, 631.0000000000001], [611.0, 520.6666666666666], [614.0, 479.3333333333333], [633.0, 96.36], [634.0, 1897.0], [635.0, 553.0], [636.0, 547.0], [638.0, 443.83695652173907], [639.0, 585.0], [624.0, 519.5], [626.0, 83.21276595744679], [628.0, 529.0], [630.0, 810.1538461538462], [631.0, 534.5], [642.0, 74.48], [640.0, 1337.25], [645.0, 92.95555555555555], [664.0, 22.19148936170213], [665.0, 32.625], [666.0, 32.24742268041238], [667.0, 35.51700680272109], [668.0, 93.21495327102798], [669.0, 69.61538461538458], [670.0, 548.7777777777778], [671.0, 21.680851063829785], [657.0, 22.319148936170212], [652.0, 563.1875], [649.0, 20.80952380952381], [653.0, 714.875], [654.0, 2132.714285714286], [655.0, 98.26973684210529], [658.0, 130.19607843137254], [659.0, 32.66666666666665], [660.0, 569.2857142857142], [663.0, 172.99999999999997], [662.0, 22.5531914893617], [700.0, 24.0], [686.0, 1065.8125], [681.0, 278.0], [682.0, 500.0], [683.0, 491.0], [687.0, 826.6666666666667], [673.0, 24.489361702127663], [672.0, 22.7902097902098], [675.0, 23.105263157894733], [674.0, 24.404255319148938], [677.0, 26.04255319148936], [676.0, 22.28421052631579], [696.0, 463.62499999999994], [697.0, 26.0], [698.0, 25.333333333333332], [702.0, 23.0], [678.0, 119.50461320085188], [688.0, 185.5], [689.0, 815.5], [690.0, 582.4375], [691.0, 677.4878048780488], [692.0, 470.6666666666667], [693.0, 175.66666666666669], [694.0, 469.0], [695.0, 523.0], [715.0, 404.1538461538462], [706.0, 574.8620689655172], [709.0, 491.0], [708.0, 20.0], [710.0, 20.0], [728.0, 368.375], [729.0, 472.5], [730.0, 378.8], [712.0, 481.80769230769226], [713.0, 475.59999999999997], [714.0, 476.0], [718.0, 480.0], [719.0, 500.0], [720.0, 489.56249999999994], [722.0, 322.0], [723.0, 474.0], [724.0, 465.5], [725.0, 470.875], [727.0, 158.83333333333337], [740.0, 44.10169491525424], [747.0, 29.427083333333325], [739.0, 489.0], [751.0, 56.5841584158416], [750.0, 20.118881118881117], [741.0, 109.25862068965517], [742.0, 33.801886792452805], [752.0, 501.2], [753.0, 25.291666666666664], [760.0, 41.632653061224495], [743.0, 25.520833333333336], [762.0, 28.17021276595745], [761.0, 22.150627615062753], [764.0, 184.88331814038307], [763.0, 29.122807017543856], [766.0, 16.92857142857143], [765.0, 30.375000000000004], [767.0, 33.66331658291458], [754.0, 27.098958333333314], [755.0, 40.48979591836735], [756.0, 521.0], [757.0, 31.99999999999997], [759.0, 60.714285714285694], [758.0, 22.50000000000001], [744.0, 48.85333333333334], [745.0, 43.14765100671138], [746.0, 72.04265402843599], [748.0, 25.088915956151055], [749.0, 155.89230769230767], [774.0, 499.87499999999994], [769.0, 112.62962962962963], [768.0, 30.24226804123711], [782.0, 490.0], [781.0, 26.107526881720432], [780.0, 24.76562500000001], [779.0, 19.872340425531917], [783.0, 494.9523809523809], [771.0, 491.0], [772.0, 494.5], [773.0, 28.411458333333346], [775.0, 90.87272727272729], [796.0, 519.5714285714286], [795.0, 20.409090909090907], [793.0, 25.652173913043477], [797.0, 502.5], [792.0, 501.0], [798.0, 512.8], [799.0, 85.98076923076924], [784.0, 49.499999999999986], [785.0, 39.857142857142854], [786.0, 100.21818181818185], [787.0, 503.16666666666663], [788.0, 36.13333333333333], [789.0, 501.0], [790.0, 501.7142857142857], [791.0, 112.32142857142857], [776.0, 34.10526315789475], [778.0, 502.16666666666663], [801.0, 527.0], [800.0, 507.5], [815.0, 515.8], [804.0, 105.21276595744683], [803.0, 28.361702127659573], [805.0, 512.5], [806.0, 513.0], [807.0, 515.2], [820.0, 507.75], [823.0, 509.5], [818.0, 513.0000000000001], [824.0, 83.14285714285712], [825.0, 512.5], [817.0, 506.25], [827.0, 532.0], [829.0, 25.093023255813954], [808.0, 518.3684210526316], [811.0, 1542.5], [812.0, 1187.65], [813.0, 94.56097560975611], [814.0, 565.5454545454545], [835.0, 540.8571428571429], [834.0, 58.4390243902439], [847.0, 557.0], [845.0, 541.5], [844.0, 19.38235294117647], [836.0, 543.7142857142857], [840.0, 546.6666666666667], [843.0, 539.3157894736842], [839.0, 543.0], [858.0, 62.52777777777778], [859.0, 540.0], [860.0, 541.0], [862.0, 551.3333333333333], [863.0, 545.0], [861.0, 541.1], [849.0, 543.8461538461539], [850.0, 543.8181818181818], [852.0, 529.1034482758621], [855.0, 523.5], [854.0, 522.0], [853.0, 519.0], [851.0, 551.3333333333334], [848.0, 543.25], [837.0, 542.0], [841.0, 546.0], [842.0, 532.5], [866.0, 559.6666666666666], [867.0, 558.7333333333333], [864.0, 548.0], [871.0, 542.0], [885.0, 559.2], [887.0, 166.97674418604663], [886.0, 555.0], [883.0, 555.5], [882.0, 555.0], [881.0, 553.0], [880.0, 553.0], [888.0, 554.0], [892.0, 554.0], [872.0, 547.0], [873.0, 105.80487804878052], [875.0, 556.0], [874.0, 551.0], [877.0, 551.0], [878.0, 559.0], [879.0, 555.9], [865.0, 562.75], [869.0, 550.2], [868.0, 562.75], [870.0, 570.0], [921.0, 48.114285714285714], [915.0, 574.5], [917.0, 569.0], [919.0, 580.3333333333334], [916.0, 567.0], [907.0, 563.6666666666666], [906.0, 571.5], [904.0, 17.74193548387097], [908.0, 564.0], [918.0, 570.5], [909.0, 566.6666666666666], [911.0, 594.0], [914.0, 565.0], [924.0, 557.7333333333333], [922.0, 572.0], [926.0, 558.0], [925.0, 556.0], [927.0, 564.1111111111111], [920.0, 576.1851851851852], [910.0, 573.4], [934.0, 575.25], [929.0, 596.3333333333333], [928.0, 550.190476190476], [942.0, 588.6666666666666], [932.0, 569.0], [930.0, 605.6666666666666], [947.0, 599.7499999999999], [948.0, 597.3333333333334], [949.0, 596.8571428571428], [950.0, 597.2307692307692], [951.0, 594.6666666666667], [945.0, 589.0], [944.0, 588.5], [954.0, 589.6153846153846], [958.0, 595.4615384615385], [956.0, 591.3333333333334], [959.0, 574.2], [953.0, 621.0], [946.0, 636.0], [933.0, 571.6666666666666], [940.0, 585.0], [941.0, 586.1666666666666], [939.0, 584.0], [936.0, 11.478260869565219], [960.0, 573.0], [967.0, 599.5714285714286], [976.0, 609.5714285714286], [990.0, 609.25], [989.0, 603.0], [987.0, 603.5], [991.0, 601.5], [984.0, 598.5], [985.0, 599.2857142857143], [977.0, 604.5], [978.0, 603.0], [980.0, 601.125], [981.0, 592.0], [983.0, 603.0], [979.0, 600.5], [969.0, 601.75], [961.0, 574.5], [962.0, 20.07894736842105], [971.0, 604.25], [973.0, 598.5], [970.0, 598.0], [974.0, 600.9999999999999], [975.0, 600.25], [972.0, 35.392857142857146], [1017.0, 591.5], [993.0, 168.74509803921572], [995.0, 576.8181818181818], [994.0, 604.5555555555555], [992.0, 600.5], [1003.0, 15.200000000000005], [1018.0, 595.2727272727273], [1021.0, 606.0], [1020.0, 103.73809523809521], [1023.0, 607.6], [1015.0, 590.0], [1014.0, 590.0], [1012.0, 585.5], [1013.0, 594.0], [1028.0, 637.0], [1024.0, 621.1], [1053.0, 638.0], [1054.0, 634.8000000000001], [1051.0, 621.1111111111111], [1052.0, 629.3333333333334], [1046.0, 590.75], [1048.0, 17.38235294117647], [1050.0, 618.8333333333333], [1042.0, 588.2], [1040.0, 616.0], [1041.0, 601.0], [1044.0, 587.5], [1025.0, 624.9565217391306], [1026.0, 617.0], [1037.0, 604.3333333333334], [1039.0, 605.0], [1080.0, 618.7142857142857], [1058.0, 609.0], [1087.0, 606.0000000000002], [1086.0, 650.0], [1082.0, 599.5], [1083.0, 34.68571428571428], [1085.0, 601.6666666666666], [1081.0, 625.5277777777777], [1059.0, 593.8000000000001], [1060.0, 597.5], [1061.0, 600.5], [1062.0, 602.2727272727273], [1063.0, 89.3125], [1064.0, 614.8749999999999], [1065.0, 590.5714285714286], [1066.0, 589.0434782608695], [1067.0, 585.0], [1068.0, 588.0], [1032.0, 98.62162162162164], [1035.0, 623.0], [1031.0, 627.0], [1029.0, 630.0], [1036.0, 611.0], [1116.0, 606.5], [1093.0, 591.3333333333334], [1089.0, 620.1111111111111], [1088.0, 611.0000000000001], [1119.0, 576.0], [1118.0, 575.5], [1117.0, 142.64102564102566], [1114.0, 630.2857142857143], [1113.0, 616.5], [1115.0, 605.5], [1111.0, 598.25], [1112.0, 602.625], [1109.0, 593.9545454545456], [1108.0, 18.05128205128205], [1110.0, 596.0], [1090.0, 615.0833333333334], [1094.0, 591.3333333333334], [1097.0, 168.41999999999993], [1102.0, 712.0], [1140.0, 20.305555555555557], [1141.0, 656.356725146199], [1149.0, 687.0], [1151.0, 688.0], [1122.0, 579.7777777777778], [1125.0, 621.0], [1124.0, 584.5], [1126.0, 588.5], [1131.0, 601.6], [1135.0, 19.581395348837216], [1130.0, 597.0], [1127.0, 596.3333333333334], [1129.0, 596.0], [1096.0, 592.0], [1105.0, 601.6666666666666], [1106.0, 633.0], [1107.0, 617.0], [1092.0, 584.0], [1091.0, 583.0], [1095.0, 592.0], [1166.0, 696.5], [1153.0, 690.6666666666666], [1161.0, 695.0], [1164.0, 695.5], [1194.0, 667.0399999999998], [1185.0, 659.3333333333334], [1186.0, 20.523809523809526], [1200.0, 120.02100263780204], [1167.0, 13.999999999999998], [1188.0, 660.0], [1193.0, 661.0], [1192.0, 18.288888888888888], [1196.0, 670.6666666666666], [1195.0, 14.727272727272725], [1197.0, 673.4285714285714], [1199.0, 45.51063829787233], [1170.0, 706.3333333333334], [1159.0, 694.0], [1155.0, 23.0], [1156.0, 22.0], [1160.0, 695.5], [1173.0, 704.0], [1175.0, 696.0], [1179.0, 163.74074074074073], [1181.0, 657.0], [1152.0, 24.275862068965523], [1178.0, 693.0], [1174.0, 706.0], [1169.0, 704.0]], "isOverall": false, "label": "AuthzUser", "isController": false}, {"data": [[1191.22848459284, 125.30904307588777]], "isOverall": false, "label": "AuthzUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 26427.75, "minX": 1.63912296E12, "maxY": 8059093.2, "series": [{"data": [[1.6391232E12, 7843017.8], [1.63912386E12, 1264101.0], [1.63912326E12, 7903859.733333333], [1.63912356E12, 8059093.2], [1.63912296E12, 7314079.066666666], [1.63912362E12, 7871907.733333333], [1.63912302E12, 7968961.933333334], [1.63912332E12, 7938474.4], [1.63912338E12, 7964568.533333333], [1.63912368E12, 7890413.266666667], [1.63912308E12, 7933015.933333334], [1.63912374E12, 7876567.4], [1.63912314E12, 7955249.2], [1.63912344E12, 7800814.533333333], [1.6391235E12, 8019419.466666667], [1.6391238E12, 8027008.066666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6391232E12, 163968.95], [1.63912386E12, 26427.75], [1.63912326E12, 165240.93333333332], [1.63912356E12, 168486.3], [1.63912296E12, 151810.03333333333], [1.63912362E12, 164572.93333333332], [1.63912302E12, 165850.96666666667], [1.63912332E12, 165964.6], [1.63912338E12, 166510.13333333333], [1.63912368E12, 164959.81666666668], [1.63912308E12, 165850.48333333334], [1.63912374E12, 164670.35], [1.63912314E12, 166315.3], [1.63912344E12, 163086.63333333333], [1.6391235E12, 167656.86666666667], [1.6391238E12, 167815.51666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912386E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 55.40853080568716, "minX": 1.63912296E12, "maxY": 295.48441879937786, "series": [{"data": [[1.6391232E12, 118.67620648096225], [1.63912386E12, 55.40853080568716], [1.63912326E12, 101.4396644657057], [1.63912356E12, 127.97720289424218], [1.63912296E12, 295.48441879937786], [1.63912362E12, 80.4105330807726], [1.63912302E12, 113.6092186377533], [1.63912332E12, 92.59064533440718], [1.63912338E12, 120.036858117143], [1.63912368E12, 123.36079099667623], [1.63912308E12, 104.14612247637956], [1.63912374E12, 121.91073813024975], [1.63912314E12, 142.2777219935046], [1.63912344E12, 126.69932074956597], [1.6391235E12, 112.18178497908069], [1.6391238E12, 122.90765097109036]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912386E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 55.29531332280164, "minX": 1.63912296E12, "maxY": 293.15142524300165, "series": [{"data": [[1.6391232E12, 118.544770925634], [1.63912386E12, 55.29531332280164], [1.63912326E12, 101.31451286888581], [1.63912356E12, 127.8664386956086], [1.63912296E12, 293.15142524300165], [1.63912362E12, 80.29285617643022], [1.63912302E12, 113.49513005997666], [1.63912332E12, 92.48016032736226], [1.63912338E12, 119.92887469911783], [1.63912368E12, 123.23756896755229], [1.63912308E12, 104.02539144444326], [1.63912374E12, 121.78733329952868], [1.63912314E12, 142.15813167319345], [1.63912344E12, 126.58391644195822], [1.6391235E12, 112.0659074307715], [1.6391238E12, 122.78645945632209]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912386E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63912296E12, "maxY": 71.21580690960681, "series": [{"data": [[1.6391232E12, 0.41170579348508646], [1.63912386E12, 0.0], [1.63912326E12, 0.31137986794232253], [1.63912356E12, 0.26867545511613333], [1.63912296E12, 71.21580690960681], [1.63912362E12, 0.2834697605195548], [1.63912302E12, 0.3494495213592438], [1.63912332E12, 0.286610317300599], [1.63912338E12, 0.2785671302487319], [1.63912368E12, 0.26896924089290525], [1.63912308E12, 0.37117156426737224], [1.63912374E12, 0.3342291634974526], [1.63912314E12, 0.2857883991029901], [1.63912344E12, 0.3308871215482887], [1.6391235E12, 0.3263330898466098], [1.6391238E12, 0.29376544540825533]], "isOverall": false, "label": "AuthzUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912386E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.63912296E12, "maxY": 10611.0, "series": [{"data": [[1.6391232E12, 567.0], [1.63912386E12, 319.0], [1.63912326E12, 593.0], [1.63912356E12, 610.0], [1.63912296E12, 10611.0], [1.63912362E12, 699.0], [1.63912302E12, 644.0], [1.63912332E12, 560.0], [1.63912338E12, 723.0], [1.63912368E12, 648.0], [1.63912308E12, 620.0], [1.63912374E12, 616.0], [1.63912314E12, 630.0], [1.63912344E12, 651.0], [1.6391235E12, 601.0], [1.6391238E12, 675.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6391232E12, 449.0], [1.63912386E12, 288.0], [1.63912326E12, 527.0], [1.63912356E12, 552.0], [1.63912296E12, 655.0], [1.63912362E12, 491.0], [1.63912302E12, 526.9900000000016], [1.63912332E12, 488.9900000000016], [1.63912338E12, 651.0], [1.63912368E12, 602.0], [1.63912308E12, 454.0], [1.63912374E12, 528.0], [1.63912314E12, 509.0], [1.63912344E12, 544.9900000000016], [1.6391235E12, 458.0], [1.6391238E12, 554.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6391232E12, 483.9994727325429], [1.63912386E12, 319.0], [1.63912326E12, 589.0], [1.63912356E12, 608.9994727325429], [1.63912296E12, 708.0], [1.63912362E12, 550.0], [1.63912302E12, 578.9989454650859], [1.63912332E12, 539.9994727325429], [1.63912338E12, 721.9989454650859], [1.63912368E12, 647.9984181976288], [1.63912308E12, 519.993145523058], [1.63912374E12, 580.0], [1.63912314E12, 552.9994727325429], [1.63912344E12, 578.0], [1.6391235E12, 503.0], [1.6391238E12, 604.9994727325429]], "isOverall": false, "label": "99.99th percentile", "isController": false}, {"data": [[1.6391232E12, 478.0], [1.63912386E12, 315.0], [1.63912326E12, 579.9986103820775], [1.63912356E12, 602.9993051910387], [1.63912296E12, 700.0], [1.63912362E12, 544.9993051910387], [1.63912302E12, 567.0], [1.63912332E12, 527.9986103820775], [1.63912338E12, 718.0], [1.63912368E12, 642.0], [1.63912308E12, 498.99930519103873], [1.63912374E12, 573.9993051910387], [1.63912314E12, 541.9993051910387], [1.63912344E12, 562.9993051910387], [1.6391235E12, 496.0], [1.6391238E12, 599.0]], "isOverall": false, "label": "99.9th percentile", "isController": false}, {"data": [[1.6391232E12, 5.0], [1.63912386E12, 5.0], [1.63912326E12, 4.0], [1.63912356E12, 5.0], [1.63912296E12, 5.0], [1.63912362E12, 5.0], [1.63912302E12, 4.0], [1.63912332E12, 5.0], [1.63912338E12, 4.0], [1.63912368E12, 4.0], [1.63912308E12, 5.0], [1.63912374E12, 4.0], [1.63912314E12, 5.0], [1.63912344E12, 5.0], [1.6391235E12, 4.0], [1.6391238E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6391232E12, 30.0], [1.63912386E12, 26.0], [1.63912326E12, 30.0], [1.63912356E12, 30.0], [1.63912296E12, 32.0], [1.63912362E12, 26.0], [1.63912302E12, 27.0], [1.63912332E12, 27.0], [1.63912338E12, 31.0], [1.63912368E12, 32.0], [1.63912308E12, 26.0], [1.63912374E12, 30.0], [1.63912314E12, 32.0], [1.63912344E12, 31.0], [1.6391235E12, 25.0], [1.6391238E12, 29.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912386E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 6585.0, "series": [{"data": [[7.0, 12.0], [19.0, 13.0], [20.0, 29.5], [21.0, 13.0], [22.0, 13.5], [36.0, 6585.0], [39.0, 16.0], [41.0, 22.0], [45.0, 22.0], [44.0, 25.5], [46.0, 21.0], [49.0, 26.0], [51.0, 23.0], [52.0, 25.5], [57.0, 21.0], [61.0, 46.0], [64.0, 20.5], [66.0, 20.0], [71.0, 18.0], [70.0, 21.0], [69.0, 21.0], [73.0, 16.0], [79.0, 32.0], [77.0, 19.0], [78.0, 21.0], [81.0, 21.0], [80.0, 23.0], [87.0, 35.0], [88.0, 27.0], [96.0, 30.0], [103.0, 49.0], [101.0, 23.0], [104.0, 25.0], [107.0, 24.0], [109.0, 23.0], [114.0, 32.5], [113.0, 46.0], [116.0, 17.0], [118.0, 44.0], [120.0, 71.0], [127.0, 76.0], [131.0, 26.0], [128.0, 13.0], [139.0, 67.0], [144.0, 21.0], [146.0, 22.0], [156.0, 114.0], [169.0, 80.0], [180.0, 76.0], [179.0, 66.0], [176.0, 79.5], [178.0, 64.5], [188.0, 113.0], [187.0, 73.0], [194.0, 216.0], [193.0, 22.0], [207.0, 82.0], [221.0, 93.0], [217.0, 23.0], [226.0, 136.5], [224.0, 105.0], [228.0, 27.0], [237.0, 22.0], [235.0, 23.0], [244.0, 23.0], [245.0, 22.0], [253.0, 97.0], [248.0, 23.0], [254.0, 23.0], [266.0, 26.0], [265.0, 26.0], [275.0, 113.0], [273.0, 23.0], [282.0, 25.0], [279.0, 22.0], [299.0, 22.0], [293.0, 22.0], [301.0, 23.0], [307.0, 24.0], [318.0, 22.0], [314.0, 110.0], [316.0, 114.5], [315.0, 52.0], [322.0, 26.0], [335.0, 25.0], [334.0, 21.0], [321.0, 22.0], [327.0, 26.0], [347.0, 30.0], [342.0, 24.0], [350.0, 26.0], [346.0, 151.0], [348.0, 30.0], [341.0, 102.0], [339.0, 28.0], [381.0, 23.0], [379.0, 24.0], [392.0, 22.0], [399.0, 23.0], [403.0, 26.0], [402.0, 193.0], [416.0, 22.0], [424.0, 23.0], [434.0, 23.0], [464.0, 174.0], [474.0, 125.0], [471.0, 23.0], [482.0, 144.0], [486.0, 25.0], [488.0, 167.0], [505.0, 189.0], [513.0, 23.0], [543.0, 23.0], [522.0, 23.0], [521.0, 22.0], [530.0, 24.0], [548.0, 23.0], [570.0, 51.0], [560.0, 158.0], [554.0, 179.5], [571.0, 22.0], [575.0, 23.0], [553.0, 173.0], [598.0, 191.0], [585.0, 161.0], [578.0, 25.0], [597.0, 63.0], [627.0, 321.0], [612.0, 203.5], [630.0, 22.0], [620.0, 23.0], [635.0, 18.0], [640.0, 187.0], [664.0, 24.0], [646.0, 22.0], [653.0, 24.0], [687.0, 39.0], [689.0, 23.0], [681.0, 21.0], [684.0, 23.0], [701.0, 245.0], [703.0, 24.0], [683.0, 24.0], [729.0, 23.0], [715.0, 22.0], [726.0, 23.0], [723.0, 22.0], [728.0, 23.0], [719.0, 22.0], [716.0, 23.0], [711.0, 23.0], [710.0, 23.0], [738.0, 23.0], [766.0, 22.0], [745.0, 171.0], [759.0, 22.0], [755.0, 23.0], [756.0, 24.0], [744.0, 22.0], [749.0, 22.0], [741.0, 22.0], [742.0, 24.0], [764.0, 20.0], [790.0, 46.0], [792.0, 91.0], [788.0, 30.0], [791.0, 22.0], [770.0, 21.0], [771.0, 22.0], [778.0, 22.0], [815.0, 300.0], [830.0, 23.0], [829.0, 26.0], [820.0, 21.0], [804.0, 23.0], [812.0, 21.0], [808.0, 23.0], [823.0, 23.0], [833.0, 278.0], [863.0, 22.0], [860.0, 184.5], [852.0, 245.0], [837.0, 22.0], [857.0, 23.0], [850.0, 24.0], [868.0, 21.0], [893.0, 272.5], [871.0, 248.0], [889.0, 23.0], [875.0, 23.0], [878.0, 24.0], [864.0, 22.0], [873.0, 22.0], [888.0, 23.0], [874.0, 23.0], [922.0, 205.5], [915.0, 23.0], [903.0, 245.0], [917.0, 24.0], [914.0, 24.0], [919.0, 23.0], [896.0, 23.0], [901.0, 25.0], [921.0, 21.0], [940.0, 34.0], [944.0, 22.0], [941.0, 24.0], [953.0, 22.0], [954.0, 227.0], [932.0, 265.5], [949.0, 22.0], [942.0, 22.0], [986.0, 22.0], [974.0, 29.0], [988.0, 23.0], [989.0, 23.0], [987.0, 23.0], [990.0, 23.0], [982.0, 23.0], [983.0, 23.0], [985.0, 23.0], [984.0, 22.0], [977.0, 23.0], [978.0, 25.0], [981.0, 23.0], [980.0, 23.0], [979.0, 23.0], [991.0, 23.0], [976.0, 23.0], [973.0, 23.0], [968.0, 22.0], [967.0, 22.0], [964.0, 23.0], [966.0, 24.0], [961.0, 35.0], [975.0, 23.0], [963.0, 24.0], [996.0, 23.0], [998.0, 23.0], [1020.0, 197.0], [1023.0, 23.0], [1019.0, 21.0], [999.0, 23.0], [1016.0, 23.0], [997.0, 23.0], [994.0, 23.0], [1003.0, 24.0], [1004.0, 23.0], [1001.0, 24.0], [1000.0, 22.0], [1002.0, 23.0], [1008.0, 23.0], [1005.0, 23.0], [1007.0, 23.0], [1006.0, 23.0], [992.0, 23.0], [993.0, 23.0], [1010.0, 23.0], [1012.0, 22.0], [1013.0, 23.0], [1011.0, 22.0], [1009.0, 23.0], [995.0, 23.0], [1086.0, 25.0], [1061.0, 283.0], [1054.0, 278.0], [1068.0, 53.0], [1027.0, 24.0], [1059.0, 24.0], [1044.0, 124.5], [1034.0, 21.0], [1035.0, 23.0], [1064.0, 23.0], [1116.0, 882.0], [1128.0, 655.0], [1111.0, 27.0], [1095.0, 286.0], [1094.0, 25.0], [1132.0, 87.0], [1135.0, 280.0], [1125.0, 181.0], [1148.0, 132.0], [1145.0, 27.0], [1141.0, 488.0], [1109.0, 26.0], [1102.0, 168.0], [1107.0, 157.0], [1104.0, 24.0], [1210.0, 27.0], [1158.0, 27.0], [1156.0, 30.0], [1211.0, 28.0], [1169.0, 27.0], [1179.0, 26.0], [1200.0, 27.0], [1193.0, 27.0], [1159.0, 286.0], [1165.0, 28.0], [1198.0, 286.0], [1197.0, 29.0], [1270.0, 228.0], [1246.0, 550.0], [1253.0, 27.0], [1256.0, 52.0], [1259.0, 29.0], [1249.0, 284.0], [1231.0, 28.0], [1226.0, 28.0], [1267.0, 34.0], [1224.0, 28.0], [1242.0, 29.0], [1295.0, 28.0], [1333.0, 39.0], [1319.0, 239.0], [1337.0, 29.0], [1298.0, 30.0], [1286.0, 28.0], [1315.0, 107.0], [1330.0, 29.0], [1293.0, 30.0], [1289.0, 32.0], [1395.0, 706.0], [1377.0, 37.0], [1398.0, 33.0], [1351.0, 159.0], [1374.0, 364.0], [1383.0, 379.0], [1360.0, 31.0], [1370.0, 312.5], [1467.0, 64.0], [1440.0, 37.0], [1433.0, 225.0], [1446.0, 36.0], [1422.0, 38.0], [1414.0, 37.0], [1413.0, 34.0], [1410.0, 314.0], [1431.0, 32.0], [1445.0, 333.0], [1428.0, 154.0], [1468.0, 302.0], [1512.0, 253.0], [1482.0, 324.5], [1531.0, 305.0], [1516.0, 322.5], [1525.0, 54.0], [1472.0, 253.0], [1509.0, 80.0], [1480.0, 260.0], [1585.0, 121.0], [1593.0, 90.0], [1594.0, 89.0], [1591.0, 393.0], [1571.0, 136.0], [1568.0, 79.5], [1542.0, 90.0], [1546.0, 360.0], [1551.0, 118.5], [1577.0, 357.0], [1580.0, 310.0], [1536.0, 53.0], [1540.0, 298.0], [1563.0, 146.0], [1545.0, 99.0], [1602.0, 281.0], [1642.0, 137.5], [1624.0, 394.0], [1630.0, 94.0], [1620.0, 216.0], [1647.0, 156.0], [1658.0, 250.5], [1621.0, 140.0], [1662.0, 123.5], [1719.0, 318.0], [1670.0, 238.5], [1714.0, 276.0], [1682.0, 174.5], [1725.0, 304.0], [1679.0, 162.0], [1702.0, 171.0], [1708.0, 365.0], [1727.0, 362.0], [1687.0, 335.0], [1718.0, 198.0], [1767.0, 583.0], [1742.0, 481.0], [1768.0, 302.5], [1749.0, 269.0], [1771.0, 249.0], [1739.0, 348.0], [1787.0, 311.0], [1804.0, 194.5], [1845.0, 431.0], [1825.0, 152.0], [1830.0, 274.0], [1846.0, 303.0], [1802.0, 361.0], [1844.0, 296.0], [1822.0, 294.0], [1809.0, 398.0], [1795.0, 401.0], [1800.0, 195.5], [1819.0, 250.0], [1905.0, 263.0], [1904.0, 312.0], [1894.0, 294.0], [1862.0, 342.0], [1915.0, 236.0], [1917.0, 236.0], [1907.0, 282.0], [1918.0, 386.0], [1888.0, 297.0], [1892.0, 347.0], [1869.0, 267.0], [1882.0, 269.0], [1859.0, 238.0], [1880.0, 289.0], [1874.0, 425.5], [1868.0, 230.0], [1867.0, 363.0], [1899.0, 208.0], [1902.0, 285.0], [1896.0, 309.0], [1928.0, 310.0], [1922.0, 423.0], [1955.0, 353.0], [1956.0, 266.0], [1937.0, 187.0], [1950.0, 228.0], [1975.0, 265.0], [1930.0, 378.0], [1948.0, 258.0], [1923.0, 208.0], [2016.0, 227.0], [2017.0, 259.0], [2032.0, 316.0], [1994.0, 222.0], [2029.0, 284.0], [1993.0, 340.0], [2021.0, 196.0], [2024.0, 281.0], [2046.0, 223.0], [2052.0, 208.0], [2164.0, 279.0], [2122.0, 308.5], [2114.0, 291.0], [2118.0, 362.0], [2120.0, 223.0], [2152.0, 301.0], [2058.0, 285.0], [2070.0, 130.0], [2160.0, 297.0], [2110.0, 241.0], [2108.0, 271.0], [2104.0, 261.0], [2100.0, 307.0], [2086.0, 263.5], [2048.0, 326.0], [2173.0, 280.0], [2059.0, 305.0], [2077.0, 284.0], [2073.0, 236.0], [2061.0, 328.0], [2069.0, 280.0], [2119.0, 279.0], [2169.0, 350.0], [2117.0, 247.0], [2145.0, 292.0], [2129.0, 218.0], [2137.0, 326.0], [2133.0, 268.0], [2125.0, 261.0], [2121.0, 324.0], [2111.0, 315.0], [2107.0, 231.0], [2109.0, 298.0], [2087.0, 243.0], [2085.0, 288.0], [2105.0, 247.0], [2093.0, 178.0], [2203.0, 300.0], [2181.0, 302.0], [1.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2203.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 6188.5, "series": [{"data": [[7.0, 12.0], [19.0, 13.0], [20.0, 29.5], [21.0, 13.0], [22.0, 13.5], [36.0, 6188.5], [39.0, 16.0], [41.0, 22.0], [45.0, 22.0], [44.0, 25.5], [46.0, 21.0], [49.0, 26.0], [51.0, 23.0], [52.0, 25.0], [57.0, 21.0], [61.0, 46.0], [64.0, 20.5], [66.0, 19.5], [71.0, 18.0], [70.0, 20.5], [69.0, 21.0], [73.0, 16.0], [79.0, 32.0], [77.0, 18.0], [78.0, 21.0], [81.0, 21.0], [80.0, 23.0], [87.0, 35.0], [88.0, 27.0], [96.0, 30.0], [103.0, 49.0], [101.0, 23.0], [104.0, 25.0], [107.0, 24.0], [109.0, 23.0], [114.0, 32.0], [113.0, 46.0], [116.0, 16.5], [118.0, 44.0], [120.0, 71.0], [127.0, 75.0], [131.0, 26.0], [128.0, 13.0], [139.0, 67.0], [144.0, 21.0], [146.0, 22.0], [156.0, 114.0], [169.0, 79.0], [180.0, 76.0], [179.0, 66.0], [176.0, 79.5], [178.0, 64.5], [188.0, 113.0], [187.0, 73.0], [194.0, 113.5], [193.0, 22.0], [207.0, 82.0], [221.0, 93.0], [217.0, 23.0], [226.0, 93.5], [224.0, 105.0], [228.0, 27.0], [237.0, 22.0], [235.0, 23.0], [244.0, 23.0], [245.0, 22.0], [253.0, 96.0], [248.0, 22.5], [254.0, 23.0], [266.0, 26.0], [265.0, 25.0], [275.0, 112.0], [273.0, 23.0], [282.0, 25.0], [279.0, 22.0], [299.0, 22.0], [293.0, 22.0], [301.0, 23.0], [307.0, 24.0], [318.0, 22.0], [314.0, 110.0], [316.0, 114.5], [315.0, 50.0], [322.0, 26.0], [335.0, 25.0], [334.0, 20.0], [321.0, 22.0], [327.0, 26.0], [347.0, 29.0], [342.0, 24.0], [350.0, 25.0], [346.0, 151.0], [348.0, 29.0], [341.0, 102.0], [339.0, 27.0], [381.0, 23.0], [379.0, 24.0], [392.0, 22.0], [399.0, 23.0], [403.0, 26.0], [402.0, 193.0], [416.0, 22.0], [424.0, 23.0], [434.0, 23.0], [464.0, 174.0], [474.0, 124.5], [471.0, 23.0], [482.0, 144.0], [486.0, 25.0], [488.0, 167.0], [505.0, 189.0], [513.0, 23.0], [543.0, 23.0], [522.0, 23.0], [521.0, 22.0], [530.0, 24.0], [548.0, 23.0], [570.0, 51.0], [560.0, 158.0], [554.0, 179.0], [571.0, 22.0], [575.0, 23.0], [553.0, 173.0], [598.0, 137.0], [585.0, 161.0], [578.0, 24.0], [597.0, 63.0], [627.0, 321.0], [612.0, 203.5], [630.0, 21.0], [620.0, 23.0], [635.0, 18.0], [640.0, 187.0], [664.0, 24.0], [646.0, 22.0], [653.0, 23.0], [687.0, 38.5], [689.0, 23.0], [681.0, 21.0], [684.0, 22.0], [701.0, 245.0], [703.0, 24.0], [683.0, 24.0], [729.0, 23.0], [715.0, 22.0], [726.0, 23.0], [723.0, 22.0], [728.0, 23.0], [719.0, 22.0], [716.0, 23.0], [711.0, 22.0], [710.0, 23.0], [738.0, 23.0], [766.0, 22.0], [745.0, 171.0], [759.0, 22.0], [755.0, 23.0], [756.0, 24.0], [744.0, 22.0], [749.0, 22.0], [741.0, 22.0], [742.0, 24.0], [764.0, 20.0], [790.0, 45.0], [792.0, 91.0], [788.0, 29.0], [791.0, 21.0], [770.0, 21.0], [771.0, 22.0], [778.0, 22.0], [815.0, 300.0], [830.0, 23.0], [829.0, 26.0], [820.0, 21.0], [804.0, 22.0], [812.0, 21.0], [808.0, 23.0], [823.0, 23.0], [833.0, 278.0], [863.0, 22.0], [860.0, 184.0], [852.0, 245.0], [837.0, 22.0], [857.0, 23.0], [850.0, 23.0], [868.0, 21.0], [893.0, 272.0], [871.0, 248.0], [889.0, 23.0], [875.0, 23.0], [878.0, 23.0], [864.0, 22.0], [873.0, 22.0], [888.0, 23.0], [874.0, 23.0], [922.0, 205.5], [915.0, 23.0], [903.0, 245.0], [917.0, 24.0], [914.0, 24.0], [919.0, 22.0], [896.0, 23.0], [901.0, 25.0], [921.0, 21.0], [940.0, 34.0], [944.0, 22.0], [941.0, 24.0], [953.0, 22.0], [954.0, 227.0], [932.0, 265.5], [949.0, 22.0], [942.0, 22.0], [986.0, 22.0], [974.0, 29.0], [988.0, 22.0], [989.0, 23.0], [987.0, 22.0], [990.0, 23.0], [982.0, 23.0], [983.0, 23.0], [985.0, 23.0], [984.0, 22.0], [977.0, 23.0], [978.0, 25.0], [981.0, 23.0], [980.0, 23.0], [979.0, 23.0], [991.0, 23.0], [976.0, 22.5], [973.0, 23.0], [968.0, 22.0], [967.0, 22.0], [964.0, 23.0], [966.0, 24.0], [961.0, 35.0], [975.0, 23.0], [963.0, 24.0], [996.0, 23.0], [998.0, 23.0], [1020.0, 197.0], [1023.0, 23.0], [1019.0, 21.0], [999.0, 23.0], [1016.0, 23.0], [997.0, 23.0], [994.0, 23.0], [1003.0, 24.0], [1004.0, 23.0], [1001.0, 23.0], [1000.0, 22.0], [1002.0, 23.0], [1008.0, 23.0], [1005.0, 23.0], [1007.0, 23.0], [1006.0, 23.0], [992.0, 23.0], [993.0, 23.0], [1010.0, 23.0], [1012.0, 22.0], [1013.0, 23.0], [1011.0, 22.0], [1009.0, 23.0], [995.0, 23.0], [1086.0, 25.0], [1061.0, 283.0], [1054.0, 278.0], [1068.0, 53.0], [1027.0, 24.0], [1059.0, 24.0], [1044.0, 124.0], [1034.0, 21.0], [1035.0, 23.0], [1064.0, 23.0], [1116.0, 881.5], [1128.0, 655.0], [1111.0, 26.0], [1095.0, 285.0], [1094.0, 25.0], [1132.0, 87.0], [1135.0, 279.0], [1125.0, 181.0], [1148.0, 131.0], [1145.0, 27.0], [1141.0, 488.0], [1109.0, 26.0], [1102.0, 168.0], [1107.0, 157.0], [1104.0, 24.0], [1210.0, 27.0], [1158.0, 27.0], [1156.0, 29.0], [1211.0, 28.0], [1169.0, 27.0], [1179.0, 26.0], [1200.0, 27.0], [1193.0, 27.0], [1159.0, 286.0], [1165.0, 28.0], [1198.0, 285.5], [1197.0, 29.0], [1270.0, 228.0], [1246.0, 549.5], [1253.0, 27.0], [1256.0, 52.0], [1259.0, 29.0], [1249.0, 284.0], [1231.0, 28.0], [1226.0, 28.0], [1267.0, 34.0], [1224.0, 28.0], [1242.0, 29.0], [1295.0, 28.0], [1333.0, 39.0], [1319.0, 239.0], [1337.0, 29.0], [1298.0, 30.0], [1286.0, 28.0], [1315.0, 106.0], [1330.0, 29.0], [1293.0, 29.0], [1289.0, 31.0], [1395.0, 706.0], [1377.0, 37.0], [1398.0, 33.0], [1351.0, 159.0], [1374.0, 364.0], [1383.0, 379.0], [1360.0, 31.0], [1370.0, 312.0], [1467.0, 64.0], [1440.0, 37.0], [1433.0, 225.0], [1446.0, 36.0], [1422.0, 37.0], [1414.0, 37.0], [1413.0, 34.0], [1410.0, 313.5], [1431.0, 32.0], [1445.0, 332.0], [1428.0, 153.5], [1468.0, 302.0], [1512.0, 253.0], [1482.0, 324.0], [1531.0, 305.0], [1516.0, 322.5], [1525.0, 54.0], [1472.0, 253.0], [1509.0, 80.0], [1480.0, 259.0], [1585.0, 120.0], [1593.0, 90.0], [1594.0, 89.0], [1591.0, 393.0], [1571.0, 136.0], [1568.0, 79.5], [1542.0, 90.0], [1546.0, 360.0], [1551.0, 118.5], [1577.0, 357.0], [1580.0, 310.0], [1536.0, 52.5], [1540.0, 297.5], [1563.0, 146.0], [1545.0, 98.0], [1602.0, 280.5], [1642.0, 137.5], [1624.0, 394.0], [1630.0, 93.0], [1620.0, 215.5], [1647.0, 156.0], [1658.0, 250.0], [1621.0, 140.0], [1662.0, 123.5], [1719.0, 318.0], [1670.0, 238.5], [1714.0, 276.0], [1682.0, 174.0], [1725.0, 303.0], [1679.0, 162.0], [1702.0, 171.0], [1708.0, 365.0], [1727.0, 362.0], [1687.0, 335.0], [1718.0, 197.0], [1767.0, 583.0], [1742.0, 480.0], [1768.0, 302.5], [1749.0, 269.0], [1771.0, 249.0], [1739.0, 347.0], [1787.0, 311.0], [1804.0, 194.5], [1845.0, 431.0], [1825.0, 152.0], [1830.0, 274.0], [1846.0, 302.5], [1802.0, 360.0], [1844.0, 296.0], [1822.0, 294.0], [1809.0, 397.0], [1795.0, 401.0], [1800.0, 195.0], [1819.0, 250.0], [1905.0, 263.0], [1904.0, 311.0], [1894.0, 294.0], [1862.0, 341.0], [1915.0, 236.0], [1917.0, 236.0], [1907.0, 281.0], [1918.0, 386.0], [1888.0, 297.0], [1892.0, 347.0], [1869.0, 267.0], [1882.0, 268.0], [1859.0, 238.0], [1880.0, 289.0], [1874.0, 425.0], [1868.0, 229.5], [1867.0, 363.0], [1899.0, 207.0], [1902.0, 284.0], [1896.0, 309.0], [1928.0, 310.0], [1922.0, 423.0], [1955.0, 353.0], [1956.0, 266.0], [1937.0, 187.0], [1950.0, 228.0], [1975.0, 265.0], [1930.0, 377.5], [1948.0, 258.0], [1923.0, 208.0], [2016.0, 226.5], [2017.0, 259.0], [2032.0, 316.0], [1994.0, 222.0], [2029.0, 284.0], [1993.0, 340.0], [2021.0, 196.0], [2024.0, 281.0], [2046.0, 223.0], [2052.0, 207.5], [2164.0, 279.0], [2122.0, 308.0], [2114.0, 291.0], [2118.0, 362.0], [2120.0, 223.0], [2152.0, 301.0], [2058.0, 285.0], [2070.0, 129.5], [2160.0, 297.0], [2110.0, 241.0], [2108.0, 271.0], [2104.0, 261.0], [2100.0, 307.0], [2086.0, 263.5], [2048.0, 326.0], [2173.0, 280.0], [2059.0, 305.0], [2077.0, 283.0], [2073.0, 236.0], [2061.0, 328.0], [2069.0, 280.0], [2119.0, 278.0], [2169.0, 350.0], [2117.0, 247.0], [2145.0, 292.0], [2129.0, 218.0], [2137.0, 326.0], [2133.0, 268.0], [2125.0, 261.0], [2121.0, 323.0], [2111.0, 315.0], [2107.0, 231.0], [2109.0, 298.0], [2087.0, 243.0], [2085.0, 287.0], [2105.0, 247.0], [2093.0, 178.0], [2203.0, 300.0], [2181.0, 302.0], [1.0, 5.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2203.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.183333333333334, "minX": 1.6391229E12, "maxY": 1009.5666666666667, "series": [{"data": [[1.6391229E12, 7.183333333333334], [1.6391232E12, 982.0833333333334], [1.63912386E12, 157.58333333333334], [1.63912326E12, 988.8833333333333], [1.63912356E12, 1009.5666666666667], [1.63912296E12, 909.0333333333333], [1.63912362E12, 984.8], [1.63912302E12, 997.4333333333333], [1.63912332E12, 994.4833333333333], [1.63912338E12, 997.1833333333333], [1.63912368E12, 987.7833333333333], [1.63912308E12, 992.95], [1.63912374E12, 986.05], [1.63912314E12, 996.0166666666667], [1.63912344E12, 995.2], [1.6391235E12, 984.5], [1.6391238E12, 1005.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912386E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 158.25, "minX": 1.63912296E12, "maxY": 1008.9, "series": [{"data": [[1.6391232E12, 981.85], [1.63912386E12, 158.25], [1.63912326E12, 989.4666666666667], [1.63912356E12, 1008.9], [1.63912296E12, 915.6333333333333], [1.63912362E12, 985.4666666666667], [1.63912302E12, 997.6166666666667], [1.63912332E12, 993.8], [1.63912338E12, 997.0666666666667], [1.63912368E12, 987.7833333333333], [1.63912308E12, 993.1166666666667], [1.63912374E12, 986.05], [1.63912314E12, 995.9], [1.63912344E12, 976.5666666666667], [1.6391235E12, 1003.9333333333333], [1.6391238E12, 1004.8833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63912386E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 158.25, "minX": 1.63912296E12, "maxY": 1008.9, "series": [{"data": [[1.6391232E12, 981.85], [1.63912386E12, 158.25], [1.63912326E12, 989.4666666666667], [1.63912356E12, 1008.9], [1.63912296E12, 915.6333333333333], [1.63912362E12, 985.4666666666667], [1.63912302E12, 997.6166666666667], [1.63912332E12, 993.8], [1.63912338E12, 997.0666666666667], [1.63912368E12, 987.7833333333333], [1.63912308E12, 993.1166666666667], [1.63912374E12, 986.05], [1.63912314E12, 995.9], [1.63912344E12, 976.5666666666667], [1.6391235E12, 1003.9333333333333], [1.6391238E12, 1004.8833333333333]], "isOverall": false, "label": "AuthzUser-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912386E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 158.25, "minX": 1.63912296E12, "maxY": 1008.9, "series": [{"data": [[1.6391232E12, 981.85], [1.63912386E12, 158.25], [1.63912326E12, 989.4666666666667], [1.63912356E12, 1008.9], [1.63912296E12, 915.6333333333333], [1.63912362E12, 985.4666666666667], [1.63912302E12, 997.6166666666667], [1.63912332E12, 993.8], [1.63912338E12, 997.0666666666667], [1.63912368E12, 987.7833333333333], [1.63912308E12, 993.1166666666667], [1.63912374E12, 986.05], [1.63912314E12, 995.9], [1.63912344E12, 976.5666666666667], [1.6391235E12, 1003.9333333333333], [1.6391238E12, 1004.8833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63912386E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

