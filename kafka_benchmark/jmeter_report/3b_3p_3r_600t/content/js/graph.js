/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2267.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 11.0], [3.7, 11.0], [3.8, 11.0], [3.9, 11.0], [4.0, 11.0], [4.1, 11.0], [4.2, 12.0], [4.3, 12.0], [4.4, 12.0], [4.5, 12.0], [4.6, 12.0], [4.7, 12.0], [4.8, 12.0], [4.9, 13.0], [5.0, 13.0], [5.1, 13.0], [5.2, 13.0], [5.3, 13.0], [5.4, 13.0], [5.5, 13.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 14.0], [6.3, 14.0], [6.4, 15.0], [6.5, 15.0], [6.6, 15.0], [6.7, 15.0], [6.8, 15.0], [6.9, 15.0], [7.0, 15.0], [7.1, 15.0], [7.2, 15.0], [7.3, 16.0], [7.4, 16.0], [7.5, 16.0], [7.6, 16.0], [7.7, 16.0], [7.8, 16.0], [7.9, 16.0], [8.0, 16.0], [8.1, 16.0], [8.2, 16.0], [8.3, 16.0], [8.4, 17.0], [8.5, 17.0], [8.6, 17.0], [8.7, 17.0], [8.8, 17.0], [8.9, 17.0], [9.0, 17.0], [9.1, 17.0], [9.2, 17.0], [9.3, 17.0], [9.4, 17.0], [9.5, 17.0], [9.6, 17.0], [9.7, 17.0], [9.8, 18.0], [9.9, 18.0], [10.0, 18.0], [10.1, 18.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 18.0], [10.6, 18.0], [10.7, 18.0], [10.8, 18.0], [10.9, 18.0], [11.0, 18.0], [11.1, 18.0], [11.2, 18.0], [11.3, 18.0], [11.4, 18.0], [11.5, 19.0], [11.6, 19.0], [11.7, 19.0], [11.8, 19.0], [11.9, 19.0], [12.0, 19.0], [12.1, 19.0], [12.2, 19.0], [12.3, 19.0], [12.4, 19.0], [12.5, 19.0], [12.6, 19.0], [12.7, 19.0], [12.8, 19.0], [12.9, 19.0], [13.0, 19.0], [13.1, 19.0], [13.2, 19.0], [13.3, 19.0], [13.4, 19.0], [13.5, 19.0], [13.6, 20.0], [13.7, 20.0], [13.8, 20.0], [13.9, 20.0], [14.0, 20.0], [14.1, 20.0], [14.2, 20.0], [14.3, 20.0], [14.4, 20.0], [14.5, 20.0], [14.6, 20.0], [14.7, 20.0], [14.8, 20.0], [14.9, 20.0], [15.0, 20.0], [15.1, 20.0], [15.2, 20.0], [15.3, 20.0], [15.4, 20.0], [15.5, 20.0], [15.6, 20.0], [15.7, 20.0], [15.8, 20.0], [15.9, 20.0], [16.0, 20.0], [16.1, 21.0], [16.2, 21.0], [16.3, 21.0], [16.4, 21.0], [16.5, 21.0], [16.6, 21.0], [16.7, 21.0], [16.8, 21.0], [16.9, 21.0], [17.0, 21.0], [17.1, 21.0], [17.2, 21.0], [17.3, 21.0], [17.4, 21.0], [17.5, 21.0], [17.6, 21.0], [17.7, 21.0], [17.8, 21.0], [17.9, 21.0], [18.0, 21.0], [18.1, 21.0], [18.2, 21.0], [18.3, 21.0], [18.4, 21.0], [18.5, 21.0], [18.6, 21.0], [18.7, 21.0], [18.8, 21.0], [18.9, 21.0], [19.0, 22.0], [19.1, 22.0], [19.2, 22.0], [19.3, 22.0], [19.4, 22.0], [19.5, 22.0], [19.6, 22.0], [19.7, 22.0], [19.8, 22.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 22.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 22.0], [21.8, 22.0], [21.9, 22.0], [22.0, 22.0], [22.1, 22.0], [22.2, 22.0], [22.3, 22.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 23.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 23.0], [23.9, 23.0], [24.0, 23.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 23.0], [24.7, 23.0], [24.8, 23.0], [24.9, 23.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 23.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 24.0], [26.3, 24.0], [26.4, 24.0], [26.5, 24.0], [26.6, 24.0], [26.7, 24.0], [26.8, 24.0], [26.9, 24.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 24.0], [27.4, 24.0], [27.5, 24.0], [27.6, 24.0], [27.7, 24.0], [27.8, 24.0], [27.9, 24.0], [28.0, 24.0], [28.1, 24.0], [28.2, 24.0], [28.3, 24.0], [28.4, 24.0], [28.5, 24.0], [28.6, 24.0], [28.7, 24.0], [28.8, 24.0], [28.9, 24.0], [29.0, 24.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 24.0], [29.7, 24.0], [29.8, 24.0], [29.9, 24.0], [30.0, 24.0], [30.1, 24.0], [30.2, 24.0], [30.3, 25.0], [30.4, 25.0], [30.5, 25.0], [30.6, 25.0], [30.7, 25.0], [30.8, 25.0], [30.9, 25.0], [31.0, 25.0], [31.1, 25.0], [31.2, 25.0], [31.3, 25.0], [31.4, 25.0], [31.5, 25.0], [31.6, 25.0], [31.7, 25.0], [31.8, 25.0], [31.9, 25.0], [32.0, 25.0], [32.1, 25.0], [32.2, 25.0], [32.3, 25.0], [32.4, 25.0], [32.5, 25.0], [32.6, 25.0], [32.7, 25.0], [32.8, 25.0], [32.9, 25.0], [33.0, 25.0], [33.1, 25.0], [33.2, 25.0], [33.3, 25.0], [33.4, 25.0], [33.5, 25.0], [33.6, 25.0], [33.7, 25.0], [33.8, 25.0], [33.9, 25.0], [34.0, 25.0], [34.1, 25.0], [34.2, 25.0], [34.3, 25.0], [34.4, 25.0], [34.5, 25.0], [34.6, 25.0], [34.7, 25.0], [34.8, 26.0], [34.9, 26.0], [35.0, 26.0], [35.1, 26.0], [35.2, 26.0], [35.3, 26.0], [35.4, 26.0], [35.5, 26.0], [35.6, 26.0], [35.7, 26.0], [35.8, 26.0], [35.9, 26.0], [36.0, 26.0], [36.1, 26.0], [36.2, 26.0], [36.3, 26.0], [36.4, 26.0], [36.5, 26.0], [36.6, 26.0], [36.7, 26.0], [36.8, 26.0], [36.9, 26.0], [37.0, 26.0], [37.1, 26.0], [37.2, 26.0], [37.3, 26.0], [37.4, 26.0], [37.5, 26.0], [37.6, 26.0], [37.7, 26.0], [37.8, 26.0], [37.9, 26.0], [38.0, 26.0], [38.1, 26.0], [38.2, 26.0], [38.3, 26.0], [38.4, 26.0], [38.5, 26.0], [38.6, 26.0], [38.7, 26.0], [38.8, 26.0], [38.9, 26.0], [39.0, 26.0], [39.1, 26.0], [39.2, 26.0], [39.3, 26.0], [39.4, 27.0], [39.5, 27.0], [39.6, 27.0], [39.7, 27.0], [39.8, 27.0], [39.9, 27.0], [40.0, 27.0], [40.1, 27.0], [40.2, 27.0], [40.3, 27.0], [40.4, 27.0], [40.5, 27.0], [40.6, 27.0], [40.7, 27.0], [40.8, 27.0], [40.9, 27.0], [41.0, 27.0], [41.1, 27.0], [41.2, 27.0], [41.3, 27.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 27.0], [42.2, 27.0], [42.3, 27.0], [42.4, 27.0], [42.5, 27.0], [42.6, 27.0], [42.7, 27.0], [42.8, 27.0], [42.9, 27.0], [43.0, 27.0], [43.1, 27.0], [43.2, 27.0], [43.3, 27.0], [43.4, 27.0], [43.5, 27.0], [43.6, 27.0], [43.7, 27.0], [43.8, 27.0], [43.9, 27.0], [44.0, 27.0], [44.1, 27.0], [44.2, 28.0], [44.3, 28.0], [44.4, 28.0], [44.5, 28.0], [44.6, 28.0], [44.7, 28.0], [44.8, 28.0], [44.9, 28.0], [45.0, 28.0], [45.1, 28.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 28.0], [45.9, 28.0], [46.0, 28.0], [46.1, 28.0], [46.2, 28.0], [46.3, 28.0], [46.4, 28.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 28.0], [48.8, 28.0], [48.9, 28.0], [49.0, 29.0], [49.1, 29.0], [49.2, 29.0], [49.3, 29.0], [49.4, 29.0], [49.5, 29.0], [49.6, 29.0], [49.7, 29.0], [49.8, 29.0], [49.9, 29.0], [50.0, 29.0], [50.1, 29.0], [50.2, 29.0], [50.3, 29.0], [50.4, 29.0], [50.5, 29.0], [50.6, 29.0], [50.7, 29.0], [50.8, 29.0], [50.9, 29.0], [51.0, 29.0], [51.1, 29.0], [51.2, 29.0], [51.3, 29.0], [51.4, 29.0], [51.5, 29.0], [51.6, 29.0], [51.7, 29.0], [51.8, 29.0], [51.9, 29.0], [52.0, 29.0], [52.1, 29.0], [52.2, 29.0], [52.3, 29.0], [52.4, 29.0], [52.5, 29.0], [52.6, 29.0], [52.7, 29.0], [52.8, 29.0], [52.9, 29.0], [53.0, 29.0], [53.1, 29.0], [53.2, 29.0], [53.3, 29.0], [53.4, 29.0], [53.5, 29.0], [53.6, 29.0], [53.7, 30.0], [53.8, 30.0], [53.9, 30.0], [54.0, 30.0], [54.1, 30.0], [54.2, 30.0], [54.3, 30.0], [54.4, 30.0], [54.5, 30.0], [54.6, 30.0], [54.7, 30.0], [54.8, 30.0], [54.9, 30.0], [55.0, 30.0], [55.1, 30.0], [55.2, 30.0], [55.3, 30.0], [55.4, 30.0], [55.5, 30.0], [55.6, 30.0], [55.7, 30.0], [55.8, 30.0], [55.9, 30.0], [56.0, 30.0], [56.1, 30.0], [56.2, 30.0], [56.3, 30.0], [56.4, 30.0], [56.5, 30.0], [56.6, 30.0], [56.7, 30.0], [56.8, 30.0], [56.9, 30.0], [57.0, 30.0], [57.1, 30.0], [57.2, 30.0], [57.3, 30.0], [57.4, 30.0], [57.5, 30.0], [57.6, 30.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 30.0], [58.2, 30.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 31.0], [59.7, 31.0], [59.8, 31.0], [59.9, 31.0], [60.0, 31.0], [60.1, 31.0], [60.2, 31.0], [60.3, 31.0], [60.4, 31.0], [60.5, 31.0], [60.6, 31.0], [60.7, 31.0], [60.8, 31.0], [60.9, 31.0], [61.0, 31.0], [61.1, 31.0], [61.2, 31.0], [61.3, 31.0], [61.4, 31.0], [61.5, 31.0], [61.6, 31.0], [61.7, 31.0], [61.8, 31.0], [61.9, 31.0], [62.0, 31.0], [62.1, 31.0], [62.2, 31.0], [62.3, 31.0], [62.4, 31.0], [62.5, 31.0], [62.6, 32.0], [62.7, 32.0], [62.8, 32.0], [62.9, 32.0], [63.0, 32.0], [63.1, 32.0], [63.2, 32.0], [63.3, 32.0], [63.4, 32.0], [63.5, 32.0], [63.6, 32.0], [63.7, 32.0], [63.8, 32.0], [63.9, 32.0], [64.0, 32.0], [64.1, 32.0], [64.2, 32.0], [64.3, 32.0], [64.4, 32.0], [64.5, 32.0], [64.6, 32.0], [64.7, 32.0], [64.8, 32.0], [64.9, 32.0], [65.0, 32.0], [65.1, 32.0], [65.2, 32.0], [65.3, 32.0], [65.4, 32.0], [65.5, 32.0], [65.6, 32.0], [65.7, 32.0], [65.8, 32.0], [65.9, 32.0], [66.0, 32.0], [66.1, 32.0], [66.2, 32.0], [66.3, 32.0], [66.4, 32.0], [66.5, 32.0], [66.6, 32.0], [66.7, 33.0], [66.8, 33.0], [66.9, 33.0], [67.0, 33.0], [67.1, 33.0], [67.2, 33.0], [67.3, 33.0], [67.4, 33.0], [67.5, 33.0], [67.6, 33.0], [67.7, 33.0], [67.8, 33.0], [67.9, 33.0], [68.0, 33.0], [68.1, 33.0], [68.2, 33.0], [68.3, 33.0], [68.4, 33.0], [68.5, 33.0], [68.6, 33.0], [68.7, 33.0], [68.8, 33.0], [68.9, 33.0], [69.0, 33.0], [69.1, 33.0], [69.2, 33.0], [69.3, 33.0], [69.4, 33.0], [69.5, 33.0], [69.6, 33.0], [69.7, 33.0], [69.8, 33.0], [69.9, 33.0], [70.0, 33.0], [70.1, 33.0], [70.2, 33.0], [70.3, 33.0], [70.4, 34.0], [70.5, 34.0], [70.6, 34.0], [70.7, 34.0], [70.8, 34.0], [70.9, 34.0], [71.0, 34.0], [71.1, 34.0], [71.2, 34.0], [71.3, 34.0], [71.4, 34.0], [71.5, 34.0], [71.6, 34.0], [71.7, 34.0], [71.8, 34.0], [71.9, 34.0], [72.0, 34.0], [72.1, 34.0], [72.2, 34.0], [72.3, 34.0], [72.4, 34.0], [72.5, 34.0], [72.6, 34.0], [72.7, 34.0], [72.8, 34.0], [72.9, 34.0], [73.0, 34.0], [73.1, 34.0], [73.2, 34.0], [73.3, 34.0], [73.4, 34.0], [73.5, 34.0], [73.6, 34.0], [73.7, 35.0], [73.8, 35.0], [73.9, 35.0], [74.0, 35.0], [74.1, 35.0], [74.2, 35.0], [74.3, 35.0], [74.4, 35.0], [74.5, 35.0], [74.6, 35.0], [74.7, 35.0], [74.8, 35.0], [74.9, 35.0], [75.0, 35.0], [75.1, 35.0], [75.2, 35.0], [75.3, 35.0], [75.4, 35.0], [75.5, 35.0], [75.6, 35.0], [75.7, 35.0], [75.8, 35.0], [75.9, 35.0], [76.0, 35.0], [76.1, 35.0], [76.2, 35.0], [76.3, 35.0], [76.4, 35.0], [76.5, 35.0], [76.6, 35.0], [76.7, 36.0], [76.8, 36.0], [76.9, 36.0], [77.0, 36.0], [77.1, 36.0], [77.2, 36.0], [77.3, 36.0], [77.4, 36.0], [77.5, 36.0], [77.6, 36.0], [77.7, 36.0], [77.8, 36.0], [77.9, 36.0], [78.0, 36.0], [78.1, 36.0], [78.2, 36.0], [78.3, 36.0], [78.4, 36.0], [78.5, 36.0], [78.6, 36.0], [78.7, 36.0], [78.8, 36.0], [78.9, 36.0], [79.0, 36.0], [79.1, 36.0], [79.2, 37.0], [79.3, 37.0], [79.4, 37.0], [79.5, 37.0], [79.6, 37.0], [79.7, 37.0], [79.8, 37.0], [79.9, 37.0], [80.0, 37.0], [80.1, 37.0], [80.2, 37.0], [80.3, 37.0], [80.4, 37.0], [80.5, 37.0], [80.6, 37.0], [80.7, 37.0], [80.8, 37.0], [80.9, 37.0], [81.0, 37.0], [81.1, 37.0], [81.2, 37.0], [81.3, 37.0], [81.4, 38.0], [81.5, 38.0], [81.6, 38.0], [81.7, 38.0], [81.8, 38.0], [81.9, 38.0], [82.0, 38.0], [82.1, 38.0], [82.2, 38.0], [82.3, 38.0], [82.4, 38.0], [82.5, 38.0], [82.6, 38.0], [82.7, 38.0], [82.8, 38.0], [82.9, 38.0], [83.0, 38.0], [83.1, 38.0], [83.2, 39.0], [83.3, 39.0], [83.4, 39.0], [83.5, 39.0], [83.6, 39.0], [83.7, 39.0], [83.8, 39.0], [83.9, 39.0], [84.0, 39.0], [84.1, 39.0], [84.2, 39.0], [84.3, 39.0], [84.4, 39.0], [84.5, 39.0], [84.6, 39.0], [84.7, 39.0], [84.8, 40.0], [84.9, 40.0], [85.0, 40.0], [85.1, 40.0], [85.2, 40.0], [85.3, 40.0], [85.4, 40.0], [85.5, 40.0], [85.6, 40.0], [85.7, 40.0], [85.8, 40.0], [85.9, 40.0], [86.0, 40.0], [86.1, 40.0], [86.2, 41.0], [86.3, 41.0], [86.4, 41.0], [86.5, 41.0], [86.6, 41.0], [86.7, 41.0], [86.8, 41.0], [86.9, 41.0], [87.0, 41.0], [87.1, 41.0], [87.2, 41.0], [87.3, 42.0], [87.4, 42.0], [87.5, 42.0], [87.6, 42.0], [87.7, 42.0], [87.8, 42.0], [87.9, 42.0], [88.0, 42.0], [88.1, 42.0], [88.2, 42.0], [88.3, 43.0], [88.4, 43.0], [88.5, 43.0], [88.6, 43.0], [88.7, 43.0], [88.8, 43.0], [88.9, 43.0], [89.0, 43.0], [89.1, 44.0], [89.2, 44.0], [89.3, 44.0], [89.4, 44.0], [89.5, 44.0], [89.6, 44.0], [89.7, 44.0], [89.8, 45.0], [89.9, 45.0], [90.0, 45.0], [90.1, 45.0], [90.2, 45.0], [90.3, 46.0], [90.4, 46.0], [90.5, 46.0], [90.6, 46.0], [90.7, 46.0], [90.8, 47.0], [90.9, 47.0], [91.0, 47.0], [91.1, 47.0], [91.2, 48.0], [91.3, 48.0], [91.4, 48.0], [91.5, 49.0], [91.6, 49.0], [91.7, 49.0], [91.8, 49.0], [91.9, 50.0], [92.0, 50.0], [92.1, 51.0], [92.2, 51.0], [92.3, 51.0], [92.4, 52.0], [92.5, 52.0], [92.6, 53.0], [92.7, 53.0], [92.8, 54.0], [92.9, 55.0], [93.0, 55.0], [93.1, 56.0], [93.2, 57.0], [93.3, 58.0], [93.4, 59.0], [93.5, 60.0], [93.6, 61.0], [93.7, 62.0], [93.8, 64.0], [93.9, 65.0], [94.0, 67.0], [94.1, 69.0], [94.2, 71.0], [94.3, 74.0], [94.4, 76.0], [94.5, 80.0], [94.6, 83.0], [94.7, 89.0], [94.8, 96.0], [94.9, 103.0], [95.0, 112.0], [95.1, 121.0], [95.2, 128.0], [95.3, 137.0], [95.4, 145.0], [95.5, 152.0], [95.6, 160.0], [95.7, 167.0], [95.8, 172.0], [95.9, 178.0], [96.0, 183.0], [96.1, 187.0], [96.2, 193.0], [96.3, 198.0], [96.4, 206.0], [96.5, 213.0], [96.6, 219.0], [96.7, 225.0], [96.8, 231.0], [96.9, 239.0], [97.0, 247.0], [97.1, 255.0], [97.2, 267.0], [97.3, 280.0], [97.4, 295.0], [97.5, 309.0], [97.6, 321.0], [97.7, 333.0], [97.8, 347.0], [97.9, 360.0], [98.0, 373.0], [98.1, 386.0], [98.2, 399.0], [98.3, 411.0], [98.4, 423.0], [98.5, 436.0], [98.6, 449.0], [98.7, 462.0], [98.8, 475.0], [98.9, 489.0], [99.0, 503.0], [99.1, 518.0], [99.2, 534.0], [99.3, 549.0], [99.4, 565.0], [99.5, 586.0], [99.6, 610.0], [99.7, 640.0], [99.8, 685.0], [99.9, 741.0], [100.0, 2267.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 3759823.0, "series": [{"data": [[0.0, 3759823.0], [2100.0, 46.0], [2200.0, 38.0], [600.0, 10721.0], [700.0, 4922.0], [200.0, 44280.0], [800.0, 1147.0], [900.0, 202.0], [1000.0, 9.0], [300.0, 30501.0], [1200.0, 10.0], [1300.0, 35.0], [1400.0, 75.0], [1500.0, 59.0], [100.0, 58168.0], [400.0, 30529.0], [1600.0, 69.0], [1700.0, 80.0], [1800.0, 86.0], [1900.0, 49.0], [500.0, 23005.0], [2000.0, 53.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 477.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3923571.0, "series": [{"data": [[0.0, 3923571.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 39859.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 477.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 537.5542335614286, "minX": 1.62633078E12, "maxY": 600.0, "series": [{"data": [[1.62633096E12, 600.0], [1.62633084E12, 600.0], [1.62633102E12, 600.0], [1.6263309E12, 600.0], [1.62633078E12, 587.261951568072], [1.62633108E12, 537.5542335614286]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62633108E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.0, "maxY": 317.1777777777778, "series": [{"data": [[2.0, 2.333333333333333], [3.0, 1.6666666666666667], [4.0, 1.5714285714285714], [5.0, 1.3333333333333333], [6.0, 1.8], [7.0, 1.5], [8.0, 1.6], [9.0, 1.6666666666666667], [10.0, 1.6428571428571428], [12.0, 1.7692307692307692], [13.0, 1.7727272727272723], [14.0, 1.75], [15.0, 2.0], [16.0, 1.8333333333333333], [17.0, 2.384615384615385], [18.0, 1.833333333333333], [20.0, 2.5454545454545454], [21.0, 2.0], [22.0, 2.7777777777777777], [23.0, 1.8], [24.0, 2.5161290322580645], [25.0, 2.166666666666667], [26.0, 2.533333333333333], [27.0, 4.25], [28.0, 3.8571428571428568], [29.0, 13.5], [30.0, 19.25], [31.0, 3.190476190476191], [33.0, 3.166666666666666], [32.0, 3.0], [35.0, 1.9062499999999996], [34.0, 3.23076923076923], [37.0, 2.4210526315789473], [36.0, 2.3571428571428577], [39.0, 3.333333333333334], [38.0, 2.7142857142857144], [40.0, 2.7894736842105257], [43.0, 2.5555555555555554], [42.0, 2.777777777777778], [45.0, 3.214285714285714], [44.0, 2.705882352941177], [47.0, 2.736842105263158], [46.0, 3.5], [49.0, 2.842105263157895], [48.0, 2.6363636363636362], [51.0, 3.640625000000004], [50.0, 3.125], [53.0, 5.46153846153846], [52.0, 3.6961093585699274], [55.0, 4.411764705882353], [54.0, 4.356617647058825], [57.0, 4.0], [56.0, 4.518072289156625], [59.0, 4.179965307892463], [58.0, 4.603854389721626], [61.0, 15.208333333333334], [60.0, 3.599056603773586], [63.0, 16.0], [62.0, 15.318181818181818], [67.0, 5.282051282051281], [66.0, 5.417763157894736], [65.0, 4.280701754385962], [64.0, 4.936170212765957], [71.0, 7.666666666666665], [70.0, 4.286486486486488], [69.0, 5.585714285714285], [68.0, 5.173333333333332], [74.0, 6.033333333333331], [73.0, 7.1506849315068495], [72.0, 4.577561534058395], [79.0, 32.888888888888886], [78.0, 9.884615384615383], [77.0, 30.6923076923077], [76.0, 13.675675675675675], [83.0, 55.5], [82.0, 37.33333333333333], [81.0, 39.5], [80.0, 22.25], [87.0, 9.240000000000002], [86.0, 31.466666666666665], [85.0, 36.625], [84.0, 37.53333333333333], [91.0, 11.681818181818182], [90.0, 7.0], [89.0, 7.0], [88.0, 6.5], [95.0, 14.433333333333332], [94.0, 12.4], [93.0, 7.700483091787439], [92.0, 4.851851851851851], [99.0, 20.068965517241377], [97.0, 3.0], [96.0, 14.999999999999998], [103.0, 15.075471698113208], [102.0, 2.5], [101.0, 56.333333333333336], [100.0, 42.75], [107.0, 2.213333333333333], [106.0, 3.5], [105.0, 4.432835820895521], [104.0, 1.9999999999999998], [111.0, 68.0], [110.0, 2.0], [109.0, 19.000000000000004], [108.0, 7.000000000000001], [115.0, 6.9], [114.0, 15.2], [113.0, 23.833333333333332], [112.0, 29.961538461538467], [119.0, 7.53398058252427], [118.0, 4.588235294117647], [117.0, 3.262295081967214], [116.0, 6.066666666666667], [123.0, 4.2], [122.0, 5.205882352941175], [121.0, 5.379310344827586], [120.0, 9.40506329113924], [127.0, 8.754068716094045], [126.0, 9.012303485987685], [125.0, 14.200000000000001], [124.0, 7.076923076923077], [135.0, 27.859649122807017], [134.0, 33.75], [133.0, 41.06666666666667], [132.0, 10.782608695652174], [131.0, 22.052631578947366], [130.0, 28.694444444444443], [129.0, 35.75675675675673], [128.0, 10.169096209912537], [143.0, 83.57142857142857], [142.0, 5.0], [141.0, 106.75], [140.0, 84.8], [139.0, 43.689655172413794], [138.0, 12.72727272727273], [137.0, 11.629629629629628], [136.0, 21.88888888888889], [151.0, 8.0], [150.0, 64.99999999999999], [149.0, 59.0], [148.0, 5.0], [147.0, 73.25], [146.0, 27.166666666666668], [145.0, 28.88235294117647], [144.0, 4.0], [159.0, 142.0], [158.0, 142.5], [157.0, 98.66666666666667], [156.0, 141.0], [155.0, 17.0], [153.0, 72.75], [167.0, 21.300000000000004], [166.0, 21.142857142857142], [165.0, 3.8552631578947367], [164.0, 6.41304347826087], [163.0, 14.240000000000002], [161.0, 7.7294117647058815], [160.0, 17.166666666666664], [175.0, 40.375], [174.0, 26.424242424242433], [173.0, 8.000000000000002], [172.0, 12.218750000000002], [171.0, 9.333333333333334], [170.0, 15.846153846153845], [169.0, 19.0], [168.0, 116.0], [183.0, 7.214285714285714], [182.0, 6.615384615384615], [181.0, 6.230769230769231], [180.0, 11.602339181286547], [179.0, 82.33333333333333], [177.0, 26.5], [176.0, 23.956521739130437], [191.0, 21.555555555555557], [190.0, 7.266666666666667], [189.0, 7.666666666666667], [187.0, 8.920000000000003], [186.0, 9.0], [185.0, 14.809523809523807], [184.0, 7.937499999999999], [199.0, 12.4], [198.0, 27.809523809523814], [197.0, 9.0], [196.0, 131.4], [195.0, 132.0], [194.0, 117.66666666666667], [193.0, 9.5], [205.0, 126.0], [204.0, 9.0], [201.0, 6.666666666666667], [200.0, 5.0], [215.0, 11.25], [214.0, 11.0], [213.0, 12.062499999999998], [212.0, 6.347826086956526], [211.0, 4.814814814814815], [210.0, 5.153846153846153], [209.0, 57.47169811320755], [208.0, 107.22222222222223], [223.0, 8.77358490566038], [222.0, 6.199999999999999], [221.0, 7.1499999999999995], [220.0, 6.916666666666667], [219.0, 10.309090909090907], [218.0, 10.142857142857142], [217.0, 38.166666666666664], [216.0, 10.2], [228.0, 110.04104477611939], [229.0, 27.1], [230.0, 21.65], [231.0, 18.714285714285715], [227.0, 20.326530612244895], [226.0, 20.153846153846153], [225.0, 10.333333333333334], [224.0, 7.444444444444445], [232.0, 8.333333333333332], [233.0, 19.210526315789476], [234.0, 22.764705882352942], [235.0, 15.730769230769228], [236.0, 19.272727272727273], [237.0, 28.218750000000004], [238.0, 3.0], [239.0, 45.099999999999994], [245.0, 14.417910447761194], [244.0, 39.31147540983606], [240.0, 57.62068965517242], [246.0, 9.192307692307692], [247.0, 18.617021276595764], [243.0, 132.72222222222223], [241.0, 130.5], [254.0, 26.55469953775038], [253.0, 12.96969696969697], [252.0, 23.874999999999986], [251.0, 15.729166666666664], [249.0, 11.324324324324323], [248.0, 32.86666666666666], [255.0, 23.213243546576884], [250.0, 14.6578947368421], [256.0, 83.05], [262.0, 21.749119097956317], [261.0, 51.43506493506494], [263.0, 22.518745218056626], [260.0, 82.48387096774192], [259.0, 24.06841339155747], [258.0, 111.35483870967738], [257.0, 41.77556818181819], [269.0, 38.80645161290322], [268.0, 31.38931297709923], [270.0, 15.532374100719425], [271.0, 12.494214876033057], [265.0, 21.101953124999984], [264.0, 19.168478260869556], [267.0, 23.371428571428567], [266.0, 28.414585414585407], [273.0, 15.278688524590173], [272.0, 66.72549019607844], [275.0, 39.8051948051948], [276.0, 21.929193899782113], [274.0, 21.583710407239824], [280.0, 18.909854851031287], [287.0, 49.38888888888889], [286.0, 20.4375], [285.0, 94.23076923076924], [284.0, 64.56696428571428], [281.0, 30.045774647887317], [283.0, 21.812760055478492], [282.0, 254.75], [279.0, 21.166666666666654], [278.0, 49.6], [277.0, 26.365384615384613], [288.0, 33.5], [289.0, 30.011942675159226], [294.0, 64.3913043478261], [293.0, 82.74999999999999], [295.0, 54.96256684491978], [292.0, 75.7111111111111], [296.0, 29.176772867420357], [303.0, 17.219008264462804], [300.0, 37.528888888888886], [301.0, 201.98924731182797], [302.0, 19.66620305980528], [297.0, 140.33333333333334], [298.0, 24.634730538922163], [299.0, 31.744795321637437], [291.0, 48.48484848484847], [290.0, 71.58441558441557], [318.0, 303.5333333333333], [319.0, 94.08333333333334], [317.0, 24.566486035848285], [316.0, 15.461956521739138], [307.0, 5.333333333333333], [304.0, 15.813688212927744], [306.0, 7.500000000000001], [305.0, 17.12020905923344], [315.0, 12.444444444444443], [314.0, 6.857142857142855], [313.0, 36.2], [312.0, 31.189189189189186], [311.0, 30.689831748354052], [310.0, 16.411309062742085], [309.0, 20.28571428571429], [308.0, 11.696078431372547], [328.0, 48.46564885496182], [332.0, 25.601136363636332], [333.0, 24.088362068965534], [334.0, 87.65950920245403], [335.0, 61.31092436974788], [331.0, 40.73684210526316], [330.0, 36.041958041958054], [329.0, 27.353535353535325], [327.0, 29.941130298273094], [326.0, 17.068493150684937], [324.0, 16.101449275362313], [325.0, 21.02786624203823], [323.0, 26.842], [322.0, 24.067542213883673], [320.0, 317.1777777777778], [321.0, 73.65566037735849], [339.0, 17.142150123728342], [337.0, 70.72727272727273], [338.0, 24.152380952380945], [336.0, 31.74545454545455], [343.0, 13.428057553956815], [342.0, 19.53373015873017], [340.0, 33.970588235294116], [341.0, 26.85257985257986], [351.0, 16.888888888888893], [345.0, 16.33664459161148], [344.0, 14.338461538461539], [347.0, 12.266666666666667], [346.0, 10.869565217391306], [350.0, 15.814432989690717], [349.0, 18.211488250652746], [348.0, 19.22545454545453], [366.0, 18.714285714285715], [367.0, 15.492957746478876], [365.0, 15.883720930232558], [364.0, 16.03571428571429], [363.0, 16.105263157894736], [362.0, 16.871921182266004], [361.0, 16.11111111111111], [360.0, 15.323529411764705], [359.0, 18.809018567639257], [353.0, 16.736070381231674], [352.0, 19.21040723981902], [355.0, 14.695121951219509], [354.0, 13.764705882352942], [358.0, 16.166666666666668], [357.0, 13.664285714285713], [356.0, 13.66], [382.0, 21.916666666666668], [383.0, 19.436781609195396], [381.0, 17.975206611570247], [380.0, 16.017241379310345], [379.0, 17.658385093167702], [378.0, 29.5], [377.0, 28.625], [376.0, 25.333333333333332], [375.0, 2.6666666666666665], [369.0, 40.608695652173914], [368.0, 20.102941176470594], [371.0, 24.35], [370.0, 30.472727272727276], [374.0, 21.90857142857141], [373.0, 17.590909090909093], [372.0, 21.950980392156858], [387.0, 16.099999999999998], [397.0, 28.25], [398.0, 17.999999999999996], [396.0, 24.666666666666668], [385.0, 33.333333333333336], [384.0, 18.308300395256918], [393.0, 59.0], [392.0, 21.0], [391.0, 19.526315789473685], [390.0, 16.49090909090909], [389.0, 20.0], [388.0, 16.241379310344826], [412.0, 13.115384615384615], [414.0, 14.0], [415.0, 11.578947368421055], [413.0, 12.333333333333334], [410.0, 16.0], [408.0, 14.333333333333334], [406.0, 14.066666666666668], [400.0, 15.428571428571427], [403.0, 19.0], [401.0, 21.642857142857142], [405.0, 14.533333333333333], [404.0, 18.0], [430.0, 17.652173913043477], [431.0, 16.0], [429.0, 20.333333333333332], [428.0, 20.0], [427.0, 18.166666666666664], [426.0, 20.375], [425.0, 24.78571428571429], [424.0, 32.75], [423.0, 22.63888888888889], [418.0, 25.4], [417.0, 6.0], [416.0, 26.5], [421.0, 34.11904761904762], [446.0, 11.999999999999998], [447.0, 7.75], [444.0, 12.5], [435.0, 15.5], [434.0, 15.687499999999998], [433.0, 13.2], [432.0, 19.3], [443.0, 12.4], [441.0, 14.25], [440.0, 13.999999999999998], [439.0, 14.583333333333332], [438.0, 13.576470588235296], [437.0, 15.708661417322835], [436.0, 13.4], [460.0, 197.44444444444446], [456.0, 21.68181818181818], [455.0, 104.60683760683752], [449.0, 11.125], [448.0, 4.0], [451.0, 10.5], [450.0, 13.142857142857142], [454.0, 12.666666666666666], [453.0, 12.64406779661017], [452.0, 11.25], [457.0, 162.41637010676155], [458.0, 182.33333333333331], [459.0, 145.44444444444446], [463.0, 133.63698630136983], [462.0, 12.285714285714286], [461.0, 11.666666666666664], [471.0, 32.39893048128333], [467.0, 51.479452054794514], [466.0, 8.903225806451614], [465.0, 8.837209302325581], [464.0, 9.567567567567565], [476.0, 7.105263157894736], [468.0, 52.276978417266186], [469.0, 13.500000000000002], [470.0, 33.77835051546391], [472.0, 36.64177040110647], [475.0, 8.10294117647059], [473.0, 8.625], [479.0, 9.0], [478.0, 8.6], [477.0, 7.750000000000002], [494.0, 7.888888888888889], [484.0, 57.66666666666667], [486.0, 8.150943396226412], [485.0, 7.470588235294117], [495.0, 7.2857142857142865], [493.0, 7.774193548387098], [483.0, 8.32258064516129], [482.0, 9.652173913043478], [481.0, 7.833333333333333], [480.0, 7.640000000000001], [491.0, 8.5], [490.0, 8.0], [489.0, 7.666666666666667], [488.0, 8.224719101123595], [487.0, 10.272727272727273], [510.0, 3.3157894736842106], [511.0, 3.583333333333333], [509.0, 4.0], [508.0, 3.0], [507.0, 3.5], [506.0, 3.739130434782609], [505.0, 4.3265306122449], [504.0, 5.75], [503.0, 5.0], [496.0, 6.91304347826087], [499.0, 7.0], [497.0, 6.333333333333333], [501.0, 6.0], [500.0, 6.333333333333333], [515.0, 95.0], [524.0, 52.715909090909086], [514.0, 17.666666666666668], [527.0, 33.962962962962976], [513.0, 3.1333333333333337], [516.0, 87.11764705882354], [517.0, 85.1377245508982], [528.0, 30.125], [542.0, 15.857142857142863], [543.0, 13.599264705882351], [540.0, 26.454425363276094], [541.0, 15.463414634146329], [538.0, 60.19148936170211], [539.0, 46.22222222222221], [536.0, 56.64797728885736], [519.0, 2.0], [518.0, 1.5714285714285714], [537.0, 115.74125874125876], [529.0, 31.48275862068967], [530.0, 76.22222222222223], [531.0, 122.0], [532.0, 26.063209076175042], [533.0, 23.842105263157883], [535.0, 78.3076923076923], [534.0, 107.93333333333334], [521.0, 15.749999999999998], [520.0, 2.0], [522.0, 92.22302158273375], [523.0, 263.6500000000001], [525.0, 31.61333333333334], [526.0, 28.321020819341832], [571.0, 230.03125], [544.0, 137.93939393939394], [558.0, 75.27450980392159], [557.0, 80.30864197530862], [556.0, 136.64516129032256], [555.0, 74.6842105263158], [554.0, 87.72727272727272], [553.0, 68.82142857142857], [552.0, 151.66666666666666], [545.0, 13.431535269709537], [575.0, 181.83333333333334], [561.0, 40.166666666666664], [560.0, 5.0], [564.0, 4.0], [562.0, 61.0], [574.0, 188.49999999999997], [573.0, 175.8], [572.0, 214.5], [570.0, 111.25], [569.0, 112.0], [550.0, 62.84444444444444], [568.0, 223.0], [551.0, 141.1333333333333], [549.0, 58.65277777777778], [548.0, 62.08695652173913], [547.0, 57.535714285714306], [546.0, 28.5], [567.0, 3.0], [565.0, 3.0], [592.0, 3.0], [596.0, 84.0958904109589], [597.0, 5.797752808988766], [594.0, 3.6666666666666665], [593.0, 208.13043478260872], [595.0, 219.33333333333334], [591.0, 72.33333333333333], [576.0, 199.73333333333332], [577.0, 211.125], [579.0, 198.1875], [578.0, 164.55555555555554], [581.0, 130.25], [580.0, 77.5], [583.0, 144.3], [600.0, 45.19102952799568], [582.0, 153.0], [590.0, 181.62499999999997], [588.0, 166.0], [587.0, 207.25], [589.0, 224.28571428571428], [586.0, 210.22222222222226], [585.0, 104.0], [584.0, 185.6], [1.0, 1.6666666666666665]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[592.897577062204, 44.74812375769786]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 685327.6333333333, "minX": 1.62633078E12, "maxY": 3371528.183333333, "series": [{"data": [[1.62633096E12, 1540198.3], [1.62633084E12, 1543485.2333333334], [1.62633102E12, 1571344.0333333334], [1.6263309E12, 1547530.75], [1.62633078E12, 1086980.7666666666], [1.62633108E12, 685327.6333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62633096E12, 3304719.1333333333], [1.62633084E12, 3304105.3], [1.62633102E12, 3371528.183333333], [1.6263309E12, 3320431.8], [1.62633078E12, 2321102.85], [1.62633108E12, 1470459.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62633108E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 37.153029680390546, "minX": 1.62633078E12, "maxY": 46.80157581520712, "series": [{"data": [[1.62633096E12, 46.80157581520712], [1.62633084E12, 46.63805110759356], [1.62633102E12, 45.938606924790825], [1.6263309E12, 46.727604353546646], [1.62633078E12, 37.153029680390546], [1.62633108E12, 40.72209060992661]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62633108E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 37.14561791263516, "minX": 1.62633078E12, "maxY": 46.80122183152002, "series": [{"data": [[1.62633096E12, 46.80122183152002], [1.62633084E12, 46.637809972562806], [1.62633102E12, 45.93834957857931], [1.6263309E12, 46.727376847994584], [1.62633078E12, 37.14561791263516], [1.62633108E12, 40.72185869830017]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62633108E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.02448501950581777, "minX": 1.62633078E12, "maxY": 0.15772589787161553, "series": [{"data": [[1.62633096E12, 0.028501564843019224], [1.62633084E12, 0.026582204234851605], [1.62633102E12, 0.02448501950581777], [1.6263309E12, 0.02688335595388628], [1.62633078E12, 0.15772589787161553], [1.62633108E12, 0.02600345812527331]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62633108E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62633078E12, "maxY": 2267.0, "series": [{"data": [[1.62633096E12, 953.0], [1.62633084E12, 993.0], [1.62633102E12, 911.0], [1.6263309E12, 1029.0], [1.62633078E12, 2267.0], [1.62633108E12, 828.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62633096E12, 47.0], [1.62633084E12, 53.0], [1.62633102E12, 43.0], [1.6263309E12, 42.0], [1.62633078E12, 43.0], [1.62633108E12, 13.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62633096E12, 629.0], [1.62633084E12, 569.0], [1.62633102E12, 431.0], [1.6263309E12, 534.0], [1.62633078E12, 476.0], [1.62633108E12, 221.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62633096E12, 233.0], [1.62633084E12, 82.0], [1.62633102E12, 193.0], [1.6263309E12, 185.0], [1.62633078E12, 148.0], [1.62633108E12, 23.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62633096E12, 1.0], [1.62633084E12, 1.0], [1.62633102E12, 1.0], [1.6263309E12, 1.0], [1.62633078E12, 1.0], [1.62633108E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62633096E12, 31.0], [1.62633084E12, 31.0], [1.62633102E12, 28.0], [1.6263309E12, 27.0], [1.62633078E12, 28.0], [1.62633108E12, 5.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62633108E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 493.0, "maxY": 1394.0, "series": [{"data": [[18147.0, 28.0], [20539.0, 25.0], [9477.0, 34.0], [9677.0, 33.0], [9317.0, 9.0], [10017.0, 34.0], [10233.0, 30.0], [10625.0, 33.0], [10681.0, 31.0], [10541.0, 36.0], [10857.0, 35.0], [11145.0, 30.0], [11249.0, 30.0], [10797.0, 30.0], [11693.0, 31.0], [11713.0, 28.0], [11349.0, 31.0], [11741.0, 30.0], [11405.0, 30.0], [11581.0, 31.0], [12237.0, 31.0], [11833.0, 32.0], [11785.0, 32.0], [12105.0, 29.0], [11909.0, 33.0], [12405.0, 11.0], [12373.0, 32.0], [12609.0, 33.0], [12625.0, 27.0], [12793.0, 31.0], [12409.0, 31.0], [12369.0, 29.0], [12377.0, 28.0], [12385.0, 33.0], [12353.0, 30.0], [13045.0, 31.0], [12921.0, 27.0], [13465.0, 28.0], [13605.0, 27.0], [13693.0, 26.0], [13601.0, 26.0], [13721.0, 29.0], [13557.0, 30.0], [13337.0, 26.0], [13669.0, 31.0], [13905.0, 29.0], [14173.0, 30.0], [14125.0, 29.0], [14101.0, 28.0], [13893.0, 29.0], [14245.0, 29.0], [13945.0, 30.0], [13917.0, 27.0], [13881.0, 28.0], [14037.0, 30.0], [13961.0, 29.0], [14365.0, 29.0], [14609.0, 28.0], [14369.0, 28.0], [14517.0, 29.0], [15193.0, 27.0], [15017.0, 28.0], [14861.0, 29.0], [17010.0, 23.0], [18850.0, 24.0], [493.0, 1394.0], [16873.0, 27.0], [1239.0, 3.0], [1306.0, 39.0], [2850.0, 17.5], [8944.0, 32.0], [10124.0, 32.0], [9964.0, 32.0], [10508.0, 31.0], [11096.0, 31.0], [11036.0, 30.0], [10884.0, 33.0], [10888.0, 29.0], [11132.0, 30.0], [11520.0, 29.0], [11320.0, 32.0], [11868.0, 30.0], [12068.0, 31.0], [12112.0, 30.0], [11860.0, 29.0], [11872.0, 29.0], [12184.0, 11.0], [12200.0, 29.0], [12236.0, 28.0], [11904.0, 30.0], [11952.0, 34.0], [11964.0, 29.0], [12004.0, 29.0], [11832.0, 28.0], [12656.0, 33.0], [12420.0, 29.0], [12336.0, 29.0], [12292.0, 30.0], [12480.0, 28.0], [12620.0, 29.0], [12688.0, 27.0], [12756.0, 29.0], [13088.0, 28.0], [13100.0, 25.0], [13300.0, 27.0], [13308.0, 31.0], [13096.0, 31.0], [13176.0, 31.0], [13224.0, 31.0], [12924.0, 32.0], [12856.0, 29.0], [13124.0, 31.0], [13164.0, 25.0], [13788.0, 30.0], [13720.0, 27.0], [13792.0, 29.0], [13456.0, 31.0], [13376.0, 27.0], [13492.0, 29.0], [13664.0, 26.0], [13660.0, 30.0], [13320.0, 4.0], [14152.0, 23.0], [13888.0, 29.0], [14204.0, 29.0], [14240.0, 28.0], [13848.0, 30.0], [14308.0, 28.0], [14816.0, 28.0], [14628.0, 29.0], [14688.0, 28.0], [14656.0, 29.0], [14720.0, 28.0], [15168.0, 26.0], [15120.0, 26.0], [15012.0, 26.0], [14940.0, 27.0], [15348.0, 26.0], [15216.0, 27.0], [14888.0, 28.0], [15732.0, 27.0], [15460.0, 27.0], [15448.0, 28.0], [15552.0, 27.0], [16488.0, 28.0], [18040.0, 25.0], [20127.0, 26.0], [19863.0, 27.0], [9479.0, 38.0], [9235.0, 32.0], [9939.0, 33.0], [10611.0, 30.0], [10643.0, 30.0], [10747.0, 32.0], [10687.0, 31.0], [10291.0, 32.0], [10919.0, 33.0], [11147.0, 30.0], [10827.0, 31.0], [11259.0, 32.0], [11563.0, 31.0], [11427.0, 36.0], [11683.0, 29.0], [11371.0, 29.0], [12163.0, 29.0], [12275.0, 33.0], [11927.0, 29.0], [12031.0, 28.0], [11919.0, 28.0], [12111.0, 28.0], [12143.0, 29.0], [12171.0, 30.0], [12199.0, 30.0], [12399.0, 24.0], [12671.0, 30.0], [12655.0, 27.0], [12311.0, 29.0], [12579.0, 28.0], [12339.0, 29.0], [12487.0, 28.0], [12539.0, 27.0], [13059.0, 27.0], [12867.0, 28.0], [13203.0, 28.0], [13175.0, 28.0], [13199.0, 27.0], [13451.0, 27.0], [13619.0, 29.0], [13799.0, 29.0], [14067.0, 28.0], [13955.0, 29.0], [14239.0, 28.0], [13991.0, 29.0], [13831.0, 26.0], [14271.0, 27.0], [14259.0, 26.0], [14027.0, 29.0], [14039.0, 29.0], [14603.0, 28.0], [14399.0, 29.0], [14747.0, 27.0], [14499.0, 29.0], [14723.0, 28.0], [14719.0, 27.0], [14355.0, 28.0], [14671.0, 30.0], [15331.0, 19.0], [15223.0, 26.0], [15163.0, 28.0], [15335.0, 26.0], [15255.0, 26.0], [14851.0, 27.0], [15851.0, 25.0], [15695.0, 27.0], [15391.0, 27.0], [18734.0, 25.0], [19086.0, 27.0], [20414.0, 26.0], [19917.0, 27.0], [5275.0, 14.0], [5829.0, 21.0], [5905.0, 12.0], [6591.0, 35.0], [7895.0, 36.0], [9142.0, 33.0], [9690.0, 34.0], [9530.0, 30.0], [10454.0, 32.0], [10498.0, 34.0], [10466.0, 32.0], [11206.0, 32.0], [11194.0, 32.0], [11050.0, 31.0], [10930.0, 36.0], [10962.0, 29.0], [11402.0, 30.0], [11326.0, 35.0], [11370.0, 28.0], [11594.0, 29.0], [12098.0, 33.0], [11802.0, 32.0], [11858.0, 28.0], [12238.0, 34.0], [12242.0, 28.0], [12002.0, 34.0], [12234.0, 28.0], [12402.0, 33.0], [12338.0, 31.0], [12394.0, 32.0], [12366.0, 32.0], [12510.0, 28.0], [12738.0, 28.0], [12714.0, 32.0], [12410.0, 28.0], [12294.0, 33.0], [12798.0, 28.0], [13286.0, 27.0], [13058.0, 27.0], [13094.0, 30.0], [12818.0, 29.0], [12906.0, 31.0], [13278.0, 30.0], [12914.0, 30.0], [13050.0, 27.0], [12958.0, 31.0], [13302.0, 27.0], [13338.0, 27.0], [13822.0, 29.0], [13434.0, 26.0], [13610.0, 31.0], [13614.0, 30.0], [13694.0, 31.0], [13622.0, 13.0], [13826.0, 26.0], [14086.0, 27.0], [14142.0, 27.0], [14214.0, 30.0], [13986.0, 26.0], [13874.0, 29.0], [14602.0, 28.0], [14442.0, 28.0], [14810.0, 28.0], [14726.0, 28.0], [14490.0, 30.0], [14590.0, 28.0], [14410.0, 29.0], [15174.0, 28.0], [15162.0, 27.0], [14922.0, 27.0], [14914.0, 28.0], [15798.0, 26.0], [15674.0, 26.0], [15522.0, 27.0], [16078.0, 25.0], [16342.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20539.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 493.0, "maxY": 1394.0, "series": [{"data": [[18147.0, 28.0], [20539.0, 25.0], [9477.0, 34.0], [9677.0, 33.0], [9317.0, 9.0], [10017.0, 34.0], [10233.0, 30.0], [10625.0, 33.0], [10681.0, 31.0], [10541.0, 36.0], [10857.0, 35.0], [11145.0, 30.0], [11249.0, 30.0], [10797.0, 30.0], [11693.0, 31.0], [11713.0, 28.0], [11349.0, 31.0], [11741.0, 30.0], [11405.0, 30.0], [11581.0, 31.0], [12237.0, 31.0], [11833.0, 32.0], [11785.0, 32.0], [12105.0, 29.0], [11909.0, 33.0], [12405.0, 11.0], [12373.0, 32.0], [12609.0, 33.0], [12625.0, 27.0], [12793.0, 31.0], [12409.0, 31.0], [12369.0, 29.0], [12377.0, 28.0], [12385.0, 33.0], [12353.0, 30.0], [13045.0, 31.0], [12921.0, 27.0], [13465.0, 28.0], [13605.0, 27.0], [13693.0, 26.0], [13601.0, 26.0], [13721.0, 29.0], [13557.0, 30.0], [13337.0, 26.0], [13669.0, 31.0], [13905.0, 29.0], [14173.0, 30.0], [14125.0, 29.0], [14101.0, 28.0], [13893.0, 29.0], [14245.0, 29.0], [13945.0, 30.0], [13917.0, 27.0], [13881.0, 28.0], [14037.0, 30.0], [13961.0, 29.0], [14365.0, 29.0], [14609.0, 28.0], [14369.0, 28.0], [14517.0, 29.0], [15193.0, 27.0], [15017.0, 28.0], [14861.0, 29.0], [17010.0, 23.0], [18850.0, 24.0], [493.0, 1394.0], [16873.0, 27.0], [1239.0, 3.0], [1306.0, 39.0], [2850.0, 17.0], [8944.0, 32.0], [10124.0, 32.0], [9964.0, 32.0], [10508.0, 31.0], [11096.0, 31.0], [11036.0, 30.0], [10884.0, 33.0], [10888.0, 29.0], [11132.0, 30.0], [11520.0, 29.0], [11320.0, 32.0], [11868.0, 30.0], [12068.0, 31.0], [12112.0, 30.0], [11860.0, 29.0], [11872.0, 29.0], [12184.0, 11.0], [12200.0, 29.0], [12236.0, 28.0], [11904.0, 30.0], [11952.0, 34.0], [11964.0, 29.0], [12004.0, 29.0], [11832.0, 28.0], [12656.0, 33.0], [12420.0, 29.0], [12336.0, 29.0], [12292.0, 30.0], [12480.0, 28.0], [12620.0, 29.0], [12688.0, 27.0], [12756.0, 29.0], [13088.0, 28.0], [13100.0, 25.0], [13300.0, 27.0], [13308.0, 31.0], [13096.0, 31.0], [13176.0, 31.0], [13224.0, 31.0], [12924.0, 32.0], [12856.0, 29.0], [13124.0, 31.0], [13164.0, 25.0], [13788.0, 30.0], [13720.0, 27.0], [13792.0, 29.0], [13456.0, 31.0], [13376.0, 27.0], [13492.0, 29.0], [13664.0, 26.0], [13660.0, 30.0], [13320.0, 4.0], [14152.0, 23.0], [13888.0, 29.0], [14204.0, 29.0], [14240.0, 28.0], [13848.0, 30.0], [14308.0, 28.0], [14816.0, 28.0], [14628.0, 29.0], [14688.0, 28.0], [14656.0, 29.0], [14720.0, 28.0], [15168.0, 26.0], [15120.0, 26.0], [15012.0, 26.0], [14940.0, 27.0], [15348.0, 26.0], [15216.0, 27.0], [14888.0, 28.0], [15732.0, 27.0], [15460.0, 27.0], [15448.0, 28.0], [15552.0, 27.0], [16488.0, 28.0], [18040.0, 25.0], [20127.0, 26.0], [19863.0, 27.0], [9479.0, 38.0], [9235.0, 32.0], [9939.0, 33.0], [10611.0, 30.0], [10643.0, 30.0], [10747.0, 32.0], [10687.0, 31.0], [10291.0, 32.0], [10919.0, 33.0], [11147.0, 30.0], [10827.0, 31.0], [11259.0, 32.0], [11563.0, 31.0], [11427.0, 36.0], [11683.0, 29.0], [11371.0, 29.0], [12163.0, 29.0], [12275.0, 33.0], [11927.0, 29.0], [12031.0, 28.0], [11919.0, 28.0], [12111.0, 28.0], [12143.0, 29.0], [12171.0, 30.0], [12199.0, 30.0], [12399.0, 24.0], [12671.0, 30.0], [12655.0, 27.0], [12311.0, 29.0], [12579.0, 28.0], [12339.0, 29.0], [12487.0, 28.0], [12539.0, 27.0], [13059.0, 27.0], [12867.0, 28.0], [13203.0, 28.0], [13175.0, 28.0], [13199.0, 27.0], [13451.0, 27.0], [13619.0, 29.0], [13799.0, 29.0], [14067.0, 28.0], [13955.0, 29.0], [14239.0, 28.0], [13991.0, 29.0], [13831.0, 26.0], [14271.0, 27.0], [14259.0, 26.0], [14027.0, 29.0], [14039.0, 29.0], [14603.0, 28.0], [14399.0, 29.0], [14747.0, 27.0], [14499.0, 29.0], [14723.0, 28.0], [14719.0, 27.0], [14355.0, 28.0], [14671.0, 30.0], [15331.0, 19.0], [15223.0, 26.0], [15163.0, 28.0], [15335.0, 26.0], [15255.0, 26.0], [14851.0, 27.0], [15851.0, 25.0], [15695.0, 27.0], [15391.0, 27.0], [18734.0, 25.0], [19086.0, 27.0], [20414.0, 26.0], [19917.0, 27.0], [5275.0, 14.0], [5829.0, 21.0], [5905.0, 12.0], [6591.0, 35.0], [7895.0, 36.0], [9142.0, 33.0], [9690.0, 34.0], [9530.0, 30.0], [10454.0, 32.0], [10498.0, 34.0], [10466.0, 32.0], [11206.0, 32.0], [11194.0, 32.0], [11050.0, 31.0], [10930.0, 36.0], [10962.0, 29.0], [11402.0, 30.0], [11326.0, 35.0], [11370.0, 28.0], [11594.0, 29.0], [12098.0, 33.0], [11802.0, 32.0], [11858.0, 28.0], [12238.0, 34.0], [12242.0, 28.0], [12002.0, 34.0], [12234.0, 28.0], [12402.0, 33.0], [12338.0, 31.0], [12394.0, 32.0], [12366.0, 32.0], [12510.0, 28.0], [12738.0, 28.0], [12714.0, 32.0], [12410.0, 28.0], [12294.0, 33.0], [12798.0, 28.0], [13286.0, 27.0], [13058.0, 27.0], [13094.0, 30.0], [12818.0, 29.0], [12906.0, 31.0], [13278.0, 30.0], [12914.0, 30.0], [13050.0, 27.0], [12958.0, 31.0], [13302.0, 27.0], [13338.0, 27.0], [13822.0, 29.0], [13434.0, 26.0], [13610.0, 31.0], [13614.0, 30.0], [13694.0, 31.0], [13622.0, 13.0], [13826.0, 26.0], [14086.0, 27.0], [14142.0, 27.0], [14214.0, 30.0], [13986.0, 26.0], [13874.0, 29.0], [14602.0, 28.0], [14442.0, 28.0], [14810.0, 28.0], [14726.0, 28.0], [14490.0, 30.0], [14590.0, 28.0], [14410.0, 29.0], [15174.0, 28.0], [15162.0, 27.0], [14922.0, 27.0], [14914.0, 28.0], [15798.0, 26.0], [15674.0, 26.0], [15522.0, 27.0], [16078.0, 25.0], [16342.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20539.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5667.45, "minX": 1.62633078E12, "maxY": 13017.516666666666, "series": [{"data": [[1.62633096E12, 12759.5], [1.62633084E12, 12786.733333333334], [1.62633102E12, 13017.516666666666], [1.6263309E12, 12820.216666666667], [1.62633078E12, 9013.7], [1.62633108E12, 5667.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62633108E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5677.45, "minX": 1.62633078E12, "maxY": 13017.483333333334, "series": [{"data": [[1.62633096E12, 12759.533333333333], [1.62633084E12, 12786.75], [1.62633102E12, 13017.483333333334], [1.6263309E12, 12820.2], [1.62633078E12, 9003.7], [1.62633108E12, 5677.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62633108E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5677.45, "minX": 1.62633078E12, "maxY": 13017.483333333334, "series": [{"data": [[1.62633096E12, 12759.533333333333], [1.62633084E12, 12786.75], [1.62633102E12, 13017.483333333334], [1.6263309E12, 12820.2], [1.62633078E12, 9003.7], [1.62633108E12, 5677.45]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62633108E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5677.45, "minX": 1.62633078E12, "maxY": 13017.483333333334, "series": [{"data": [[1.62633096E12, 12759.533333333333], [1.62633084E12, 12786.75], [1.62633102E12, 13017.483333333334], [1.6263309E12, 12820.2], [1.62633078E12, 9003.7], [1.62633108E12, 5677.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62633108E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

