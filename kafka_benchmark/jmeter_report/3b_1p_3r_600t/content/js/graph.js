/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1137.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 11.0], [3.3, 11.0], [3.4, 11.0], [3.5, 11.0], [3.6, 11.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 12.0], [4.4, 13.0], [4.5, 13.0], [4.6, 13.0], [4.7, 13.0], [4.8, 13.0], [4.9, 13.0], [5.0, 13.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 15.0], [6.0, 15.0], [6.1, 15.0], [6.2, 15.0], [6.3, 15.0], [6.4, 15.0], [6.5, 15.0], [6.6, 15.0], [6.7, 15.0], [6.8, 15.0], [6.9, 16.0], [7.0, 16.0], [7.1, 16.0], [7.2, 16.0], [7.3, 16.0], [7.4, 16.0], [7.5, 16.0], [7.6, 16.0], [7.7, 16.0], [7.8, 16.0], [7.9, 16.0], [8.0, 17.0], [8.1, 17.0], [8.2, 17.0], [8.3, 17.0], [8.4, 17.0], [8.5, 17.0], [8.6, 17.0], [8.7, 17.0], [8.8, 17.0], [8.9, 17.0], [9.0, 17.0], [9.1, 17.0], [9.2, 17.0], [9.3, 17.0], [9.4, 18.0], [9.5, 18.0], [9.6, 18.0], [9.7, 18.0], [9.8, 18.0], [9.9, 18.0], [10.0, 18.0], [10.1, 18.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 18.0], [10.6, 18.0], [10.7, 18.0], [10.8, 18.0], [10.9, 18.0], [11.0, 18.0], [11.1, 19.0], [11.2, 19.0], [11.3, 19.0], [11.4, 19.0], [11.5, 19.0], [11.6, 19.0], [11.7, 19.0], [11.8, 19.0], [11.9, 19.0], [12.0, 19.0], [12.1, 19.0], [12.2, 19.0], [12.3, 19.0], [12.4, 19.0], [12.5, 19.0], [12.6, 19.0], [12.7, 19.0], [12.8, 19.0], [12.9, 19.0], [13.0, 19.0], [13.1, 20.0], [13.2, 20.0], [13.3, 20.0], [13.4, 20.0], [13.5, 20.0], [13.6, 20.0], [13.7, 20.0], [13.8, 20.0], [13.9, 20.0], [14.0, 20.0], [14.1, 20.0], [14.2, 20.0], [14.3, 20.0], [14.4, 20.0], [14.5, 20.0], [14.6, 20.0], [14.7, 20.0], [14.8, 20.0], [14.9, 20.0], [15.0, 20.0], [15.1, 20.0], [15.2, 20.0], [15.3, 20.0], [15.4, 20.0], [15.5, 21.0], [15.6, 21.0], [15.7, 21.0], [15.8, 21.0], [15.9, 21.0], [16.0, 21.0], [16.1, 21.0], [16.2, 21.0], [16.3, 21.0], [16.4, 21.0], [16.5, 21.0], [16.6, 21.0], [16.7, 21.0], [16.8, 21.0], [16.9, 21.0], [17.0, 21.0], [17.1, 21.0], [17.2, 21.0], [17.3, 21.0], [17.4, 21.0], [17.5, 21.0], [17.6, 21.0], [17.7, 21.0], [17.8, 21.0], [17.9, 21.0], [18.0, 21.0], [18.1, 21.0], [18.2, 21.0], [18.3, 22.0], [18.4, 22.0], [18.5, 22.0], [18.6, 22.0], [18.7, 22.0], [18.8, 22.0], [18.9, 22.0], [19.0, 22.0], [19.1, 22.0], [19.2, 22.0], [19.3, 22.0], [19.4, 22.0], [19.5, 22.0], [19.6, 22.0], [19.7, 22.0], [19.8, 22.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 22.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 23.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 23.0], [23.9, 23.0], [24.0, 23.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 23.0], [24.7, 23.0], [24.8, 23.0], [24.9, 23.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 24.0], [25.5, 24.0], [25.6, 24.0], [25.7, 24.0], [25.8, 24.0], [25.9, 24.0], [26.0, 24.0], [26.1, 24.0], [26.2, 24.0], [26.3, 24.0], [26.4, 24.0], [26.5, 24.0], [26.6, 24.0], [26.7, 24.0], [26.8, 24.0], [26.9, 24.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 24.0], [27.4, 24.0], [27.5, 24.0], [27.6, 24.0], [27.7, 24.0], [27.8, 24.0], [27.9, 24.0], [28.0, 24.0], [28.1, 24.0], [28.2, 24.0], [28.3, 24.0], [28.4, 24.0], [28.5, 24.0], [28.6, 24.0], [28.7, 24.0], [28.8, 24.0], [28.9, 24.0], [29.0, 24.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 25.0], [29.7, 25.0], [29.8, 25.0], [29.9, 25.0], [30.0, 25.0], [30.1, 25.0], [30.2, 25.0], [30.3, 25.0], [30.4, 25.0], [30.5, 25.0], [30.6, 25.0], [30.7, 25.0], [30.8, 25.0], [30.9, 25.0], [31.0, 25.0], [31.1, 25.0], [31.2, 25.0], [31.3, 25.0], [31.4, 25.0], [31.5, 25.0], [31.6, 25.0], [31.7, 25.0], [31.8, 25.0], [31.9, 25.0], [32.0, 25.0], [32.1, 25.0], [32.2, 25.0], [32.3, 25.0], [32.4, 25.0], [32.5, 25.0], [32.6, 25.0], [32.7, 25.0], [32.8, 25.0], [32.9, 25.0], [33.0, 25.0], [33.1, 25.0], [33.2, 25.0], [33.3, 25.0], [33.4, 25.0], [33.5, 25.0], [33.6, 25.0], [33.7, 25.0], [33.8, 25.0], [33.9, 25.0], [34.0, 26.0], [34.1, 26.0], [34.2, 26.0], [34.3, 26.0], [34.4, 26.0], [34.5, 26.0], [34.6, 26.0], [34.7, 26.0], [34.8, 26.0], [34.9, 26.0], [35.0, 26.0], [35.1, 26.0], [35.2, 26.0], [35.3, 26.0], [35.4, 26.0], [35.5, 26.0], [35.6, 26.0], [35.7, 26.0], [35.8, 26.0], [35.9, 26.0], [36.0, 26.0], [36.1, 26.0], [36.2, 26.0], [36.3, 26.0], [36.4, 26.0], [36.5, 26.0], [36.6, 26.0], [36.7, 26.0], [36.8, 26.0], [36.9, 26.0], [37.0, 26.0], [37.1, 26.0], [37.2, 26.0], [37.3, 26.0], [37.4, 26.0], [37.5, 26.0], [37.6, 26.0], [37.7, 26.0], [37.8, 26.0], [37.9, 26.0], [38.0, 26.0], [38.1, 26.0], [38.2, 26.0], [38.3, 26.0], [38.4, 26.0], [38.5, 26.0], [38.6, 26.0], [38.7, 26.0], [38.8, 27.0], [38.9, 27.0], [39.0, 27.0], [39.1, 27.0], [39.2, 27.0], [39.3, 27.0], [39.4, 27.0], [39.5, 27.0], [39.6, 27.0], [39.7, 27.0], [39.8, 27.0], [39.9, 27.0], [40.0, 27.0], [40.1, 27.0], [40.2, 27.0], [40.3, 27.0], [40.4, 27.0], [40.5, 27.0], [40.6, 27.0], [40.7, 27.0], [40.8, 27.0], [40.9, 27.0], [41.0, 27.0], [41.1, 27.0], [41.2, 27.0], [41.3, 27.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 27.0], [42.2, 27.0], [42.3, 27.0], [42.4, 27.0], [42.5, 27.0], [42.6, 27.0], [42.7, 27.0], [42.8, 27.0], [42.9, 27.0], [43.0, 27.0], [43.1, 27.0], [43.2, 27.0], [43.3, 27.0], [43.4, 27.0], [43.5, 27.0], [43.6, 27.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 28.0], [44.3, 28.0], [44.4, 28.0], [44.5, 28.0], [44.6, 28.0], [44.7, 28.0], [44.8, 28.0], [44.9, 28.0], [45.0, 28.0], [45.1, 28.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 28.0], [45.9, 28.0], [46.0, 28.0], [46.1, 28.0], [46.2, 28.0], [46.3, 28.0], [46.4, 28.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 29.0], [48.8, 29.0], [48.9, 29.0], [49.0, 29.0], [49.1, 29.0], [49.2, 29.0], [49.3, 29.0], [49.4, 29.0], [49.5, 29.0], [49.6, 29.0], [49.7, 29.0], [49.8, 29.0], [49.9, 29.0], [50.0, 29.0], [50.1, 29.0], [50.2, 29.0], [50.3, 29.0], [50.4, 29.0], [50.5, 29.0], [50.6, 29.0], [50.7, 29.0], [50.8, 29.0], [50.9, 29.0], [51.0, 29.0], [51.1, 29.0], [51.2, 29.0], [51.3, 29.0], [51.4, 29.0], [51.5, 29.0], [51.6, 29.0], [51.7, 29.0], [51.8, 29.0], [51.9, 29.0], [52.0, 29.0], [52.1, 29.0], [52.2, 29.0], [52.3, 29.0], [52.4, 29.0], [52.5, 29.0], [52.6, 29.0], [52.7, 29.0], [52.8, 29.0], [52.9, 29.0], [53.0, 29.0], [53.1, 29.0], [53.2, 29.0], [53.3, 29.0], [53.4, 29.0], [53.5, 29.0], [53.6, 30.0], [53.7, 30.0], [53.8, 30.0], [53.9, 30.0], [54.0, 30.0], [54.1, 30.0], [54.2, 30.0], [54.3, 30.0], [54.4, 30.0], [54.5, 30.0], [54.6, 30.0], [54.7, 30.0], [54.8, 30.0], [54.9, 30.0], [55.0, 30.0], [55.1, 30.0], [55.2, 30.0], [55.3, 30.0], [55.4, 30.0], [55.5, 30.0], [55.6, 30.0], [55.7, 30.0], [55.8, 30.0], [55.9, 30.0], [56.0, 30.0], [56.1, 30.0], [56.2, 30.0], [56.3, 30.0], [56.4, 30.0], [56.5, 30.0], [56.6, 30.0], [56.7, 30.0], [56.8, 30.0], [56.9, 30.0], [57.0, 30.0], [57.1, 30.0], [57.2, 30.0], [57.3, 30.0], [57.4, 30.0], [57.5, 30.0], [57.6, 30.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 30.0], [58.2, 30.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 31.0], [59.7, 31.0], [59.8, 31.0], [59.9, 31.0], [60.0, 31.0], [60.1, 31.0], [60.2, 31.0], [60.3, 31.0], [60.4, 31.0], [60.5, 31.0], [60.6, 31.0], [60.7, 31.0], [60.8, 31.0], [60.9, 31.0], [61.0, 31.0], [61.1, 31.0], [61.2, 31.0], [61.3, 31.0], [61.4, 31.0], [61.5, 31.0], [61.6, 31.0], [61.7, 31.0], [61.8, 31.0], [61.9, 31.0], [62.0, 31.0], [62.1, 31.0], [62.2, 31.0], [62.3, 31.0], [62.4, 31.0], [62.5, 31.0], [62.6, 31.0], [62.7, 32.0], [62.8, 32.0], [62.9, 32.0], [63.0, 32.0], [63.1, 32.0], [63.2, 32.0], [63.3, 32.0], [63.4, 32.0], [63.5, 32.0], [63.6, 32.0], [63.7, 32.0], [63.8, 32.0], [63.9, 32.0], [64.0, 32.0], [64.1, 32.0], [64.2, 32.0], [64.3, 32.0], [64.4, 32.0], [64.5, 32.0], [64.6, 32.0], [64.7, 32.0], [64.8, 32.0], [64.9, 32.0], [65.0, 32.0], [65.1, 32.0], [65.2, 32.0], [65.3, 32.0], [65.4, 32.0], [65.5, 32.0], [65.6, 32.0], [65.7, 32.0], [65.8, 32.0], [65.9, 32.0], [66.0, 32.0], [66.1, 32.0], [66.2, 32.0], [66.3, 32.0], [66.4, 32.0], [66.5, 32.0], [66.6, 32.0], [66.7, 32.0], [66.8, 33.0], [66.9, 33.0], [67.0, 33.0], [67.1, 33.0], [67.2, 33.0], [67.3, 33.0], [67.4, 33.0], [67.5, 33.0], [67.6, 33.0], [67.7, 33.0], [67.8, 33.0], [67.9, 33.0], [68.0, 33.0], [68.1, 33.0], [68.2, 33.0], [68.3, 33.0], [68.4, 33.0], [68.5, 33.0], [68.6, 33.0], [68.7, 33.0], [68.8, 33.0], [68.9, 33.0], [69.0, 33.0], [69.1, 33.0], [69.2, 33.0], [69.3, 33.0], [69.4, 33.0], [69.5, 33.0], [69.6, 33.0], [69.7, 33.0], [69.8, 33.0], [69.9, 33.0], [70.0, 33.0], [70.1, 33.0], [70.2, 33.0], [70.3, 33.0], [70.4, 34.0], [70.5, 34.0], [70.6, 34.0], [70.7, 34.0], [70.8, 34.0], [70.9, 34.0], [71.0, 34.0], [71.1, 34.0], [71.2, 34.0], [71.3, 34.0], [71.4, 34.0], [71.5, 34.0], [71.6, 34.0], [71.7, 34.0], [71.8, 34.0], [71.9, 34.0], [72.0, 34.0], [72.1, 34.0], [72.2, 34.0], [72.3, 34.0], [72.4, 34.0], [72.5, 34.0], [72.6, 34.0], [72.7, 34.0], [72.8, 34.0], [72.9, 34.0], [73.0, 34.0], [73.1, 34.0], [73.2, 34.0], [73.3, 34.0], [73.4, 34.0], [73.5, 34.0], [73.6, 35.0], [73.7, 35.0], [73.8, 35.0], [73.9, 35.0], [74.0, 35.0], [74.1, 35.0], [74.2, 35.0], [74.3, 35.0], [74.4, 35.0], [74.5, 35.0], [74.6, 35.0], [74.7, 35.0], [74.8, 35.0], [74.9, 35.0], [75.0, 35.0], [75.1, 35.0], [75.2, 35.0], [75.3, 35.0], [75.4, 35.0], [75.5, 35.0], [75.6, 35.0], [75.7, 35.0], [75.8, 35.0], [75.9, 35.0], [76.0, 35.0], [76.1, 35.0], [76.2, 35.0], [76.3, 35.0], [76.4, 36.0], [76.5, 36.0], [76.6, 36.0], [76.7, 36.0], [76.8, 36.0], [76.9, 36.0], [77.0, 36.0], [77.1, 36.0], [77.2, 36.0], [77.3, 36.0], [77.4, 36.0], [77.5, 36.0], [77.6, 36.0], [77.7, 36.0], [77.8, 36.0], [77.9, 36.0], [78.0, 36.0], [78.1, 36.0], [78.2, 36.0], [78.3, 36.0], [78.4, 36.0], [78.5, 36.0], [78.6, 36.0], [78.7, 36.0], [78.8, 37.0], [78.9, 37.0], [79.0, 37.0], [79.1, 37.0], [79.2, 37.0], [79.3, 37.0], [79.4, 37.0], [79.5, 37.0], [79.6, 37.0], [79.7, 37.0], [79.8, 37.0], [79.9, 37.0], [80.0, 37.0], [80.1, 37.0], [80.2, 37.0], [80.3, 37.0], [80.4, 37.0], [80.5, 37.0], [80.6, 37.0], [80.7, 37.0], [80.8, 37.0], [80.9, 38.0], [81.0, 38.0], [81.1, 38.0], [81.2, 38.0], [81.3, 38.0], [81.4, 38.0], [81.5, 38.0], [81.6, 38.0], [81.7, 38.0], [81.8, 38.0], [81.9, 38.0], [82.0, 38.0], [82.1, 38.0], [82.2, 38.0], [82.3, 38.0], [82.4, 38.0], [82.5, 38.0], [82.6, 39.0], [82.7, 39.0], [82.8, 39.0], [82.9, 39.0], [83.0, 39.0], [83.1, 39.0], [83.2, 39.0], [83.3, 39.0], [83.4, 39.0], [83.5, 39.0], [83.6, 39.0], [83.7, 39.0], [83.8, 39.0], [83.9, 39.0], [84.0, 40.0], [84.1, 40.0], [84.2, 40.0], [84.3, 40.0], [84.4, 40.0], [84.5, 40.0], [84.6, 40.0], [84.7, 40.0], [84.8, 40.0], [84.9, 40.0], [85.0, 40.0], [85.1, 40.0], [85.2, 41.0], [85.3, 41.0], [85.4, 41.0], [85.5, 41.0], [85.6, 41.0], [85.7, 41.0], [85.8, 41.0], [85.9, 41.0], [86.0, 41.0], [86.1, 41.0], [86.2, 41.0], [86.3, 42.0], [86.4, 42.0], [86.5, 42.0], [86.6, 42.0], [86.7, 42.0], [86.8, 42.0], [86.9, 42.0], [87.0, 42.0], [87.1, 42.0], [87.2, 43.0], [87.3, 43.0], [87.4, 43.0], [87.5, 43.0], [87.6, 43.0], [87.7, 43.0], [87.8, 43.0], [87.9, 43.0], [88.0, 44.0], [88.1, 44.0], [88.2, 44.0], [88.3, 44.0], [88.4, 44.0], [88.5, 44.0], [88.6, 45.0], [88.7, 45.0], [88.8, 45.0], [88.9, 45.0], [89.0, 45.0], [89.1, 45.0], [89.2, 46.0], [89.3, 46.0], [89.4, 46.0], [89.5, 46.0], [89.6, 46.0], [89.7, 47.0], [89.8, 47.0], [89.9, 47.0], [90.0, 47.0], [90.1, 47.0], [90.2, 48.0], [90.3, 48.0], [90.4, 48.0], [90.5, 49.0], [90.6, 49.0], [90.7, 49.0], [90.8, 49.0], [90.9, 50.0], [91.0, 50.0], [91.1, 50.0], [91.2, 51.0], [91.3, 51.0], [91.4, 51.0], [91.5, 52.0], [91.6, 52.0], [91.7, 53.0], [91.8, 53.0], [91.9, 54.0], [92.0, 54.0], [92.1, 55.0], [92.2, 55.0], [92.3, 56.0], [92.4, 56.0], [92.5, 57.0], [92.6, 58.0], [92.7, 58.0], [92.8, 59.0], [92.9, 60.0], [93.0, 60.0], [93.1, 61.0], [93.2, 62.0], [93.3, 63.0], [93.4, 64.0], [93.5, 65.0], [93.6, 66.0], [93.7, 67.0], [93.8, 68.0], [93.9, 69.0], [94.0, 70.0], [94.1, 71.0], [94.2, 72.0], [94.3, 74.0], [94.4, 75.0], [94.5, 77.0], [94.6, 79.0], [94.7, 81.0], [94.8, 85.0], [94.9, 88.0], [95.0, 93.0], [95.1, 99.0], [95.2, 109.0], [95.3, 117.0], [95.4, 130.0], [95.5, 140.0], [95.6, 151.0], [95.7, 158.0], [95.8, 166.0], [95.9, 172.0], [96.0, 178.0], [96.1, 183.0], [96.2, 188.0], [96.3, 192.0], [96.4, 198.0], [96.5, 202.0], [96.6, 206.0], [96.7, 211.0], [96.8, 217.0], [96.9, 223.0], [97.0, 229.0], [97.1, 236.0], [97.2, 244.0], [97.3, 256.0], [97.4, 271.0], [97.5, 286.0], [97.6, 303.0], [97.7, 320.0], [97.8, 337.0], [97.9, 352.0], [98.0, 368.0], [98.1, 382.0], [98.2, 399.0], [98.3, 415.0], [98.4, 431.0], [98.5, 448.0], [98.6, 466.0], [98.7, 484.0], [98.8, 501.0], [98.9, 519.0], [99.0, 535.0], [99.1, 553.0], [99.2, 571.0], [99.3, 589.0], [99.4, 610.0], [99.5, 632.0], [99.6, 658.0], [99.7, 688.0], [99.8, 732.0], [99.9, 798.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 3734655.0, "series": [{"data": [[0.0, 3734655.0], [1100.0, 13.0], [300.0, 24426.0], [600.0, 14898.0], [700.0, 6634.0], [100.0, 52226.0], [200.0, 44763.0], [400.0, 22971.0], [800.0, 3178.0], [900.0, 629.0], [500.0, 22187.0], [1000.0, 32.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 47329.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3879283.0, "series": [{"data": [[0.0, 3879283.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47329.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 541.3885708706451, "minX": 1.6263336E12, "maxY": 600.0, "series": [{"data": [[1.62633366E12, 600.0], [1.62633378E12, 600.0], [1.6263336E12, 598.386175964223], [1.6263339E12, 541.3885708706451], [1.62633372E12, 600.0], [1.62633384E12, 600.0]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263339E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 2.0, "maxY": 370.0156249999998, "series": [{"data": [[2.0, 17.0], [5.0, 12.0], [8.0, 5.4], [9.0, 1.3333333333333333], [10.0, 3.0], [11.0, 5.0], [12.0, 2.6], [13.0, 1.5], [14.0, 1.846153846153846], [15.0, 1.5333333333333332], [16.0, 1.9374999999999998], [17.0, 1.4516129032258063], [18.0, 1.9032258064516128], [19.0, 2.4], [20.0, 1.8260869565217388], [21.0, 1.9000000000000006], [22.0, 2.7499999999999996], [23.0, 3.5], [24.0, 3.5], [25.0, 2.8749999999999996], [26.0, 2.8], [27.0, 3.0], [28.0, 4.5], [29.0, 4.615384615384615], [30.0, 17.8], [31.0, 5.050000000000001], [33.0, 2.1428571428571432], [32.0, 3.214285714285714], [35.0, 4.428571428571428], [34.0, 2.058823529411764], [37.0, 4.333333333333333], [39.0, 2.0416666666666665], [38.0, 2.650000000000001], [41.0, 3.375], [40.0, 2.714285714285714], [43.0, 2.9687500000000004], [42.0, 3.894736842105263], [45.0, 2.7727272727272725], [44.0, 3.0], [47.0, 2.6], [46.0, 2.5714285714285707], [49.0, 2.3636363636363638], [48.0, 2.150000000000001], [51.0, 3.923076923076923], [50.0, 4.0], [53.0, 2.5862068965517238], [52.0, 2.0], [55.0, 2.0], [54.0, 2.8749999999999996], [57.0, 3.0], [56.0, 2.8974358974358974], [59.0, 3.888888888888889], [58.0, 4.187500000000001], [61.0, 5.166666666666667], [60.0, 4.818181818181818], [63.0, 5.461538461538462], [62.0, 5.2857142857142865], [67.0, 5.230769230769231], [66.0, 5.421052631578948], [65.0, 5.25], [64.0, 5.090909090909091], [71.0, 3.9902413058906983], [70.0, 5.973333333333335], [69.0, 5.0], [68.0, 4.6315789473684195], [75.0, 5.615384615384616], [74.0, 4.5480769230769225], [73.0, 4.944444444444445], [72.0, 4.710447761194032], [79.0, 5.2], [78.0, 4.703703703703704], [77.0, 3.8235294117647065], [76.0, 5.20353982300885], [83.0, 10.527777777777775], [82.0, 7.083333333333334], [81.0, 6.985074626865673], [80.0, 5.25], [87.0, 4.166666666666667], [86.0, 6.371428571428571], [84.0, 7.058823529411765], [91.0, 13.64], [90.0, 13.666666666666666], [89.0, 10.652173913043478], [88.0, 14.2], [95.0, 15.526315789473683], [94.0, 13.677419354838708], [93.0, 13.574468085106385], [92.0, 10.176470588235295], [98.0, 42.333333333333336], [97.0, 34.71428571428571], [96.0, 41.857142857142854], [103.0, 6.653992395437268], [102.0, 21.958333333333336], [100.0, 11.830357142857137], [107.0, 5.6843749999999975], [106.0, 3.7058823529411766], [105.0, 6.068965517241378], [104.0, 110.33333333333333], [111.0, 7.11608832807572], [110.0, 6.738461538461538], [109.0, 8.577777777777774], [108.0, 3.571428571428571], [115.0, 5.417582417582419], [114.0, 4.25], [113.0, 5.587912087912091], [112.0, 12.518181818181818], [119.0, 7.990549320732415], [118.0, 4.937636761487963], [117.0, 7.515151515151516], [116.0, 6.217181467181463], [123.0, 75.0], [122.0, 10.400502512562795], [121.0, 13.895522388059703], [120.0, 17.24441608168474], [127.0, 6.895348837209301], [126.0, 5.574468085106384], [125.0, 5.024096385542168], [124.0, 11.08421052631579], [135.0, 15.410404624277456], [134.0, 7.405405405405402], [133.0, 4.441441441441442], [132.0, 10.750000000000004], [131.0, 68.0], [130.0, 15.90384615384616], [129.0, 7.527439024390242], [128.0, 7.601941747572815], [143.0, 8.324186991869922], [142.0, 4.3023255813953485], [141.0, 14.55], [140.0, 12.333333333333332], [139.0, 7.588607594936709], [138.0, 38.66666666666666], [136.0, 24.75], [151.0, 6.303370786516854], [150.0, 2.875], [149.0, 11.403940886699505], [148.0, 30.2], [147.0, 6.99236641221374], [146.0, 5.0], [145.0, 22.157894736842106], [144.0, 15.377308707124014], [159.0, 7.313953488372092], [158.0, 8.287377450980417], [157.0, 10.776061776061773], [156.0, 5.77307692307692], [155.0, 19.750830564784046], [154.0, 7.8125], [153.0, 31.0], [152.0, 15.962962962962967], [167.0, 8.2680412371134], [166.0, 8.0], [165.0, 7.973684210526316], [164.0, 6.857142857142858], [163.0, 7.378378378378376], [162.0, 7.836065573770492], [161.0, 7.418181818181816], [160.0, 7.310344827586207], [175.0, 9.478260869565217], [174.0, 9.121212121212118], [173.0, 8.774999999999999], [172.0, 9.2], [171.0, 7.913043478260869], [170.0, 8.196721311475413], [169.0, 10.1], [168.0, 8.289156626506024], [183.0, 11.424657534246572], [182.0, 9.625000000000002], [181.0, 10.0], [180.0, 13.124999999999998], [179.0, 10.34736842105263], [178.0, 9.833333333333334], [177.0, 9.051282051282051], [176.0, 9.534883720930232], [191.0, 20.0], [186.0, 72.0], [185.0, 11.421052631578949], [184.0, 11.50602409638554], [199.0, 10.333333333333334], [195.0, 21.0], [194.0, 31.857142857142854], [192.0, 20.5], [206.0, 41.08888888888889], [207.0, 35.86666666666667], [205.0, 14.0], [204.0, 48.333333333333336], [203.0, 25.1], [202.0, 32.54545454545455], [201.0, 22.09090909090909], [200.0, 20.214285714285715], [215.0, 15.260869565217392], [214.0, 30.739130434782613], [213.0, 50.58333333333333], [212.0, 34.16666666666667], [211.0, 15.0], [210.0, 36.857142857142854], [209.0, 47.0], [208.0, 39.800000000000004], [223.0, 46.785714285714285], [221.0, 43.0], [220.0, 34.61538461538462], [219.0, 23.5], [218.0, 6.0], [217.0, 5.0], [216.0, 16.6], [231.0, 17.6], [230.0, 10.218023255813957], [229.0, 8.575757575757576], [228.0, 6.385321100917432], [227.0, 31.0], [226.0, 16.927835051546396], [225.0, 50.5], [224.0, 6.0], [239.0, 19.071428571428573], [238.0, 12.769230769230774], [237.0, 15.358620689655172], [236.0, 7.666666666666667], [235.0, 12.731707317073168], [234.0, 15.987096774193539], [233.0, 14.76470588235294], [232.0, 20.607142857142854], [247.0, 40.88235294117647], [246.0, 2.0], [245.0, 2.0], [244.0, 20.555555555555554], [243.0, 39.083333333333336], [242.0, 25.772727272727273], [241.0, 29.23076923076922], [240.0, 18.907407407407412], [255.0, 9.148936170212766], [254.0, 13.000000000000004], [253.0, 11.365482233502544], [252.0, 39.666666666666664], [251.0, 58.333333333333336], [249.0, 23.375000000000004], [248.0, 16.46153846153846], [270.0, 18.64], [271.0, 18.168831168831172], [269.0, 18.192893401015226], [268.0, 16.153846153846157], [267.0, 14.75], [266.0, 13.970588235294116], [265.0, 12.203883495145629], [264.0, 10.296296296296294], [263.0, 11.83815028901734], [257.0, 8.2], [256.0, 9.5], [259.0, 21.928571428571427], [258.0, 11.190476190476193], [262.0, 7.199999999999999], [261.0, 5.818181818181818], [260.0, 12.105263157894738], [286.0, 12.214285714285714], [287.0, 11.75], [285.0, 12.5], [284.0, 12.62], [283.0, 13.0], [281.0, 13.777777777777779], [280.0, 12.686567164179104], [279.0, 25.63157894736842], [273.0, 22.324324324324323], [272.0, 16.27350427350428], [275.0, 24.95652173913043], [274.0, 28.0], [278.0, 44.07142857142858], [277.0, 15.714285714285714], [276.0, 22.193277310924366], [302.0, 13.71186440677966], [303.0, 15.227272727272728], [301.0, 13.454545454545455], [300.0, 14.0], [299.0, 13.180555555555559], [298.0, 12.842105263157894], [297.0, 15.847826086956525], [296.0, 12.909090909090908], [295.0, 13.125], [289.0, 13.161290322580648], [288.0, 13.1747572815534], [291.0, 11.973684210526317], [290.0, 12.290909090909087], [294.0, 11.666666666666668], [293.0, 13.25], [292.0, 15.0], [318.0, 17.181818181818183], [319.0, 17.400000000000002], [317.0, 16.0], [316.0, 17.636363636363633], [315.0, 17.6], [314.0, 18.000000000000004], [313.0, 19.333333333333332], [312.0, 17.799999999999997], [311.0, 18.083333333333332], [305.0, 15.380327868852463], [304.0, 15.5], [307.0, 16.500000000000004], [306.0, 12.999999999999998], [310.0, 16.545454545454543], [309.0, 15.075], [308.0, 13.761904761904761], [334.0, 16.785714285714302], [335.0, 21.52941176470588], [333.0, 15.783950617283951], [332.0, 14.384615384615381], [330.0, 12.936708860759493], [329.0, 15.871345029239762], [328.0, 16.827160493827165], [327.0, 12.888888888888893], [321.0, 16.400000000000002], [320.0, 17.300000000000004], [323.0, 14.333333333333332], [322.0, 17.5], [326.0, 23.485714285714284], [325.0, 11.999999999999996], [324.0, 8.579710144927533], [350.0, 14.062500000000002], [351.0, 22.608695652173907], [349.0, 15.818181818181818], [348.0, 15.500000000000002], [347.0, 14.733333333333334], [346.0, 16.099999999999998], [344.0, 15.290322580645162], [343.0, 18.400000000000002], [337.0, 15.666666666666668], [336.0, 18.940298507462686], [339.0, 20.0], [338.0, 22.265306122448987], [342.0, 16.222222222222225], [341.0, 18.311688311688325], [340.0, 19.457446808510642], [366.0, 59.66666666666666], [367.0, 34.32786885245902], [365.0, 92.0], [364.0, 43.40000000000002], [363.0, 32.64179104477613], [362.0, 175.0], [361.0, 87.54545454545455], [360.0, 71.17857142857142], [359.0, 39.91304347826087], [353.0, 66.42857142857144], [352.0, 20.64772727272727], [355.0, 46.2], [354.0, 74.20512820512819], [358.0, 19.700000000000003], [357.0, 56.23809523809525], [356.0, 78.3076923076923], [382.0, 45.5], [383.0, 71.71428571428572], [381.0, 36.53030303030302], [380.0, 156.0], [379.0, 45.0], [378.0, 92.22222222222223], [377.0, 9.714285714285715], [376.0, 27.32352941176471], [375.0, 61.49230769230768], [369.0, 10.666666666666668], [368.0, 11.133333333333333], [371.0, 71.72222222222221], [370.0, 28.0], [374.0, 28.250000000000004], [373.0, 31.14285714285714], [372.0, 41.0], [398.0, 54.87500000000001], [399.0, 19.999999999999996], [397.0, 74.73333333333332], [396.0, 90.05882352941175], [395.0, 66.27272727272725], [394.0, 105.375], [393.0, 60.05263157894737], [392.0, 53.33333333333333], [391.0, 60.3076923076923], [385.0, 35.63636363636364], [384.0, 48.06666666666666], [387.0, 53.99999999999999], [386.0, 77.72727272727273], [389.0, 8.333333333333332], [388.0, 56.19148936170212], [412.0, 206.88461538461544], [414.0, 181.6], [415.0, 234.20000000000002], [413.0, 111.00000000000001], [409.0, 153.83333333333334], [408.0, 50.846153846153854], [407.0, 49.71428571428573], [401.0, 3.888888888888889], [400.0, 14.230769230769234], [403.0, 44.0952380952381], [402.0, 87.46428571428571], [406.0, 42.66666666666667], [405.0, 88.00000000000001], [404.0, 86.69696969696972], [428.0, 3.6666666666666665], [418.0, 133.99999999999994], [420.0, 3.0], [422.0, 11.0], [424.0, 9.166666666666666], [425.0, 4.333333333333333], [426.0, 11.142857142857142], [427.0, 9.333333333333332], [430.0, 2.75], [431.0, 14.4], [416.0, 176.45454545454547], [423.0, 19.42857142857143], [433.0, 10.285714285714286], [435.0, 66.5], [436.0, 11.5], [437.0, 8.0], [438.0, 74.4], [439.0, 370.0156249999998], [440.0, 259.8733031674209], [443.0, 91.90825688073397], [442.0, 225.33333333333334], [441.0, 65.3], [444.0, 25.694444444444443], [445.0, 6.752577319587628], [446.0, 18.581395348837216], [447.0, 8.611111111111112], [449.0, 13.6], [448.0, 7.461538461538462], [450.0, 14.35], [461.0, 14.0], [460.0, 20.923076923076923], [453.0, 23.75], [452.0, 23.9], [454.0, 6.2608695652173925], [455.0, 7.156521739130434], [456.0, 18.4], [457.0, 12.909090909090905], [459.0, 19.2], [458.0, 22.333333333333332], [463.0, 16.333333333333332], [462.0, 17.0], [466.0, 30.0], [467.0, 16.96875], [465.0, 15.333333333333334], [464.0, 3.0], [468.0, 11.93258426966292], [469.0, 17.567796610169488], [471.0, 11.8], [470.0, 22.5], [476.0, 22.517879161528974], [478.0, 59.57997557997556], [477.0, 36.93333333333334], [473.0, 3.0], [479.0, 32.88888888888889], [475.0, 41.5], [474.0, 43.0], [480.0, 69.08782435129734], [483.0, 52.03833333333331], [492.0, 24.0], [494.0, 22.0], [493.0, 23.0], [482.0, 106.4852941176471], [481.0, 112.14423076923073], [484.0, 11.553191489361701], [485.0, 11.556338028169014], [486.0, 14.47602739726027], [487.0, 14.52173913043478], [488.0, 24.25], [489.0, 23.666666666666668], [491.0, 25.2], [490.0, 23.615384615384617], [495.0, 22.0], [510.0, 25.0], [511.0, 24.666666666666668], [509.0, 24.717948717948723], [508.0, 23.75], [507.0, 23.5], [506.0, 23.0], [505.0, 22.0], [504.0, 24.25], [503.0, 25.0], [499.0, 25.5], [498.0, 25.4], [502.0, 25.580645161290324], [501.0, 27.0], [500.0, 25.0], [540.0, 18.666666666666668], [526.0, 144.2142857142857], [517.0, 149.92857142857144], [518.0, 119.94736842105264], [519.0, 101.75862068965516], [536.0, 25.6], [539.0, 19.428571428571427], [537.0, 20.5], [541.0, 22.88888888888889], [523.0, 126.64285714285712], [522.0, 25.0], [520.0, 25.0], [524.0, 73.0], [525.0, 126.43548387096773], [527.0, 73.15763135946624], [512.0, 25.0], [514.0, 26.000000000000004], [513.0, 26.333333333333332], [516.0, 26.499999999999996], [543.0, 3.0], [528.0, 25.0], [530.0, 3.0], [529.0, 74.33333333333333], [532.0, 20.0], [531.0, 16.5], [535.0, 20.25], [534.0, 25.5], [533.0, 22.285714285714285], [542.0, 18.0], [572.0, 39.19230769230769], [575.0, 41.590078328981726], [560.0, 15.0], [562.0, 17.333333333333332], [561.0, 20.8], [564.0, 3.0], [563.0, 19.5], [574.0, 49.142857142857146], [573.0, 9.0], [571.0, 37.33333333333333], [570.0, 18.693548387096776], [569.0, 23.296121097445578], [568.0, 23.272727272727273], [559.0, 3.0], [546.0, 11.8], [545.0, 25.0], [544.0, 19.666666666666668], [549.0, 14.5], [548.0, 14.5], [547.0, 14.5], [551.0, 3.0], [550.0, 21.333333333333332], [558.0, 14.0], [557.0, 3.0], [556.0, 17.666666666666668], [555.0, 236.0], [554.0, 255.0], [552.0, 14.0], [553.0, 25.0], [567.0, 3.0], [566.0, 25.5], [565.0, 14.25], [592.0, 24.950000000000003], [596.0, 26.190476190476193], [600.0, 45.350054085660126], [583.0, 21.27500000000001], [582.0, 3.5], [580.0, 38.96491228070176], [579.0, 3.5], [578.0, 24.333333333333336], [577.0, 3.0], [576.0, 27.6], [590.0, 41.47999999999999], [589.0, 57.105263157894726], [588.0, 28.5], [587.0, 27.666666666666664], [586.0, 50.62962962962965], [585.0, 93.88888888888889], [584.0, 142.40482573726533], [599.0, 130.38461538461536], [598.0, 25.444444444444443], [597.0, 4.5], [595.0, 30.28767123287672], [594.0, 21.545454545454543], [593.0, 23.294117647058822]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[595.6375019992179, 45.081947490610325]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 556353.95, "minX": 1.6263336E12, "maxY": 3385112.7333333334, "series": [{"data": [[1.62633366E12, 1560424.1666666667], [1.62633378E12, 1540689.3833333333], [1.6263336E12, 1148884.65], [1.6263339E12, 556353.95], [1.62633372E12, 1515815.5], [1.62633384E12, 1577667.2833333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62633366E12, 3340973.0833333335], [1.62633378E12, 3305746.5], [1.6263336E12, 2453409.55], [1.6263339E12, 1193726.6833333333], [1.62633372E12, 3252388.183333333], [1.62633384E12, 3385112.7333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263339E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 39.694620405576025, "minX": 1.6263336E12, "maxY": 47.48526443063736, "series": [{"data": [[1.62633366E12, 46.10058443040234], [1.62633378E12, 46.80605502670352], [1.6263336E12, 39.694620405576025], [1.6263339E12, 40.64885242226192], [1.62633372E12, 47.48526443063736], [1.62633384E12, 45.56759279567821]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263339E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 39.693294640370745, "minX": 1.6263336E12, "maxY": 47.48495253162577, "series": [{"data": [[1.62633366E12, 46.10025308556699], [1.62633378E12, 46.80573510400457], [1.6263336E12, 39.693294640370745], [1.6263339E12, 40.64851973862683], [1.62633372E12, 47.48495253162577], [1.62633384E12, 45.56725614514649]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263339E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.026668746704279333, "minX": 1.6263336E12, "maxY": 0.3544889499134212, "series": [{"data": [[1.62633366E12, 0.026668746704279333], [1.62633378E12, 0.028659850354525594], [1.6263336E12, 0.3544889499134212], [1.6263339E12, 0.026983535776147566], [1.62633372E12, 0.027200248457427013], [1.62633384E12, 0.02799300174956246]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263339E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6263336E12, "maxY": 1137.0, "series": [{"data": [[1.62633366E12, 1137.0], [1.62633378E12, 978.0], [1.6263336E12, 1008.0], [1.6263339E12, 883.0], [1.62633372E12, 973.0], [1.62633384E12, 937.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62633366E12, 49.0], [1.62633378E12, 42.0], [1.6263336E12, 43.0], [1.6263339E12, 10.0], [1.62633372E12, 48.0], [1.62633384E12, 40.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62633366E12, 623.0], [1.62633378E12, 609.9900000000016], [1.6263336E12, 522.0], [1.6263339E12, 75.0], [1.62633372E12, 360.9800000000032], [1.62633384E12, 481.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62633366E12, 70.0], [1.62633378E12, 224.0], [1.6263336E12, 116.0], [1.6263339E12, 16.0], [1.62633372E12, 175.95000000000073], [1.62633384E12, 71.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62633366E12, 1.0], [1.62633378E12, 1.0], [1.6263336E12, 1.0], [1.6263339E12, 1.0], [1.62633372E12, 1.0], [1.62633384E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62633366E12, 33.0], [1.62633378E12, 28.0], [1.6263336E12, 27.0], [1.6263339E12, 4.0], [1.62633372E12, 29.0], [1.62633384E12, 28.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263339E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 830.0, "maxY": 40.0, "series": [{"data": [[9005.0, 34.0], [9541.0, 32.0], [9897.0, 34.0], [10013.0, 33.0], [9949.0, 40.0], [10225.0, 32.0], [10545.0, 30.0], [10425.0, 31.0], [11473.0, 34.0], [11617.0, 30.0], [11469.0, 30.0], [11525.0, 30.0], [11409.0, 30.0], [11545.0, 28.0], [11925.0, 27.0], [11909.0, 28.0], [12285.0, 32.0], [11793.0, 34.0], [12173.0, 28.0], [12133.0, 29.0], [12261.0, 28.0], [11845.0, 29.0], [12317.0, 31.0], [12713.0, 32.0], [12405.0, 30.0], [12525.0, 28.0], [12477.0, 32.0], [12321.0, 28.0], [12325.0, 26.0], [13129.0, 27.0], [12873.0, 27.0], [12921.0, 30.0], [13205.0, 29.0], [13749.0, 29.0], [13621.0, 28.0], [13669.0, 29.0], [13373.0, 28.0], [13385.0, 30.0], [13721.0, 26.0], [13581.0, 28.0], [13789.0, 27.0], [13361.0, 30.0], [13317.0, 30.0], [13845.0, 29.0], [14017.0, 30.0], [14085.0, 27.0], [13945.0, 29.0], [14269.0, 28.0], [13837.0, 30.0], [14769.0, 26.0], [14797.0, 29.0], [14425.0, 28.0], [14761.0, 29.0], [14649.0, 28.0], [14445.0, 28.0], [14673.0, 28.0], [14685.0, 28.0], [14601.0, 28.0], [15121.0, 27.0], [14981.0, 27.0], [14913.0, 29.0], [14861.0, 28.0], [15325.0, 27.0], [15473.0, 27.0], [15505.0, 28.0], [15637.0, 25.0], [15437.0, 27.0], [16209.0, 25.0], [15953.0, 26.0], [16033.0, 23.0], [17178.0, 28.0], [830.0, 33.0], [18121.0, 27.0], [6754.0, 34.0], [8660.0, 37.0], [9128.0, 34.0], [9288.0, 36.0], [9892.0, 36.0], [10212.0, 33.0], [10128.0, 33.0], [9808.0, 31.0], [10704.0, 34.0], [10708.0, 35.0], [10256.0, 32.0], [10744.0, 31.0], [10576.0, 33.0], [10536.0, 32.0], [10752.0, 36.0], [11148.0, 31.0], [10772.0, 30.0], [10980.0, 29.0], [11544.0, 30.0], [11384.0, 29.0], [11504.0, 33.0], [11552.0, 31.0], [11520.0, 28.0], [11268.0, 30.0], [11836.0, 29.0], [11940.0, 29.0], [12116.0, 33.0], [12144.0, 33.0], [12176.0, 27.0], [11852.0, 29.0], [12068.0, 27.0], [11784.0, 28.0], [12128.0, 27.0], [12680.0, 29.0], [12388.0, 32.0], [12664.0, 29.0], [12772.0, 28.0], [12720.0, 27.0], [12740.0, 28.0], [12744.0, 27.0], [12776.0, 30.0], [12576.0, 28.0], [12472.0, 30.0], [12328.0, 28.0], [12316.0, 30.0], [12304.0, 29.0], [12292.0, 33.0], [12524.0, 31.0], [12480.0, 27.0], [12360.0, 31.0], [12832.0, 32.0], [13120.0, 30.0], [12944.0, 26.0], [13160.0, 31.0], [12988.0, 32.0], [12840.0, 29.0], [13032.0, 32.0], [12992.0, 26.0], [12804.0, 30.0], [13288.0, 31.0], [13216.0, 28.0], [13228.0, 27.0], [12920.0, 29.0], [13352.0, 30.0], [13696.0, 30.0], [13340.0, 29.0], [13724.0, 29.0], [13400.0, 26.0], [13748.0, 26.0], [13436.0, 27.0], [13720.0, 28.0], [13924.0, 26.0], [14088.0, 29.0], [13956.0, 29.0], [14236.0, 28.0], [13880.0, 28.0], [14152.0, 30.0], [14040.0, 27.0], [14300.0, 28.0], [14136.0, 29.0], [14344.0, 30.0], [14656.0, 26.0], [14768.0, 27.0], [14644.0, 28.0], [15272.0, 30.0], [15228.0, 28.0], [14876.0, 27.0], [15080.0, 12.0], [15444.0, 25.0], [15684.0, 26.0], [15728.0, 29.0], [15468.0, 26.0], [15828.0, 26.0], [15460.0, 26.0], [15376.0, 26.0], [16084.0, 26.0], [16080.0, 26.0], [18592.0, 27.0], [16679.0, 29.0], [16479.0, 25.0], [9719.0, 35.0], [9879.0, 34.0], [10059.0, 3.0], [10479.0, 32.0], [10343.0, 31.0], [10751.0, 31.0], [10707.0, 31.0], [10895.0, 29.0], [11227.0, 29.0], [11203.0, 31.0], [11771.0, 31.0], [11599.0, 34.0], [11355.0, 31.0], [11499.0, 29.0], [11363.0, 30.0], [11799.0, 29.0], [11807.0, 29.0], [12119.0, 29.0], [12259.0, 29.0], [12059.0, 29.0], [12091.0, 32.0], [12103.0, 27.0], [12691.0, 28.0], [12323.0, 29.0], [12463.0, 28.0], [12467.0, 29.0], [12427.0, 31.0], [12483.0, 27.0], [12331.0, 27.0], [13247.0, 29.0], [12943.0, 29.0], [13163.0, 31.0], [13183.0, 31.0], [13107.0, 29.0], [12995.0, 31.0], [12947.0, 27.0], [12963.0, 30.0], [12939.0, 29.0], [13771.0, 29.0], [13675.0, 28.0], [13367.0, 30.0], [13895.0, 29.0], [14799.0, 27.0], [14735.0, 27.0], [14559.0, 28.0], [14519.0, 25.0], [14679.0, 29.0], [14607.0, 27.0], [14707.0, 27.0], [15035.0, 28.0], [15003.0, 26.0], [15127.0, 27.0], [15243.0, 27.0], [15191.0, 28.0], [15635.0, 26.0], [15819.0, 28.0], [15599.0, 27.0], [15523.0, 26.0], [15491.0, 26.0], [17774.0, 29.0], [4717.0, 16.0], [7769.0, 33.0], [8266.0, 29.0], [9626.0, 28.0], [9754.0, 39.0], [10170.0, 31.0], [10042.0, 33.0], [10090.0, 31.0], [10186.0, 34.0], [10594.0, 31.0], [10274.0, 33.0], [10866.0, 36.0], [11262.0, 30.0], [11290.0, 31.0], [11534.0, 30.0], [11310.0, 34.0], [12098.0, 28.0], [12278.0, 28.0], [11958.0, 29.0], [12110.0, 29.0], [12162.0, 26.0], [12186.0, 28.0], [12306.0, 33.0], [12682.0, 29.0], [12334.0, 32.0], [12318.0, 27.0], [12426.0, 29.0], [12518.0, 28.0], [12498.0, 28.0], [12450.0, 26.0], [12762.0, 26.0], [13146.0, 26.0], [12846.0, 31.0], [13302.0, 30.0], [13154.0, 30.0], [13126.0, 31.0], [13130.0, 31.0], [12890.0, 26.0], [12818.0, 5.0], [13574.0, 30.0], [13650.0, 28.0], [13822.0, 28.0], [13502.0, 27.0], [13634.0, 30.0], [13342.0, 30.0], [14302.0, 28.0], [14146.0, 30.0], [14094.0, 29.0], [14062.0, 29.0], [13954.0, 29.0], [14662.0, 27.0], [14490.0, 26.0], [14642.0, 27.0], [14582.0, 28.0], [14774.0, 25.0], [15138.0, 24.0], [15146.0, 27.0], [14862.0, 28.0], [15658.0, 28.0], [15414.0, 28.0], [15546.0, 26.0], [15362.0, 26.0], [15938.0, 26.0], [15958.0, 28.0], [16988.0, 29.0], [16780.0, 25.0], [17724.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18592.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 830.0, "maxY": 40.0, "series": [{"data": [[9005.0, 34.0], [9541.0, 32.0], [9897.0, 34.0], [10013.0, 33.0], [9949.0, 40.0], [10225.0, 32.0], [10545.0, 30.0], [10425.0, 31.0], [11473.0, 34.0], [11617.0, 30.0], [11469.0, 30.0], [11525.0, 30.0], [11409.0, 30.0], [11545.0, 28.0], [11925.0, 27.0], [11909.0, 28.0], [12285.0, 32.0], [11793.0, 34.0], [12173.0, 28.0], [12133.0, 29.0], [12261.0, 28.0], [11845.0, 29.0], [12317.0, 31.0], [12713.0, 32.0], [12405.0, 30.0], [12525.0, 28.0], [12477.0, 32.0], [12321.0, 28.0], [12325.0, 26.0], [13129.0, 27.0], [12873.0, 27.0], [12921.0, 30.0], [13205.0, 29.0], [13749.0, 29.0], [13621.0, 28.0], [13669.0, 29.0], [13373.0, 28.0], [13385.0, 30.0], [13721.0, 26.0], [13581.0, 28.0], [13789.0, 27.0], [13361.0, 30.0], [13317.0, 30.0], [13845.0, 29.0], [14017.0, 30.0], [14085.0, 27.0], [13945.0, 29.0], [14269.0, 28.0], [13837.0, 30.0], [14769.0, 26.0], [14797.0, 29.0], [14425.0, 28.0], [14761.0, 29.0], [14649.0, 28.0], [14445.0, 28.0], [14673.0, 28.0], [14685.0, 28.0], [14601.0, 28.0], [15121.0, 27.0], [14981.0, 27.0], [14913.0, 29.0], [14861.0, 28.0], [15325.0, 27.0], [15473.0, 27.0], [15505.0, 28.0], [15637.0, 25.0], [15437.0, 27.0], [16209.0, 25.0], [15953.0, 26.0], [16033.0, 23.0], [17178.0, 28.0], [830.0, 33.0], [18121.0, 27.0], [6754.0, 34.0], [8660.0, 37.0], [9128.0, 34.0], [9288.0, 36.0], [9892.0, 36.0], [10212.0, 33.0], [10128.0, 33.0], [9808.0, 31.0], [10704.0, 34.0], [10708.0, 35.0], [10256.0, 32.0], [10744.0, 31.0], [10576.0, 33.0], [10536.0, 32.0], [10752.0, 36.0], [11148.0, 31.0], [10772.0, 30.0], [10980.0, 29.0], [11544.0, 30.0], [11384.0, 29.0], [11504.0, 33.0], [11552.0, 31.0], [11520.0, 28.0], [11268.0, 30.0], [11836.0, 29.0], [11940.0, 29.0], [12116.0, 33.0], [12144.0, 33.0], [12176.0, 27.0], [11852.0, 29.0], [12068.0, 27.0], [11784.0, 28.0], [12128.0, 27.0], [12680.0, 29.0], [12388.0, 32.0], [12664.0, 29.0], [12772.0, 28.0], [12720.0, 27.0], [12740.0, 28.0], [12744.0, 27.0], [12776.0, 30.0], [12576.0, 28.0], [12472.0, 30.0], [12328.0, 28.0], [12316.0, 30.0], [12304.0, 29.0], [12292.0, 33.0], [12524.0, 31.0], [12480.0, 27.0], [12360.0, 31.0], [12832.0, 32.0], [13120.0, 30.0], [12944.0, 26.0], [13160.0, 31.0], [12988.0, 32.0], [12840.0, 29.0], [13032.0, 32.0], [12992.0, 26.0], [12804.0, 30.0], [13288.0, 31.0], [13216.0, 28.0], [13228.0, 27.0], [12920.0, 29.0], [13352.0, 30.0], [13696.0, 30.0], [13340.0, 29.0], [13724.0, 29.0], [13400.0, 26.0], [13748.0, 26.0], [13436.0, 27.0], [13720.0, 28.0], [13924.0, 26.0], [14088.0, 29.0], [13956.0, 29.0], [14236.0, 28.0], [13880.0, 28.0], [14152.0, 30.0], [14040.0, 27.0], [14300.0, 28.0], [14136.0, 29.0], [14344.0, 30.0], [14656.0, 26.0], [14768.0, 27.0], [14644.0, 28.0], [15272.0, 30.0], [15228.0, 28.0], [14876.0, 27.0], [15080.0, 12.0], [15444.0, 25.0], [15684.0, 26.0], [15728.0, 29.0], [15468.0, 26.0], [15828.0, 26.0], [15460.0, 26.0], [15376.0, 26.0], [16084.0, 26.0], [16080.0, 26.0], [18592.0, 27.0], [16679.0, 29.0], [16479.0, 25.0], [9719.0, 35.0], [9879.0, 34.0], [10059.0, 3.0], [10479.0, 32.0], [10343.0, 31.0], [10751.0, 31.0], [10707.0, 31.0], [10895.0, 29.0], [11227.0, 29.0], [11203.0, 31.0], [11771.0, 31.0], [11599.0, 34.0], [11355.0, 31.0], [11499.0, 29.0], [11363.0, 30.0], [11799.0, 29.0], [11807.0, 29.0], [12119.0, 29.0], [12259.0, 29.0], [12059.0, 29.0], [12091.0, 32.0], [12103.0, 27.0], [12691.0, 28.0], [12323.0, 29.0], [12463.0, 28.0], [12467.0, 29.0], [12427.0, 31.0], [12483.0, 27.0], [12331.0, 27.0], [13247.0, 29.0], [12943.0, 29.0], [13163.0, 31.0], [13183.0, 31.0], [13107.0, 29.0], [12995.0, 31.0], [12947.0, 27.0], [12963.0, 30.0], [12939.0, 29.0], [13771.0, 29.0], [13675.0, 28.0], [13367.0, 30.0], [13895.0, 29.0], [14799.0, 27.0], [14735.0, 27.0], [14559.0, 28.0], [14519.0, 25.0], [14679.0, 29.0], [14607.0, 27.0], [14707.0, 27.0], [15035.0, 28.0], [15003.0, 26.0], [15127.0, 27.0], [15243.0, 27.0], [15191.0, 28.0], [15635.0, 26.0], [15819.0, 28.0], [15599.0, 27.0], [15523.0, 26.0], [15491.0, 26.0], [17774.0, 29.0], [4717.0, 16.0], [7769.0, 33.0], [8266.0, 29.0], [9626.0, 28.0], [9754.0, 39.0], [10170.0, 31.0], [10042.0, 33.0], [10090.0, 31.0], [10186.0, 34.0], [10594.0, 31.0], [10274.0, 33.0], [10866.0, 36.0], [11262.0, 30.0], [11290.0, 31.0], [11534.0, 30.0], [11310.0, 34.0], [12098.0, 28.0], [12278.0, 28.0], [11958.0, 29.0], [12110.0, 29.0], [12162.0, 26.0], [12186.0, 28.0], [12306.0, 33.0], [12682.0, 29.0], [12334.0, 32.0], [12318.0, 27.0], [12426.0, 29.0], [12518.0, 28.0], [12498.0, 28.0], [12450.0, 26.0], [12762.0, 26.0], [13146.0, 26.0], [12846.0, 31.0], [13302.0, 30.0], [13154.0, 30.0], [13126.0, 31.0], [13130.0, 31.0], [12890.0, 26.0], [12818.0, 5.0], [13574.0, 30.0], [13650.0, 28.0], [13822.0, 28.0], [13502.0, 27.0], [13634.0, 30.0], [13342.0, 30.0], [14302.0, 28.0], [14146.0, 30.0], [14094.0, 29.0], [14062.0, 29.0], [13954.0, 29.0], [14662.0, 27.0], [14490.0, 26.0], [14642.0, 27.0], [14582.0, 28.0], [14774.0, 25.0], [15138.0, 24.0], [15146.0, 27.0], [14862.0, 28.0], [15658.0, 28.0], [15414.0, 28.0], [15546.0, 26.0], [15362.0, 26.0], [15938.0, 26.0], [15958.0, 28.0], [16988.0, 29.0], [16780.0, 25.0], [17724.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18592.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4599.116666666667, "minX": 1.6263336E12, "maxY": 13069.833333333334, "series": [{"data": [[1.62633366E12, 12935.683333333332], [1.62633378E12, 12763.466666666667], [1.6263336E12, 9517.766666666666], [1.6263339E12, 4599.116666666667], [1.62633372E12, 12557.666666666666], [1.62633384E12, 13069.833333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263339E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4608.983333333334, "minX": 1.6263336E12, "maxY": 13069.933333333332, "series": [{"data": [[1.62633366E12, 12927.116666666667], [1.62633378E12, 12763.5], [1.6263336E12, 9516.516666666666], [1.6263339E12, 4608.983333333334], [1.62633372E12, 12557.483333333334], [1.62633384E12, 13069.933333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263339E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4608.983333333334, "minX": 1.6263336E12, "maxY": 13069.933333333332, "series": [{"data": [[1.62633366E12, 12927.116666666667], [1.62633378E12, 12763.5], [1.6263336E12, 9516.516666666666], [1.6263339E12, 4608.983333333334], [1.62633372E12, 12557.483333333334], [1.62633384E12, 13069.933333333332]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263339E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4608.983333333334, "minX": 1.6263336E12, "maxY": 13069.933333333332, "series": [{"data": [[1.62633366E12, 12927.116666666667], [1.62633378E12, 12763.5], [1.6263336E12, 9516.516666666666], [1.6263339E12, 4608.983333333334], [1.62633372E12, 12557.483333333334], [1.62633384E12, 13069.933333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263339E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

