/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1218.0, "series": [{"data": [[0.0, 0.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 3.0], [0.6, 4.0], [0.7, 4.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 6.0], [1.2, 6.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 8.0], [1.7, 8.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 10.0], [2.2, 10.0], [2.3, 11.0], [2.4, 11.0], [2.5, 11.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 13.0], [3.0, 13.0], [3.1, 13.0], [3.2, 13.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 16.0], [4.1, 16.0], [4.2, 16.0], [4.3, 16.0], [4.4, 16.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 19.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 22.0], [7.3, 22.0], [7.4, 22.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 23.0], [8.0, 23.0], [8.1, 23.0], [8.2, 23.0], [8.3, 23.0], [8.4, 23.0], [8.5, 23.0], [8.6, 24.0], [8.7, 24.0], [8.8, 24.0], [8.9, 24.0], [9.0, 24.0], [9.1, 24.0], [9.2, 24.0], [9.3, 25.0], [9.4, 25.0], [9.5, 25.0], [9.6, 25.0], [9.7, 25.0], [9.8, 25.0], [9.9, 25.0], [10.0, 26.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 27.0], [10.7, 27.0], [10.8, 27.0], [10.9, 27.0], [11.0, 27.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 28.0], [11.5, 28.0], [11.6, 28.0], [11.7, 28.0], [11.8, 28.0], [11.9, 28.0], [12.0, 28.0], [12.1, 28.0], [12.2, 29.0], [12.3, 29.0], [12.4, 29.0], [12.5, 29.0], [12.6, 29.0], [12.7, 29.0], [12.8, 29.0], [12.9, 29.0], [13.0, 29.0], [13.1, 30.0], [13.2, 30.0], [13.3, 30.0], [13.4, 30.0], [13.5, 30.0], [13.6, 30.0], [13.7, 30.0], [13.8, 30.0], [13.9, 30.0], [14.0, 31.0], [14.1, 31.0], [14.2, 31.0], [14.3, 31.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 31.0], [14.9, 31.0], [15.0, 32.0], [15.1, 32.0], [15.2, 32.0], [15.3, 32.0], [15.4, 32.0], [15.5, 32.0], [15.6, 32.0], [15.7, 32.0], [15.8, 32.0], [15.9, 33.0], [16.0, 33.0], [16.1, 33.0], [16.2, 33.0], [16.3, 33.0], [16.4, 33.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 33.0], [16.9, 34.0], [17.0, 34.0], [17.1, 34.0], [17.2, 34.0], [17.3, 34.0], [17.4, 34.0], [17.5, 34.0], [17.6, 34.0], [17.7, 34.0], [17.8, 34.0], [17.9, 35.0], [18.0, 35.0], [18.1, 35.0], [18.2, 35.0], [18.3, 35.0], [18.4, 35.0], [18.5, 35.0], [18.6, 35.0], [18.7, 35.0], [18.8, 35.0], [18.9, 35.0], [19.0, 36.0], [19.1, 36.0], [19.2, 36.0], [19.3, 36.0], [19.4, 36.0], [19.5, 36.0], [19.6, 36.0], [19.7, 36.0], [19.8, 36.0], [19.9, 36.0], [20.0, 36.0], [20.1, 36.0], [20.2, 37.0], [20.3, 37.0], [20.4, 37.0], [20.5, 37.0], [20.6, 37.0], [20.7, 37.0], [20.8, 37.0], [20.9, 37.0], [21.0, 37.0], [21.1, 37.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 37.0], [21.6, 37.0], [21.7, 38.0], [21.8, 38.0], [21.9, 38.0], [22.0, 38.0], [22.1, 38.0], [22.2, 38.0], [22.3, 38.0], [22.4, 38.0], [22.5, 38.0], [22.6, 38.0], [22.7, 38.0], [22.8, 38.0], [22.9, 38.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 39.0], [23.4, 39.0], [23.5, 39.0], [23.6, 39.0], [23.7, 39.0], [23.8, 39.0], [23.9, 39.0], [24.0, 39.0], [24.1, 39.0], [24.2, 39.0], [24.3, 39.0], [24.4, 39.0], [24.5, 39.0], [24.6, 39.0], [24.7, 39.0], [24.8, 39.0], [24.9, 39.0], [25.0, 39.0], [25.1, 40.0], [25.2, 40.0], [25.3, 40.0], [25.4, 40.0], [25.5, 40.0], [25.6, 40.0], [25.7, 40.0], [25.8, 40.0], [25.9, 40.0], [26.0, 40.0], [26.1, 40.0], [26.2, 40.0], [26.3, 40.0], [26.4, 40.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 41.0], [27.2, 41.0], [27.3, 41.0], [27.4, 41.0], [27.5, 41.0], [27.6, 41.0], [27.7, 41.0], [27.8, 41.0], [27.9, 41.0], [28.0, 41.0], [28.1, 41.0], [28.2, 41.0], [28.3, 41.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 41.0], [28.9, 41.0], [29.0, 41.0], [29.1, 41.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 43.0], [31.9, 43.0], [32.0, 43.0], [32.1, 43.0], [32.2, 43.0], [32.3, 43.0], [32.4, 43.0], [32.5, 43.0], [32.6, 43.0], [32.7, 43.0], [32.8, 43.0], [32.9, 43.0], [33.0, 43.0], [33.1, 43.0], [33.2, 43.0], [33.3, 43.0], [33.4, 43.0], [33.5, 43.0], [33.6, 43.0], [33.7, 43.0], [33.8, 43.0], [33.9, 43.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 44.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 45.0], [37.3, 45.0], [37.4, 45.0], [37.5, 45.0], [37.6, 45.0], [37.7, 45.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 45.0], [38.6, 45.0], [38.7, 45.0], [38.8, 45.0], [38.9, 45.0], [39.0, 45.0], [39.1, 45.0], [39.2, 45.0], [39.3, 45.0], [39.4, 45.0], [39.5, 46.0], [39.6, 46.0], [39.7, 46.0], [39.8, 46.0], [39.9, 46.0], [40.0, 46.0], [40.1, 46.0], [40.2, 46.0], [40.3, 46.0], [40.4, 46.0], [40.5, 46.0], [40.6, 46.0], [40.7, 46.0], [40.8, 46.0], [40.9, 46.0], [41.0, 46.0], [41.1, 46.0], [41.2, 46.0], [41.3, 46.0], [41.4, 46.0], [41.5, 46.0], [41.6, 46.0], [41.7, 46.0], [41.8, 46.0], [41.9, 46.0], [42.0, 46.0], [42.1, 46.0], [42.2, 46.0], [42.3, 46.0], [42.4, 46.0], [42.5, 47.0], [42.6, 47.0], [42.7, 47.0], [42.8, 47.0], [42.9, 47.0], [43.0, 47.0], [43.1, 47.0], [43.2, 47.0], [43.3, 47.0], [43.4, 47.0], [43.5, 47.0], [43.6, 47.0], [43.7, 47.0], [43.8, 47.0], [43.9, 47.0], [44.0, 47.0], [44.1, 47.0], [44.2, 47.0], [44.3, 47.0], [44.4, 47.0], [44.5, 47.0], [44.6, 47.0], [44.7, 47.0], [44.8, 47.0], [44.9, 47.0], [45.0, 47.0], [45.1, 47.0], [45.2, 47.0], [45.3, 47.0], [45.4, 47.0], [45.5, 47.0], [45.6, 48.0], [45.7, 48.0], [45.8, 48.0], [45.9, 48.0], [46.0, 48.0], [46.1, 48.0], [46.2, 48.0], [46.3, 48.0], [46.4, 48.0], [46.5, 48.0], [46.6, 48.0], [46.7, 48.0], [46.8, 48.0], [46.9, 48.0], [47.0, 48.0], [47.1, 48.0], [47.2, 48.0], [47.3, 48.0], [47.4, 48.0], [47.5, 48.0], [47.6, 48.0], [47.7, 48.0], [47.8, 48.0], [47.9, 48.0], [48.0, 48.0], [48.1, 48.0], [48.2, 48.0], [48.3, 48.0], [48.4, 48.0], [48.5, 48.0], [48.6, 48.0], [48.7, 48.0], [48.8, 48.0], [48.9, 49.0], [49.0, 49.0], [49.1, 49.0], [49.2, 49.0], [49.3, 49.0], [49.4, 49.0], [49.5, 49.0], [49.6, 49.0], [49.7, 49.0], [49.8, 49.0], [49.9, 49.0], [50.0, 49.0], [50.1, 49.0], [50.2, 49.0], [50.3, 49.0], [50.4, 49.0], [50.5, 49.0], [50.6, 49.0], [50.7, 49.0], [50.8, 49.0], [50.9, 49.0], [51.0, 49.0], [51.1, 49.0], [51.2, 49.0], [51.3, 49.0], [51.4, 49.0], [51.5, 49.0], [51.6, 49.0], [51.7, 49.0], [51.8, 49.0], [51.9, 49.0], [52.0, 49.0], [52.1, 50.0], [52.2, 50.0], [52.3, 50.0], [52.4, 50.0], [52.5, 50.0], [52.6, 50.0], [52.7, 50.0], [52.8, 50.0], [52.9, 50.0], [53.0, 50.0], [53.1, 50.0], [53.2, 50.0], [53.3, 50.0], [53.4, 50.0], [53.5, 50.0], [53.6, 50.0], [53.7, 50.0], [53.8, 50.0], [53.9, 50.0], [54.0, 50.0], [54.1, 50.0], [54.2, 50.0], [54.3, 50.0], [54.4, 50.0], [54.5, 50.0], [54.6, 50.0], [54.7, 50.0], [54.8, 50.0], [54.9, 50.0], [55.0, 50.0], [55.1, 50.0], [55.2, 50.0], [55.3, 50.0], [55.4, 51.0], [55.5, 51.0], [55.6, 51.0], [55.7, 51.0], [55.8, 51.0], [55.9, 51.0], [56.0, 51.0], [56.1, 51.0], [56.2, 51.0], [56.3, 51.0], [56.4, 51.0], [56.5, 51.0], [56.6, 51.0], [56.7, 51.0], [56.8, 51.0], [56.9, 51.0], [57.0, 51.0], [57.1, 51.0], [57.2, 51.0], [57.3, 51.0], [57.4, 51.0], [57.5, 51.0], [57.6, 51.0], [57.7, 51.0], [57.8, 51.0], [57.9, 51.0], [58.0, 51.0], [58.1, 51.0], [58.2, 51.0], [58.3, 51.0], [58.4, 51.0], [58.5, 51.0], [58.6, 52.0], [58.7, 52.0], [58.8, 52.0], [58.9, 52.0], [59.0, 52.0], [59.1, 52.0], [59.2, 52.0], [59.3, 52.0], [59.4, 52.0], [59.5, 52.0], [59.6, 52.0], [59.7, 52.0], [59.8, 52.0], [59.9, 52.0], [60.0, 52.0], [60.1, 52.0], [60.2, 52.0], [60.3, 52.0], [60.4, 52.0], [60.5, 52.0], [60.6, 52.0], [60.7, 52.0], [60.8, 52.0], [60.9, 52.0], [61.0, 52.0], [61.1, 52.0], [61.2, 52.0], [61.3, 52.0], [61.4, 52.0], [61.5, 52.0], [61.6, 52.0], [61.7, 53.0], [61.8, 53.0], [61.9, 53.0], [62.0, 53.0], [62.1, 53.0], [62.2, 53.0], [62.3, 53.0], [62.4, 53.0], [62.5, 53.0], [62.6, 53.0], [62.7, 53.0], [62.8, 53.0], [62.9, 53.0], [63.0, 53.0], [63.1, 53.0], [63.2, 53.0], [63.3, 53.0], [63.4, 53.0], [63.5, 53.0], [63.6, 53.0], [63.7, 53.0], [63.8, 53.0], [63.9, 53.0], [64.0, 53.0], [64.1, 53.0], [64.2, 53.0], [64.3, 53.0], [64.4, 53.0], [64.5, 53.0], [64.6, 53.0], [64.7, 54.0], [64.8, 54.0], [64.9, 54.0], [65.0, 54.0], [65.1, 54.0], [65.2, 54.0], [65.3, 54.0], [65.4, 54.0], [65.5, 54.0], [65.6, 54.0], [65.7, 54.0], [65.8, 54.0], [65.9, 54.0], [66.0, 54.0], [66.1, 54.0], [66.2, 54.0], [66.3, 54.0], [66.4, 54.0], [66.5, 54.0], [66.6, 54.0], [66.7, 54.0], [66.8, 54.0], [66.9, 54.0], [67.0, 54.0], [67.1, 54.0], [67.2, 54.0], [67.3, 54.0], [67.4, 54.0], [67.5, 54.0], [67.6, 55.0], [67.7, 55.0], [67.8, 55.0], [67.9, 55.0], [68.0, 55.0], [68.1, 55.0], [68.2, 55.0], [68.3, 55.0], [68.4, 55.0], [68.5, 55.0], [68.6, 55.0], [68.7, 55.0], [68.8, 55.0], [68.9, 55.0], [69.0, 55.0], [69.1, 55.0], [69.2, 55.0], [69.3, 55.0], [69.4, 55.0], [69.5, 55.0], [69.6, 55.0], [69.7, 55.0], [69.8, 55.0], [69.9, 55.0], [70.0, 55.0], [70.1, 55.0], [70.2, 56.0], [70.3, 56.0], [70.4, 56.0], [70.5, 56.0], [70.6, 56.0], [70.7, 56.0], [70.8, 56.0], [70.9, 56.0], [71.0, 56.0], [71.1, 56.0], [71.2, 56.0], [71.3, 56.0], [71.4, 56.0], [71.5, 56.0], [71.6, 56.0], [71.7, 56.0], [71.8, 56.0], [71.9, 56.0], [72.0, 56.0], [72.1, 56.0], [72.2, 56.0], [72.3, 56.0], [72.4, 56.0], [72.5, 56.0], [72.6, 56.0], [72.7, 56.0], [72.8, 57.0], [72.9, 57.0], [73.0, 57.0], [73.1, 57.0], [73.2, 57.0], [73.3, 57.0], [73.4, 57.0], [73.5, 57.0], [73.6, 57.0], [73.7, 57.0], [73.8, 57.0], [73.9, 57.0], [74.0, 57.0], [74.1, 57.0], [74.2, 57.0], [74.3, 57.0], [74.4, 57.0], [74.5, 57.0], [74.6, 57.0], [74.7, 57.0], [74.8, 57.0], [74.9, 57.0], [75.0, 57.0], [75.1, 58.0], [75.2, 58.0], [75.3, 58.0], [75.4, 58.0], [75.5, 58.0], [75.6, 58.0], [75.7, 58.0], [75.8, 58.0], [75.9, 58.0], [76.0, 58.0], [76.1, 58.0], [76.2, 58.0], [76.3, 58.0], [76.4, 58.0], [76.5, 58.0], [76.6, 58.0], [76.7, 58.0], [76.8, 58.0], [76.9, 58.0], [77.0, 58.0], [77.1, 58.0], [77.2, 59.0], [77.3, 59.0], [77.4, 59.0], [77.5, 59.0], [77.6, 59.0], [77.7, 59.0], [77.8, 59.0], [77.9, 59.0], [78.0, 59.0], [78.1, 59.0], [78.2, 59.0], [78.3, 59.0], [78.4, 59.0], [78.5, 59.0], [78.6, 59.0], [78.7, 59.0], [78.8, 59.0], [78.9, 59.0], [79.0, 59.0], [79.1, 59.0], [79.2, 60.0], [79.3, 60.0], [79.4, 60.0], [79.5, 60.0], [79.6, 60.0], [79.7, 60.0], [79.8, 60.0], [79.9, 60.0], [80.0, 60.0], [80.1, 60.0], [80.2, 60.0], [80.3, 60.0], [80.4, 60.0], [80.5, 60.0], [80.6, 60.0], [80.7, 60.0], [80.8, 60.0], [80.9, 60.0], [81.0, 61.0], [81.1, 61.0], [81.2, 61.0], [81.3, 61.0], [81.4, 61.0], [81.5, 61.0], [81.6, 61.0], [81.7, 61.0], [81.8, 61.0], [81.9, 61.0], [82.0, 61.0], [82.1, 61.0], [82.2, 61.0], [82.3, 61.0], [82.4, 61.0], [82.5, 62.0], [82.6, 62.0], [82.7, 62.0], [82.8, 62.0], [82.9, 62.0], [83.0, 62.0], [83.1, 62.0], [83.2, 62.0], [83.3, 62.0], [83.4, 62.0], [83.5, 62.0], [83.6, 62.0], [83.7, 62.0], [83.8, 62.0], [83.9, 62.0], [84.0, 63.0], [84.1, 63.0], [84.2, 63.0], [84.3, 63.0], [84.4, 63.0], [84.5, 63.0], [84.6, 63.0], [84.7, 63.0], [84.8, 63.0], [84.9, 63.0], [85.0, 63.0], [85.1, 63.0], [85.2, 63.0], [85.3, 64.0], [85.4, 64.0], [85.5, 64.0], [85.6, 64.0], [85.7, 64.0], [85.8, 64.0], [85.9, 64.0], [86.0, 64.0], [86.1, 64.0], [86.2, 64.0], [86.3, 64.0], [86.4, 65.0], [86.5, 65.0], [86.6, 65.0], [86.7, 65.0], [86.8, 65.0], [86.9, 65.0], [87.0, 65.0], [87.1, 65.0], [87.2, 65.0], [87.3, 65.0], [87.4, 66.0], [87.5, 66.0], [87.6, 66.0], [87.7, 66.0], [87.8, 66.0], [87.9, 66.0], [88.0, 66.0], [88.1, 66.0], [88.2, 66.0], [88.3, 67.0], [88.4, 67.0], [88.5, 67.0], [88.6, 67.0], [88.7, 67.0], [88.8, 67.0], [88.9, 67.0], [89.0, 67.0], [89.1, 68.0], [89.2, 68.0], [89.3, 68.0], [89.4, 68.0], [89.5, 68.0], [89.6, 68.0], [89.7, 68.0], [89.8, 69.0], [89.9, 69.0], [90.0, 69.0], [90.1, 69.0], [90.2, 69.0], [90.3, 69.0], [90.4, 70.0], [90.5, 70.0], [90.6, 70.0], [90.7, 70.0], [90.8, 70.0], [90.9, 71.0], [91.0, 71.0], [91.1, 71.0], [91.2, 71.0], [91.3, 72.0], [91.4, 72.0], [91.5, 72.0], [91.6, 72.0], [91.7, 73.0], [91.8, 73.0], [91.9, 73.0], [92.0, 73.0], [92.1, 74.0], [92.2, 74.0], [92.3, 74.0], [92.4, 75.0], [92.5, 75.0], [92.6, 75.0], [92.7, 76.0], [92.8, 76.0], [92.9, 77.0], [93.0, 77.0], [93.1, 78.0], [93.2, 78.0], [93.3, 79.0], [93.4, 79.0], [93.5, 80.0], [93.6, 80.0], [93.7, 81.0], [93.8, 82.0], [93.9, 82.0], [94.0, 83.0], [94.1, 84.0], [94.2, 85.0], [94.3, 85.0], [94.4, 86.0], [94.5, 87.0], [94.6, 88.0], [94.7, 89.0], [94.8, 90.0], [94.9, 91.0], [95.0, 92.0], [95.1, 93.0], [95.2, 94.0], [95.3, 96.0], [95.4, 97.0], [95.5, 98.0], [95.6, 99.0], [95.7, 101.0], [95.8, 102.0], [95.9, 103.0], [96.0, 105.0], [96.1, 106.0], [96.2, 108.0], [96.3, 109.0], [96.4, 111.0], [96.5, 113.0], [96.6, 115.0], [96.7, 116.0], [96.8, 118.0], [96.9, 120.0], [97.0, 122.0], [97.1, 124.0], [97.2, 126.0], [97.3, 128.0], [97.4, 130.0], [97.5, 132.0], [97.6, 134.0], [97.7, 136.0], [97.8, 138.0], [97.9, 141.0], [98.0, 143.0], [98.1, 146.0], [98.2, 148.0], [98.3, 151.0], [98.4, 153.0], [98.5, 156.0], [98.6, 159.0], [98.7, 162.0], [98.8, 166.0], [98.9, 170.0], [99.0, 174.0], [99.1, 179.0], [99.2, 186.0], [99.3, 195.0], [99.4, 214.0], [99.5, 254.0], [99.6, 266.0], [99.7, 273.0], [99.8, 280.0], [99.9, 294.0], [100.0, 1218.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6292623.0, "series": [{"data": [[0.0, 6292623.0], [600.0, 429.0], [700.0, 26.0], [200.0, 38578.0], [800.0, 15.0], [900.0, 5.0], [1000.0, 175.0], [1100.0, 34.0], [300.0, 3267.0], [1200.0, 3.0], [100.0, 245099.0], [400.0, 1024.0], [500.0, 536.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1203.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6580611.0, "series": [{"data": [[0.0, 6580611.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1203.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 925.1026518788141, "minX": 1.62666342E12, "maxY": 1200.0, "series": [{"data": [[1.62666348E12, 1200.0], [1.62666366E12, 1200.0], [1.6266636E12, 1200.0], [1.62666372E12, 925.1026518788141], [1.62666342E12, 1002.9833915933829], [1.62666354E12, 1200.0]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666372E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 486.5, "series": [{"data": [[2.0, 1.3333333333333333], [3.0, 1.0], [4.0, 1.3333333333333333], [5.0, 1.2], [6.0, 1.5555555555555556], [7.0, 1.2857142857142856], [8.0, 1.3333333333333333], [9.0, 1.5641025641025639], [10.0, 1.4583333333333335], [11.0, 1.7857142857142856], [12.0, 1.5405405405405401], [13.0, 1.375], [14.0, 1.5703338806787057], [15.0, 1.545454545454545], [16.0, 1.5], [17.0, 1.6151658767772512], [18.0, 1.5388349514563102], [19.0, 1.6071428571428574], [20.0, 1.6907216494845367], [21.0, 1.5568181818181819], [22.0, 1.792207792207792], [24.0, 3.6714285714285717], [25.0, 1.6470588235294117], [26.0, 1.6636363636363634], [27.0, 2.0943396226415083], [28.0, 3.6936936936936946], [29.0, 1.8041237113402062], [30.0, 1.9154929577464788], [31.0, 1.5799999999999998], [33.0, 1.741379310344828], [32.0, 1.7796610169491525], [35.0, 1.8589743589743588], [34.0, 1.7346938775510203], [37.0, 1.8865248226950355], [36.0, 1.8999999999999997], [39.0, 1.8490566037735843], [38.0, 1.6666666666666667], [41.0, 2.061224489795918], [40.0, 1.9949579831932778], [43.0, 3.789473684210526], [42.0, 2.7500000000000004], [45.0, 5.958333333333334], [47.0, 4.312499999999999], [46.0, 6.0], [49.0, 2.4393939393939394], [48.0, 2.333333333333333], [51.0, 2.582089552238806], [50.0, 2.5167785234899327], [53.0, 3.064516129032258], [52.0, 2.4029850746268666], [55.0, 3.0], [54.0, 2.928571428571429], [57.0, 2.8333333333333335], [56.0, 2.5842696629213493], [59.0, 3.0], [58.0, 3.0], [61.0, 3.586206896551724], [60.0, 3.5600000000000005], [63.0, 3.4705882352941173], [62.0, 3.583333333333334], [67.0, 3.384615384615384], [66.0, 2.833333333333333], [65.0, 3.1923076923076916], [64.0, 3.6249999999999996], [71.0, 3.2727272727272734], [70.0, 3.0], [69.0, 3.55], [68.0, 3.2222222222222223], [75.0, 3.6153846153846154], [74.0, 4.6], [73.0, 4.8], [72.0, 3.596774193548388], [79.0, 4.750000000000001], [78.0, 3.3333333333333335], [77.0, 6.0], [76.0, 4.4], [83.0, 3.5714285714285716], [82.0, 3.6666666666666665], [81.0, 3.4117647058823524], [80.0, 4.0740740740740735], [87.0, 4.250000000000001], [86.0, 4.132075471698114], [85.0, 3.5384615384615388], [84.0, 4.0], [91.0, 4.523809523809522], [90.0, 4.43243243243243], [89.0, 4.75], [88.0, 4.593750000000001], [95.0, 4.529411764705884], [94.0, 4.0], [93.0, 4.866666666666667], [92.0, 5.25], [99.0, 4.699999999999999], [98.0, 4.25], [97.0, 4.363636363636363], [96.0, 5.0], [103.0, 5.454545454545454], [102.0, 5.071428571428572], [101.0, 5.518518518518516], [100.0, 5.044776119402988], [107.0, 4.523809523809525], [106.0, 5.90909090909091], [105.0, 5.25], [104.0, 4.636363636363637], [111.0, 5.109090909090911], [109.0, 4.8], [108.0, 4.225806451612903], [115.0, 6.14705882352941], [114.0, 5.407407407407407], [113.0, 5.611111111111112], [112.0, 5.44], [119.0, 5.76923076923077], [118.0, 6.0], [117.0, 6.04], [123.0, 5.891304347826088], [122.0, 5.579710144927535], [121.0, 5.800000000000002], [120.0, 6.2857142857142865], [127.0, 6.083333333333333], [126.0, 5.722222222222223], [125.0, 8.0], [124.0, 6.048387096774192], [135.0, 6.666666666666666], [134.0, 7.052631578947368], [133.0, 6.615384615384615], [132.0, 6.45], [131.0, 6.64179104477612], [130.0, 5.845070422535211], [129.0, 5.925925925925928], [143.0, 7.0], [142.0, 7.0], [141.0, 6.4814814814814845], [140.0, 6.250000000000001], [139.0, 6.0], [138.0, 6.454545454545455], [137.0, 6.928571428571429], [136.0, 7.0], [151.0, 7.090909090909091], [150.0, 7.200000000000001], [149.0, 7.724999999999998], [148.0, 8.0], [147.0, 7.048780487804879], [146.0, 7.230769230769231], [145.0, 7.0], [144.0, 6.0], [159.0, 6.888888888888889], [158.0, 6.733333333333333], [157.0, 7.0816326530612255], [156.0, 7.375], [155.0, 7.3], [154.0, 7.2], [153.0, 7.0], [152.0, 7.0], [167.0, 16.652173913043477], [165.0, 8.0], [164.0, 6.4], [163.0, 6.454545454545454], [162.0, 7.000000000000002], [161.0, 11.222222222222221], [160.0, 6.0], [175.0, 6.666666666666667], [174.0, 12.5], [172.0, 19.52], [171.0, 27.0], [170.0, 36.42857142857143], [169.0, 20.0], [168.0, 17.142857142857146], [182.0, 19.125000000000004], [181.0, 12.166666666666668], [180.0, 5.875], [179.0, 6.4], [178.0, 7.3076923076923075], [177.0, 15.999999999999998], [176.0, 19.333333333333336], [191.0, 12.590909090909093], [190.0, 4.0606060606060606], [189.0, 3.619047619047619], [188.0, 5.35], [187.0, 10.439999999999998], [186.0, 16.9], [185.0, 17.34285714285714], [184.0, 5.0], [199.0, 10.105263157894736], [198.0, 15.0], [197.0, 6.214285714285714], [196.0, 13.694444444444446], [195.0, 3.0], [194.0, 10.733333333333334], [193.0, 13.25], [192.0, 6.0], [207.0, 8.926829268292684], [206.0, 5.714285714285714], [205.0, 6.4], [204.0, 6.928571428571428], [203.0, 7.937500000000001], [202.0, 9.324324324324325], [201.0, 8.333333333333334], [200.0, 6.999999999999999], [213.0, 170.0694444444445], [215.0, 10.846153846153843], [214.0, 10.583333333333332], [212.0, 10.75], [211.0, 10.347826086956523], [209.0, 10.545454545454543], [208.0, 10.705882352941174], [219.0, 9.263157894736842], [220.0, 9.009900990099007], [221.0, 9.68217054263566], [223.0, 11.1], [222.0, 10.833333333333334], [218.0, 10.75], [217.0, 11.071428571428571], [216.0, 10.90909090909091], [229.0, 13.333333333333337], [230.0, 13.120000000000003], [231.0, 20.227350427350448], [228.0, 29.666666666666668], [227.0, 28.0], [226.0, 11.863636363636363], [225.0, 10.815789473684207], [224.0, 11.0], [232.0, 26.873616236162366], [233.0, 24.75252525252526], [234.0, 23.388888888888886], [235.0, 60.54102920723233], [236.0, 39.58701298701301], [239.0, 37.733333333333334], [237.0, 36.554054054054056], [238.0, 13.538461538461538], [240.0, 20.234782608695667], [242.0, 27.47826086956522], [243.0, 28.285846438482864], [241.0, 41.39495798319327], [244.0, 21.61685055165497], [246.0, 37.489690721649495], [247.0, 15.692307692307693], [245.0, 13.142857142857142], [248.0, 13.541666666666664], [249.0, 11.76528117359413], [250.0, 18.44008056394764], [255.0, 44.8], [251.0, 14.959999999999999], [254.0, 10.924999999999995], [253.0, 13.181818181818182], [252.0, 10.830769230769228], [258.0, 39.503875968992226], [259.0, 32.90433673469378], [268.0, 35.42105263157894], [257.0, 42.13114754098361], [256.0, 28.320754716981142], [260.0, 23.20408163265305], [261.0, 19.163265306122444], [262.0, 13.162805259862228], [263.0, 12.958333333333332], [271.0, 44.78125000000001], [270.0, 14.200000000000001], [264.0, 156.5], [266.0, 28.263157894736846], [267.0, 13.0], [265.0, 25.133333333333333], [269.0, 29.631578947368414], [274.0, 16.77551020408163], [273.0, 34.399999999999984], [275.0, 9.998260869565216], [284.0, 18.999999999999996], [285.0, 137.0], [286.0, 14.25], [287.0, 14.0], [272.0, 52.79069767441862], [276.0, 19.643982808022898], [277.0, 10.281879194630868], [278.0, 13.284482758620682], [279.0, 13.968749999999998], [280.0, 12.454545454545455], [281.0, 15.72607260726073], [282.0, 12.80392156862745], [283.0, 14.363636363636365], [301.0, 56.63636363636361], [288.0, 21.963035019455255], [289.0, 9.071729957805903], [302.0, 23.871794871794865], [300.0, 366.77922077922074], [291.0, 15.05263157894737], [290.0, 9.25], [299.0, 82.0], [298.0, 21.000000000000004], [296.0, 14.38888888888889], [297.0, 14.727272727272728], [303.0, 14.624999999999998], [294.0, 11.0], [293.0, 14.7], [292.0, 14.0], [295.0, 14.253164556962027], [306.0, 30.287234042553205], [304.0, 13.3], [305.0, 34.71952736318405], [311.0, 10.260869565217392], [310.0, 15.0], [312.0, 5.128712871287128], [313.0, 35.72546728971964], [315.0, 38.921052631578945], [314.0, 15.731343283582092], [309.0, 15.6], [308.0, 22.464285714285715], [307.0, 24.777777777777775], [316.0, 40.387005649717594], [318.0, 28.793696275071646], [319.0, 96.39534883720921], [317.0, 19.68965517241379], [323.0, 49.42656950672636], [320.0, 24.560975609756106], [321.0, 10.642857142857142], [322.0, 33.970540540540526], [324.0, 25.45034246575337], [326.0, 20.95918367346939], [325.0, 16.066666666666666], [327.0, 47.855421686746986], [335.0, 60.01075268817205], [329.0, 14.636363636363637], [328.0, 15.2], [331.0, 14.738095238095237], [330.0, 4.0], [334.0, 59.23880597014925], [333.0, 126.82142857142861], [332.0, 116.65], [337.0, 32.08131997642898], [336.0, 39.78906249999996], [338.0, 40.23475566821552], [348.0, 100.12727272727271], [339.0, 14.666666666666668], [350.0, 33.63268684957439], [351.0, 40.002849679411135], [349.0, 36.17592592592593], [340.0, 181.304347826087], [341.0, 52.133333333333326], [342.0, 13.32773109243697], [343.0, 39.02202537706476], [344.0, 47.86069651741294], [345.0, 17.159148936170208], [346.0, 37.830596107056024], [347.0, 24.881578947368414], [353.0, 16.76666666666667], [352.0, 14.904761904761903], [354.0, 28.894736842105264], [355.0, 19.083333333333336], [356.0, 43.2446077269495], [357.0, 66.0888888888889], [358.0, 38.47856893948182], [359.0, 47.04973821989526], [360.0, 32.90634365634367], [366.0, 25.73157894736842], [367.0, 20.78191489361702], [364.0, 85.63157894736842], [365.0, 70.48571428571427], [361.0, 41.68292682926831], [362.0, 23.062500000000004], [363.0, 17.363636363636378], [369.0, 22.168831168831172], [368.0, 20.729696969696967], [370.0, 17.65417170495767], [371.0, 19.285350318471334], [372.0, 22.18902439024392], [373.0, 19.049102927289884], [374.0, 19.08303249097471], [375.0, 34.448979591836725], [376.0, 18.67063770147161], [383.0, 18.288888888888877], [382.0, 17.04668930390496], [381.0, 17.0], [380.0, 20.8], [377.0, 20.110913140311816], [378.0, 15.575949367088592], [379.0, 13.57763975155279], [398.0, 43.33823529411765], [391.0, 23.587499999999995], [385.0, 18.238453276047263], [384.0, 18.193633952254643], [387.0, 21.167597765363134], [386.0, 22.7950177935943], [390.0, 21.728937728937737], [389.0, 21.846994535519123], [388.0, 21.208695652173912], [393.0, 38.01980198019801], [395.0, 31.818181818181824], [396.0, 23.174358974358974], [397.0, 20.198347107438007], [399.0, 16.358823529411758], [394.0, 21.789473684210524], [392.0, 21.288461538461537], [414.0, 9.4], [403.0, 14.176470588235292], [406.0, 25.714285714285715], [405.0, 13.130434782608694], [404.0, 12.2], [407.0, 10.444444444444445], [400.0, 14.444444444444445], [402.0, 13.666666666666666], [401.0, 14.0], [415.0, 9.846153846153847], [413.0, 11.0], [412.0, 10.153846153846155], [411.0, 10.0], [410.0, 11.666666666666666], [409.0, 13.33333333333333], [408.0, 12.6], [430.0, 24.444444444444443], [431.0, 20.76923076923077], [429.0, 21.21153846153846], [428.0, 23.0], [427.0, 25.892857142857146], [426.0, 23.5], [425.0, 26.0], [424.0, 38.181818181818194], [423.0, 5.478260869565216], [416.0, 10.8], [418.0, 7.0], [417.0, 9.533333333333333], [422.0, 6.0], [421.0, 5.5], [420.0, 17.75], [446.0, 21.636986301369877], [447.0, 25.00564971751412], [445.0, 21.582140697440003], [444.0, 15.817073170731712], [443.0, 22.443949044586027], [442.0, 21.470046082949295], [441.0, 24.138755980861248], [440.0, 20.25833333333333], [439.0, 19.752066115702483], [433.0, 18.0], [432.0, 14.076923076923075], [435.0, 25.493827160493826], [434.0, 22.8], [438.0, 19.94545454545455], [437.0, 20.03125], [436.0, 24.465277777777786], [462.0, 25.84645669291339], [463.0, 22.35338345864662], [461.0, 29.950980392156865], [460.0, 25.16666666666667], [459.0, 20.621510673234827], [458.0, 20.0], [457.0, 19.78571428571429], [456.0, 19.954802259887003], [455.0, 20.615384615384613], [449.0, 19.914285714285718], [448.0, 26.781132075471696], [451.0, 18.833333333333332], [450.0, 19.271186440677965], [454.0, 21.703448275862083], [453.0, 23.124161073825487], [452.0, 21.76785069235391], [478.0, 23.630922693266832], [479.0, 23.257142857142856], [477.0, 22.123076923076923], [476.0, 23.75375939849626], [475.0, 24.27083333333333], [474.0, 23.45061728395062], [473.0, 22.159090909090914], [472.0, 25.088333333333324], [471.0, 31.240601503759414], [465.0, 19.48529411764707], [464.0, 21.835260115606932], [467.0, 22.445945945945944], [466.0, 20.413407821229054], [470.0, 29.189655172413794], [469.0, 29.166666666666668], [468.0, 23.918575063613222], [494.0, 26.407407407407412], [495.0, 61.098039215686256], [493.0, 27.39634146341462], [492.0, 25.731707317073166], [491.0, 21.74193548387096], [490.0, 29.708121827411176], [489.0, 26.136690647482027], [488.0, 20.18181818181818], [487.0, 20.343750000000004], [481.0, 20.56140350877192], [480.0, 23.370936902485653], [483.0, 17.92307692307692], [482.0, 18.830097087378643], [486.0, 18.960159362549803], [485.0, 26.687041564792185], [484.0, 35.21634615384614], [499.0, 23.946395939086155], [496.0, 63.692307692307686], [497.0, 29.444444444444432], [498.0, 23.925233644859812], [503.0, 24.28571428571429], [502.0, 23.652298850574695], [501.0, 27.426618049225194], [500.0, 24.35925692695209], [504.0, 24.73895582329317], [510.0, 24.59893048128338], [511.0, 23.81600524762216], [505.0, 23.18421052631578], [507.0, 20.366726296958845], [506.0, 26.325278810408918], [508.0, 31.661417322834716], [509.0, 20.60621761658032], [518.0, 20.268292682926834], [513.0, 27.443243243243224], [512.0, 23.432550254298828], [527.0, 21.80659810337911], [524.0, 27.868372943327234], [525.0, 26.0090909090909], [526.0, 14.782267115600444], [522.0, 24.441176470588236], [523.0, 39.30586766541824], [514.0, 22.3927203065134], [515.0, 22.439252336448597], [517.0, 20.398305084745758], [516.0, 22.6407010710808], [519.0, 21.864077669902912], [536.0, 23.382291040288617], [541.0, 42.8611111111111], [540.0, 51.57480314960631], [539.0, 75.91228070175438], [538.0, 90.72727272727275], [537.0, 46.73298429319374], [542.0, 21.811638591117884], [543.0, 21.027777777777782], [528.0, 25.829268292682922], [530.0, 264.87096774193554], [529.0, 177.95], [532.0, 54.72121212121213], [531.0, 397.80368098159516], [534.0, 29.182339449541296], [535.0, 36.82093592883836], [533.0, 45.6], [520.0, 24.714285714285715], [521.0, 31.475992732935335], [572.0, 108.46666666666668], [544.0, 24.16091954022989], [559.0, 21.129032258064512], [558.0, 19.09090909090909], [557.0, 26.804878048780488], [556.0, 26.07812499999999], [555.0, 22.280000000000005], [554.0, 21.6], [552.0, 25.818181818181817], [553.0, 23.666666666666668], [546.0, 23.15541107382546], [547.0, 19.479999999999997], [549.0, 18.602484472049692], [548.0, 20.887640449438205], [545.0, 24.064516129032253], [575.0, 59.666666666666664], [560.0, 21.6], [561.0, 23.156862745098035], [562.0, 21.44], [564.0, 6.5], [565.0, 32.21052631578947], [563.0, 25.97777777777778], [574.0, 52.6], [573.0, 51.509803921568626], [570.0, 13.0], [569.0, 17.068965517241377], [568.0, 17.857142857142858], [551.0, 17.25], [571.0, 43.12499999999999], [550.0, 18.860215053763437], [567.0, 6.0], [566.0, 25.763636363636362], [603.0, 42.521739130434774], [594.0, 41.14285714285714], [605.0, 29.900000000000002], [607.0, 25.884615384615383], [606.0, 34.99999999999999], [592.0, 30.645161290322584], [593.0, 34.539682539682545], [604.0, 34.024390243902445], [601.0, 39.00000000000001], [600.0, 43.066666666666656], [602.0, 21.428571428571427], [583.0, 43.2], [582.0, 38.291666666666664], [581.0, 10.666666666666666], [580.0, 44.657534246575345], [579.0, 47.90322580645161], [578.0, 40.13333333333333], [577.0, 45.39999999999999], [576.0, 38.67857142857142], [591.0, 36.285714285714285], [590.0, 25.372093023255815], [589.0, 35.666666666666664], [588.0, 37.85714285714286], [587.0, 41.07758620689655], [585.0, 43.880952380952394], [586.0, 47.42307692307693], [584.0, 34.57142857142857], [598.0, 33.71794871794871], [599.0, 39.82432432432432], [597.0, 26.250000000000004], [595.0, 32.4025974025974], [596.0, 36.40845070422535], [636.0, 27.26923076923077], [637.0, 31.41666666666666], [639.0, 34.714285714285715], [638.0, 34.12857142857143], [635.0, 27.6875], [634.0, 24.5], [633.0, 28.319148936170215], [632.0, 29.04], [615.0, 22.956521739130427], [612.0, 12.0], [614.0, 7.5], [613.0, 21.208333333333336], [611.0, 15.647058823529411], [609.0, 24.444444444444443], [610.0, 31.500000000000007], [608.0, 19.76923076923077], [623.0, 17.8], [622.0, 18.612903225806452], [621.0, 4.0], [620.0, 18.333333333333336], [619.0, 18.400000000000006], [618.0, 14.384615384615385], [616.0, 20.999999999999996], [617.0, 14.999999999999998], [631.0, 29.174999999999997], [630.0, 23.8], [629.0, 26.88461538461538], [628.0, 29.36666666666667], [627.0, 30.349999999999998], [626.0, 29.72222222222222], [625.0, 25.687500000000004], [624.0, 19.807692307692307], [665.0, 31.742182890855446], [669.0, 31.60529688167438], [670.0, 30.184049079754597], [671.0, 32.5337773549001], [657.0, 40.14615384615383], [656.0, 29.821342925659454], [668.0, 38.11527777777779], [667.0, 23.054687500000004], [666.0, 22.848484848484855], [664.0, 30.942298288508532], [647.0, 33.93548387096774], [646.0, 33.30769230769231], [645.0, 33.61290322580645], [644.0, 30.999999999999996], [642.0, 10.4], [643.0, 33.10526315789474], [640.0, 19.333333333333332], [641.0, 33.39655172413792], [655.0, 31.374213836478003], [653.0, 29.80956910491762], [652.0, 28.603873239436624], [651.0, 29.24597495527728], [654.0, 30.941176470588232], [650.0, 33.55952380952382], [649.0, 33.27450980392156], [648.0, 33.43010752688173], [662.0, 27.384705606380404], [663.0, 34.55244755244757], [661.0, 29.494703505514877], [660.0, 32.05978260869564], [659.0, 40.937062937062926], [658.0, 32.94999999999999], [687.0, 20.990536277602562], [683.0, 9.646666666666668], [680.0, 28.29499999999999], [681.0, 6.364130434782605], [682.0, 17.35367114788004], [684.0, 11.534412955465589], [685.0, 15.158620689655173], [686.0, 10.698224852071004], [679.0, 28.51641137855579], [678.0, 31.30637507736746], [696.0, 68.5], [697.0, 73.63943829113924], [698.0, 66.54761904761905], [699.0, 90.35454545454546], [700.0, 45.64184177997537], [701.0, 60.517241379310335], [702.0, 55.08108108108109], [703.0, 66.39999999999999], [688.0, 30.756295694557263], [689.0, 38.031249999999986], [690.0, 34.76816326530616], [691.0, 28.90000000000002], [692.0, 41.142857142857125], [693.0, 25.608695652173914], [694.0, 9.120800814387515], [695.0, 10.987137203166215], [677.0, 30.71487603305785], [676.0, 32.51489096573198], [674.0, 30.277227722772285], [673.0, 35.06776180698155], [672.0, 34.623376623376615], [675.0, 31.609543568464733], [707.0, 41.00675675675671], [704.0, 54.708333333333336], [718.0, 45.1542288557214], [719.0, 84.66666666666666], [716.0, 23.1474358974359], [717.0, 35.28813559322035], [714.0, 77.26666666666667], [715.0, 38.937499999999986], [705.0, 53.86324786324787], [706.0, 40.027272727272745], [708.0, 40.140728476821195], [709.0, 33.50966183574879], [710.0, 36.73170731707316], [711.0, 37.16666666666667], [720.0, 38.11177170035677], [734.0, 23.459259259259262], [735.0, 26.193333333333342], [732.0, 25.8961038961039], [733.0, 21.705882352941174], [730.0, 31.150684931506852], [731.0, 18.195652173913054], [728.0, 32.853658536585364], [729.0, 18.96969696969699], [721.0, 28.55555555555556], [722.0, 18.979317476732152], [723.0, 32.17894736842105], [724.0, 23.900000000000002], [725.0, 29.18461538461539], [726.0, 69.33962264150942], [727.0, 20.436440677966104], [712.0, 38.74157303370785], [713.0, 38.16121495327105], [742.0, 49.36842105263159], [737.0, 19.5782747603834], [736.0, 18.786476868327384], [750.0, 19.529411764705884], [751.0, 33.72365805168986], [748.0, 20.86842105263158], [749.0, 20.789473684210524], [746.0, 50.30103707913072], [747.0, 110.89150943396223], [738.0, 19.603773584905692], [739.0, 36.44444444444444], [740.0, 71.79999999999998], [741.0, 41.4], [743.0, 22.45054945054945], [760.0, 17.384615384615383], [761.0, 26.58015267175574], [762.0, 24.544303797468366], [764.0, 22.62825278810409], [763.0, 17.314285714285717], [765.0, 25.92105263157895], [766.0, 21.796296296296298], [767.0, 23.01589220936256], [752.0, 44.423236514522834], [753.0, 38.70516717325232], [754.0, 25.50559701492537], [755.0, 27.642326332794802], [756.0, 38.59292035398228], [757.0, 25.20263157894737], [758.0, 20.5859872611465], [759.0, 17.923076923076923], [744.0, 23.259090909090915], [745.0, 42.00000000000001], [792.0, 52.94117647058823], [779.0, 81.79245283018865], [778.0, 38.6], [777.0, 55.5], [776.0, 24.09090909090909], [780.0, 57.583333333333336], [781.0, 21.374999999999996], [783.0, 26.88888888888889], [769.0, 45.33333333333333], [768.0, 23.73873873873873], [771.0, 37.833333333333336], [770.0, 49.333333333333336], [773.0, 24.0], [772.0, 41.6], [775.0, 19.300000000000004], [774.0, 17.1], [782.0, 20.333333333333332], [785.0, 50.461538461538474], [789.0, 486.5], [788.0, 39.36363636363637], [786.0, 31.187499999999993], [790.0, 62.10000000000001], [791.0, 28.11111111111111], [793.0, 26.88888888888889], [794.0, 30.368421052631575], [795.0, 145.87499999999997], [796.0, 59.545454545454525], [797.0, 47.800000000000004], [798.0, 65.11538461538461], [799.0, 32.52000000000001], [784.0, 22.333333333333336], [825.0, 17.72832369942195], [802.0, 17.0], [800.0, 183.66666666666669], [801.0, 27.555555555555557], [804.0, 35.79591836734694], [803.0, 29.899999999999995], [806.0, 83.0], [805.0, 84.0], [807.0, 50.75], [810.0, 41.727272727272734], [809.0, 55.857142857142854], [808.0, 51.0], [812.0, 57.0], [811.0, 56.8], [813.0, 149.7718491260347], [814.0, 64.29831932773118], [815.0, 49.06451612903225], [816.0, 58.198895027624374], [831.0, 21.518656716417905], [829.0, 35.3222778473092], [830.0, 31.375000000000004], [826.0, 13.88235294117647], [827.0, 22.153846153846153], [828.0, 29.872093023255825], [824.0, 16.15457685664937], [817.0, 39.55052005943536], [818.0, 47.31818181818182], [819.0, 43.111111111111114], [820.0, 39.46013667425968], [821.0, 41.332477901340205], [822.0, 42.80459770114946], [823.0, 26.06914893617022], [859.0, 37.17559523809521], [832.0, 16.316725978647693], [847.0, 38.749218261413354], [843.0, 37.10000000000001], [846.0, 39.424390243902444], [845.0, 38.72023809523811], [844.0, 38.81481481481484], [840.0, 39.13854452540939], [842.0, 38.176063303659646], [841.0, 39.85791125056041], [833.0, 35.15384615384616], [834.0, 34.487804878048784], [835.0, 36.62962962962962], [837.0, 35.958333333333336], [836.0, 35.23076923076923], [856.0, 48.46511627906977], [839.0, 19.119402985074625], [838.0, 39.347154262168345], [862.0, 39.90282262264357], [848.0, 41.210862619808374], [863.0, 39.43689320388352], [852.0, 40.33507853403121], [851.0, 36.08626760563382], [850.0, 40.10714285714285], [853.0, 36.2454128440367], [849.0, 38.54027058930347], [855.0, 26.440227703984814], [854.0, 37.7129713973402], [861.0, 41.369426751592336], [860.0, 38.32629410249816], [858.0, 40.30941755349577], [857.0, 53.77408637873755], [871.0, 41.03389830508475], [883.0, 41.94516129032261], [893.0, 37.853658536585364], [895.0, 37.79888268156424], [880.0, 39.56559139784946], [894.0, 45.06483344511512], [892.0, 37.9854368932039], [889.0, 31.21523178807946], [888.0, 25.23893805309735], [891.0, 32.096385542168704], [890.0, 32.921052631578924], [870.0, 39.696202531645575], [869.0, 42.00000000000001], [868.0, 39.600000000000016], [867.0, 38.10000000000001], [866.0, 38.62359550561795], [864.0, 42.7719298245614], [865.0, 39.035714285714285], [879.0, 39.06120760959472], [878.0, 37.69486457966932], [877.0, 40.92898959236757], [876.0, 40.895530917819165], [875.0, 56.12280701754389], [874.0, 51.914285714285725], [873.0, 41.19301491846896], [872.0, 38.449664429530195], [887.0, 42.02642276422768], [886.0, 48.85326086956522], [885.0, 39.88276089828278], [884.0, 42.13623107901683], [882.0, 39.57142857142857], [881.0, 38.91176470588235], [900.0, 29.64], [914.0, 26.7], [913.0, 30.302631578947373], [915.0, 32.13846153846156], [917.0, 50.91290322580646], [916.0, 29.575221238938052], [919.0, 33.76150627615061], [918.0, 49.701711491442616], [912.0, 39.557796917497654], [911.0, 35.59568545581069], [910.0, 44.56954266855256], [896.0, 37.10714285714286], [909.0, 36.357142857142854], [907.0, 27.62962962962963], [908.0, 33.802083333333314], [905.0, 27.178571428571427], [904.0, 28.84], [906.0, 31.365591397849464], [903.0, 29.281250000000004], [902.0, 30.304347826086957], [921.0, 40.20232052211752], [920.0, 37.62295081967214], [923.0, 40.507894736842026], [922.0, 40.60942760942765], [925.0, 44.3206106870229], [924.0, 41.666666666666664], [927.0, 44.49253731343283], [926.0, 45.33333333333333], [898.0, 39.88414634146341], [899.0, 33.33802816901408], [897.0, 42.500000000000014], [957.0, 34.7828947368421], [959.0, 41.334023464458376], [958.0, 41.16129032258065], [955.0, 44.748953974895386], [954.0, 42.01633986928105], [956.0, 45.76402726796009], [953.0, 39.50883392226154], [952.0, 42.18300653594772], [935.0, 42.914219197707745], [934.0, 39.34693877551022], [933.0, 42.37837837837838], [932.0, 41.80851063829788], [931.0, 37.51282051282051], [930.0, 5.0], [929.0, 43.72222222222222], [928.0, 44.441860465116285], [943.0, 43.80508474576273], [941.0, 40.27922077922075], [942.0, 38.25], [940.0, 40.411924119241185], [938.0, 49.77777777777777], [939.0, 42.69911851126335], [937.0, 47.02127659574467], [936.0, 48.877551020408184], [948.0, 119.33333333333333], [949.0, 46.312208760484644], [951.0, 18.878228782287806], [950.0, 24.69320388349515], [947.0, 43.205128205128204], [945.0, 44.92307692307692], [946.0, 41.90243902439025], [944.0, 44.30864197530862], [984.0, 39.475609756097576], [990.0, 37.10824742268041], [991.0, 36.61855670103092], [989.0, 42.14814814814816], [988.0, 36.34117647058823], [987.0, 4.0], [986.0, 32.76923076923077], [985.0, 37.333333333333336], [975.0, 42.636363636363626], [974.0, 45.57142857142857], [960.0, 45.046070460704605], [962.0, 42.97236614853197], [961.0, 48.71038251366121], [964.0, 43.12992529661633], [963.0, 41.72400000000006], [967.0, 36.96638655462186], [966.0, 46.72051009564296], [965.0, 45.38864800946005], [973.0, 39.44117647058824], [971.0, 52.93103448275863], [970.0, 44.6967741935484], [972.0, 39.670886075949355], [969.0, 46.24010554089708], [968.0, 48.305676855895214], [980.0, 35.28409090909091], [981.0, 44.14634146341464], [983.0, 42.50000000000001], [982.0, 39.92543859649124], [979.0, 47.67088607594938], [978.0, 38.23076923076922], [977.0, 34.375], [976.0, 49.84236453201969], [1022.0, 36.44052863436123], [1023.0, 33.77419354838711], [1019.0, 38.713333333333324], [1018.0, 40.0], [1021.0, 38.20689655172414], [1017.0, 35.666666666666664], [1014.0, 31.125], [1015.0, 38.028571428571446], [1013.0, 37.2962962962963], [1012.0, 36.407407407407405], [1011.0, 36.0], [1010.0, 37.67796610169492], [1009.0, 36.814814814814824], [1008.0, 42.936363636363645], [1007.0, 39.11111111111113], [1006.0, 36.0], [1005.0, 37.72500000000001], [1004.0, 39.5], [993.0, 33.46666666666667], [992.0, 35.740740740740755], [995.0, 27.900000000000006], [997.0, 37.0], [996.0, 36.56666666666666], [994.0, 35.865671641791046], [999.0, 38.580357142857125], [1016.0, 39.160714285714285], [998.0, 33.63636363636363], [1003.0, 39.67777777777775], [1002.0, 42.45945945945945], [1001.0, 37.56976744186047], [1000.0, 36.78260869565217], [1080.0, 2.833333333333333], [1086.0, 2.5454545454545454], [1084.0, 1.3333333333333333], [1082.0, 2.0], [1058.0, 7.368421052631579], [1056.0, 8.837837837837837], [1060.0, 6.749999999999999], [1062.0, 5.936170212765957], [1066.0, 3.4090909090909087], [1064.0, 5.142857142857143], [1078.0, 2.8048780487804876], [1076.0, 2.888888888888889], [1074.0, 3.3157894736842106], [1024.0, 27.35401459854016], [1026.0, 24.000000000000004], [1028.0, 28.42424242424242], [1030.0, 25.414814814814804], [1038.0, 14.25], [1036.0, 17.519230769230774], [1034.0, 20.240000000000002], [1072.0, 2.1999999999999993], [1032.0, 25.163934426229506], [1054.0, 9.235294117647058], [1052.0, 35.3], [1050.0, 11.0], [1048.0, 11.291666666666668], [1046.0, 13.736111111111109], [1044.0, 15.112], [1042.0, 17.77464788732394], [1040.0, 23.0], [1070.0, 2.4166666666666665], [1068.0, 3.2222222222222223], [1148.0, 152.625], [1120.0, 4.142857142857143], [1122.0, 183.0], [1126.0, 4.333333333333333], [1128.0, 5.8], [1124.0, 4.666666666666667], [1130.0, 129.33333333333334], [1132.0, 5.0], [1134.0, 166.85714285714286], [1150.0, 333.3125], [1146.0, 301.0], [1144.0, 3.0], [1142.0, 167.57142857142858], [1140.0, 167.57142857142858], [1138.0, 276.0], [1136.0, 194.25], [1088.0, 10.5], [1090.0, 13.214285714285717], [1096.0, 44.057377049180324], [1094.0, 44.464285714285715], [1092.0, 4.0], [1100.0, 9.0], [1102.0, 4.681818181818182], [1116.0, 3.0], [1112.0, 93.25], [1114.0, 3.0], [1110.0, 4.0], [1106.0, 4.75], [1104.0, 6.5], [1156.0, 417.0], [1158.0, 211.5], [1174.0, 24.964912280701753], [1152.0, 3.5], [1182.0, 37.963582677165235], [1180.0, 34.71428571428571], [1178.0, 44.719626168224295], [1176.0, 25.82911392405063], [1154.0, 169.40000000000003], [1172.0, 22.933219178082208], [1170.0, 24.696], [1162.0, 14.64788732394366], [1164.0, 14.358974358974361], [1166.0, 13.333333333333332], [1184.0, 51.458762886597995], [1200.0, 53.65138610581275], [1186.0, 48.89743589743589], [1188.0, 33.800000000000004], [1190.0, 42.81249999999999], [1192.0, 41.285714285714285], [1194.0, 56.94117647058823], [1196.0, 57.884615384615394], [1198.0, 64.36], [1168.0, 21.666666666666664], [1075.0, 2.173913043478261], [1087.0, 2.9545454545454546], [1083.0, 3.1], [1059.0, 6.0], [1057.0, 9.314814814814817], [1061.0, 7.451612903225806], [1063.0, 5.25], [1065.0, 4.076923076923077], [1079.0, 2.4166666666666665], [1077.0, 2.4545454545454546], [1073.0, 2.451612903225806], [1055.0, 9.804878048780488], [1027.0, 81.62500000000001], [1025.0, 27.59259259259259], [1029.0, 28.087378640776702], [1031.0, 48.33333333333333], [1039.0, 10.777777777777779], [1037.0, 16.563106796116507], [1035.0, 19.932584269662925], [1033.0, 21.615384615384617], [1053.0, 8.8], [1051.0, 9.899999999999999], [1049.0, 10.055555555555554], [1047.0, 12.552631578947368], [1045.0, 10.0], [1043.0, 14.333333333333334], [1041.0, 17.555555555555557], [1071.0, 31.621951219512187], [1069.0, 3.2857142857142856], [1067.0, 3.8235294117647065], [1149.0, 105.24999999999999], [1151.0, 346.5833333333333], [1123.0, 5.0], [1121.0, 5.0], [1125.0, 4.0], [1131.0, 3.5], [1129.0, 3.3333333333333335], [1133.0, 376.0], [1135.0, 387.0], [1147.0, 4.0], [1145.0, 191.5], [1143.0, 167.28571428571428], [1141.0, 264.0], [1137.0, 4.5], [1117.0, 6.0], [1091.0, 30.51724137931035], [1089.0, 112.66666666666666], [1095.0, 39.0], [1093.0, 37.8], [1099.0, 9.0], [1097.0, 5.5], [1101.0, 7.0], [1103.0, 3.0], [1111.0, 3.0], [1113.0, 2.0], [1109.0, 9.0], [1105.0, 5.0], [1163.0, 11.4], [1159.0, 7.61832061068702], [1153.0, 141.83333333333331], [1183.0, 49.78017241379307], [1181.0, 31.347457627118622], [1179.0, 29.439999999999994], [1177.0, 26.600760456273765], [1175.0, 24.65277777777778], [1155.0, 261.25], [1157.0, 252.8], [1173.0, 23.454545454545446], [1171.0, 24.77922077922076], [1161.0, 6.6], [1165.0, 15.761904761904761], [1167.0, 19.31034482758621], [1185.0, 54.823450134770944], [1187.0, 42.977777777777774], [1189.0, 44.78260869565218], [1191.0, 43.24999999999999], [1193.0, 54.89189189189188], [1195.0, 53.72727272727273], [1197.0, 48.33571428571429], [1199.0, 66.14150943396223], [1169.0, 26.380530973451346], [1.0, 1.5]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[1147.5328813607696, 51.683649522758934]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1406864.6833333333, "minX": 1.62666342E12, "maxY": 5580219.75, "series": [{"data": [[1.62666348E12, 2557068.5833333335], [1.62666366E12, 2562719.45], [1.6266636E12, 2595252.1666666665], [1.62666372E12, 1519188.1833333333], [1.62666342E12, 1406864.6833333333], [1.62666354E12, 2600704.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62666348E12, 5481439.2], [1.62666366E12, 5498682.233333333], [1.6266636E12, 5568461.15], [1.62666372E12, 3259622.9166666665], [1.62666342E12, 3004553.45], [1.62666354E12, 5580219.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666372E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 41.875778182418955, "minX": 1.62666342E12, "maxY": 54.31491282799995, "series": [{"data": [[1.62666348E12, 54.31491282799995], [1.62666366E12, 53.8790635455682], [1.6266636E12, 53.459382274761], [1.62666372E12, 41.875778182418955], [1.62666342E12, 47.11572106115152], [1.62666354E12, 53.36099372251477]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666372E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 41.8754682999479, "minX": 1.62666342E12, "maxY": 54.31450369907704, "series": [{"data": [[1.62666348E12, 54.31450369907704], [1.62666366E12, 53.87868594297735], [1.6266636E12, 53.45898614796641], [1.62666372E12, 41.8754682999479], [1.62666342E12, 47.102337935019925], [1.62666354E12, 53.36065876856297]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666372E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.12701208409203552, "minX": 1.62666342E12, "maxY": 0.24425027604395824, "series": [{"data": [[1.62666348E12, 0.16493875261311866], [1.62666366E12, 0.17441079079874008], [1.6266636E12, 0.17772759654912546], [1.62666372E12, 0.12701208409203552], [1.62666342E12, 0.24425027604395824], [1.62666354E12, 0.14485714175204842]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666372E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62666342E12, "maxY": 1218.0, "series": [{"data": [[1.62666348E12, 1214.0], [1.62666366E12, 1189.0], [1.6266636E12, 1186.0], [1.62666372E12, 1174.0], [1.62666342E12, 1108.0], [1.62666354E12, 1218.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62666348E12, 69.0], [1.62666366E12, 70.0], [1.6266636E12, 64.0], [1.62666372E12, 18.0], [1.62666342E12, 70.0], [1.62666354E12, 67.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62666348E12, 260.0], [1.62666366E12, 125.0], [1.6266636E12, 165.0], [1.62666372E12, 46.0], [1.62666342E12, 153.0], [1.62666354E12, 274.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62666348E12, 86.0], [1.62666366E12, 89.0], [1.6266636E12, 73.0], [1.62666372E12, 24.0], [1.62666342E12, 101.0], [1.62666354E12, 109.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62666348E12, 1.0], [1.62666366E12, 1.0], [1.6266636E12, 1.0], [1.62666372E12, 0.0], [1.62666342E12, 1.0], [1.62666354E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62666348E12, 50.0], [1.62666366E12, 48.0], [1.6266636E12, 56.0], [1.62666372E12, 8.0], [1.62666342E12, 50.0], [1.62666354E12, 49.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666372E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1277.0, "maxY": 63.0, "series": [{"data": [[18523.0, 23.0], [18715.0, 56.0], [20011.0, 56.0], [20379.0, 52.0], [20219.0, 48.0], [20411.0, 55.0], [19867.0, 50.0], [21459.0, 53.0], [20787.0, 51.0], [21243.0, 51.0], [20731.0, 49.0], [21267.0, 47.0], [21219.0, 56.0], [21139.0, 40.0], [21283.0, 50.0], [21427.0, 36.0], [20835.0, 49.0], [20859.0, 48.0], [22283.0, 50.0], [22163.0, 49.0], [22395.0, 48.0], [21875.0, 51.0], [21931.0, 47.0], [21763.0, 51.0], [21683.0, 53.0], [21571.0, 50.0], [22555.0, 49.0], [10121.0, 27.0], [19210.0, 53.0], [19306.0, 52.0], [19010.0, 54.0], [20458.0, 51.0], [20330.0, 45.0], [19682.0, 52.0], [19850.0, 51.0], [19938.0, 53.0], [20450.0, 54.0], [20362.0, 23.0], [20938.0, 51.0], [20730.0, 51.0], [20786.0, 54.0], [20930.0, 31.0], [21138.0, 50.0], [21482.0, 52.0], [21442.0, 56.0], [21122.0, 46.0], [20978.0, 46.0], [21218.0, 49.0], [22314.0, 49.0], [21706.0, 46.0], [21914.0, 46.0], [22458.0, 49.0], [22490.0, 49.0], [22114.0, 51.0], [21738.0, 29.0], [22306.0, 49.0], [22442.0, 48.0], [21970.0, 51.0], [21506.0, 49.0], [21938.0, 49.0], [21586.0, 44.0], [21610.0, 47.0], [21522.0, 47.0], [21802.0, 49.0], [22530.0, 51.0], [22978.0, 47.0], [17665.0, 11.0], [19729.0, 50.0], [19457.0, 53.0], [19601.0, 51.0], [20409.0, 48.0], [1277.0, 2.0], [21329.0, 51.0], [21297.0, 52.0], [21409.0, 50.0], [21465.0, 30.0], [20569.0, 50.0], [20969.0, 50.0], [20833.0, 38.0], [21161.0, 54.0], [20985.0, 49.0], [21417.0, 39.0], [21433.0, 30.0], [21729.0, 52.0], [22257.0, 47.0], [22185.0, 46.0], [22177.0, 48.0], [21673.0, 50.0], [22089.0, 47.0], [22393.0, 48.0], [21545.0, 52.0], [21513.0, 48.0], [21577.0, 49.0], [21929.0, 52.0], [21881.0, 49.0], [21913.0, 50.0], [21905.0, 49.0], [22801.0, 50.0], [22857.0, 42.0], [4064.0, 11.0], [7184.0, 21.0], [7948.0, 35.0], [11976.0, 22.0], [17680.0, 25.0], [18784.0, 63.0], [19208.0, 50.0], [20256.0, 52.0], [20272.0, 56.0], [19576.0, 57.0], [19912.0, 48.0], [19656.0, 18.0], [20200.0, 51.0], [20056.0, 53.0], [20400.0, 51.0], [21336.0, 51.0], [21096.0, 47.0], [21272.0, 51.0], [21192.0, 49.0], [21200.0, 46.0], [20632.0, 51.0], [20536.0, 50.0], [20504.0, 31.0], [20552.0, 39.0], [21488.0, 48.0], [21120.0, 49.0], [20728.0, 54.0], [20672.0, 38.0], [21256.0, 48.0], [21664.0, 49.0], [21912.0, 52.0], [21864.0, 39.0], [21968.0, 50.0], [21712.0, 53.0], [22440.0, 49.0], [22064.0, 52.0], [22136.0, 50.0], [22120.0, 48.0], [22200.0, 51.0], [22208.0, 47.0], [21608.0, 53.0], [21992.0, 51.0], [22680.0, 49.0], [22808.0, 49.0], [23328.0, 44.0], [22776.0, 44.0], [19207.0, 53.0], [20439.0, 48.0], [20255.0, 48.0], [20447.0, 54.0], [20423.0, 55.0], [21407.0, 46.0], [20567.0, 50.0], [21159.0, 53.0], [21487.0, 50.0], [21415.0, 56.0], [20511.0, 49.0], [20951.0, 56.0], [20751.0, 51.0], [20743.0, 48.0], [21191.0, 51.0], [21231.0, 50.0], [22391.0, 50.0], [22039.0, 49.0], [22175.0, 50.0], [21519.0, 53.0], [21847.0, 47.0], [21895.0, 50.0], [22015.0, 40.0], [22007.0, 37.0], [22503.0, 47.0], [22255.0, 51.0], [21727.0, 50.0], [22287.0, 47.0], [21655.0, 53.0], [21591.0, 45.0], [23119.0, 45.0], [22719.0, 51.0], [22575.0, 49.0], [22975.0, 47.0], [8667.0, 33.0], [19590.0, 59.0], [20270.0, 54.0], [20646.0, 50.0], [21166.0, 48.0], [20614.0, 50.0], [20638.0, 52.0], [21238.0, 50.0], [21222.0, 53.0], [21182.0, 50.0], [21214.0, 49.0], [20870.0, 53.0], [20494.0, 47.0], [20966.0, 46.0], [20894.0, 48.0], [21310.0, 49.0], [20734.0, 40.0], [21070.0, 47.0], [21006.0, 39.0], [21478.0, 50.0], [21710.0, 49.0], [21694.0, 50.0], [22414.0, 52.0], [22038.0, 51.0], [22342.0, 47.0], [21798.0, 50.0], [21958.0, 51.0], [22014.0, 50.0], [21614.0, 50.0], [21606.0, 49.0], [21550.0, 49.0], [22222.0, 49.0], [22166.0, 50.0], [22678.0, 47.0], [22590.0, 46.0], [22814.0, 46.0], [23638.0, 48.0], [18189.0, 20.0], [18037.0, 63.0], [18869.0, 45.0], [18717.0, 57.0], [19453.0, 55.0], [18941.0, 37.0], [20429.0, 49.0], [20389.0, 51.0], [20325.0, 55.0], [20237.0, 51.0], [20085.0, 48.0], [21357.0, 50.0], [20621.0, 52.0], [21469.0, 53.0], [21109.0, 48.0], [21197.0, 49.0], [21029.0, 51.0], [21093.0, 52.0], [21069.0, 48.0], [20933.0, 50.0], [20829.0, 48.0], [20757.0, 48.0], [20949.0, 47.0], [20509.0, 50.0], [20549.0, 49.0], [20541.0, 23.0], [21285.0, 50.0], [20677.0, 53.0], [20693.0, 51.0], [22501.0, 49.0], [22525.0, 49.0], [22237.0, 50.0], [21693.0, 49.0], [21581.0, 50.0], [22485.0, 48.0], [22053.0, 50.0], [22509.0, 50.0], [22165.0, 50.0], [21965.0, 49.0], [21973.0, 49.0], [23493.0, 45.0], [22957.0, 48.0], [23085.0, 48.0], [6127.0, 22.0], [6319.0, 11.0], [6477.0, 22.0], [7111.0, 30.0], [8031.0, 33.0], [8145.0, 26.0], [8039.0, 37.0], [8750.0, 18.0], [9302.0, 15.0], [9750.0, 17.0], [11350.0, 30.0], [16532.0, 49.0], [17092.0, 7.0], [18836.0, 36.0], [19988.0, 50.0], [20452.0, 50.0], [20052.0, 50.0], [20476.0, 50.0], [20404.0, 51.0], [20324.0, 52.0], [20028.0, 49.0], [20444.0, 47.0], [19980.0, 21.0], [21372.0, 51.0], [21500.0, 51.0], [21380.0, 51.0], [21476.0, 50.0], [20812.0, 49.0], [20740.0, 48.0], [21004.0, 49.0], [21068.0, 48.0], [21164.0, 53.0], [21228.0, 50.0], [21204.0, 51.0], [20508.0, 49.0], [20492.0, 50.0], [21300.0, 49.0], [21260.0, 53.0], [20620.0, 50.0], [22100.0, 50.0], [22340.0, 49.0], [21764.0, 52.0], [21948.0, 48.0], [22060.0, 49.0], [21612.0, 47.0], [23108.0, 49.0], [23220.0, 45.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23638.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1277.0, "maxY": 63.0, "series": [{"data": [[18523.0, 23.0], [18715.0, 56.0], [20011.0, 56.0], [20379.0, 52.0], [20219.0, 48.0], [20411.0, 55.0], [19867.0, 50.0], [21459.0, 53.0], [20787.0, 51.0], [21243.0, 51.0], [20731.0, 49.0], [21267.0, 47.0], [21219.0, 56.0], [21139.0, 40.0], [21283.0, 50.0], [21427.0, 36.0], [20835.0, 49.0], [20859.0, 48.0], [22283.0, 50.0], [22163.0, 49.0], [22395.0, 48.0], [21875.0, 51.0], [21931.0, 47.0], [21763.0, 51.0], [21683.0, 53.0], [21571.0, 50.0], [22555.0, 49.0], [10121.0, 27.0], [19210.0, 53.0], [19306.0, 52.0], [19010.0, 54.0], [20458.0, 51.0], [20330.0, 45.0], [19682.0, 52.0], [19850.0, 51.0], [19938.0, 53.0], [20450.0, 54.0], [20362.0, 23.0], [20938.0, 51.0], [20730.0, 51.0], [20786.0, 54.0], [20930.0, 31.0], [21138.0, 50.0], [21482.0, 52.0], [21442.0, 56.0], [21122.0, 46.0], [20978.0, 46.0], [21218.0, 49.0], [22314.0, 49.0], [21706.0, 46.0], [21914.0, 46.0], [22458.0, 49.0], [22490.0, 49.0], [22114.0, 51.0], [21738.0, 29.0], [22306.0, 49.0], [22442.0, 48.0], [21970.0, 51.0], [21506.0, 49.0], [21938.0, 49.0], [21586.0, 44.0], [21610.0, 47.0], [21522.0, 47.0], [21802.0, 49.0], [22530.0, 51.0], [22978.0, 47.0], [17665.0, 11.0], [19729.0, 50.0], [19457.0, 53.0], [19601.0, 51.0], [20409.0, 48.0], [1277.0, 2.0], [21329.0, 51.0], [21297.0, 52.0], [21409.0, 50.0], [21465.0, 30.0], [20569.0, 50.0], [20969.0, 50.0], [20833.0, 38.0], [21161.0, 54.0], [20985.0, 49.0], [21417.0, 39.0], [21433.0, 30.0], [21729.0, 52.0], [22257.0, 47.0], [22185.0, 46.0], [22177.0, 48.0], [21673.0, 50.0], [22089.0, 47.0], [22393.0, 48.0], [21545.0, 52.0], [21513.0, 48.0], [21577.0, 49.0], [21929.0, 52.0], [21881.0, 49.0], [21913.0, 50.0], [21905.0, 49.0], [22801.0, 50.0], [22857.0, 42.0], [4064.0, 11.0], [7184.0, 21.0], [7948.0, 35.0], [11976.0, 22.0], [17680.0, 25.0], [18784.0, 63.0], [19208.0, 50.0], [20256.0, 52.0], [20272.0, 56.0], [19576.0, 57.0], [19912.0, 48.0], [19656.0, 18.0], [20200.0, 51.0], [20056.0, 53.0], [20400.0, 51.0], [21336.0, 51.0], [21096.0, 47.0], [21272.0, 51.0], [21192.0, 49.0], [21200.0, 46.0], [20632.0, 51.0], [20536.0, 50.0], [20504.0, 31.0], [20552.0, 39.0], [21488.0, 48.0], [21120.0, 49.0], [20728.0, 54.0], [20672.0, 38.0], [21256.0, 48.0], [21664.0, 49.0], [21912.0, 52.0], [21864.0, 39.0], [21968.0, 50.0], [21712.0, 53.0], [22440.0, 49.0], [22064.0, 52.0], [22136.0, 50.0], [22120.0, 48.0], [22200.0, 51.0], [22208.0, 47.0], [21608.0, 53.0], [21992.0, 51.0], [22680.0, 49.0], [22808.0, 49.0], [23328.0, 44.0], [22776.0, 44.0], [19207.0, 53.0], [20439.0, 48.0], [20255.0, 48.0], [20447.0, 54.0], [20423.0, 55.0], [21407.0, 46.0], [20567.0, 50.0], [21159.0, 53.0], [21487.0, 50.0], [21415.0, 56.0], [20511.0, 49.0], [20951.0, 56.0], [20751.0, 51.0], [20743.0, 48.0], [21191.0, 51.0], [21231.0, 50.0], [22391.0, 50.0], [22039.0, 49.0], [22175.0, 50.0], [21519.0, 53.0], [21847.0, 47.0], [21895.0, 50.0], [22015.0, 40.0], [22007.0, 37.0], [22503.0, 47.0], [22255.0, 51.0], [21727.0, 50.0], [22287.0, 47.0], [21655.0, 53.0], [21591.0, 45.0], [23119.0, 45.0], [22719.0, 51.0], [22575.0, 49.0], [22975.0, 47.0], [8667.0, 33.0], [19590.0, 59.0], [20270.0, 54.0], [20646.0, 50.0], [21166.0, 48.0], [20614.0, 50.0], [20638.0, 52.0], [21238.0, 50.0], [21222.0, 53.0], [21182.0, 50.0], [21214.0, 49.0], [20870.0, 53.0], [20494.0, 47.0], [20966.0, 46.0], [20894.0, 48.0], [21310.0, 49.0], [20734.0, 40.0], [21070.0, 47.0], [21006.0, 39.0], [21478.0, 50.0], [21710.0, 49.0], [21694.0, 50.0], [22414.0, 52.0], [22038.0, 51.0], [22342.0, 47.0], [21798.0, 50.0], [21958.0, 51.0], [22014.0, 50.0], [21614.0, 50.0], [21606.0, 49.0], [21550.0, 49.0], [22222.0, 49.0], [22166.0, 50.0], [22678.0, 47.0], [22590.0, 46.0], [22814.0, 46.0], [23638.0, 48.0], [18189.0, 20.0], [18037.0, 63.0], [18869.0, 45.0], [18717.0, 57.0], [19453.0, 55.0], [18941.0, 37.0], [20429.0, 49.0], [20389.0, 51.0], [20325.0, 55.0], [20237.0, 51.0], [20085.0, 48.0], [21357.0, 50.0], [20621.0, 52.0], [21469.0, 53.0], [21109.0, 48.0], [21197.0, 49.0], [21029.0, 51.0], [21093.0, 52.0], [21069.0, 48.0], [20933.0, 50.0], [20829.0, 48.0], [20757.0, 48.0], [20949.0, 47.0], [20509.0, 50.0], [20549.0, 49.0], [20541.0, 23.0], [21285.0, 50.0], [20677.0, 53.0], [20693.0, 51.0], [22501.0, 49.0], [22525.0, 49.0], [22237.0, 50.0], [21693.0, 49.0], [21581.0, 50.0], [22485.0, 48.0], [22053.0, 50.0], [22509.0, 50.0], [22165.0, 50.0], [21965.0, 49.0], [21973.0, 49.0], [23493.0, 45.0], [22957.0, 48.0], [23085.0, 48.0], [6127.0, 22.0], [6319.0, 11.0], [6477.0, 22.0], [7111.0, 30.0], [8031.0, 33.0], [8145.0, 26.0], [8039.0, 37.0], [8750.0, 18.0], [9302.0, 15.0], [9750.0, 17.0], [11350.0, 30.0], [16532.0, 49.0], [17092.0, 7.0], [18836.0, 36.0], [19988.0, 50.0], [20452.0, 50.0], [20052.0, 50.0], [20476.0, 50.0], [20404.0, 51.0], [20324.0, 52.0], [20028.0, 49.0], [20444.0, 47.0], [19980.0, 21.0], [21372.0, 51.0], [21500.0, 51.0], [21380.0, 51.0], [21476.0, 50.0], [20812.0, 49.0], [20740.0, 48.0], [21004.0, 49.0], [21068.0, 48.0], [21164.0, 53.0], [21228.0, 50.0], [21204.0, 51.0], [20508.0, 49.0], [20492.0, 50.0], [21300.0, 49.0], [21260.0, 53.0], [20620.0, 50.0], [22100.0, 50.0], [22340.0, 49.0], [21764.0, 52.0], [21948.0, 48.0], [22060.0, 49.0], [21612.0, 47.0], [23108.0, 49.0], [23220.0, 45.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23638.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11672.733333333334, "minX": 1.62666342E12, "maxY": 21545.25, "series": [{"data": [[1.62666348E12, 21183.05], [1.62666366E12, 21230.45], [1.6266636E12, 21499.983333333334], [1.62666372E12, 12565.433333333332], [1.62666342E12, 11672.733333333334], [1.62666354E12, 21545.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666372E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 11652.733333333334, "minX": 1.62666342E12, "maxY": 21545.25, "series": [{"data": [[1.62666348E12, 21183.216666666667], [1.62666366E12, 21230.433333333334], [1.6266636E12, 21499.85], [1.62666372E12, 12585.416666666666], [1.62666342E12, 11652.733333333334], [1.62666354E12, 21545.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666372E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 11652.733333333334, "minX": 1.62666342E12, "maxY": 21545.25, "series": [{"data": [[1.62666348E12, 21183.216666666667], [1.62666366E12, 21230.433333333334], [1.6266636E12, 21499.85], [1.62666372E12, 12585.416666666666], [1.62666342E12, 11652.733333333334], [1.62666354E12, 21545.25]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666372E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11652.733333333334, "minX": 1.62666342E12, "maxY": 21545.25, "series": [{"data": [[1.62666348E12, 21183.216666666667], [1.62666366E12, 21230.433333333334], [1.6266636E12, 21499.85], [1.62666372E12, 12585.416666666666], [1.62666342E12, 11652.733333333334], [1.62666354E12, 21545.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666372E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

