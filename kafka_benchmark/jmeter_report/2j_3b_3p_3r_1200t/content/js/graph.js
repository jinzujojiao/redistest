/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3080.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 9.0], [11.3, 10.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 10.0], [12.9, 10.0], [13.0, 10.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 13.0], [17.0, 13.0], [17.1, 13.0], [17.2, 13.0], [17.3, 13.0], [17.4, 13.0], [17.5, 13.0], [17.6, 13.0], [17.7, 13.0], [17.8, 13.0], [17.9, 13.0], [18.0, 13.0], [18.1, 13.0], [18.2, 13.0], [18.3, 13.0], [18.4, 13.0], [18.5, 13.0], [18.6, 13.0], [18.7, 13.0], [18.8, 14.0], [18.9, 14.0], [19.0, 14.0], [19.1, 14.0], [19.2, 14.0], [19.3, 14.0], [19.4, 14.0], [19.5, 14.0], [19.6, 14.0], [19.7, 14.0], [19.8, 14.0], [19.9, 14.0], [20.0, 14.0], [20.1, 14.0], [20.2, 14.0], [20.3, 14.0], [20.4, 14.0], [20.5, 14.0], [20.6, 14.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 16.0], [22.6, 16.0], [22.7, 16.0], [22.8, 16.0], [22.9, 16.0], [23.0, 16.0], [23.1, 16.0], [23.2, 16.0], [23.3, 16.0], [23.4, 16.0], [23.5, 16.0], [23.6, 16.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 17.0], [24.5, 17.0], [24.6, 17.0], [24.7, 17.0], [24.8, 17.0], [24.9, 17.0], [25.0, 17.0], [25.1, 17.0], [25.2, 17.0], [25.3, 17.0], [25.4, 17.0], [25.5, 17.0], [25.6, 17.0], [25.7, 17.0], [25.8, 17.0], [25.9, 17.0], [26.0, 17.0], [26.1, 17.0], [26.2, 17.0], [26.3, 18.0], [26.4, 18.0], [26.5, 18.0], [26.6, 18.0], [26.7, 18.0], [26.8, 18.0], [26.9, 18.0], [27.0, 18.0], [27.1, 18.0], [27.2, 18.0], [27.3, 18.0], [27.4, 18.0], [27.5, 18.0], [27.6, 18.0], [27.7, 18.0], [27.8, 18.0], [27.9, 18.0], [28.0, 18.0], [28.1, 19.0], [28.2, 19.0], [28.3, 19.0], [28.4, 19.0], [28.5, 19.0], [28.6, 19.0], [28.7, 19.0], [28.8, 19.0], [28.9, 19.0], [29.0, 19.0], [29.1, 19.0], [29.2, 19.0], [29.3, 19.0], [29.4, 19.0], [29.5, 19.0], [29.6, 19.0], [29.7, 19.0], [29.8, 19.0], [29.9, 19.0], [30.0, 20.0], [30.1, 20.0], [30.2, 20.0], [30.3, 20.0], [30.4, 20.0], [30.5, 20.0], [30.6, 20.0], [30.7, 20.0], [30.8, 20.0], [30.9, 20.0], [31.0, 20.0], [31.1, 20.0], [31.2, 20.0], [31.3, 20.0], [31.4, 20.0], [31.5, 20.0], [31.6, 20.0], [31.7, 20.0], [31.8, 20.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 21.0], [32.8, 21.0], [32.9, 21.0], [33.0, 21.0], [33.1, 21.0], [33.2, 21.0], [33.3, 21.0], [33.4, 21.0], [33.5, 21.0], [33.6, 21.0], [33.7, 22.0], [33.8, 22.0], [33.9, 22.0], [34.0, 22.0], [34.1, 22.0], [34.2, 22.0], [34.3, 22.0], [34.4, 22.0], [34.5, 22.0], [34.6, 22.0], [34.7, 22.0], [34.8, 22.0], [34.9, 22.0], [35.0, 22.0], [35.1, 22.0], [35.2, 22.0], [35.3, 22.0], [35.4, 22.0], [35.5, 22.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 23.0], [36.3, 23.0], [36.4, 23.0], [36.5, 23.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 25.0], [39.6, 25.0], [39.7, 25.0], [39.8, 25.0], [39.9, 25.0], [40.0, 25.0], [40.1, 25.0], [40.2, 25.0], [40.3, 25.0], [40.4, 25.0], [40.5, 25.0], [40.6, 25.0], [40.7, 25.0], [40.8, 25.0], [40.9, 25.0], [41.0, 25.0], [41.1, 25.0], [41.2, 25.0], [41.3, 25.0], [41.4, 26.0], [41.5, 26.0], [41.6, 26.0], [41.7, 26.0], [41.8, 26.0], [41.9, 26.0], [42.0, 26.0], [42.1, 26.0], [42.2, 26.0], [42.3, 26.0], [42.4, 26.0], [42.5, 26.0], [42.6, 26.0], [42.7, 26.0], [42.8, 26.0], [42.9, 26.0], [43.0, 26.0], [43.1, 26.0], [43.2, 26.0], [43.3, 27.0], [43.4, 27.0], [43.5, 27.0], [43.6, 27.0], [43.7, 27.0], [43.8, 27.0], [43.9, 27.0], [44.0, 27.0], [44.1, 27.0], [44.2, 27.0], [44.3, 27.0], [44.4, 27.0], [44.5, 27.0], [44.6, 27.0], [44.7, 27.0], [44.8, 27.0], [44.9, 27.0], [45.0, 27.0], [45.1, 27.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 28.0], [45.9, 28.0], [46.0, 28.0], [46.1, 28.0], [46.2, 28.0], [46.3, 28.0], [46.4, 28.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 29.0], [47.2, 29.0], [47.3, 29.0], [47.4, 29.0], [47.5, 29.0], [47.6, 29.0], [47.7, 29.0], [47.8, 29.0], [47.9, 29.0], [48.0, 29.0], [48.1, 29.0], [48.2, 29.0], [48.3, 29.0], [48.4, 29.0], [48.5, 29.0], [48.6, 29.0], [48.7, 29.0], [48.8, 30.0], [48.9, 30.0], [49.0, 30.0], [49.1, 30.0], [49.2, 30.0], [49.3, 30.0], [49.4, 30.0], [49.5, 30.0], [49.6, 30.0], [49.7, 30.0], [49.8, 30.0], [49.9, 30.0], [50.0, 30.0], [50.1, 30.0], [50.2, 30.0], [50.3, 30.0], [50.4, 30.0], [50.5, 31.0], [50.6, 31.0], [50.7, 31.0], [50.8, 31.0], [50.9, 31.0], [51.0, 31.0], [51.1, 31.0], [51.2, 31.0], [51.3, 31.0], [51.4, 31.0], [51.5, 31.0], [51.6, 31.0], [51.7, 31.0], [51.8, 31.0], [51.9, 31.0], [52.0, 31.0], [52.1, 31.0], [52.2, 32.0], [52.3, 32.0], [52.4, 32.0], [52.5, 32.0], [52.6, 32.0], [52.7, 32.0], [52.8, 32.0], [52.9, 32.0], [53.0, 32.0], [53.1, 32.0], [53.2, 32.0], [53.3, 32.0], [53.4, 32.0], [53.5, 32.0], [53.6, 32.0], [53.7, 33.0], [53.8, 33.0], [53.9, 33.0], [54.0, 33.0], [54.1, 33.0], [54.2, 33.0], [54.3, 33.0], [54.4, 33.0], [54.5, 33.0], [54.6, 33.0], [54.7, 33.0], [54.8, 33.0], [54.9, 33.0], [55.0, 33.0], [55.1, 33.0], [55.2, 34.0], [55.3, 34.0], [55.4, 34.0], [55.5, 34.0], [55.6, 34.0], [55.7, 34.0], [55.8, 34.0], [55.9, 34.0], [56.0, 34.0], [56.1, 34.0], [56.2, 34.0], [56.3, 34.0], [56.4, 34.0], [56.5, 34.0], [56.6, 35.0], [56.7, 35.0], [56.8, 35.0], [56.9, 35.0], [57.0, 35.0], [57.1, 35.0], [57.2, 35.0], [57.3, 35.0], [57.4, 35.0], [57.5, 35.0], [57.6, 35.0], [57.7, 35.0], [57.8, 35.0], [57.9, 36.0], [58.0, 36.0], [58.1, 36.0], [58.2, 36.0], [58.3, 36.0], [58.4, 36.0], [58.5, 36.0], [58.6, 36.0], [58.7, 36.0], [58.8, 36.0], [58.9, 36.0], [59.0, 36.0], [59.1, 36.0], [59.2, 37.0], [59.3, 37.0], [59.4, 37.0], [59.5, 37.0], [59.6, 37.0], [59.7, 37.0], [59.8, 37.0], [59.9, 37.0], [60.0, 37.0], [60.1, 37.0], [60.2, 37.0], [60.3, 37.0], [60.4, 38.0], [60.5, 38.0], [60.6, 38.0], [60.7, 38.0], [60.8, 38.0], [60.9, 38.0], [61.0, 38.0], [61.1, 38.0], [61.2, 38.0], [61.3, 38.0], [61.4, 38.0], [61.5, 38.0], [61.6, 39.0], [61.7, 39.0], [61.8, 39.0], [61.9, 39.0], [62.0, 39.0], [62.1, 39.0], [62.2, 39.0], [62.3, 39.0], [62.4, 39.0], [62.5, 39.0], [62.6, 39.0], [62.7, 40.0], [62.8, 40.0], [62.9, 40.0], [63.0, 40.0], [63.1, 40.0], [63.2, 40.0], [63.3, 40.0], [63.4, 40.0], [63.5, 40.0], [63.6, 40.0], [63.7, 40.0], [63.8, 41.0], [63.9, 41.0], [64.0, 41.0], [64.1, 41.0], [64.2, 41.0], [64.3, 41.0], [64.4, 41.0], [64.5, 41.0], [64.6, 41.0], [64.7, 41.0], [64.8, 42.0], [64.9, 42.0], [65.0, 42.0], [65.1, 42.0], [65.2, 42.0], [65.3, 42.0], [65.4, 42.0], [65.5, 42.0], [65.6, 42.0], [65.7, 42.0], [65.8, 43.0], [65.9, 43.0], [66.0, 43.0], [66.1, 43.0], [66.2, 43.0], [66.3, 43.0], [66.4, 43.0], [66.5, 43.0], [66.6, 43.0], [66.7, 43.0], [66.8, 44.0], [66.9, 44.0], [67.0, 44.0], [67.1, 44.0], [67.2, 44.0], [67.3, 44.0], [67.4, 44.0], [67.5, 44.0], [67.6, 44.0], [67.7, 44.0], [67.8, 45.0], [67.9, 45.0], [68.0, 45.0], [68.1, 45.0], [68.2, 45.0], [68.3, 45.0], [68.4, 45.0], [68.5, 45.0], [68.6, 45.0], [68.7, 45.0], [68.8, 46.0], [68.9, 46.0], [69.0, 46.0], [69.1, 46.0], [69.2, 46.0], [69.3, 46.0], [69.4, 46.0], [69.5, 46.0], [69.6, 46.0], [69.7, 47.0], [69.8, 47.0], [69.9, 47.0], [70.0, 47.0], [70.1, 47.0], [70.2, 47.0], [70.3, 47.0], [70.4, 47.0], [70.5, 48.0], [70.6, 48.0], [70.7, 48.0], [70.8, 48.0], [70.9, 48.0], [71.0, 48.0], [71.1, 48.0], [71.2, 48.0], [71.3, 48.0], [71.4, 49.0], [71.5, 49.0], [71.6, 49.0], [71.7, 49.0], [71.8, 49.0], [71.9, 49.0], [72.0, 49.0], [72.1, 49.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 50.0], [73.0, 51.0], [73.1, 51.0], [73.2, 51.0], [73.3, 51.0], [73.4, 51.0], [73.5, 51.0], [73.6, 51.0], [73.7, 52.0], [73.8, 52.0], [73.9, 52.0], [74.0, 52.0], [74.1, 52.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 53.0], [74.6, 53.0], [74.7, 53.0], [74.8, 53.0], [74.9, 53.0], [75.0, 53.0], [75.1, 54.0], [75.2, 54.0], [75.3, 54.0], [75.4, 54.0], [75.5, 54.0], [75.6, 54.0], [75.7, 54.0], [75.8, 55.0], [75.9, 55.0], [76.0, 55.0], [76.1, 55.0], [76.2, 55.0], [76.3, 55.0], [76.4, 56.0], [76.5, 56.0], [76.6, 56.0], [76.7, 56.0], [76.8, 56.0], [76.9, 56.0], [77.0, 57.0], [77.1, 57.0], [77.2, 57.0], [77.3, 57.0], [77.4, 57.0], [77.5, 58.0], [77.6, 58.0], [77.7, 58.0], [77.8, 58.0], [77.9, 58.0], [78.0, 58.0], [78.1, 59.0], [78.2, 59.0], [78.3, 59.0], [78.4, 59.0], [78.5, 59.0], [78.6, 60.0], [78.7, 60.0], [78.8, 60.0], [78.9, 60.0], [79.0, 60.0], [79.1, 61.0], [79.2, 61.0], [79.3, 61.0], [79.4, 61.0], [79.5, 61.0], [79.6, 62.0], [79.7, 62.0], [79.8, 62.0], [79.9, 62.0], [80.0, 62.0], [80.1, 63.0], [80.2, 63.0], [80.3, 63.0], [80.4, 63.0], [80.5, 63.0], [80.6, 64.0], [80.7, 64.0], [80.8, 64.0], [80.9, 64.0], [81.0, 65.0], [81.1, 65.0], [81.2, 65.0], [81.3, 65.0], [81.4, 65.0], [81.5, 66.0], [81.6, 66.0], [81.7, 66.0], [81.8, 66.0], [81.9, 67.0], [82.0, 67.0], [82.1, 67.0], [82.2, 67.0], [82.3, 68.0], [82.4, 68.0], [82.5, 68.0], [82.6, 68.0], [82.7, 69.0], [82.8, 69.0], [82.9, 69.0], [83.0, 69.0], [83.1, 70.0], [83.2, 70.0], [83.3, 70.0], [83.4, 70.0], [83.5, 71.0], [83.6, 71.0], [83.7, 71.0], [83.8, 71.0], [83.9, 72.0], [84.0, 72.0], [84.1, 72.0], [84.2, 72.0], [84.3, 73.0], [84.4, 73.0], [84.5, 73.0], [84.6, 74.0], [84.7, 74.0], [84.8, 74.0], [84.9, 74.0], [85.0, 75.0], [85.1, 75.0], [85.2, 75.0], [85.3, 76.0], [85.4, 76.0], [85.5, 76.0], [85.6, 77.0], [85.7, 77.0], [85.8, 77.0], [85.9, 78.0], [86.0, 78.0], [86.1, 78.0], [86.2, 79.0], [86.3, 79.0], [86.4, 79.0], [86.5, 80.0], [86.6, 80.0], [86.7, 81.0], [86.8, 81.0], [86.9, 81.0], [87.0, 82.0], [87.1, 82.0], [87.2, 83.0], [87.3, 83.0], [87.4, 83.0], [87.5, 84.0], [87.6, 84.0], [87.7, 85.0], [87.8, 85.0], [87.9, 85.0], [88.0, 86.0], [88.1, 86.0], [88.2, 87.0], [88.3, 87.0], [88.4, 88.0], [88.5, 88.0], [88.6, 88.0], [88.7, 89.0], [88.8, 89.0], [88.9, 90.0], [89.0, 90.0], [89.1, 91.0], [89.2, 91.0], [89.3, 92.0], [89.4, 92.0], [89.5, 93.0], [89.6, 93.0], [89.7, 94.0], [89.8, 94.0], [89.9, 95.0], [90.0, 95.0], [90.1, 96.0], [90.2, 96.0], [90.3, 97.0], [90.4, 97.0], [90.5, 98.0], [90.6, 99.0], [90.7, 99.0], [90.8, 100.0], [90.9, 100.0], [91.0, 101.0], [91.1, 102.0], [91.2, 102.0], [91.3, 103.0], [91.4, 104.0], [91.5, 104.0], [91.6, 105.0], [91.7, 106.0], [91.8, 107.0], [91.9, 107.0], [92.0, 108.0], [92.1, 109.0], [92.2, 110.0], [92.3, 110.0], [92.4, 111.0], [92.5, 112.0], [92.6, 113.0], [92.7, 113.0], [92.8, 114.0], [92.9, 115.0], [93.0, 116.0], [93.1, 117.0], [93.2, 118.0], [93.3, 119.0], [93.4, 119.0], [93.5, 120.0], [93.6, 121.0], [93.7, 122.0], [93.8, 123.0], [93.9, 124.0], [94.0, 125.0], [94.1, 126.0], [94.2, 127.0], [94.3, 128.0], [94.4, 129.0], [94.5, 131.0], [94.6, 132.0], [94.7, 133.0], [94.8, 134.0], [94.9, 135.0], [95.0, 136.0], [95.1, 138.0], [95.2, 139.0], [95.3, 140.0], [95.4, 142.0], [95.5, 143.0], [95.6, 144.0], [95.7, 146.0], [95.8, 147.0], [95.9, 149.0], [96.0, 150.0], [96.1, 152.0], [96.2, 154.0], [96.3, 155.0], [96.4, 157.0], [96.5, 159.0], [96.6, 161.0], [96.7, 163.0], [96.8, 165.0], [96.9, 167.0], [97.0, 170.0], [97.1, 172.0], [97.2, 174.0], [97.3, 177.0], [97.4, 180.0], [97.5, 182.0], [97.6, 186.0], [97.7, 189.0], [97.8, 192.0], [97.9, 196.0], [98.0, 200.0], [98.1, 204.0], [98.2, 210.0], [98.3, 216.0], [98.4, 224.0], [98.5, 231.0], [98.6, 238.0], [98.7, 245.0], [98.8, 253.0], [98.9, 261.0], [99.0, 269.0], [99.1, 279.0], [99.2, 292.0], [99.3, 307.0], [99.4, 326.0], [99.5, 351.0], [99.6, 387.0], [99.7, 439.0], [99.8, 514.0], [99.9, 664.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 6261254.0, "series": [{"data": [[0.0, 6261254.0], [600.0, 3339.0], [700.0, 2243.0], [3000.0, 2.0], [800.0, 1751.0], [200.0, 86813.0], [900.0, 563.0], [1000.0, 605.0], [1100.0, 220.0], [1200.0, 123.0], [300.0, 26284.0], [1300.0, 120.0], [1400.0, 67.0], [1500.0, 63.0], [1600.0, 40.0], [100.0, 500121.0], [400.0, 10429.0], [1700.0, 110.0], [1800.0, 51.0], [1900.0, 12.0], [2000.0, 2.0], [500.0, 5818.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 280.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6884977.0, "series": [{"data": [[0.0, 6884977.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14773.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 280.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 583.8125351451513, "minX": 1.6263495E12, "maxY": 600.0, "series": [{"data": [[1.62634968E12, 600.0], [1.6263498E12, 593.3492816636792], [1.62634956E12, 600.0], [1.62634974E12, 600.0], [1.62634962E12, 600.0], [1.6263495E12, 600.0]], "isOverall": false, "label": "role1", "isController": false}, {"data": [[1.62634968E12, 600.0], [1.6263498E12, 583.8125351451513], [1.62634956E12, 600.0], [1.62634974E12, 600.0], [1.62634962E12, 600.0], [1.6263495E12, 600.0]], "isOverall": false, "label": "role2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 1945.0, "series": [{"data": [[2.0, 7.0], [5.0, 5.0], [6.0, 6.0], [8.0, 6.0], [11.0, 6.0], [12.0, 6.0], [13.0, 6.0], [14.0, 5.0], [15.0, 7.5], [16.0, 2.4166666666666674], [17.0, 2.0], [19.0, 2.5], [20.0, 2.285714285714286], [21.0, 2.2777777777777777], [22.0, 2.166666666666667], [23.0, 2.2], [24.0, 1.75], [25.0, 2.6999999999999997], [26.0, 3.3571428571428563], [28.0, 3.3333333333333335], [29.0, 3.0], [31.0, 4.875], [32.0, 4.857142857142858], [35.0, 5.3999999999999995], [37.0, 2.668449197860963], [36.0, 2.4943820224719104], [39.0, 2.2647058823529416], [38.0, 2.2155963302752286], [41.0, 3.65], [40.0, 2.3288135593220365], [43.0, 2.710743801652894], [42.0, 3.1340579710144927], [45.0, 2.832103321033207], [44.0, 2.522727272727273], [47.0, 4.2565789473684195], [46.0, 5.515151515151516], [49.0, 3.569948186528496], [48.0, 15.5], [51.0, 3.6778523489932877], [50.0, 1.7407407407407403], [53.0, 3.2790322580645186], [52.0, 2.6557377049180344], [55.0, 11.555555555555555], [54.0, 8.5], [57.0, 4.65], [56.0, 4.058313632781716], [59.0, 111.0], [58.0, 25.800000000000004], [61.0, 16.272727272727273], [60.0, 35.57142857142857], [62.0, 8.0], [65.0, 58.166666666666664], [64.0, 5.0], [70.0, 109.0], [69.0, 108.25], [68.0, 101.23076923076924], [75.0, 109.0], [73.0, 107.0], [79.0, 108.5], [78.0, 107.6], [77.0, 107.0], [76.0, 111.0], [83.0, 108.0], [82.0, 107.4], [80.0, 107.33333333333333], [87.0, 105.5], [86.0, 106.0], [85.0, 106.5], [84.0, 108.25], [91.0, 106.33333333333333], [95.0, 107.0], [94.0, 110.16666666666667], [93.0, 105.5], [99.0, 105.5], [98.0, 116.75], [102.0, 107.0], [101.0, 105.25], [106.0, 104.33333333333333], [104.0, 103.5], [111.0, 15.0], [110.0, 15.333333333333334], [109.0, 14.666666666666666], [108.0, 105.57142857142858], [115.0, 14.5], [114.0, 14.5], [113.0, 15.076923076923077], [112.0, 14.227272727272728], [119.0, 12.866666666666665], [118.0, 14.0], [117.0, 12.0], [116.0, 12.76923076923077], [123.0, 12.6], [122.0, 14.0], [121.0, 14.0], [120.0, 12.4], [127.0, 9.458333333333332], [126.0, 9.787878787878787], [125.0, 7.465517241379313], [124.0, 7.666666666666666], [135.0, 11.0], [133.0, 13.629629629629632], [132.0, 16.045454545454543], [131.0, 15.833333333333337], [130.0, 14.709677419354838], [129.0, 8.742857142857142], [128.0, 8.52941176470588], [143.0, 7.0], [142.0, 7.0], [141.0, 8.0], [140.0, 8.0], [139.0, 7.500000000000003], [138.0, 9.666666666666666], [137.0, 8.000000000000002], [136.0, 11.043478260869566], [151.0, 9.333333333333334], [150.0, 9.222222222222221], [149.0, 9.0], [148.0, 11.666666666666666], [147.0, 8.833333333333334], [146.0, 7.947368421052632], [145.0, 8.6], [144.0, 7.75], [159.0, 9.03846153846154], [158.0, 12.0], [157.0, 10.489795918367346], [156.0, 9.6875], [155.0, 9.853658536585368], [154.0, 9.0], [153.0, 9.8], [152.0, 9.666666666666668], [167.0, 10.759999999999998], [166.0, 7.057142857142857], [165.0, 9.157894736842104], [164.0, 8.130434782608695], [163.0, 6.733333333333333], [162.0, 6.999999999999999], [161.0, 7.181818181818182], [160.0, 8.285714285714286], [175.0, 6.2], [174.0, 10.187499999999998], [173.0, 13.0], [172.0, 11.125], [171.0, 7.481481481481483], [170.0, 7.09090909090909], [169.0, 7.619047619047619], [168.0, 19.142857142857142], [183.0, 10.435897435897433], [182.0, 10.000000000000002], [181.0, 8.803370786516856], [180.0, 10.777777777777775], [179.0, 9.2], [178.0, 9.823529411764707], [177.0, 9.125], [176.0, 7.590909090909093], [191.0, 9.799999999999999], [190.0, 11.200000000000001], [189.0, 10.696969696969699], [188.0, 10.26666666666667], [187.0, 17.125], [186.0, 11.575757575757574], [185.0, 9.125], [184.0, 9.5], [199.0, 12.0], [198.0, 11.000000000000002], [197.0, 13.0], [196.0, 11.888888888888891], [195.0, 9.0], [194.0, 10.421052631578949], [192.0, 7.0], [207.0, 12.333333333333334], [205.0, 12.5], [204.0, 13.045454545454545], [203.0, 13.666666666666666], [202.0, 13.538461538461538], [201.0, 13.166666666666666], [200.0, 13.333333333333334], [215.0, 10.571428571428571], [214.0, 10.0], [213.0, 8.818181818181818], [211.0, 9.333333333333334], [210.0, 11.461538461538462], [209.0, 13.25], [208.0, 14.0], [223.0, 16.09090909090909], [222.0, 18.666666666666668], [221.0, 14.75], [220.0, 11.0], [219.0, 12.333333333333334], [218.0, 10.294117647058822], [217.0, 12.0], [216.0, 11.416666666666668], [231.0, 11.333333333333334], [230.0, 10.733333333333334], [229.0, 9.433333333333335], [227.0, 12.666666666666666], [226.0, 14.833333333333332], [225.0, 12.444444444444445], [224.0, 13.000000000000002], [239.0, 15.500000000000002], [238.0, 14.38235294117647], [237.0, 14.0], [236.0, 12.000000000000002], [235.0, 11.8125], [234.0, 10.0], [233.0, 12.333333333333332], [232.0, 13.444444444444445], [247.0, 29.57142857142857], [246.0, 29.428571428571427], [245.0, 28.447916666666664], [244.0, 30.0], [243.0, 22.2], [242.0, 15.25], [241.0, 13.6], [240.0, 13.571428571428573], [253.0, 37.0], [252.0, 16.163934426229506], [251.0, 21.142857142857142], [250.0, 23.516129032258068], [249.0, 28.846153846153847], [248.0, 30.8], [270.0, 22.6], [271.0, 20.0], [269.0, 21.0], [268.0, 19.77777777777778], [267.0, 19.333333333333332], [266.0, 20.875], [265.0, 20.625], [264.0, 18.0], [263.0, 20.857142857142854], [259.0, 36.5], [257.0, 26.0], [262.0, 29.5], [261.0, 23.57142857142857], [260.0, 19.61111111111111], [286.0, 26.6], [287.0, 29.5], [285.0, 21.714285714285715], [284.0, 23.22222222222222], [283.0, 35.357142857142854], [282.0, 25.93333333333333], [281.0, 22.5], [280.0, 20.545454545454547], [279.0, 22.166666666666664], [275.0, 20.727272727272723], [273.0, 22.0], [278.0, 23.5], [302.0, 25.0], [303.0, 28.4], [301.0, 24.6], [300.0, 22.0], [299.0, 24.666666666666664], [297.0, 24.5], [296.0, 30.666666666666664], [295.0, 24.0], [288.0, 23.3], [291.0, 23.636363636363637], [289.0, 29.0], [294.0, 24.0], [293.0, 30.428571428571427], [292.0, 31.272727272727273], [307.0, 17.0], [319.0, 15.0], [318.0, 10.0], [306.0, 21.77777777777778], [305.0, 39.0], [304.0, 23.0], [315.0, 15.0], [314.0, 14.333333333333334], [312.0, 14.5], [311.0, 14.666666666666666], [310.0, 21.0], [309.0, 17.333333333333332], [308.0, 16.25], [334.0, 27.454545454545453], [335.0, 20.76923076923077], [333.0, 26.666666666666668], [332.0, 16.666666666666668], [331.0, 16.294117647058822], [330.0, 16.42857142857143], [329.0, 19.0], [328.0, 21.666666666666668], [326.0, 29.0], [320.0, 20.5], [322.0, 21.166666666666668], [321.0, 12.0], [325.0, 21.0], [324.0, 15.8], [350.0, 17.599999999999998], [351.0, 17.454545454545457], [349.0, 19.77777777777778], [339.0, 52.5], [338.0, 29.8], [337.0, 24.46153846153846], [336.0, 20.22222222222222], [347.0, 18.28571428571429], [346.0, 22.0], [345.0, 24.0], [344.0, 24.25], [343.0, 19.0], [342.0, 25.818181818181817], [340.0, 37.8], [366.0, 16.0], [367.0, 17.25], [365.0, 18.142857142857142], [364.0, 18.666666666666668], [363.0, 18.099999999999998], [362.0, 16.36666666666667], [361.0, 16.61904761904762], [360.0, 16.25], [359.0, 11.0], [355.0, 13.727272727272728], [354.0, 14.875], [353.0, 22.0], [352.0, 18.2], [357.0, 14.9], [382.0, 17.739130434782616], [383.0, 19.4], [381.0, 17.555555555555557], [380.0, 18.0], [379.0, 20.13461538461538], [378.0, 18.4], [376.0, 17.0], [375.0, 28.5], [369.0, 18.25], [368.0, 17.8], [371.0, 18.333333333333332], [370.0, 18.538461538461537], [374.0, 19.0], [373.0, 18.5], [372.0, 18.857142857142858], [398.0, 21.25], [399.0, 23.129032258064516], [397.0, 24.238095238095237], [396.0, 19.0], [395.0, 19.0], [394.0, 18.5], [392.0, 19.4], [391.0, 19.18181818181818], [385.0, 19.22222222222222], [384.0, 21.66666666666667], [387.0, 21.64], [386.0, 18.0], [390.0, 18.5], [389.0, 21.0], [388.0, 21.0], [413.0, 22.26666666666667], [414.0, 23.5], [412.0, 22.5], [402.0, 22.0], [401.0, 25.714285714285715], [400.0, 24.0], [411.0, 22.166666666666664], [410.0, 22.25], [409.0, 22.0], [408.0, 20.000000000000004], [407.0, 22.53333333333333], [406.0, 22.0], [405.0, 22.88235294117647], [404.0, 22.928571428571427], [430.0, 128.0], [431.0, 58.833333333333336], [429.0, 58.0], [428.0, 41.0], [427.0, 129.0], [426.0, 51.33333333333333], [425.0, 70.83333333333333], [424.0, 131.0], [423.0, 83.2], [417.0, 18.78571428571429], [416.0, 23.5], [419.0, 16.285714285714285], [418.0, 16.363636363636363], [422.0, 44.125], [420.0, 42.75], [446.0, 36.66666666666666], [447.0, 46.0], [445.0, 18.0], [444.0, 46.727272727272734], [443.0, 60.47619047619049], [442.0, 53.33333333333333], [441.0, 38.6875], [440.0, 53.0], [439.0, 23.0], [433.0, 64.14285714285714], [432.0, 65.06060606060605], [435.0, 44.08333333333333], [434.0, 28.219512195121954], [438.0, 48.88235294117647], [437.0, 66.1875], [436.0, 43.75], [462.0, 19.88888888888889], [463.0, 21.5], [461.0, 25.26315789473684], [460.0, 27.22222222222222], [459.0, 26.5], [457.0, 22.900000000000002], [456.0, 26.6], [455.0, 23.0], [449.0, 19.0], [448.0, 19.5], [451.0, 24.500000000000004], [450.0, 34.14285714285714], [454.0, 22.8], [453.0, 23.357142857142858], [452.0, 18.375], [478.0, 58.25], [479.0, 23.0], [477.0, 15.999999999999998], [476.0, 15.0], [475.0, 11.5], [474.0, 16.5], [473.0, 16.333333333333332], [472.0, 19.5], [471.0, 14.857142857142856], [465.0, 16.0], [464.0, 19.0], [467.0, 15.555555555555557], [466.0, 16.347826086956523], [470.0, 18.5], [469.0, 16.0], [468.0, 13.833333333333334], [494.0, 40.0], [495.0, 45.4], [493.0, 35.333333333333336], [492.0, 18.0], [491.0, 10.0], [490.0, 19.857142857142858], [489.0, 21.0], [488.0, 17.65217391304348], [487.0, 18.625], [481.0, 24.75], [480.0, 43.199999999999996], [483.0, 31.33333333333333], [482.0, 59.4], [486.0, 16.0], [485.0, 24.275862068965512], [484.0, 34.666666666666664], [510.0, 43.333333333333336], [511.0, 21.0], [509.0, 48.87499999999999], [508.0, 36.39999999999999], [507.0, 36.2608695652174], [506.0, 38.516129032258064], [504.0, 40.0], [503.0, 44.09090909090909], [497.0, 38.60377358490566], [496.0, 51.625], [499.0, 47.0], [498.0, 55.5], [502.0, 24.333333333333332], [501.0, 42.78723404255319], [500.0, 37.77777777777778], [540.0, 36.25], [543.0, 18.918032786885252], [529.0, 43.70000000000002], [531.0, 36.660000000000004], [530.0, 41.0], [533.0, 17.4], [532.0, 16.333333333333336], [542.0, 34.6], [541.0, 35.726190476190474], [539.0, 34.96874999999999], [538.0, 38.0], [537.0, 34.1320754716981], [536.0, 16.418439716312058], [527.0, 47.0], [513.0, 62.0], [512.0, 43.529411764705884], [515.0, 26.0], [514.0, 35.272727272727266], [517.0, 59.0], [516.0, 39.91666666666667], [519.0, 36.5], [518.0, 39.53333333333333], [526.0, 46.0], [524.0, 48.0], [523.0, 50.333333333333336], [522.0, 52.666666666666664], [521.0, 44.99999999999999], [520.0, 32.2], [535.0, 20.193548387096772], [534.0, 34.0], [572.0, 46.81999999999999], [575.0, 48.16666666666666], [561.0, 31.428571428571427], [560.0, 29.16363636363636], [563.0, 44.122448979591844], [562.0, 30.64705882352941], [565.0, 59.0], [564.0, 47.84], [574.0, 46.666666666666664], [573.0, 46.0], [571.0, 49.166666666666664], [570.0, 45.78124999999999], [569.0, 45.5], [568.0, 46.61111111111111], [559.0, 28.75], [545.0, 16.5], [547.0, 15.820000000000002], [546.0, 18.41176470588235], [549.0, 13.74074074074074], [548.0, 14.96], [551.0, 24.28571428571428], [550.0, 30.317073170731707], [558.0, 27.515151515151516], [557.0, 22.363636363636363], [556.0, 27.16201117318436], [555.0, 26.68253968253968], [554.0, 24.65562913907286], [553.0, 22.589285714285705], [552.0, 22.125], [567.0, 46.5], [566.0, 47.333333333333336], [604.0, 31.92307692307693], [607.0, 29.249999999999996], [593.0, 26.444444444444443], [592.0, 29.75], [595.0, 24.02857142857142], [594.0, 26.26515151515152], [597.0, 23.23529411764706], [596.0, 26.0], [606.0, 31.941176470588236], [605.0, 29.299999999999997], [603.0, 22.46666666666667], [602.0, 23.333333333333336], [601.0, 23.25], [600.0, 25.75], [591.0, 27.095238095238095], [576.0, 45.643835616438366], [579.0, 41.25], [577.0, 45.0], [581.0, 44.90909090909091], [580.0, 46.44791666666668], [583.0, 46.33333333333333], [582.0, 46.416666666666664], [589.0, 27.409090909090907], [588.0, 28.81578947368421], [587.0, 34.71578947368422], [586.0, 26.428571428571427], [585.0, 41.99999999999999], [584.0, 44.263157894736835], [599.0, 21.214285714285715], [598.0, 21.933333333333334], [636.0, 19.642857142857142], [639.0, 21.162500000000005], [625.0, 32.03846153846153], [624.0, 27.35294117647059], [627.0, 28.28571428571429], [626.0, 25.333333333333336], [629.0, 25.578431372549012], [628.0, 25.319587628865975], [638.0, 16.47222222222222], [637.0, 18.911764705882355], [635.0, 21.228855721393042], [634.0, 19.416666666666668], [633.0, 18.89247311827957], [632.0, 22.949367088607584], [623.0, 26.700000000000003], [609.0, 1.0], [608.0, 21.3854748603352], [611.0, 19.054054054054053], [610.0, 19.333333333333332], [613.0, 11.25], [612.0, 16.842105263157894], [615.0, 13.333333333333332], [614.0, 19.91304347826087], [622.0, 24.266666666666666], [621.0, 37.0], [620.0, 2.0], [619.0, 25.625000000000004], [618.0, 22.571428571428573], [617.0, 27.21428571428572], [616.0, 21.28571428571429], [631.0, 23.0], [630.0, 22.878787878787882], [668.0, 22.666666666666668], [671.0, 13.681818181818182], [657.0, 34.44444444444445], [656.0, 33.24528301886791], [659.0, 35.28033472803346], [658.0, 28.520000000000003], [661.0, 25.535714285714285], [660.0, 24.248120300751886], [670.0, 20.888888888888886], [669.0, 18.720588235294112], [667.0, 18.333333333333332], [666.0, 23.89156626506024], [665.0, 29.166666666666668], [664.0, 15.120000000000003], [655.0, 22.647058823529413], [641.0, 21.37869822485207], [640.0, 17.2], [643.0, 31.333333333333332], [642.0, 31.2], [645.0, 19.846153846153843], [644.0, 24.141025641025646], [647.0, 16.142857142857142], [646.0, 20.971428571428575], [654.0, 19.229508196721312], [653.0, 27.75], [652.0, 22.021141649048626], [651.0, 28.4], [650.0, 25.560439560439555], [649.0, 21.06666666666667], [648.0, 18.299107142857135], [663.0, 19.0], [662.0, 19.599999999999998], [700.0, 63.142857142857146], [703.0, 60.52631578947369], [689.0, 18.094117647058813], [688.0, 14.875], [691.0, 20.162790697674414], [690.0, 23.779166666666647], [693.0, 18.973684210526315], [692.0, 19.550898203592823], [702.0, 57.25], [701.0, 40.87931034482759], [699.0, 41.14027149321268], [698.0, 43.172222222222224], [697.0, 23.359743040685245], [696.0, 25.749999999999996], [687.0, 20.24516129032257], [673.0, 19.701492537313438], [672.0, 17.333333333333336], [675.0, 28.857142857142858], [674.0, 33.470588235294116], [677.0, 15.75], [676.0, 24.083333333333336], [679.0, 22.9], [678.0, 20.4], [686.0, 28.627272727272725], [685.0, 33.25], [684.0, 28.41176470588235], [683.0, 35.10714285714286], [682.0, 26.147368421052626], [681.0, 22.5], [680.0, 20.259999999999998], [695.0, 20.5], [694.0, 20.76923076923077], [728.0, 16.5], [734.0, 24.262362637362653], [735.0, 25.882352941176475], [720.0, 20.176470588235293], [723.0, 19.2], [721.0, 20.333333333333332], [733.0, 19.557142857142853], [732.0, 15.0], [730.0, 17.166666666666668], [719.0, 24.21428571428571], [705.0, 45.21052631578947], [704.0, 45.19354838709677], [707.0, 34.500000000000014], [706.0, 40.0], [709.0, 80.83333333333333], [708.0, 41.599999999999994], [711.0, 46.357142857142854], [710.0, 26.178571428571427], [718.0, 22.25], [717.0, 28.727272727272723], [716.0, 20.956521739130427], [714.0, 33.55018137847644], [713.0, 18.0], [712.0, 51.99999999999999], [727.0, 15.2], [726.0, 18.0], [725.0, 20.0], [724.0, 18.5], [760.0, 13.058823529411764], [765.0, 19.57142857142857], [767.0, 27.5], [753.0, 24.436619718309856], [752.0, 26.59459459459459], [755.0, 27.5], [754.0, 16.5], [764.0, 12.000000000000005], [763.0, 19.0], [762.0, 14.363636363636363], [751.0, 21.5], [737.0, 21.604938271604944], [736.0, 25.08196721311476], [739.0, 31.153846153846153], [738.0, 16.5], [741.0, 26.207317073170742], [740.0, 34.68627450980392], [743.0, 38.0], [742.0, 22.457489878542507], [750.0, 22.67032967032968], [749.0, 25.447368421052634], [748.0, 26.10526315789474], [747.0, 28.0], [745.0, 17.906249999999993], [744.0, 25.000000000000004], [759.0, 16.36842105263158], [758.0, 21.60714285714286], [757.0, 23.5], [756.0, 23.161290322580648], [792.0, 14.874999999999998], [798.0, 10.773584905660375], [799.0, 11.969696969696969], [785.0, 20.571428571428573], [784.0, 22.75], [787.0, 20.478260869565222], [786.0, 16.576923076923077], [796.0, 10.833333333333334], [795.0, 10.5], [793.0, 11.538461538461538], [783.0, 18.304347826086957], [769.0, 19.045454545454543], [768.0, 19.162790697674414], [771.0, 17.0], [770.0, 24.38271604938272], [773.0, 20.0], [772.0, 18.995594713656395], [775.0, 24.294117647058822], [774.0, 19.4], [782.0, 20.931034482758623], [781.0, 26.0], [780.0, 29.5], [779.0, 25.0], [778.0, 29.0], [777.0, 15.814814814814813], [776.0, 18.54901960784313], [791.0, 11.874999999999998], [790.0, 16.500000000000004], [789.0, 19.444444444444446], [788.0, 20.513513513513505], [825.0, 38.8], [830.0, 32.82399999999991], [831.0, 28.868263473053894], [817.0, 7.21978021978022], [816.0, 3.6666666666666665], [819.0, 35.125], [818.0, 22.82352941176471], [821.0, 46.8], [820.0, 36.77777777777777], [829.0, 35.09090909090908], [827.0, 39.38983050847459], [826.0, 17.25], [824.0, 36.84210526315789], [807.0, 19.0], [806.0, 17.31578947368421], [805.0, 20.114285714285703], [804.0, 23.413793103448274], [803.0, 27.580645161290324], [802.0, 26.428571428571427], [801.0, 24.857142857142858], [800.0, 17.0], [815.0, 5.230769230769231], [814.0, 5.124999999999999], [813.0, 4.666666666666667], [812.0, 4.7894736842105265], [811.0, 5.190476190476191], [810.0, 16.86363636363636], [809.0, 20.93258426966292], [808.0, 16.390625], [823.0, 28.600000000000005], [822.0, 53.64], [860.0, 4.5], [863.0, 165.60000000000005], [849.0, 12.244897959183675], [848.0, 17.039215686274503], [851.0, 36.103448275862064], [850.0, 26.27272727272727], [853.0, 37.61931818181818], [852.0, 40.14285714285714], [862.0, 30.285714285714285], [861.0, 84.0], [859.0, 9.933333333333332], [858.0, 31.016393442622945], [857.0, 33.38461538461539], [856.0, 32.83333333333333], [847.0, 13.194805194805198], [833.0, 18.5], [832.0, 27.282608695652172], [835.0, 28.0], [834.0, 16.666666666666668], [837.0, 48.35087719298245], [836.0, 31.22222222222222], [839.0, 32.26315789473685], [838.0, 32.60869565217392], [846.0, 15.15384615384615], [845.0, 22.76521739130435], [844.0, 41.0], [843.0, 29.444444444444446], [842.0, 27.658536585365848], [841.0, 23.370370370370374], [840.0, 31.57142857142857], [855.0, 31.47368421052632], [854.0, 34.18181818181819], [888.0, 233.95744680851053], [880.0, 826.0], [864.0, 1146.0285714285715], [873.0, 43.15668202764978], [872.0, 14.333333333333334], [875.0, 42.69148936170213], [874.0, 37.92592592592593], [877.0, 20.0], [876.0, 34.79629629629627], [866.0, 759.5714285714287], [865.0, 12.666666666666666], [867.0, 12.181818181818182], [869.0, 21.799999999999997], [868.0, 14.571428571428571], [871.0, 26.63120567375887], [870.0, 22.012195121951226], [890.0, 116.32500000000003], [889.0, 33.333333333333336], [891.0, 277.157894736842], [892.0, 619.0769230769234], [893.0, 112.10256410256412], [895.0, 25.972972972972972], [894.0, 28.837398373983742], [878.0, 106.59090909090908], [879.0, 164.7228915662651], [881.0, 408.4499999999999], [882.0, 308.05660377358475], [883.0, 328.63636363636357], [884.0, 272.28000000000003], [885.0, 177.25000000000003], [887.0, 1088.0], [886.0, 46.45454545454545], [922.0, 103.48305084745765], [916.0, 406.9655172413792], [917.0, 456.6206896551723], [919.0, 73.73333333333333], [918.0, 107.4736842105263], [914.0, 207.94444444444449], [915.0, 248.6399999999999], [913.0, 378.5714285714286], [912.0, 1264.3333333333333], [927.0, 332.5], [926.0, 29.90566037735849], [925.0, 15.7], [923.0, 108.12903225806454], [924.0, 96.07142857142854], [900.0, 334.3103448275862], [898.0, 452.66666666666663], [899.0, 16.275510204081627], [921.0, 607.9230769230769], [920.0, 22.525641025641026], [903.0, 373.0], [902.0, 182.0], [901.0, 129.4], [897.0, 406.96296296296276], [896.0, 357.7999999999999], [910.0, 43.12500000000001], [909.0, 23.473684210526315], [911.0, 22.66666666666666], [908.0, 77.30000000000001], [907.0, 633.1935483870967], [906.0, 233.93333333333334], [904.0, 217.8125], [905.0, 9.0], [954.0, 50.75], [958.0, 36.25], [928.0, 1053.4117647058822], [940.0, 307.5], [939.0, 76.55421686746988], [938.0, 1126.3333333333335], [937.0, 242.22500000000008], [936.0, 151.3846153846155], [943.0, 622.1818181818181], [942.0, 20.025000000000006], [941.0, 14.909090909090908], [959.0, 62.50980392156859], [945.0, 56.85454545454544], [944.0, 13.860465116279071], [947.0, 176.85185185185188], [946.0, 397.1428571428572], [957.0, 835.1428571428571], [956.0, 120.45454545454545], [951.0, 345.7619047619048], [950.0, 35.333333333333336], [948.0, 33.45454545454545], [949.0, 509.49999999999994], [955.0, 856.0], [953.0, 50.61538461538461], [952.0, 25.80281690140845], [935.0, 44.482142857142854], [934.0, 31.771535580524347], [933.0, 70.24113475177312], [932.0, 1082.1869918699185], [931.0, 27.426666666666666], [930.0, 32.529411764705884], [929.0, 24.941176470588236], [987.0, 28.111111111111114], [977.0, 117.0286738351254], [981.0, 722.75], [982.0, 531.0], [983.0, 17.65853658536586], [988.0, 13.166666666666668], [984.0, 17.925925925925927], [986.0, 14.0], [985.0, 12.18181818181818], [967.0, 88.23076923076924], [966.0, 458.50000000000006], [963.0, 48.19444444444445], [964.0, 27.833333333333336], [965.0, 27.15789473684211], [961.0, 1021.1739130434784], [975.0, 46.71428571428571], [960.0, 43.33333333333333], [962.0, 857.6666666666666], [989.0, 477.1034482758621], [991.0, 43.48148148148149], [976.0, 78.8], [990.0, 8.900000000000002], [980.0, 1310.5], [978.0, 96.983606557377], [973.0, 1010.5357142857142], [971.0, 628.5454545454546], [972.0, 58.86666666666665], [968.0, 136.40000000000003], [969.0, 16.333333333333332], [970.0, 178.8181818181818], [1018.0, 24.46753246753247], [1006.0, 72.67666666666666], [996.0, 25.92222222222223], [997.0, 15.458620689655177], [999.0, 8.34], [998.0, 12.999999999999998], [1017.0, 12.6420664206642], [1016.0, 8.285714285714285], [1005.0, 58.06951871657758], [995.0, 90.27272727272728], [1004.0, 1301.5], [992.0, 142.1794871794872], [1007.0, 8.290000000000006], [1003.0, 137.21428571428572], [1001.0, 42.722222222222214], [1000.0, 9.70238095238095], [1002.0, 10.204545454545459], [994.0, 13.5], [993.0, 31.139534883720934], [1009.0, 46.56000000000002], [1008.0, 8.5], [1011.0, 7.333333333333333], [1010.0, 8.7948717948718], [1013.0, 8.193548387096772], [1012.0, 6.5], [1015.0, 8.054054054054054], [1014.0, 8.238095238095237], [1019.0, 47.50000000000001], [1020.0, 11.962962962962964], [1022.0, 6.833333333333334], [1021.0, 9.949152542372879], [1023.0, 8.812500000000004], [1036.0, 5.666666666666667], [1038.0, 48.095238095238095], [1030.0, 6.198830409356728], [1032.0, 6.8385772913816645], [1034.0, 7.25], [1076.0, 42.5], [1074.0, 2.0], [1078.0, 51.142857142857146], [1080.0, 51.0], [1082.0, 52.5], [1084.0, 62.68421052631578], [1086.0, 51.083333333333336], [1058.0, 107.33333333333333], [1060.0, 15.0], [1066.0, 35.25], [1068.0, 593.0], [1070.0, 1151.1], [1040.0, 2.6666666666666665], [1026.0, 573.2], [1054.0, 941.0], [1024.0, 7.663551401869159], [1046.0, 1278.6666666666667], [1048.0, 1059.0], [1044.0, 760.3333333333333], [1028.0, 14.416216216216212], [1090.0, 50.55555555555556], [1088.0, 53.0], [1118.0, 6.4], [1116.0, 32.583333333333336], [1114.0, 17.259938837920522], [1112.0, 15.580952380952375], [1110.0, 20.48387096774193], [1108.0, 77.59090909090907], [1106.0, 921.25], [1104.0, 33.44444444444445], [1092.0, 69.4], [1094.0, 72.2], [1096.0, 61.96226415094337], [1098.0, 61.777777777777786], [1100.0, 53.4], [1102.0, 31.368421052631582], [1120.0, 18.371134020618552], [1138.0, 39.1], [1144.0, 15.076923076923077], [1142.0, 6.416666666666667], [1140.0, 11.688888888888892], [1146.0, 6.0], [1150.0, 5.214285714285714], [1136.0, 9.375000000000002], [1122.0, 48.93333333333333], [1124.0, 46.5], [1126.0, 22.592592592592595], [1128.0, 18.48529411764707], [1130.0, 23.1025641025641], [1132.0, 7.750000000000002], [1134.0, 13.370370370370372], [1158.0, 468.0], [1166.0, 42.25], [1180.0, 164.6], [1176.0, 159.83333333333334], [1174.0, 1.7], [1172.0, 55.59999999999999], [1170.0, 69.60000000000001], [1168.0, 39.14285714285715], [1178.0, 169.25], [1182.0, 125.8], [1152.0, 149.0], [1156.0, 4.777777777777778], [1154.0, 22.0], [1162.0, 5.333333333333333], [1160.0, 61.058823529411775], [1200.0, 45.996794818941765], [1186.0, 174.9090909090909], [1188.0, 33.142857142857146], [1190.0, 109.0], [1192.0, 18.53846153846154], [1194.0, 17.684210526315788], [1196.0, 52.5], [1198.0, 56.65384615384616], [1077.0, 56.0], [1029.0, 66.12195121951221], [1027.0, 1323.6666666666667], [1031.0, 206.75806451612917], [1033.0, 10.017699115044257], [1035.0, 102.95652173913045], [1037.0, 173.8181818181818], [1039.0, 1385.0], [1079.0, 49.30769230769231], [1081.0, 52.5], [1083.0, 59.0], [1085.0, 51.0], [1087.0, 52.666666666666664], [1059.0, 1945.0], [1061.0, 595.3333333333334], [1069.0, 1431.4285714285713], [1067.0, 701.1999999999999], [1071.0, 56.875], [1041.0, 1454.1666666666667], [1025.0, 8.444444444444445], [1049.0, 548.6666666666667], [1051.0, 1839.0], [1045.0, 1470.6666666666667], [1043.0, 1313.0], [1095.0, 63.333333333333336], [1099.0, 196.41666666666663], [1091.0, 58.0], [1119.0, 9.6], [1117.0, 44.25], [1115.0, 23.900856793145657], [1113.0, 15.232558139534884], [1111.0, 23.286432160804036], [1109.0, 16.664], [1107.0, 28.05352112676053], [1105.0, 39.66666666666667], [1089.0, 66.0], [1093.0, 60.0], [1097.0, 40.42391304347826], [1101.0, 37.42857142857143], [1103.0, 52.0], [1139.0, 34.142857142857146], [1143.0, 6.428571428571429], [1141.0, 6.419354838709675], [1147.0, 9.68421052631579], [1149.0, 5.586206896551724], [1145.0, 56.62500000000001], [1151.0, 78.42857142857142], [1137.0, 40.38235294117647], [1121.0, 35.0], [1123.0, 212.36363636363637], [1125.0, 21.256756756756765], [1127.0, 32.75], [1129.0, 14.181034482758621], [1131.0, 12.666666666666668], [1133.0, 35.0], [1135.0, 6.666666666666667], [1157.0, 16.666666666666664], [1175.0, 95.85714285714286], [1173.0, 15.600000000000001], [1171.0, 78.66666666666666], [1169.0, 57.23529411764706], [1177.0, 121.4], [1181.0, 123.55555555555556], [1183.0, 91.66666666666667], [1159.0, 33.44444444444444], [1155.0, 33.5], [1153.0, 168.10526315789474], [1161.0, 96.4], [1165.0, 4.4375], [1185.0, 182.41666666666666], [1167.0, 19.166666666666664], [1187.0, 121.42857142857142], [1189.0, 36.63736263736263], [1191.0, 17.30000000000001], [1193.0, 23.2], [1195.0, 109.09787816563988], [1197.0, 50.8], [1.0, 6.0]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[1196.2821087734196, 45.962149294999165]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 607359.95, "minX": 1.6263495E12, "maxY": 6721999.666666667, "series": [{"data": [[1.62634968E12, 3022241.216666667], [1.6263498E12, 1464300.1333333333], [1.62634956E12, 2643675.85], [1.62634974E12, 3132866.2333333334], [1.62634962E12, 3011554.216666667], [1.6263495E12, 607359.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62634968E12, 6484643.433333334], [1.6263498E12, 3141838.35], [1.62634956E12, 5650410.7], [1.62634974E12, 6721999.666666667], [1.62634962E12, 6455305.95], [1.6263495E12, 1293894.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 37.99955347267823, "minX": 1.6263495E12, "maxY": 119.4497078872122, "series": [{"data": [[1.62634968E12, 42.47178801704723], [1.6263498E12, 37.99955347267823], [1.62634956E12, 49.30771683552233], [1.62634974E12, 40.11024261183516], [1.62634962E12, 41.67279368784431], [1.6263495E12, 119.4497078872122]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 37.99929379986519, "minX": 1.6263495E12, "maxY": 119.44741472725754, "series": [{"data": [[1.62634968E12, 42.47149312291019], [1.6263498E12, 37.99929379986519], [1.62634956E12, 49.30740406179397], [1.62634974E12, 40.109959414854686], [1.62634962E12, 41.67244831223611], [1.6263495E12, 119.44741472725754]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2007756179564104, "minX": 1.6263495E12, "maxY": 0.3858160939438747, "series": [{"data": [[1.62634968E12, 0.37546880179785364], [1.6263498E12, 0.3858160939438747], [1.62634956E12, 0.2007756179564104], [1.62634974E12, 0.38296772453474537], [1.62634962E12, 0.32211452708593913], [1.6263495E12, 0.3771949881862335]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6263495E12, "maxY": 3080.0, "series": [{"data": [[1.62634968E12, 1221.0], [1.6263498E12, 3080.0], [1.62634956E12, 1350.0], [1.62634974E12, 1442.0], [1.62634962E12, 1269.0], [1.6263495E12, 2090.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62634968E12, 75.0], [1.6263498E12, 34.0], [1.62634956E12, 62.0], [1.62634974E12, 112.0], [1.62634962E12, 107.0], [1.6263495E12, 105.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62634968E12, 261.0], [1.6263498E12, 101.0], [1.62634956E12, 314.0], [1.62634974E12, 263.0], [1.62634962E12, 203.0], [1.6263495E12, 256.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62634968E12, 94.0], [1.6263498E12, 46.0], [1.62634956E12, 152.0], [1.62634974E12, 141.0], [1.62634962E12, 139.0], [1.6263495E12, 143.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62634968E12, 1.0], [1.6263498E12, 1.0], [1.62634956E12, 1.0], [1.62634974E12, 1.0], [1.62634962E12, 1.0], [1.6263495E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62634968E12, 32.0], [1.6263498E12, 10.0], [1.62634956E12, 27.0], [1.62634974E12, 25.0], [1.62634962E12, 27.0], [1.6263495E12, 57.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 32.0, "maxY": 1457.5, "series": [{"data": [[20043.0, 15.0], [23411.0, 32.0], [22531.0, 26.0], [22995.0, 27.0], [24083.0, 24.0], [25419.0, 31.0], [24843.0, 31.0], [25203.0, 28.0], [25243.0, 28.0], [24715.0, 37.0], [25179.0, 24.0], [25955.0, 27.0], [26555.0, 29.0], [26171.0, 30.0], [26267.0, 29.0], [26371.0, 24.0], [27531.0, 26.0], [26675.0, 26.0], [27883.0, 32.0], [28219.0, 30.0], [27675.0, 23.0], [32.0, 1457.5], [8605.0, 124.0], [8749.0, 118.0], [9773.0, 115.0], [13137.0, 73.0], [15421.0, 53.0], [15721.0, 48.0], [16954.0, 40.0], [17986.0, 20.0], [18458.0, 38.0], [23226.0, 30.0], [23466.0, 19.0], [23250.0, 23.0], [22882.0, 21.0], [23594.0, 23.0], [23794.0, 26.0], [24482.0, 30.0], [23930.0, 33.0], [24274.0, 28.0], [23690.0, 30.0], [24770.0, 34.0], [25018.0, 32.0], [25266.0, 29.0], [25258.0, 30.0], [25322.0, 25.0], [25458.0, 25.0], [24730.0, 25.0], [26066.0, 21.0], [25634.0, 33.0], [26082.0, 30.0], [25866.0, 29.0], [26026.0, 27.0], [26914.0, 29.0], [28418.0, 28.0], [27658.0, 23.0], [27882.0, 28.5], [30050.0, 25.0], [19729.0, 34.0], [21593.0, 31.0], [23505.0, 28.0], [22921.0, 30.0], [22641.0, 29.0], [24353.0, 28.0], [24417.0, 26.0], [24449.0, 29.0], [23593.0, 33.0], [24073.0, 26.0], [24385.0, 32.0], [23985.0, 27.0], [24313.0, 26.0], [25249.0, 31.0], [24593.0, 29.0], [25473.0, 29.0], [25105.0, 28.0], [25145.0, 24.0], [25721.0, 30.0], [26369.0, 28.0], [25705.0, 30.0], [26025.0, 25.0], [25929.0, 29.0], [25889.0, 32.0], [26593.0, 27.0], [26161.0, 28.0], [26345.0, 29.0], [26617.0, 18.0], [25785.0, 31.0], [25681.0, 28.0], [26777.0, 24.0], [27273.0, 21.0], [28209.0, 30.0], [2556.0, 229.5], [4726.0, 151.0], [6408.0, 142.0], [6608.0, 143.0], [6886.0, 131.0], [7210.0, 148.0], [7656.0, 131.0], [7458.0, 137.0], [11572.0, 84.0], [20224.0, 25.0], [21472.0, 36.0], [20520.0, 31.0], [22032.0, 32.0], [21576.0, 29.0], [22288.0, 28.0], [22320.0, 32.0], [21640.0, 23.0], [23336.0, 29.0], [24024.0, 35.0], [23792.0, 26.0], [24512.0, 26.0], [25360.0, 25.0], [25520.0, 28.0], [24592.0, 32.0], [25288.0, 28.0], [24896.0, 31.0], [25344.0, 35.0], [25240.0, 28.0], [25528.0, 30.0], [25392.0, 32.0], [25480.0, 27.0], [25728.0, 31.0], [26496.0, 30.0], [25880.0, 30.0], [26160.0, 28.0], [25888.0, 27.0], [25760.0, 28.0], [26568.0, 24.0], [25688.0, 24.0], [25920.0, 28.0], [27432.0, 30.0], [27152.0, 29.0], [26680.0, 24.0], [27480.0, 22.0], [27520.0, 30.0], [28504.0, 27.0], [19679.0, 36.0], [21783.0, 33.0], [21991.0, 27.0], [23047.0, 35.0], [23343.0, 28.0], [23439.0, 34.0], [22951.0, 26.0], [23351.0, 29.0], [23471.0, 26.0], [23527.0, 25.0], [24015.0, 27.0], [23847.0, 27.0], [24095.0, 20.0], [25239.0, 29.0], [25095.0, 30.0], [25583.0, 33.0], [25263.0, 29.0], [24919.0, 27.0], [25831.0, 29.0], [26575.0, 29.0], [26327.0, 27.0], [25887.0, 26.0], [26047.0, 26.0], [28191.0, 27.0], [29343.0, 25.0], [10587.0, 88.0], [13903.0, 62.0], [14675.0, 65.0], [15107.0, 59.0], [14963.0, 62.0], [15291.0, 50.0], [16003.0, 64.0], [16183.0, 55.0], [16019.0, 51.0], [16470.0, 60.0], [17286.0, 55.0], [20174.0, 37.0], [20374.0, 35.0], [22230.0, 28.0], [22342.0, 26.0], [21982.0, 34.0], [22814.0, 34.0], [23262.0, 29.0], [23542.0, 23.0], [23774.0, 31.0], [23558.0, 30.0], [24110.0, 31.0], [23974.0, 24.0], [23854.0, 28.0], [24558.0, 24.0], [24214.0, 32.0], [24454.0, 27.0], [24358.0, 30.0], [25454.0, 32.0], [25134.0, 30.0], [25014.0, 29.0], [24950.0, 36.0], [24710.0, 30.0], [25222.0, 29.0], [25174.0, 26.0], [25534.0, 23.0], [25598.0, 26.0], [25310.0, 30.0], [24726.0, 27.0], [25798.0, 28.0], [26238.0, 28.0], [26006.0, 25.0], [25870.0, 24.0], [25766.0, 21.0], [26062.0, 26.0], [27326.0, 29.0], [26638.0, 28.0], [27526.0, 28.0], [26766.0, 25.0], [27630.0, 24.0], [27054.0, 28.0], [27974.0, 27.0], [27822.0, 28.0], [28326.0, 27.0], [16917.0, 62.0], [18341.0, 36.0], [19061.0, 35.0], [21469.0, 34.0], [20493.0, 35.0], [20757.0, 28.0], [21373.0, 33.0], [22533.0, 24.0], [23413.0, 32.0], [24437.0, 29.0], [24285.0, 28.0], [24317.0, 33.0], [24085.0, 29.0], [23725.0, 26.0], [24965.0, 29.0], [24901.0, 29.0], [25469.0, 30.0], [25021.0, 32.0], [24629.0, 31.0], [25309.0, 24.0], [25293.0, 24.0], [24749.0, 22.0], [26013.0, 34.0], [25725.0, 29.0], [26461.0, 33.0], [26629.0, 25.0], [27093.0, 27.0], [28133.0, 26.0], [6079.0, 152.0], [6773.0, 137.0], [6935.0, 142.0], [7371.0, 129.0], [7933.0, 127.0], [7973.0, 132.0], [8051.0, 2.0], [8450.0, 123.0], [10654.0, 93.0], [13138.0, 76.0], [14290.0, 51.0], [14618.0, 68.0], [14806.0, 69.0], [16860.0, 58.0], [20068.0, 29.0], [22236.0, 32.0], [21948.0, 32.0], [21892.0, 23.0], [22644.0, 30.0], [23116.0, 32.0], [23180.0, 28.0], [22820.0, 33.0], [23460.0, 20.0], [23628.0, 29.0], [24044.0, 29.0], [23820.0, 33.0], [23748.0, 30.0], [24428.0, 24.0], [24548.0, 29.0], [24332.0, 30.0], [24812.0, 34.0], [24676.0, 33.0], [24788.0, 29.0], [25276.0, 25.0], [25428.0, 27.0], [25356.0, 18.0], [24700.0, 27.0], [24756.0, 22.0], [25884.0, 25.0], [26364.0, 34.0], [25948.0, 25.0], [25812.0, 30.0], [26076.0, 32.0], [25636.0, 35.0], [25916.0, 28.0], [26468.0, 29.0], [26708.0, 31.0], [27316.0, 32.0], [27468.0, 32.0], [27580.0, 25.0], [27836.0, 29.0], [29748.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30050.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 32.0, "maxY": 1453.5, "series": [{"data": [[20043.0, 15.0], [23411.0, 32.0], [22531.0, 26.0], [22995.0, 27.0], [24083.0, 24.0], [25419.0, 31.0], [24843.0, 31.0], [25203.0, 28.0], [25243.0, 28.0], [24715.0, 37.0], [25179.0, 24.0], [25955.0, 27.0], [26555.0, 29.0], [26171.0, 30.0], [26267.0, 29.0], [26371.0, 24.0], [27531.0, 26.0], [26675.0, 26.0], [27883.0, 32.0], [28219.0, 30.0], [27675.0, 23.0], [32.0, 1453.5], [8605.0, 124.0], [8749.0, 118.0], [9773.0, 115.0], [13137.0, 73.0], [15421.0, 53.0], [15721.0, 48.0], [16954.0, 40.0], [17986.0, 20.0], [18458.0, 38.0], [23226.0, 30.0], [23466.0, 19.0], [23250.0, 23.0], [22882.0, 21.0], [23594.0, 23.0], [23794.0, 26.0], [24482.0, 30.0], [23930.0, 33.0], [24274.0, 28.0], [23690.0, 30.0], [24770.0, 34.0], [25018.0, 32.0], [25266.0, 29.0], [25258.0, 30.0], [25322.0, 25.0], [25458.0, 25.0], [24730.0, 25.0], [26066.0, 21.0], [25634.0, 33.0], [26082.0, 30.0], [25866.0, 29.0], [26026.0, 27.0], [26914.0, 29.0], [28418.0, 28.0], [27658.0, 23.0], [27882.0, 28.0], [30050.0, 25.0], [19729.0, 34.0], [21593.0, 31.0], [23505.0, 28.0], [22921.0, 30.0], [22641.0, 29.0], [24353.0, 28.0], [24417.0, 26.0], [24449.0, 29.0], [23593.0, 33.0], [24073.0, 26.0], [24385.0, 32.0], [23985.0, 27.0], [24313.0, 26.0], [25249.0, 31.0], [24593.0, 29.0], [25473.0, 29.0], [25105.0, 28.0], [25145.0, 24.0], [25721.0, 30.0], [26369.0, 28.0], [25705.0, 30.0], [26025.0, 25.0], [25929.0, 29.0], [25889.0, 32.0], [26593.0, 27.0], [26161.0, 28.0], [26345.0, 29.0], [26617.0, 18.0], [25785.0, 31.0], [25681.0, 28.0], [26777.0, 24.0], [27273.0, 21.0], [28209.0, 30.0], [2556.0, 229.5], [4726.0, 151.0], [6408.0, 142.0], [6608.0, 143.0], [6886.0, 131.0], [7210.0, 148.0], [7656.0, 131.0], [7458.0, 137.0], [11572.0, 84.0], [20224.0, 25.0], [21472.0, 36.0], [20520.0, 31.0], [22032.0, 32.0], [21576.0, 29.0], [22288.0, 28.0], [22320.0, 32.0], [21640.0, 23.0], [23336.0, 29.0], [24024.0, 35.0], [23792.0, 26.0], [24512.0, 26.0], [25360.0, 25.0], [25520.0, 28.0], [24592.0, 32.0], [25288.0, 28.0], [24896.0, 31.0], [25344.0, 35.0], [25240.0, 28.0], [25528.0, 30.0], [25392.0, 32.0], [25480.0, 27.0], [25728.0, 31.0], [26496.0, 30.0], [25880.0, 30.0], [26160.0, 28.0], [25888.0, 27.0], [25760.0, 28.0], [26568.0, 24.0], [25688.0, 24.0], [25920.0, 28.0], [27432.0, 30.0], [27152.0, 29.0], [26680.0, 24.0], [27480.0, 22.0], [27520.0, 30.0], [28504.0, 27.0], [19679.0, 36.0], [21783.0, 33.0], [21991.0, 27.0], [23047.0, 35.0], [23343.0, 28.0], [23439.0, 34.0], [22951.0, 26.0], [23351.0, 29.0], [23471.0, 26.0], [23527.0, 25.0], [24015.0, 27.0], [23847.0, 27.0], [24095.0, 20.0], [25239.0, 29.0], [25095.0, 30.0], [25583.0, 33.0], [25263.0, 29.0], [24919.0, 27.0], [25831.0, 29.0], [26575.0, 29.0], [26327.0, 27.0], [25887.0, 26.0], [26047.0, 26.0], [28191.0, 27.0], [29343.0, 25.0], [10587.0, 88.0], [13903.0, 62.0], [14675.0, 65.0], [15107.0, 59.0], [14963.0, 62.0], [15291.0, 50.0], [16003.0, 64.0], [16183.0, 55.0], [16019.0, 51.0], [16470.0, 60.0], [17286.0, 55.0], [20174.0, 37.0], [20374.0, 35.0], [22230.0, 28.0], [22342.0, 26.0], [21982.0, 34.0], [22814.0, 34.0], [23262.0, 29.0], [23542.0, 23.0], [23774.0, 31.0], [23558.0, 30.0], [24110.0, 31.0], [23974.0, 24.0], [23854.0, 28.0], [24558.0, 24.0], [24214.0, 32.0], [24454.0, 27.0], [24358.0, 30.0], [25454.0, 32.0], [25134.0, 30.0], [25014.0, 29.0], [24950.0, 36.0], [24710.0, 30.0], [25222.0, 29.0], [25174.0, 26.0], [25534.0, 23.0], [25598.0, 26.0], [25310.0, 30.0], [24726.0, 27.0], [25798.0, 28.0], [26238.0, 28.0], [26006.0, 25.0], [25870.0, 24.0], [25766.0, 21.0], [26062.0, 26.0], [27326.0, 29.0], [26638.0, 28.0], [27526.0, 28.0], [26766.0, 25.0], [27630.0, 24.0], [27054.0, 28.0], [27974.0, 27.0], [27822.0, 28.0], [28326.0, 27.0], [16917.0, 62.0], [18341.0, 36.0], [19061.0, 35.0], [21469.0, 34.0], [20493.0, 35.0], [20757.0, 28.0], [21373.0, 33.0], [22533.0, 24.0], [23413.0, 32.0], [24437.0, 29.0], [24285.0, 28.0], [24317.0, 33.0], [24085.0, 29.0], [23725.0, 26.0], [24965.0, 29.0], [24901.0, 29.0], [25469.0, 30.0], [25021.0, 32.0], [24629.0, 31.0], [25309.0, 24.0], [25293.0, 24.0], [24749.0, 22.0], [26013.0, 34.0], [25725.0, 29.0], [26461.0, 33.0], [26629.0, 25.0], [27093.0, 27.0], [28133.0, 26.0], [6079.0, 152.0], [6773.0, 137.0], [6935.0, 142.0], [7371.0, 129.0], [7933.0, 127.0], [7973.0, 132.0], [8051.0, 2.0], [8450.0, 123.0], [10654.0, 93.0], [13138.0, 76.0], [14290.0, 51.0], [14618.0, 68.0], [14806.0, 69.0], [16860.0, 58.0], [20068.0, 29.0], [22236.0, 32.0], [21948.0, 32.0], [21892.0, 23.0], [22644.0, 30.0], [23116.0, 32.0], [23180.0, 28.0], [22820.0, 33.0], [23460.0, 20.0], [23628.0, 29.0], [24044.0, 29.0], [23820.0, 33.0], [23748.0, 30.0], [24428.0, 24.0], [24548.0, 29.0], [24332.0, 30.0], [24812.0, 34.0], [24676.0, 33.0], [24788.0, 29.0], [25276.0, 25.0], [25428.0, 27.0], [25356.0, 18.0], [24700.0, 27.0], [24756.0, 22.0], [25884.0, 25.0], [26364.0, 34.0], [25948.0, 25.0], [25812.0, 30.0], [26076.0, 32.0], [25636.0, 35.0], [25916.0, 28.0], [26468.0, 29.0], [26708.0, 31.0], [27316.0, 32.0], [27468.0, 32.0], [27580.0, 25.0], [27836.0, 29.0], [29748.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30050.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5045.366666666667, "minX": 1.6263495E12, "maxY": 25953.933333333334, "series": [{"data": [[1.62634968E12, 25036.933333333334], [1.6263498E12, 12110.9], [1.62634956E12, 21904.9], [1.62634974E12, 25953.933333333334], [1.62634962E12, 24948.466666666667], [1.6263495E12, 5045.366666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263498E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5029.45, "minX": 1.6263495E12, "maxY": 25953.666666666668, "series": [{"data": [[1.62634968E12, 25037.233333333334], [1.6263498E12, 12130.65], [1.62634956E12, 21900.816666666666], [1.62634974E12, 25953.666666666668], [1.62634962E12, 24948.683333333334], [1.6263495E12, 5029.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6263498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5029.45, "minX": 1.6263495E12, "maxY": 25953.666666666668, "series": [{"data": [[1.62634968E12, 25037.233333333334], [1.6263498E12, 12130.65], [1.62634956E12, 21900.816666666666], [1.62634974E12, 25953.666666666668], [1.62634962E12, 24948.683333333334], [1.6263495E12, 5029.45]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5029.45, "minX": 1.6263495E12, "maxY": 25953.666666666668, "series": [{"data": [[1.62634968E12, 25037.233333333334], [1.6263498E12, 12130.65], [1.62634956E12, 21900.816666666666], [1.62634974E12, 25953.666666666668], [1.62634962E12, 24948.683333333334], [1.6263495E12, 5029.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6263498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

