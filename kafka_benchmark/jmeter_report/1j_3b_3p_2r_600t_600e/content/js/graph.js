/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2006.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 4.0], [0.5, 4.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 11.0], [4.4, 11.0], [4.5, 11.0], [4.6, 11.0], [4.7, 11.0], [4.8, 11.0], [4.9, 11.0], [5.0, 11.0], [5.1, 11.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 14.0], [7.4, 14.0], [7.5, 14.0], [7.6, 14.0], [7.7, 14.0], [7.8, 14.0], [7.9, 14.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 16.0], [10.1, 16.0], [10.2, 16.0], [10.3, 16.0], [10.4, 16.0], [10.5, 16.0], [10.6, 16.0], [10.7, 16.0], [10.8, 16.0], [10.9, 16.0], [11.0, 16.0], [11.1, 16.0], [11.2, 16.0], [11.3, 16.0], [11.4, 16.0], [11.5, 16.0], [11.6, 16.0], [11.7, 17.0], [11.8, 17.0], [11.9, 17.0], [12.0, 17.0], [12.1, 17.0], [12.2, 17.0], [12.3, 17.0], [12.4, 17.0], [12.5, 17.0], [12.6, 17.0], [12.7, 17.0], [12.8, 17.0], [12.9, 17.0], [13.0, 17.0], [13.1, 17.0], [13.2, 17.0], [13.3, 17.0], [13.4, 17.0], [13.5, 17.0], [13.6, 17.0], [13.7, 17.0], [13.8, 18.0], [13.9, 18.0], [14.0, 18.0], [14.1, 18.0], [14.2, 18.0], [14.3, 18.0], [14.4, 18.0], [14.5, 18.0], [14.6, 18.0], [14.7, 18.0], [14.8, 18.0], [14.9, 18.0], [15.0, 18.0], [15.1, 18.0], [15.2, 18.0], [15.3, 18.0], [15.4, 18.0], [15.5, 18.0], [15.6, 18.0], [15.7, 18.0], [15.8, 18.0], [15.9, 18.0], [16.0, 18.0], [16.1, 18.0], [16.2, 18.0], [16.3, 18.0], [16.4, 19.0], [16.5, 19.0], [16.6, 19.0], [16.7, 19.0], [16.8, 19.0], [16.9, 19.0], [17.0, 19.0], [17.1, 19.0], [17.2, 19.0], [17.3, 19.0], [17.4, 19.0], [17.5, 19.0], [17.6, 19.0], [17.7, 19.0], [17.8, 19.0], [17.9, 19.0], [18.0, 19.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 19.0], [19.1, 19.0], [19.2, 19.0], [19.3, 19.0], [19.4, 19.0], [19.5, 19.0], [19.6, 20.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 20.0], [20.1, 20.0], [20.2, 20.0], [20.3, 20.0], [20.4, 20.0], [20.5, 20.0], [20.6, 20.0], [20.7, 20.0], [20.8, 20.0], [20.9, 20.0], [21.0, 20.0], [21.1, 20.0], [21.2, 20.0], [21.3, 20.0], [21.4, 20.0], [21.5, 20.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 21.0], [23.9, 21.0], [24.0, 21.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 21.0], [24.7, 21.0], [24.8, 21.0], [24.9, 21.0], [25.0, 21.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 21.0], [26.5, 21.0], [26.6, 21.0], [26.7, 21.0], [26.8, 21.0], [26.9, 21.0], [27.0, 21.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 21.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 22.0], [29.0, 22.0], [29.1, 22.0], [29.2, 22.0], [29.3, 22.0], [29.4, 22.0], [29.5, 22.0], [29.6, 22.0], [29.7, 22.0], [29.8, 22.0], [29.9, 22.0], [30.0, 22.0], [30.1, 22.0], [30.2, 22.0], [30.3, 22.0], [30.4, 22.0], [30.5, 22.0], [30.6, 22.0], [30.7, 22.0], [30.8, 22.0], [30.9, 22.0], [31.0, 22.0], [31.1, 22.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 22.0], [32.7, 22.0], [32.8, 22.0], [32.9, 22.0], [33.0, 22.0], [33.1, 22.0], [33.2, 22.0], [33.3, 22.0], [33.4, 22.0], [33.5, 22.0], [33.6, 22.0], [33.7, 22.0], [33.8, 22.0], [33.9, 22.0], [34.0, 22.0], [34.1, 22.0], [34.2, 22.0], [34.3, 22.0], [34.4, 22.0], [34.5, 22.0], [34.6, 22.0], [34.7, 22.0], [34.8, 23.0], [34.9, 23.0], [35.0, 23.0], [35.1, 23.0], [35.2, 23.0], [35.3, 23.0], [35.4, 23.0], [35.5, 23.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 23.0], [36.3, 23.0], [36.4, 23.0], [36.5, 23.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 23.0], [37.5, 23.0], [37.6, 23.0], [37.7, 23.0], [37.8, 23.0], [37.9, 23.0], [38.0, 23.0], [38.1, 23.0], [38.2, 23.0], [38.3, 23.0], [38.4, 23.0], [38.5, 23.0], [38.6, 23.0], [38.7, 23.0], [38.8, 23.0], [38.9, 23.0], [39.0, 23.0], [39.1, 23.0], [39.2, 23.0], [39.3, 23.0], [39.4, 23.0], [39.5, 23.0], [39.6, 23.0], [39.7, 23.0], [39.8, 23.0], [39.9, 23.0], [40.0, 23.0], [40.1, 23.0], [40.2, 23.0], [40.3, 23.0], [40.4, 23.0], [40.5, 23.0], [40.6, 23.0], [40.7, 23.0], [40.8, 23.0], [40.9, 23.0], [41.0, 23.0], [41.1, 23.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 24.0], [41.9, 24.0], [42.0, 24.0], [42.1, 24.0], [42.2, 24.0], [42.3, 24.0], [42.4, 24.0], [42.5, 24.0], [42.6, 24.0], [42.7, 24.0], [42.8, 24.0], [42.9, 24.0], [43.0, 24.0], [43.1, 24.0], [43.2, 24.0], [43.3, 24.0], [43.4, 24.0], [43.5, 24.0], [43.6, 24.0], [43.7, 24.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 24.0], [44.4, 24.0], [44.5, 24.0], [44.6, 24.0], [44.7, 24.0], [44.8, 24.0], [44.9, 24.0], [45.0, 24.0], [45.1, 24.0], [45.2, 24.0], [45.3, 24.0], [45.4, 24.0], [45.5, 24.0], [45.6, 24.0], [45.7, 24.0], [45.8, 24.0], [45.9, 24.0], [46.0, 24.0], [46.1, 24.0], [46.2, 24.0], [46.3, 24.0], [46.4, 24.0], [46.5, 24.0], [46.6, 24.0], [46.7, 24.0], [46.8, 24.0], [46.9, 24.0], [47.0, 24.0], [47.1, 24.0], [47.2, 24.0], [47.3, 24.0], [47.4, 24.0], [47.5, 24.0], [47.6, 25.0], [47.7, 25.0], [47.8, 25.0], [47.9, 25.0], [48.0, 25.0], [48.1, 25.0], [48.2, 25.0], [48.3, 25.0], [48.4, 25.0], [48.5, 25.0], [48.6, 25.0], [48.7, 25.0], [48.8, 25.0], [48.9, 25.0], [49.0, 25.0], [49.1, 25.0], [49.2, 25.0], [49.3, 25.0], [49.4, 25.0], [49.5, 25.0], [49.6, 25.0], [49.7, 25.0], [49.8, 25.0], [49.9, 25.0], [50.0, 25.0], [50.1, 25.0], [50.2, 25.0], [50.3, 25.0], [50.4, 25.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 25.0], [50.9, 25.0], [51.0, 25.0], [51.1, 25.0], [51.2, 25.0], [51.3, 25.0], [51.4, 25.0], [51.5, 25.0], [51.6, 25.0], [51.7, 25.0], [51.8, 25.0], [51.9, 25.0], [52.0, 25.0], [52.1, 25.0], [52.2, 25.0], [52.3, 25.0], [52.4, 25.0], [52.5, 25.0], [52.6, 25.0], [52.7, 25.0], [52.8, 25.0], [52.9, 25.0], [53.0, 25.0], [53.1, 25.0], [53.2, 25.0], [53.3, 25.0], [53.4, 25.0], [53.5, 25.0], [53.6, 26.0], [53.7, 26.0], [53.8, 26.0], [53.9, 26.0], [54.0, 26.0], [54.1, 26.0], [54.2, 26.0], [54.3, 26.0], [54.4, 26.0], [54.5, 26.0], [54.6, 26.0], [54.7, 26.0], [54.8, 26.0], [54.9, 26.0], [55.0, 26.0], [55.1, 26.0], [55.2, 26.0], [55.3, 26.0], [55.4, 26.0], [55.5, 26.0], [55.6, 26.0], [55.7, 26.0], [55.8, 26.0], [55.9, 26.0], [56.0, 26.0], [56.1, 26.0], [56.2, 26.0], [56.3, 26.0], [56.4, 26.0], [56.5, 26.0], [56.6, 26.0], [56.7, 26.0], [56.8, 26.0], [56.9, 26.0], [57.0, 26.0], [57.1, 26.0], [57.2, 26.0], [57.3, 26.0], [57.4, 26.0], [57.5, 26.0], [57.6, 26.0], [57.7, 26.0], [57.8, 26.0], [57.9, 26.0], [58.0, 26.0], [58.1, 26.0], [58.2, 26.0], [58.3, 26.0], [58.4, 26.0], [58.5, 26.0], [58.6, 26.0], [58.7, 26.0], [58.8, 26.0], [58.9, 26.0], [59.0, 26.0], [59.1, 27.0], [59.2, 27.0], [59.3, 27.0], [59.4, 27.0], [59.5, 27.0], [59.6, 27.0], [59.7, 27.0], [59.8, 27.0], [59.9, 27.0], [60.0, 27.0], [60.1, 27.0], [60.2, 27.0], [60.3, 27.0], [60.4, 27.0], [60.5, 27.0], [60.6, 27.0], [60.7, 27.0], [60.8, 27.0], [60.9, 27.0], [61.0, 27.0], [61.1, 27.0], [61.2, 27.0], [61.3, 27.0], [61.4, 27.0], [61.5, 27.0], [61.6, 27.0], [61.7, 27.0], [61.8, 27.0], [61.9, 27.0], [62.0, 27.0], [62.1, 27.0], [62.2, 27.0], [62.3, 27.0], [62.4, 27.0], [62.5, 27.0], [62.6, 27.0], [62.7, 27.0], [62.8, 27.0], [62.9, 27.0], [63.0, 27.0], [63.1, 27.0], [63.2, 27.0], [63.3, 27.0], [63.4, 27.0], [63.5, 27.0], [63.6, 27.0], [63.7, 27.0], [63.8, 28.0], [63.9, 28.0], [64.0, 28.0], [64.1, 28.0], [64.2, 28.0], [64.3, 28.0], [64.4, 28.0], [64.5, 28.0], [64.6, 28.0], [64.7, 28.0], [64.8, 28.0], [64.9, 28.0], [65.0, 28.0], [65.1, 28.0], [65.2, 28.0], [65.3, 28.0], [65.4, 28.0], [65.5, 28.0], [65.6, 28.0], [65.7, 28.0], [65.8, 28.0], [65.9, 28.0], [66.0, 28.0], [66.1, 28.0], [66.2, 28.0], [66.3, 28.0], [66.4, 28.0], [66.5, 28.0], [66.6, 28.0], [66.7, 28.0], [66.8, 28.0], [66.9, 28.0], [67.0, 28.0], [67.1, 28.0], [67.2, 28.0], [67.3, 28.0], [67.4, 28.0], [67.5, 28.0], [67.6, 28.0], [67.7, 28.0], [67.8, 28.0], [67.9, 29.0], [68.0, 29.0], [68.1, 29.0], [68.2, 29.0], [68.3, 29.0], [68.4, 29.0], [68.5, 29.0], [68.6, 29.0], [68.7, 29.0], [68.8, 29.0], [68.9, 29.0], [69.0, 29.0], [69.1, 29.0], [69.2, 29.0], [69.3, 29.0], [69.4, 29.0], [69.5, 29.0], [69.6, 29.0], [69.7, 29.0], [69.8, 29.0], [69.9, 29.0], [70.0, 29.0], [70.1, 29.0], [70.2, 29.0], [70.3, 29.0], [70.4, 29.0], [70.5, 29.0], [70.6, 29.0], [70.7, 29.0], [70.8, 29.0], [70.9, 29.0], [71.0, 29.0], [71.1, 29.0], [71.2, 29.0], [71.3, 29.0], [71.4, 30.0], [71.5, 30.0], [71.6, 30.0], [71.7, 30.0], [71.8, 30.0], [71.9, 30.0], [72.0, 30.0], [72.1, 30.0], [72.2, 30.0], [72.3, 30.0], [72.4, 30.0], [72.5, 30.0], [72.6, 30.0], [72.7, 30.0], [72.8, 30.0], [72.9, 30.0], [73.0, 30.0], [73.1, 30.0], [73.2, 30.0], [73.3, 30.0], [73.4, 30.0], [73.5, 30.0], [73.6, 30.0], [73.7, 30.0], [73.8, 30.0], [73.9, 30.0], [74.0, 30.0], [74.1, 30.0], [74.2, 30.0], [74.3, 30.0], [74.4, 30.0], [74.5, 31.0], [74.6, 31.0], [74.7, 31.0], [74.8, 31.0], [74.9, 31.0], [75.0, 31.0], [75.1, 31.0], [75.2, 31.0], [75.3, 31.0], [75.4, 31.0], [75.5, 31.0], [75.6, 31.0], [75.7, 31.0], [75.8, 31.0], [75.9, 31.0], [76.0, 31.0], [76.1, 31.0], [76.2, 31.0], [76.3, 31.0], [76.4, 31.0], [76.5, 31.0], [76.6, 31.0], [76.7, 31.0], [76.8, 31.0], [76.9, 31.0], [77.0, 31.0], [77.1, 32.0], [77.2, 32.0], [77.3, 32.0], [77.4, 32.0], [77.5, 32.0], [77.6, 32.0], [77.7, 32.0], [77.8, 32.0], [77.9, 32.0], [78.0, 32.0], [78.1, 32.0], [78.2, 32.0], [78.3, 32.0], [78.4, 32.0], [78.5, 32.0], [78.6, 32.0], [78.7, 32.0], [78.8, 32.0], [78.9, 32.0], [79.0, 32.0], [79.1, 32.0], [79.2, 32.0], [79.3, 32.0], [79.4, 33.0], [79.5, 33.0], [79.6, 33.0], [79.7, 33.0], [79.8, 33.0], [79.9, 33.0], [80.0, 33.0], [80.1, 33.0], [80.2, 33.0], [80.3, 33.0], [80.4, 33.0], [80.5, 33.0], [80.6, 33.0], [80.7, 33.0], [80.8, 33.0], [80.9, 33.0], [81.0, 33.0], [81.1, 33.0], [81.2, 33.0], [81.3, 33.0], [81.4, 33.0], [81.5, 34.0], [81.6, 34.0], [81.7, 34.0], [81.8, 34.0], [81.9, 34.0], [82.0, 34.0], [82.1, 34.0], [82.2, 34.0], [82.3, 34.0], [82.4, 34.0], [82.5, 34.0], [82.6, 34.0], [82.7, 34.0], [82.8, 34.0], [82.9, 34.0], [83.0, 34.0], [83.1, 34.0], [83.2, 34.0], [83.3, 35.0], [83.4, 35.0], [83.5, 35.0], [83.6, 35.0], [83.7, 35.0], [83.8, 35.0], [83.9, 35.0], [84.0, 35.0], [84.1, 35.0], [84.2, 35.0], [84.3, 35.0], [84.4, 35.0], [84.5, 35.0], [84.6, 35.0], [84.7, 35.0], [84.8, 35.0], [84.9, 36.0], [85.0, 36.0], [85.1, 36.0], [85.2, 36.0], [85.3, 36.0], [85.4, 36.0], [85.5, 36.0], [85.6, 36.0], [85.7, 36.0], [85.8, 36.0], [85.9, 36.0], [86.0, 36.0], [86.1, 36.0], [86.2, 36.0], [86.3, 37.0], [86.4, 37.0], [86.5, 37.0], [86.6, 37.0], [86.7, 37.0], [86.8, 37.0], [86.9, 37.0], [87.0, 37.0], [87.1, 37.0], [87.2, 37.0], [87.3, 37.0], [87.4, 37.0], [87.5, 37.0], [87.6, 38.0], [87.7, 38.0], [87.8, 38.0], [87.9, 38.0], [88.0, 38.0], [88.1, 38.0], [88.2, 38.0], [88.3, 38.0], [88.4, 38.0], [88.5, 38.0], [88.6, 38.0], [88.7, 39.0], [88.8, 39.0], [88.9, 39.0], [89.0, 39.0], [89.1, 39.0], [89.2, 39.0], [89.3, 39.0], [89.4, 39.0], [89.5, 39.0], [89.6, 39.0], [89.7, 40.0], [89.8, 40.0], [89.9, 40.0], [90.0, 40.0], [90.1, 40.0], [90.2, 40.0], [90.3, 40.0], [90.4, 40.0], [90.5, 40.0], [90.6, 41.0], [90.7, 41.0], [90.8, 41.0], [90.9, 41.0], [91.0, 41.0], [91.1, 41.0], [91.2, 41.0], [91.3, 41.0], [91.4, 42.0], [91.5, 42.0], [91.6, 42.0], [91.7, 42.0], [91.8, 42.0], [91.9, 42.0], [92.0, 42.0], [92.1, 43.0], [92.2, 43.0], [92.3, 43.0], [92.4, 43.0], [92.5, 43.0], [92.6, 43.0], [92.7, 44.0], [92.8, 44.0], [92.9, 44.0], [93.0, 44.0], [93.1, 44.0], [93.2, 44.0], [93.3, 45.0], [93.4, 45.0], [93.5, 45.0], [93.6, 45.0], [93.7, 45.0], [93.8, 46.0], [93.9, 46.0], [94.0, 46.0], [94.1, 46.0], [94.2, 47.0], [94.3, 47.0], [94.4, 47.0], [94.5, 47.0], [94.6, 48.0], [94.7, 48.0], [94.8, 48.0], [94.9, 49.0], [95.0, 49.0], [95.1, 49.0], [95.2, 49.0], [95.3, 50.0], [95.4, 50.0], [95.5, 50.0], [95.6, 51.0], [95.7, 51.0], [95.8, 52.0], [95.9, 52.0], [96.0, 52.0], [96.1, 53.0], [96.2, 53.0], [96.3, 54.0], [96.4, 54.0], [96.5, 55.0], [96.6, 55.0], [96.7, 56.0], [96.8, 56.0], [96.9, 57.0], [97.0, 58.0], [97.1, 58.0], [97.2, 59.0], [97.3, 60.0], [97.4, 60.0], [97.5, 61.0], [97.6, 62.0], [97.7, 63.0], [97.8, 64.0], [97.9, 65.0], [98.0, 66.0], [98.1, 67.0], [98.2, 68.0], [98.3, 69.0], [98.4, 70.0], [98.5, 72.0], [98.6, 73.0], [98.7, 74.0], [98.8, 76.0], [98.9, 78.0], [99.0, 79.0], [99.1, 82.0], [99.2, 84.0], [99.3, 87.0], [99.4, 90.0], [99.5, 94.0], [99.6, 100.0], [99.7, 109.0], [99.8, 133.0], [99.9, 232.0], [100.0, 2006.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6344769.0, "series": [{"data": [[0.0, 6344769.0], [600.0, 27.0], [700.0, 3.0], [200.0, 7302.0], [800.0, 16.0], [900.0, 27.0], [1000.0, 75.0], [1100.0, 62.0], [300.0, 131.0], [1200.0, 52.0], [1300.0, 47.0], [1400.0, 54.0], [1500.0, 192.0], [100.0, 17282.0], [400.0, 241.0], [1600.0, 79.0], [1700.0, 57.0], [500.0, 3.0], [2000.0, 1.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 329.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6369725.0, "series": [{"data": [[0.0, 6369725.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 366.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 329.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 528.6181045389147, "minX": 1.6266627E12, "maxY": 600.0, "series": [{"data": [[1.626663E12, 528.6181045389147], [1.6266627E12, 589.1288080335248], [1.62666282E12, 600.0], [1.62666276E12, 600.0], [1.62666294E12, 600.0], [1.62666288E12, 600.0]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.626663E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 213.79365079365084, "series": [{"data": [[2.0, 2.5], [3.0, 3.076923076923077], [4.0, 3.44], [5.0, 3.0303030303030303], [8.0, 5.928571428571429], [9.0, 5.0], [10.0, 2.0], [11.0, 3.0], [12.0, 2.0], [13.0, 3.6], [14.0, 4.0], [15.0, 2.5], [16.0, 2.5], [17.0, 3.0], [18.0, 3.338842975206611], [19.0, 3.6229508196721314], [20.0, 4.125], [21.0, 3.916666666666666], [22.0, 5.94736842105263], [23.0, 3.844578824527896], [24.0, 3.4822695035460995], [25.0, 3.5000000000000004], [26.0, 3.767441860465116], [27.0, 3.404255319148937], [28.0, 3.352941176470588], [29.0, 4.365521327014212], [30.0, 3.228501228501229], [31.0, 4.066406250000001], [33.0, 5.2], [32.0, 4.000000000000001], [35.0, 4.116883116883118], [34.0, 4.618055555555556], [37.0, 4.571428571428571], [36.0, 8.311111111111114], [39.0, 4.140625000000001], [38.0, 3.855555555555555], [41.0, 5.0], [40.0, 6.5], [43.0, 4.8695652173913055], [42.0, 4.833333333333334], [45.0, 4.999999999999997], [47.0, 4.426573426573426], [46.0, 4.828382838283828], [49.0, 9.0], [48.0, 5.150943396226414], [51.0, 12.571428571428571], [50.0, 11.294117647058826], [53.0, 7.166666666666666], [52.0, 14.57142857142857], [55.0, 5.134920634920636], [54.0, 14.4], [57.0, 4.632829373650104], [56.0, 5.067524115755625], [59.0, 6.434210526315789], [58.0, 5.063515509601178], [61.0, 5.29443838604144], [60.0, 4.25], [63.0, 4.7310167310167355], [62.0, 15.0], [67.0, 3.8404907975460114], [66.0, 5.015267175572519], [65.0, 4.580736543909349], [64.0, 4.56989247311828], [71.0, 4.616045845272211], [70.0, 4.354223433242504], [69.0, 6.897435897435896], [68.0, 9.090909090909093], [75.0, 5.283018867924529], [74.0, 5.812499999999999], [73.0, 4.2272727272727275], [72.0, 6.729016786570744], [79.0, 4.0], [78.0, 6.838709677419355], [77.0, 8.659090909090908], [76.0, 6.25], [83.0, 9.999999999999998], [82.0, 11.333333333333334], [81.0, 6.666666666666667], [80.0, 10.774193548387096], [86.0, 6.5], [85.0, 7.066666666666667], [84.0, 5.812949640287773], [91.0, 4.553398058252429], [90.0, 4.384615384615386], [89.0, 5.205569205569201], [88.0, 9.723163841807905], [95.0, 8.052736318407957], [94.0, 4.870656370656375], [93.0, 7.0], [92.0, 6.495575221238938], [99.0, 5.75], [98.0, 4.979591836734693], [97.0, 4.419354838709679], [96.0, 4.116279069767442], [103.0, 4.6], [102.0, 5.038461538461538], [101.0, 9.461538461538462], [100.0, 6.228571428571428], [107.0, 8.485159010600713], [106.0, 6.066964285714289], [105.0, 4.978260869565218], [104.0, 4.999999999999999], [111.0, 7.5], [110.0, 7.397849462365591], [109.0, 5.846153846153846], [108.0, 6.672883787661408], [115.0, 8.066037735849056], [114.0, 6.553846153846153], [113.0, 6.290598290598291], [112.0, 7.333333333333332], [119.0, 6.75], [118.0, 6.769230769230769], [117.0, 5.769230769230769], [116.0, 6.923076923076923], [123.0, 8.652173913043478], [122.0, 7.348314606741573], [121.0, 6.249999999999999], [120.0, 6.045045045045046], [126.0, 5.879999999999999], [125.0, 6.076923076923077], [124.0, 6.813953488372093], [135.0, 12.410714285714288], [134.0, 15.666666666666666], [133.0, 15.5], [132.0, 9.5], [131.0, 11.8], [130.0, 9.59090909090909], [129.0, 9.628571428571428], [128.0, 8.394736842105265], [143.0, 6.111111111111111], [142.0, 14.932203389830509], [141.0, 8.511430773182664], [140.0, 7.998507462686559], [139.0, 7.683687180865363], [138.0, 8.025000000000002], [137.0, 8.23076923076923], [136.0, 7.652173913043479], [151.0, 6.239999999999998], [150.0, 6.333333333333334], [149.0, 6.590296495956872], [148.0, 7.783943039528604], [147.0, 7.227272727272726], [146.0, 6.818181818181818], [145.0, 7.102564102564101], [144.0, 6.489795918367347], [158.0, 46.02290076335876], [159.0, 6.524590163934426], [157.0, 6.9230769230769225], [156.0, 8.477732793522268], [155.0, 8.282755298651248], [154.0, 14.595009596928985], [153.0, 8.994927076727953], [152.0, 7.288235294117646], [167.0, 9.1875], [166.0, 60.27272727272728], [164.0, 10.5], [163.0, 7.34090909090909], [161.0, 8.880952380952376], [160.0, 8.98], [165.0, 8.615384615384615], [162.0, 8.46808510638298], [169.0, 8.818181818181817], [171.0, 19.64594127806561], [168.0, 8.736842105263158], [172.0, 12.364321608040203], [174.0, 23.736183524504657], [175.0, 12.000000000000002], [173.0, 7.0], [170.0, 6.9411764705882355], [176.0, 18.268656716417905], [177.0, 9.888566453859545], [178.0, 10.403575989782883], [179.0, 9.805194805194809], [180.0, 13.751592356687906], [181.0, 9.872767857142847], [182.0, 34.62248322147653], [183.0, 9.631205673758867], [189.0, 19.71367521367523], [190.0, 24.136363636363612], [188.0, 12.242603550295856], [187.0, 8.045346062052511], [186.0, 8.733333333333333], [185.0, 12.722222222222221], [191.0, 10.232149532710284], [184.0, 8.833333333333329], [192.0, 13.380000000000003], [193.0, 16.677704194260492], [194.0, 56.09259259259259], [195.0, 38.26628895184136], [197.0, 90.7], [199.0, 20.720000000000006], [198.0, 25.571428571428573], [196.0, 33.91304347826086], [204.0, 11.606060606060602], [203.0, 9.333333333333334], [200.0, 22.375000000000004], [207.0, 11.685185185185183], [206.0, 13.47674418604651], [205.0, 9.628526645768025], [202.0, 12.428571428571429], [201.0, 11.661654135338344], [214.0, 11.723436322532027], [212.0, 9.535483870967747], [210.0, 13.642857142857137], [208.0, 12.776978417266195], [215.0, 9.46892655367232], [213.0, 9.660836976889465], [211.0, 10.65454545454545], [209.0, 9.602325581395355], [222.0, 18.33333333333333], [220.0, 16.735294117647058], [217.0, 11.325581395348834], [216.0, 9.804444444444444], [223.0, 13.618181818181814], [221.0, 16.8], [219.0, 14.666666666666664], [218.0, 12.5], [231.0, 15.760000000000003], [228.0, 12.504273504273502], [226.0, 14.217391304347824], [225.0, 12.499999999999998], [224.0, 11.272727272727273], [230.0, 14.368421052631577], [229.0, 14.63013698630137], [227.0, 14.92857142857143], [239.0, 16.01282051282051], [238.0, 10.0], [235.0, 18.977272727272727], [234.0, 16.900000000000002], [237.0, 11.833333333333334], [236.0, 9.32222222222222], [233.0, 19.625], [232.0, 17.250000000000004], [246.0, 18.948051948051937], [245.0, 21.3], [243.0, 49.285714285714285], [241.0, 53.56666666666667], [240.0, 23.348484848484855], [247.0, 13.480620155038762], [244.0, 23.653846153846153], [242.0, 26.444444444444446], [252.0, 11.94285714285714], [251.0, 11.842105263157896], [249.0, 12.034883720930232], [248.0, 12.918032786885247], [255.0, 14.564102564102564], [254.0, 11.344827586206897], [253.0, 10.956521739130434], [250.0, 11.75], [259.0, 26.285714285714285], [270.0, 21.0], [271.0, 31.260869565217384], [269.0, 25.119999999999997], [268.0, 26.82608695652174], [267.0, 26.68421052631579], [266.0, 26.0], [265.0, 27.166666666666668], [264.0, 27.2], [263.0, 25.210526315789473], [262.0, 16.6], [261.0, 19.625000000000007], [260.0, 23.214285714285715], [258.0, 30.03389830508474], [257.0, 41.45454545454545], [256.0, 10.75], [285.0, 69.71428571428571], [287.0, 19.5], [286.0, 24.882352941176467], [284.0, 97.66666666666666], [275.0, 17.142857142857142], [274.0, 35.35], [273.0, 38.0], [272.0, 31.153846153846153], [283.0, 38.27272727272727], [282.0, 84.33333333333334], [281.0, 24.884615384615383], [280.0, 18.86486486486486], [279.0, 35.74999999999999], [278.0, 23.243902439024385], [277.0, 45.875], [276.0, 54.6], [301.0, 26.833333333333332], [302.0, 41.4], [300.0, 50.294117647058826], [299.0, 49.04166666666667], [298.0, 33.43243243243243], [296.0, 39.541666666666664], [297.0, 23.666666666666668], [293.0, 36.166666666666664], [292.0, 29.874999999999996], [291.0, 25.294117647058822], [290.0, 29.242424242424256], [289.0, 20.470588235294116], [288.0, 53.41176470588235], [295.0, 36.42857142857143], [294.0, 18.0], [318.0, 12.615384615384615], [317.0, 11.957446808510639], [316.0, 13.520833333333336], [315.0, 39.8], [314.0, 20.27272727272727], [313.0, 24.612903225806452], [312.0, 41.2], [319.0, 16.9047619047619], [309.0, 6.909090909090909], [308.0, 22.894736842105257], [307.0, 57.333333333333336], [306.0, 22.28205128205128], [305.0, 29.8], [304.0, 43.25], [311.0, 14.875000000000002], [310.0, 9.470588235294118], [334.0, 24.270270270270274], [335.0, 83.42857142857143], [333.0, 24.6984126984127], [332.0, 26.526315789473685], [331.0, 24.244444444444447], [330.0, 24.137931034482758], [328.0, 18.02380952380953], [329.0, 15.210526315789476], [327.0, 17.847222222222225], [321.0, 17.923076923076923], [320.0, 18.928571428571427], [326.0, 14.65714285714286], [323.0, 14.956521739130434], [322.0, 15.439024390243903], [325.0, 12.0], [324.0, 15.065217391304346], [348.0, 14.285714285714286], [350.0, 31.24324324324325], [351.0, 18.176470588235293], [344.0, 15.75], [349.0, 28.324324324324326], [347.0, 16.941176470588236], [346.0, 18.333333333333332], [345.0, 17.333333333333336], [343.0, 17.244444444444447], [341.0, 16.625], [340.0, 18.0], [342.0, 18.363636363636367], [339.0, 15.0], [338.0, 12.5], [337.0, 25.027777777777782], [336.0, 26.627118644067803], [355.0, 32.41379310344827], [365.0, 20.628571428571423], [364.0, 19.352941176470583], [354.0, 22.1875], [353.0, 140.14285714285714], [352.0, 49.37142857142857], [363.0, 17.857142857142858], [362.0, 19.049999999999997], [361.0, 16.36363636363637], [360.0, 16.588235294117645], [367.0, 14.176470588235293], [366.0, 16.135135135135133], [359.0, 26.866666666666678], [358.0, 25.833333333333336], [357.0, 31.536585365853647], [356.0, 35.03703703703704], [382.0, 14.066666666666666], [383.0, 15.8], [381.0, 17.099999999999998], [380.0, 17.812500000000004], [371.0, 17.216666666666665], [379.0, 16.0], [378.0, 28.818181818181817], [376.0, 79.8], [377.0, 16.324324324324326], [375.0, 20.833333333333332], [373.0, 17.89285714285714], [372.0, 18.19148936170212], [374.0, 17.0], [370.0, 15.45], [369.0, 13.0], [368.0, 14.129032258064516], [385.0, 71.5508771929825], [386.0, 15.16933333333333], [387.0, 33.6923076923077], [396.0, 25.875], [397.0, 18.09090909090909], [399.0, 19.0], [398.0, 17.045454545454547], [389.0, 35.90756302521009], [388.0, 47.58181818181819], [391.0, 42.25842696629215], [384.0, 16.727272727272727], [392.0, 8.227848101265826], [393.0, 10.585365853658539], [394.0, 13.730769230769216], [390.0, 28.791666666666668], [395.0, 22.080000000000002], [407.0, 23.677107501933538], [404.0, 21.512014787430683], [405.0, 24.331027667984173], [406.0, 32.76666666666665], [408.0, 15.766355140186919], [414.0, 21.528138528138538], [415.0, 20.923627075351224], [409.0, 17.284132841328393], [410.0, 7.566801619433198], [411.0, 6.714285714285714], [412.0, 24.913580246913565], [403.0, 19.541270445036105], [402.0, 19.375000000000004], [401.0, 19.834532374100725], [400.0, 18.68421052631579], [413.0, 13.187499999999998], [419.0, 53.538623595505626], [417.0, 11.744525547445264], [416.0, 16.10169491525424], [423.0, 21.091510090466276], [422.0, 20.455314009661862], [418.0, 20.31914893617021], [421.0, 72.9050279329608], [420.0, 73.39534883720931], [428.0, 17.137532133676093], [429.0, 17.008695652173905], [431.0, 18.10869565217391], [430.0, 16.74545454545454], [425.0, 25.92307692307691], [424.0, 20.296296296296294], [427.0, 21.45715216682959], [426.0, 28.710843373493976], [435.0, 19.999999999999993], [440.0, 26.52830188679245], [441.0, 26.677165354330715], [447.0, 69.73548387096774], [446.0, 47.46496815286626], [445.0, 31.927879022877075], [444.0, 25.01762114537444], [442.0, 18.26763990267639], [443.0, 19.24289008455031], [439.0, 22.652173913043477], [438.0, 21.05882352941176], [436.0, 19.066666666666674], [437.0, 19.180000000000003], [433.0, 19.458904109589046], [434.0, 15.4375], [432.0, 22.076923076923073], [448.0, 29.621406457319733], [453.0, 35.909090909090914], [454.0, 36.13636363636363], [455.0, 9.463414634146343], [456.0, 36.703144654088106], [460.0, 57.22523961661335], [462.0, 23.59259259259259], [461.0, 22.333333333333336], [463.0, 31.0], [457.0, 22.53333333333333], [458.0, 37.49090909090909], [459.0, 24.415254237288135], [452.0, 25.42222222222222], [451.0, 27.6930693069307], [450.0, 30.116564417177912], [449.0, 26.404255319148934], [478.0, 21.212765957446805], [468.0, 29.8], [469.0, 24.179104477611943], [471.0, 24.954545454545457], [464.0, 25.0], [467.0, 22.13793103448276], [465.0, 24.666666666666668], [470.0, 23.933333333333334], [479.0, 21.636363636363637], [477.0, 21.130434782608702], [476.0, 22.19999999999998], [475.0, 20.35779816513763], [474.0, 23.82098765432099], [473.0, 21.545454545454547], [472.0, 24.750000000000004], [494.0, 22.333333333333332], [490.0, 56.65557163531114], [491.0, 33.6949080921191], [495.0, 28.623076923076912], [493.0, 20.999999999999993], [492.0, 21.389830508474578], [489.0, 25.52459016393443], [488.0, 25.083333333333336], [487.0, 25.292682926829265], [481.0, 22.941176470588243], [480.0, 21.5], [483.0, 24.576923076923073], [482.0, 23.48275862068966], [486.0, 24.333333333333332], [485.0, 25.259999999999994], [484.0, 27.833333333333332], [497.0, 25.864035087719298], [496.0, 22.857142857142858], [498.0, 10.496350364963503], [499.0, 23.533333333333335], [501.0, 19.905660377358494], [500.0, 20.22500000000001], [502.0, 16.064516129032263], [503.0, 19.659090909090917], [504.0, 21.439139559286463], [510.0, 25.417721518987342], [511.0, 31.29062499999997], [508.0, 33.33472803347279], [509.0, 38.03488372093021], [505.0, 55.07142857142858], [506.0, 50.8709677419355], [507.0, 40.33112582781459], [515.0, 28.619565217391294], [516.0, 50.57894736842105], [517.0, 42.0], [518.0, 52.130434782608695], [519.0, 43.86274509803921], [529.0, 47.84482758620691], [528.0, 125.26249999999996], [536.0, 24.687500000000007], [537.0, 45.66666666666667], [540.0, 26.629629629629633], [539.0, 9.333333333333334], [541.0, 18.30484693877552], [542.0, 15.488584474885842], [543.0, 18.8883495145631], [530.0, 11.875], [532.0, 18.222338204592905], [531.0, 13.0], [533.0, 35.513274336283175], [534.0, 11.726688102893894], [535.0, 16.0], [520.0, 38.88571428571429], [514.0, 29.354838709677413], [526.0, 29.751112523839797], [512.0, 37.785714285714285], [527.0, 89.42553191489367], [513.0, 31.719298245614034], [524.0, 20.166666666666664], [525.0, 14.547619047619047], [521.0, 24.4468085106383], [522.0, 11.172413793103448], [523.0, 14.500000000000002], [568.0, 38.59104781281791], [557.0, 24.28813559322034], [550.0, 28.23255813953488], [551.0, 23.076335877862594], [572.0, 167.04878048780495], [571.0, 170.79130434782616], [570.0, 154.68421052631584], [569.0, 213.79365079365084], [573.0, 71.57894736842107], [574.0, 11.666666666666663], [575.0, 13.20809248554913], [552.0, 24.509803921568626], [553.0, 22.449760765550238], [556.0, 18.818181818181817], [555.0, 8.343749999999995], [554.0, 6.0], [558.0, 28.567164179104473], [559.0, 29.999999999999996], [549.0, 10.166666666666666], [548.0, 8.285714285714286], [547.0, 9.6], [546.0, 8.571428571428571], [545.0, 10.263157894736842], [544.0, 8.0], [560.0, 32.36387434554979], [561.0, 20.19178082191781], [562.0, 11.5], [563.0, 22.19015280135824], [564.0, 15.92592592592593], [565.0, 19.124999999999996], [566.0, 19.39051851851849], [567.0, 31.571428571428577], [580.0, 10.440129449838192], [577.0, 8.86311787072244], [576.0, 182.0832196452934], [579.0, 6.000000000000001], [578.0, 2.2], [581.0, 12.359375000000002], [582.0, 176.58206106870247], [590.0, 20.0], [589.0, 37.5], [587.0, 35.00000000000001], [586.0, 30.0], [591.0, 28.5], [592.0, 67.27511961722496], [600.0, 27.65976685529325], [583.0, 31.166666666666668], [593.0, 29.888888888888893], [594.0, 28.0], [595.0, 11.85411140583554], [596.0, 13.918994413407821], [597.0, 9.778718258766624], [598.0, 27.86861313868613], [599.0, 26.687500000000004], [1.0, 5.0]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[592.4270834575467, 27.482882290334373]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1149719.6, "minX": 1.6266627E12, "maxY": 5545397.2, "series": [{"data": [[1.626663E12, 1149719.6], [1.6266627E12, 1378711.6833333333], [1.62666282E12, 2574168.0833333335], [1.62666276E12, 2564534.533333333], [1.62666294E12, 2584499.35], [1.62666288E12, 2564730.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.626663E12, 2466892.9833333334], [1.6266627E12, 2944632.95], [1.62666282E12, 5523213.85], [1.62666276E12, 5497325.383333334], [1.62666294E12, 5545397.2], [1.62666288E12, 5502998.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.626663E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.446098820433036, "minX": 1.6266627E12, "maxY": 28.2265476213076, "series": [{"data": [[1.626663E12, 24.446098820433036], [1.6266627E12, 28.2265476213076], [1.62666282E12, 27.716423252981468], [1.62666276E12, 27.725178802990282], [1.62666294E12, 27.548676368934956], [1.62666288E12, 27.90151283390898]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.626663E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.4457488525425, "minX": 1.6266627E12, "maxY": 28.225673460989135, "series": [{"data": [[1.626663E12, 24.4457488525425], [1.6266627E12, 28.225673460989135], [1.62666282E12, 27.716197385090364], [1.62666276E12, 27.72492306195761], [1.62666294E12, 27.54840936972566], [1.62666288E12, 27.901292411671054]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.626663E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06213920077717672, "minX": 1.6266627E12, "maxY": 0.18928270694906815, "series": [{"data": [[1.626663E12, 0.0699865787313998], [1.6266627E12, 0.18928270694906815], [1.62666282E12, 0.0705153304900577], [1.62666276E12, 0.07391935685052699], [1.62666294E12, 0.06213920077717672], [1.62666288E12, 0.06750176102464184]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.626663E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6266627E12, "maxY": 2006.0, "series": [{"data": [[1.626663E12, 1076.0], [1.6266627E12, 2006.0], [1.62666282E12, 1072.0], [1.62666276E12, 1079.0], [1.62666294E12, 1076.0], [1.62666288E12, 1081.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.626663E12, 6.0], [1.6266627E12, 39.0], [1.62666282E12, 42.0], [1.62666276E12, 40.0], [1.62666294E12, 40.0], [1.62666288E12, 46.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.626663E12, 16.0], [1.6266627E12, 62.0], [1.62666282E12, 78.0], [1.62666276E12, 87.0], [1.62666294E12, 77.0], [1.62666288E12, 88.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.626663E12, 8.0], [1.6266627E12, 46.0], [1.62666282E12, 52.0], [1.62666276E12, 49.0], [1.62666294E12, 45.0], [1.62666288E12, 56.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.626663E12, 1.0], [1.6266627E12, 1.0], [1.62666282E12, 1.0], [1.62666276E12, 1.0], [1.62666294E12, 1.0], [1.62666288E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.626663E12, 4.0], [1.6266627E12, 25.0], [1.62666282E12, 26.0], [1.62666276E12, 26.0], [1.62666294E12, 26.0], [1.62666288E12, 24.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.626663E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 23.0, "maxY": 955.0, "series": [{"data": [[19387.0, 28.0], [19883.0, 24.0], [20379.0, 25.0], [20475.0, 25.0], [20155.0, 26.0], [19963.0, 27.0], [19771.0, 26.0], [19747.0, 27.0], [19707.0, 27.0], [21259.0, 24.0], [20987.0, 24.0], [20819.0, 26.0], [21083.0, 26.0], [21243.0, 22.0], [21195.0, 26.0], [21043.0, 26.0], [21019.0, 26.0], [20715.0, 26.0], [20835.0, 25.0], [20931.0, 25.0], [21115.0, 24.0], [21123.0, 24.0], [21603.0, 25.0], [21515.0, 24.0], [21595.0, 25.0], [22131.0, 24.0], [22043.0, 25.0], [21611.0, 26.0], [21683.0, 25.0], [21883.0, 24.0], [22003.0, 24.0], [22291.0, 25.0], [22963.0, 23.0], [23715.0, 23.0], [23.0, 955.0], [9285.0, 16.0], [16185.0, 7.0], [17642.0, 22.0], [17594.0, 25.0], [17906.0, 8.0], [19714.0, 24.0], [20434.0, 26.0], [20370.0, 26.0], [19730.0, 27.0], [21306.0, 25.0], [21394.0, 25.0], [21410.0, 26.0], [21298.0, 25.0], [21442.0, 25.0], [21154.0, 24.0], [20698.0, 25.0], [20946.0, 26.0], [21234.0, 25.0], [21026.0, 25.0], [21682.0, 24.0], [21586.0, 25.0], [22074.0, 24.0], [22106.0, 25.0], [21946.0, 24.0], [21546.0, 26.0], [22066.0, 24.0], [21706.0, 25.0], [22026.0, 25.0], [21642.0, 25.0], [21658.0, 23.0], [22722.0, 24.0], [22946.0, 23.0], [22794.0, 23.0], [22618.0, 23.0], [22538.0, 23.0], [270.0, 47.0], [20017.0, 26.0], [20209.0, 22.0], [19489.0, 27.0], [20137.0, 27.0], [20161.0, 27.0], [20361.0, 24.0], [20185.0, 26.0], [20033.0, 26.0], [19961.0, 28.0], [21265.0, 24.0], [20665.0, 26.0], [21033.0, 26.0], [21345.0, 25.0], [21361.0, 25.0], [21401.0, 25.0], [21489.0, 26.0], [21153.0, 26.0], [20593.0, 25.0], [20985.0, 25.0], [20625.0, 26.0], [21193.0, 26.0], [21241.0, 25.0], [22369.0, 24.0], [22201.0, 26.0], [22193.0, 23.0], [22257.0, 24.0], [21641.0, 25.0], [21713.0, 25.0], [22337.0, 24.0], [22329.0, 25.0], [21841.0, 25.0], [21569.0, 26.0], [21577.0, 24.0], [22569.0, 23.0], [1600.0, 5.0], [4818.0, 17.0], [5816.0, 4.0], [11136.0, 18.0], [13168.0, 19.0], [19080.0, 23.0], [18728.0, 28.0], [20280.0, 26.0], [20032.0, 28.0], [20168.0, 26.0], [20368.0, 26.0], [20440.0, 26.0], [20984.0, 25.0], [20528.0, 26.0], [20640.0, 26.0], [20944.0, 25.0], [20880.0, 27.0], [20840.0, 26.0], [20736.0, 25.0], [20768.0, 26.0], [20752.0, 27.0], [21472.0, 25.0], [21048.0, 26.0], [21096.0, 23.0], [21200.0, 26.0], [21336.0, 26.0], [20728.0, 26.0], [22472.0, 24.0], [21608.0, 24.0], [22192.0, 24.0], [22232.0, 25.0], [22240.0, 23.0], [22136.0, 23.0], [22168.0, 24.0], [21984.0, 24.0], [21944.0, 25.0], [21792.0, 24.0], [21776.0, 25.0], [22368.0, 24.0], [21688.0, 24.0], [21752.0, 25.0], [22352.0, 25.0], [22768.0, 23.0], [22592.0, 24.0], [17863.0, 24.0], [19887.0, 26.0], [21391.0, 25.0], [20623.0, 25.0], [21407.0, 25.0], [20503.0, 21.0], [20975.0, 25.0], [20959.0, 26.0], [20759.0, 25.0], [21087.0, 26.0], [21439.0, 25.0], [21151.0, 21.0], [21287.0, 24.0], [21351.0, 26.0], [21559.0, 24.0], [21511.0, 26.0], [22199.0, 23.0], [22255.0, 24.0], [22263.0, 23.0], [21807.0, 26.0], [21983.0, 25.0], [22407.0, 23.0], [22335.0, 24.0], [22351.0, 24.0], [22055.0, 24.0], [22455.0, 25.0], [21519.0, 26.0], [21703.0, 25.0], [21607.0, 24.0], [21647.0, 25.0], [23279.0, 23.0], [18718.0, 24.0], [19078.0, 27.0], [18566.0, 14.0], [20446.0, 26.0], [20382.0, 27.0], [21278.0, 24.0], [20982.0, 26.0], [20582.0, 25.0], [21326.0, 25.0], [21286.0, 26.0], [20958.0, 25.0], [20878.0, 26.0], [20846.0, 25.0], [21078.0, 25.0], [21350.0, 26.0], [21414.0, 25.0], [21150.0, 24.0], [21166.0, 24.0], [21190.0, 26.0], [20654.0, 26.0], [20718.0, 25.0], [22406.0, 25.0], [22254.0, 24.0], [21798.0, 24.0], [21902.0, 24.0], [21974.0, 25.0], [22262.0, 24.0], [21662.0, 25.0], [22318.0, 24.0], [22438.0, 26.0], [22118.0, 23.0], [22542.0, 25.0], [22630.0, 24.0], [18997.0, 29.0], [20445.0, 28.0], [20053.0, 24.0], [19581.0, 26.0], [19805.0, 28.0], [20341.0, 26.0], [20197.0, 28.0], [20029.0, 26.0], [20461.0, 26.0], [20237.0, 18.0], [20573.0, 26.0], [21061.0, 24.0], [20957.0, 26.0], [20557.0, 27.0], [21133.0, 26.0], [20781.0, 26.0], [20821.0, 26.0], [20837.0, 26.0], [20645.0, 26.0], [21325.0, 25.0], [21397.0, 25.0], [21373.0, 25.0], [20661.0, 27.0], [21189.0, 25.0], [21549.0, 25.0], [22453.0, 24.0], [22085.0, 24.0], [22125.0, 25.0], [22173.0, 23.0], [21725.0, 26.0], [21853.0, 25.0], [21525.0, 25.0], [21877.0, 25.0], [21821.0, 25.0], [21845.0, 25.0], [21837.0, 24.0], [21589.0, 25.0], [21709.0, 26.0], [22861.0, 23.0], [4305.0, 16.0], [7025.0, 4.0], [11254.0, 26.0], [11522.0, 13.0], [13134.0, 5.0], [20452.0, 27.0], [20444.0, 26.0], [19860.0, 26.0], [20124.0, 27.0], [20012.0, 27.0], [20428.0, 28.0], [19964.0, 26.0], [19644.0, 28.0], [20548.0, 25.0], [20580.0, 23.0], [20492.0, 28.0], [20988.0, 25.0], [20980.0, 25.0], [20932.0, 25.0], [20852.0, 26.0], [20796.0, 27.0], [20828.0, 25.0], [21076.0, 24.0], [21220.0, 24.0], [21212.0, 26.0], [21156.0, 26.0], [21084.0, 25.0], [20588.0, 25.0], [20724.0, 25.0], [21364.0, 25.0], [21412.0, 24.0], [21492.0, 25.0], [21620.0, 25.0], [21580.0, 22.0], [22076.0, 25.0], [22124.0, 25.0], [21540.0, 25.0], [21876.0, 26.0], [21924.0, 26.0], [22012.0, 25.0], [21972.0, 26.0], [22300.0, 25.0], [21716.0, 26.0], [22956.0, 24.0], [22612.0, 23.0], [22948.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23715.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 23.0, "maxY": 955.0, "series": [{"data": [[19387.0, 28.0], [19883.0, 24.0], [20379.0, 25.0], [20475.0, 25.0], [20155.0, 26.0], [19963.0, 27.0], [19771.0, 26.0], [19747.0, 27.0], [19707.0, 27.0], [21259.0, 24.0], [20987.0, 24.0], [20819.0, 26.0], [21083.0, 26.0], [21243.0, 22.0], [21195.0, 26.0], [21043.0, 26.0], [21019.0, 26.0], [20715.0, 26.0], [20835.0, 25.0], [20931.0, 25.0], [21115.0, 24.0], [21123.0, 24.0], [21603.0, 25.0], [21515.0, 24.0], [21595.0, 25.0], [22131.0, 24.0], [22043.0, 25.0], [21611.0, 26.0], [21683.0, 25.0], [21883.0, 24.0], [22003.0, 24.0], [22291.0, 25.0], [22963.0, 23.0], [23715.0, 23.0], [23.0, 955.0], [9285.0, 16.0], [16185.0, 7.0], [17642.0, 22.0], [17594.0, 25.0], [17906.0, 8.0], [19714.0, 24.0], [20434.0, 26.0], [20370.0, 26.0], [19730.0, 27.0], [21306.0, 25.0], [21394.0, 25.0], [21410.0, 26.0], [21298.0, 25.0], [21442.0, 25.0], [21154.0, 24.0], [20698.0, 25.0], [20946.0, 26.0], [21234.0, 25.0], [21026.0, 25.0], [21682.0, 24.0], [21586.0, 25.0], [22074.0, 24.0], [22106.0, 25.0], [21946.0, 24.0], [21546.0, 26.0], [22066.0, 24.0], [21706.0, 25.0], [22026.0, 25.0], [21642.0, 25.0], [21658.0, 23.0], [22722.0, 24.0], [22946.0, 23.0], [22794.0, 23.0], [22618.0, 23.0], [22538.0, 23.0], [270.0, 47.0], [20017.0, 26.0], [20209.0, 22.0], [19489.0, 27.0], [20137.0, 27.0], [20161.0, 27.0], [20361.0, 24.0], [20185.0, 26.0], [20033.0, 26.0], [19961.0, 28.0], [21265.0, 24.0], [20665.0, 26.0], [21033.0, 26.0], [21345.0, 25.0], [21361.0, 25.0], [21401.0, 25.0], [21489.0, 26.0], [21153.0, 26.0], [20593.0, 25.0], [20985.0, 25.0], [20625.0, 26.0], [21193.0, 26.0], [21241.0, 25.0], [22369.0, 24.0], [22201.0, 26.0], [22193.0, 23.0], [22257.0, 24.0], [21641.0, 25.0], [21713.0, 25.0], [22337.0, 24.0], [22329.0, 25.0], [21841.0, 25.0], [21569.0, 26.0], [21577.0, 24.0], [22569.0, 23.0], [1600.0, 5.0], [4818.0, 17.0], [5816.0, 4.0], [11136.0, 18.0], [13168.0, 19.0], [19080.0, 23.0], [18728.0, 28.0], [20280.0, 26.0], [20032.0, 28.0], [20168.0, 26.0], [20368.0, 26.0], [20440.0, 26.0], [20984.0, 25.0], [20528.0, 26.0], [20640.0, 26.0], [20944.0, 25.0], [20880.0, 27.0], [20840.0, 26.0], [20736.0, 25.0], [20768.0, 26.0], [20752.0, 27.0], [21472.0, 25.0], [21048.0, 26.0], [21096.0, 23.0], [21200.0, 26.0], [21336.0, 26.0], [20728.0, 26.0], [22472.0, 24.0], [21608.0, 24.0], [22192.0, 24.0], [22232.0, 25.0], [22240.0, 23.0], [22136.0, 23.0], [22168.0, 24.0], [21984.0, 24.0], [21944.0, 25.0], [21792.0, 24.0], [21776.0, 25.0], [22368.0, 24.0], [21688.0, 24.0], [21752.0, 25.0], [22352.0, 25.0], [22768.0, 23.0], [22592.0, 24.0], [17863.0, 24.0], [19887.0, 26.0], [21391.0, 25.0], [20623.0, 25.0], [21407.0, 25.0], [20503.0, 21.0], [20975.0, 25.0], [20959.0, 26.0], [20759.0, 25.0], [21087.0, 26.0], [21439.0, 25.0], [21151.0, 21.0], [21287.0, 24.0], [21351.0, 26.0], [21559.0, 24.0], [21511.0, 26.0], [22199.0, 23.0], [22255.0, 24.0], [22263.0, 23.0], [21807.0, 26.0], [21983.0, 25.0], [22407.0, 23.0], [22335.0, 24.0], [22351.0, 24.0], [22055.0, 24.0], [22455.0, 25.0], [21519.0, 26.0], [21703.0, 25.0], [21607.0, 24.0], [21647.0, 25.0], [23279.0, 23.0], [18718.0, 24.0], [19078.0, 27.0], [18566.0, 14.0], [20446.0, 26.0], [20382.0, 27.0], [21278.0, 24.0], [20982.0, 26.0], [20582.0, 25.0], [21326.0, 25.0], [21286.0, 26.0], [20958.0, 25.0], [20878.0, 26.0], [20846.0, 25.0], [21078.0, 25.0], [21350.0, 26.0], [21414.0, 25.0], [21150.0, 24.0], [21166.0, 24.0], [21190.0, 26.0], [20654.0, 26.0], [20718.0, 25.0], [22406.0, 25.0], [22254.0, 24.0], [21798.0, 24.0], [21902.0, 24.0], [21974.0, 25.0], [22262.0, 24.0], [21662.0, 25.0], [22318.0, 24.0], [22438.0, 26.0], [22118.0, 23.0], [22542.0, 25.0], [22630.0, 24.0], [18997.0, 29.0], [20445.0, 28.0], [20053.0, 24.0], [19581.0, 26.0], [19805.0, 28.0], [20341.0, 26.0], [20197.0, 28.0], [20029.0, 26.0], [20461.0, 26.0], [20237.0, 18.0], [20573.0, 26.0], [21061.0, 24.0], [20957.0, 26.0], [20557.0, 27.0], [21133.0, 26.0], [20781.0, 26.0], [20821.0, 26.0], [20837.0, 26.0], [20645.0, 26.0], [21325.0, 25.0], [21397.0, 25.0], [21373.0, 25.0], [20661.0, 27.0], [21189.0, 25.0], [21549.0, 25.0], [22453.0, 24.0], [22085.0, 24.0], [22125.0, 25.0], [22173.0, 23.0], [21725.0, 26.0], [21853.0, 25.0], [21525.0, 25.0], [21877.0, 25.0], [21821.0, 25.0], [21845.0, 25.0], [21837.0, 24.0], [21589.0, 25.0], [21709.0, 26.0], [22861.0, 23.0], [4305.0, 16.0], [7025.0, 4.0], [11254.0, 26.0], [11522.0, 13.0], [13134.0, 5.0], [20452.0, 27.0], [20444.0, 26.0], [19860.0, 26.0], [20124.0, 27.0], [20012.0, 27.0], [20428.0, 28.0], [19964.0, 26.0], [19644.0, 28.0], [20548.0, 25.0], [20580.0, 23.0], [20492.0, 28.0], [20988.0, 25.0], [20980.0, 25.0], [20932.0, 25.0], [20852.0, 26.0], [20796.0, 27.0], [20828.0, 25.0], [21076.0, 24.0], [21220.0, 24.0], [21212.0, 26.0], [21156.0, 26.0], [21084.0, 25.0], [20588.0, 25.0], [20724.0, 25.0], [21364.0, 25.0], [21412.0, 24.0], [21492.0, 25.0], [21620.0, 25.0], [21580.0, 22.0], [22076.0, 25.0], [22124.0, 25.0], [21540.0, 25.0], [21876.0, 26.0], [21924.0, 26.0], [22012.0, 25.0], [21972.0, 26.0], [22300.0, 25.0], [21716.0, 26.0], [22956.0, 24.0], [22612.0, 23.0], [22948.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23715.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9514.683333333332, "minX": 1.6266627E12, "maxY": 21411.133333333335, "series": [{"data": [[1.626663E12, 9514.683333333332], [1.6266627E12, 11430.45], [1.62666282E12, 21325.033333333333], [1.62666276E12, 21245.466666666667], [1.62666294E12, 21411.133333333335], [1.62666288E12, 21246.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.626663E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9524.683333333332, "minX": 1.6266627E12, "maxY": 21410.8, "series": [{"data": [[1.626663E12, 9524.683333333332], [1.6266627E12, 11420.483333333334], [1.62666282E12, 21325.15], [1.62666276E12, 21245.45], [1.62666294E12, 21410.8], [1.62666288E12, 21247.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.626663E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9524.683333333332, "minX": 1.6266627E12, "maxY": 21410.8, "series": [{"data": [[1.626663E12, 9524.683333333332], [1.6266627E12, 11420.483333333334], [1.62666282E12, 21325.15], [1.62666276E12, 21245.45], [1.62666294E12, 21410.8], [1.62666288E12, 21247.1]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.626663E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9524.683333333332, "minX": 1.6266627E12, "maxY": 21410.8, "series": [{"data": [[1.626663E12, 9524.683333333332], [1.6266627E12, 11420.483333333334], [1.62666282E12, 21325.15], [1.62666276E12, 21245.45], [1.62666294E12, 21410.8], [1.62666288E12, 21247.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.626663E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

