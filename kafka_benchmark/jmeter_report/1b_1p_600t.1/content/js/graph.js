/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1406.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 5.0], [0.7, 5.0], [0.8, 6.0], [0.9, 7.0], [1.0, 8.0], [1.1, 9.0], [1.2, 10.0], [1.3, 11.0], [1.4, 12.0], [1.5, 14.0], [1.6, 15.0], [1.7, 16.0], [1.8, 18.0], [1.9, 19.0], [2.0, 20.0], [2.1, 21.0], [2.2, 22.0], [2.3, 23.0], [2.4, 24.0], [2.5, 25.0], [2.6, 26.0], [2.7, 27.0], [2.8, 28.0], [2.9, 29.0], [3.0, 29.0], [3.1, 30.0], [3.2, 30.0], [3.3, 31.0], [3.4, 31.0], [3.5, 31.0], [3.6, 32.0], [3.7, 32.0], [3.8, 32.0], [3.9, 32.0], [4.0, 33.0], [4.1, 33.0], [4.2, 33.0], [4.3, 33.0], [4.4, 33.0], [4.5, 34.0], [4.6, 34.0], [4.7, 34.0], [4.8, 34.0], [4.9, 34.0], [5.0, 35.0], [5.1, 35.0], [5.2, 35.0], [5.3, 35.0], [5.4, 35.0], [5.5, 36.0], [5.6, 36.0], [5.7, 36.0], [5.8, 36.0], [5.9, 36.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 39.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 41.0], [8.3, 41.0], [8.4, 41.0], [8.5, 41.0], [8.6, 41.0], [8.7, 41.0], [8.8, 41.0], [8.9, 42.0], [9.0, 42.0], [9.1, 42.0], [9.2, 42.0], [9.3, 42.0], [9.4, 42.0], [9.5, 42.0], [9.6, 42.0], [9.7, 42.0], [9.8, 43.0], [9.9, 43.0], [10.0, 43.0], [10.1, 43.0], [10.2, 43.0], [10.3, 43.0], [10.4, 43.0], [10.5, 43.0], [10.6, 43.0], [10.7, 43.0], [10.8, 43.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 44.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 44.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 46.0], [14.1, 46.0], [14.2, 46.0], [14.3, 46.0], [14.4, 46.0], [14.5, 46.0], [14.6, 46.0], [14.7, 46.0], [14.8, 46.0], [14.9, 46.0], [15.0, 46.0], [15.1, 46.0], [15.2, 46.0], [15.3, 46.0], [15.4, 46.0], [15.5, 46.0], [15.6, 46.0], [15.7, 46.0], [15.8, 46.0], [15.9, 46.0], [16.0, 47.0], [16.1, 47.0], [16.2, 47.0], [16.3, 47.0], [16.4, 47.0], [16.5, 47.0], [16.6, 47.0], [16.7, 47.0], [16.8, 47.0], [16.9, 47.0], [17.0, 47.0], [17.1, 47.0], [17.2, 47.0], [17.3, 47.0], [17.4, 47.0], [17.5, 47.0], [17.6, 47.0], [17.7, 47.0], [17.8, 47.0], [17.9, 47.0], [18.0, 47.0], [18.1, 47.0], [18.2, 47.0], [18.3, 47.0], [18.4, 47.0], [18.5, 48.0], [18.6, 48.0], [18.7, 48.0], [18.8, 48.0], [18.9, 48.0], [19.0, 48.0], [19.1, 48.0], [19.2, 48.0], [19.3, 48.0], [19.4, 48.0], [19.5, 48.0], [19.6, 48.0], [19.7, 48.0], [19.8, 48.0], [19.9, 48.0], [20.0, 48.0], [20.1, 48.0], [20.2, 48.0], [20.3, 48.0], [20.4, 48.0], [20.5, 48.0], [20.6, 48.0], [20.7, 48.0], [20.8, 48.0], [20.9, 48.0], [21.0, 48.0], [21.1, 48.0], [21.2, 48.0], [21.3, 48.0], [21.4, 49.0], [21.5, 49.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 49.0], [22.2, 49.0], [22.3, 49.0], [22.4, 49.0], [22.5, 49.0], [22.6, 49.0], [22.7, 49.0], [22.8, 49.0], [22.9, 49.0], [23.0, 49.0], [23.1, 49.0], [23.2, 49.0], [23.3, 49.0], [23.4, 49.0], [23.5, 49.0], [23.6, 49.0], [23.7, 49.0], [23.8, 49.0], [23.9, 49.0], [24.0, 49.0], [24.1, 49.0], [24.2, 49.0], [24.3, 49.0], [24.4, 49.0], [24.5, 49.0], [24.6, 50.0], [24.7, 50.0], [24.8, 50.0], [24.9, 50.0], [25.0, 50.0], [25.1, 50.0], [25.2, 50.0], [25.3, 50.0], [25.4, 50.0], [25.5, 50.0], [25.6, 50.0], [25.7, 50.0], [25.8, 50.0], [25.9, 50.0], [26.0, 50.0], [26.1, 50.0], [26.2, 50.0], [26.3, 50.0], [26.4, 50.0], [26.5, 50.0], [26.6, 50.0], [26.7, 50.0], [26.8, 50.0], [26.9, 50.0], [27.0, 50.0], [27.1, 50.0], [27.2, 50.0], [27.3, 50.0], [27.4, 50.0], [27.5, 50.0], [27.6, 50.0], [27.7, 50.0], [27.8, 50.0], [27.9, 50.0], [28.0, 50.0], [28.1, 50.0], [28.2, 51.0], [28.3, 51.0], [28.4, 51.0], [28.5, 51.0], [28.6, 51.0], [28.7, 51.0], [28.8, 51.0], [28.9, 51.0], [29.0, 51.0], [29.1, 51.0], [29.2, 51.0], [29.3, 51.0], [29.4, 51.0], [29.5, 51.0], [29.6, 51.0], [29.7, 51.0], [29.8, 51.0], [29.9, 51.0], [30.0, 51.0], [30.1, 51.0], [30.2, 51.0], [30.3, 51.0], [30.4, 51.0], [30.5, 51.0], [30.6, 51.0], [30.7, 51.0], [30.8, 51.0], [30.9, 51.0], [31.0, 51.0], [31.1, 51.0], [31.2, 51.0], [31.3, 51.0], [31.4, 51.0], [31.5, 51.0], [31.6, 51.0], [31.7, 51.0], [31.8, 51.0], [31.9, 51.0], [32.0, 51.0], [32.1, 52.0], [32.2, 52.0], [32.3, 52.0], [32.4, 52.0], [32.5, 52.0], [32.6, 52.0], [32.7, 52.0], [32.8, 52.0], [32.9, 52.0], [33.0, 52.0], [33.1, 52.0], [33.2, 52.0], [33.3, 52.0], [33.4, 52.0], [33.5, 52.0], [33.6, 52.0], [33.7, 52.0], [33.8, 52.0], [33.9, 52.0], [34.0, 52.0], [34.1, 52.0], [34.2, 52.0], [34.3, 52.0], [34.4, 52.0], [34.5, 52.0], [34.6, 52.0], [34.7, 52.0], [34.8, 52.0], [34.9, 52.0], [35.0, 52.0], [35.1, 52.0], [35.2, 52.0], [35.3, 52.0], [35.4, 52.0], [35.5, 52.0], [35.6, 52.0], [35.7, 52.0], [35.8, 52.0], [35.9, 52.0], [36.0, 52.0], [36.1, 52.0], [36.2, 53.0], [36.3, 53.0], [36.4, 53.0], [36.5, 53.0], [36.6, 53.0], [36.7, 53.0], [36.8, 53.0], [36.9, 53.0], [37.0, 53.0], [37.1, 53.0], [37.2, 53.0], [37.3, 53.0], [37.4, 53.0], [37.5, 53.0], [37.6, 53.0], [37.7, 53.0], [37.8, 53.0], [37.9, 53.0], [38.0, 53.0], [38.1, 53.0], [38.2, 53.0], [38.3, 53.0], [38.4, 53.0], [38.5, 53.0], [38.6, 53.0], [38.7, 53.0], [38.8, 53.0], [38.9, 53.0], [39.0, 53.0], [39.1, 53.0], [39.2, 53.0], [39.3, 53.0], [39.4, 53.0], [39.5, 53.0], [39.6, 53.0], [39.7, 53.0], [39.8, 53.0], [39.9, 53.0], [40.0, 53.0], [40.1, 53.0], [40.2, 53.0], [40.3, 53.0], [40.4, 54.0], [40.5, 54.0], [40.6, 54.0], [40.7, 54.0], [40.8, 54.0], [40.9, 54.0], [41.0, 54.0], [41.1, 54.0], [41.2, 54.0], [41.3, 54.0], [41.4, 54.0], [41.5, 54.0], [41.6, 54.0], [41.7, 54.0], [41.8, 54.0], [41.9, 54.0], [42.0, 54.0], [42.1, 54.0], [42.2, 54.0], [42.3, 54.0], [42.4, 54.0], [42.5, 54.0], [42.6, 54.0], [42.7, 54.0], [42.8, 54.0], [42.9, 54.0], [43.0, 54.0], [43.1, 54.0], [43.2, 54.0], [43.3, 54.0], [43.4, 54.0], [43.5, 54.0], [43.6, 54.0], [43.7, 54.0], [43.8, 54.0], [43.9, 54.0], [44.0, 54.0], [44.1, 54.0], [44.2, 54.0], [44.3, 54.0], [44.4, 54.0], [44.5, 54.0], [44.6, 55.0], [44.7, 55.0], [44.8, 55.0], [44.9, 55.0], [45.0, 55.0], [45.1, 55.0], [45.2, 55.0], [45.3, 55.0], [45.4, 55.0], [45.5, 55.0], [45.6, 55.0], [45.7, 55.0], [45.8, 55.0], [45.9, 55.0], [46.0, 55.0], [46.1, 55.0], [46.2, 55.0], [46.3, 55.0], [46.4, 55.0], [46.5, 55.0], [46.6, 55.0], [46.7, 55.0], [46.8, 55.0], [46.9, 55.0], [47.0, 55.0], [47.1, 55.0], [47.2, 55.0], [47.3, 55.0], [47.4, 55.0], [47.5, 55.0], [47.6, 55.0], [47.7, 55.0], [47.8, 55.0], [47.9, 55.0], [48.0, 55.0], [48.1, 55.0], [48.2, 55.0], [48.3, 55.0], [48.4, 55.0], [48.5, 55.0], [48.6, 55.0], [48.7, 55.0], [48.8, 56.0], [48.9, 56.0], [49.0, 56.0], [49.1, 56.0], [49.2, 56.0], [49.3, 56.0], [49.4, 56.0], [49.5, 56.0], [49.6, 56.0], [49.7, 56.0], [49.8, 56.0], [49.9, 56.0], [50.0, 56.0], [50.1, 56.0], [50.2, 56.0], [50.3, 56.0], [50.4, 56.0], [50.5, 56.0], [50.6, 56.0], [50.7, 56.0], [50.8, 56.0], [50.9, 56.0], [51.0, 56.0], [51.1, 56.0], [51.2, 56.0], [51.3, 56.0], [51.4, 56.0], [51.5, 56.0], [51.6, 56.0], [51.7, 56.0], [51.8, 56.0], [51.9, 56.0], [52.0, 56.0], [52.1, 56.0], [52.2, 56.0], [52.3, 56.0], [52.4, 56.0], [52.5, 56.0], [52.6, 56.0], [52.7, 56.0], [52.8, 57.0], [52.9, 57.0], [53.0, 57.0], [53.1, 57.0], [53.2, 57.0], [53.3, 57.0], [53.4, 57.0], [53.5, 57.0], [53.6, 57.0], [53.7, 57.0], [53.8, 57.0], [53.9, 57.0], [54.0, 57.0], [54.1, 57.0], [54.2, 57.0], [54.3, 57.0], [54.4, 57.0], [54.5, 57.0], [54.6, 57.0], [54.7, 57.0], [54.8, 57.0], [54.9, 57.0], [55.0, 57.0], [55.1, 57.0], [55.2, 57.0], [55.3, 57.0], [55.4, 57.0], [55.5, 57.0], [55.6, 57.0], [55.7, 57.0], [55.8, 57.0], [55.9, 57.0], [56.0, 57.0], [56.1, 57.0], [56.2, 57.0], [56.3, 57.0], [56.4, 57.0], [56.5, 57.0], [56.6, 57.0], [56.7, 57.0], [56.8, 58.0], [56.9, 58.0], [57.0, 58.0], [57.1, 58.0], [57.2, 58.0], [57.3, 58.0], [57.4, 58.0], [57.5, 58.0], [57.6, 58.0], [57.7, 58.0], [57.8, 58.0], [57.9, 58.0], [58.0, 58.0], [58.1, 58.0], [58.2, 58.0], [58.3, 58.0], [58.4, 58.0], [58.5, 58.0], [58.6, 58.0], [58.7, 58.0], [58.8, 58.0], [58.9, 58.0], [59.0, 58.0], [59.1, 58.0], [59.2, 58.0], [59.3, 58.0], [59.4, 58.0], [59.5, 58.0], [59.6, 58.0], [59.7, 58.0], [59.8, 58.0], [59.9, 58.0], [60.0, 58.0], [60.1, 58.0], [60.2, 58.0], [60.3, 58.0], [60.4, 58.0], [60.5, 59.0], [60.6, 59.0], [60.7, 59.0], [60.8, 59.0], [60.9, 59.0], [61.0, 59.0], [61.1, 59.0], [61.2, 59.0], [61.3, 59.0], [61.4, 59.0], [61.5, 59.0], [61.6, 59.0], [61.7, 59.0], [61.8, 59.0], [61.9, 59.0], [62.0, 59.0], [62.1, 59.0], [62.2, 59.0], [62.3, 59.0], [62.4, 59.0], [62.5, 59.0], [62.6, 59.0], [62.7, 59.0], [62.8, 59.0], [62.9, 59.0], [63.0, 59.0], [63.1, 59.0], [63.2, 59.0], [63.3, 59.0], [63.4, 59.0], [63.5, 59.0], [63.6, 59.0], [63.7, 59.0], [63.8, 59.0], [63.9, 59.0], [64.0, 60.0], [64.1, 60.0], [64.2, 60.0], [64.3, 60.0], [64.4, 60.0], [64.5, 60.0], [64.6, 60.0], [64.7, 60.0], [64.8, 60.0], [64.9, 60.0], [65.0, 60.0], [65.1, 60.0], [65.2, 60.0], [65.3, 60.0], [65.4, 60.0], [65.5, 60.0], [65.6, 60.0], [65.7, 60.0], [65.8, 60.0], [65.9, 60.0], [66.0, 60.0], [66.1, 60.0], [66.2, 60.0], [66.3, 60.0], [66.4, 60.0], [66.5, 60.0], [66.6, 60.0], [66.7, 60.0], [66.8, 60.0], [66.9, 60.0], [67.0, 60.0], [67.1, 61.0], [67.2, 61.0], [67.3, 61.0], [67.4, 61.0], [67.5, 61.0], [67.6, 61.0], [67.7, 61.0], [67.8, 61.0], [67.9, 61.0], [68.0, 61.0], [68.1, 61.0], [68.2, 61.0], [68.3, 61.0], [68.4, 61.0], [68.5, 61.0], [68.6, 61.0], [68.7, 61.0], [68.8, 61.0], [68.9, 61.0], [69.0, 61.0], [69.1, 61.0], [69.2, 61.0], [69.3, 61.0], [69.4, 61.0], [69.5, 61.0], [69.6, 61.0], [69.7, 61.0], [69.8, 61.0], [69.9, 61.0], [70.0, 62.0], [70.1, 62.0], [70.2, 62.0], [70.3, 62.0], [70.4, 62.0], [70.5, 62.0], [70.6, 62.0], [70.7, 62.0], [70.8, 62.0], [70.9, 62.0], [71.0, 62.0], [71.1, 62.0], [71.2, 62.0], [71.3, 62.0], [71.4, 62.0], [71.5, 62.0], [71.6, 62.0], [71.7, 62.0], [71.8, 62.0], [71.9, 62.0], [72.0, 62.0], [72.1, 62.0], [72.2, 62.0], [72.3, 62.0], [72.4, 62.0], [72.5, 62.0], [72.6, 63.0], [72.7, 63.0], [72.8, 63.0], [72.9, 63.0], [73.0, 63.0], [73.1, 63.0], [73.2, 63.0], [73.3, 63.0], [73.4, 63.0], [73.5, 63.0], [73.6, 63.0], [73.7, 63.0], [73.8, 63.0], [73.9, 63.0], [74.0, 63.0], [74.1, 63.0], [74.2, 63.0], [74.3, 63.0], [74.4, 63.0], [74.5, 63.0], [74.6, 63.0], [74.7, 63.0], [74.8, 63.0], [74.9, 63.0], [75.0, 64.0], [75.1, 64.0], [75.2, 64.0], [75.3, 64.0], [75.4, 64.0], [75.5, 64.0], [75.6, 64.0], [75.7, 64.0], [75.8, 64.0], [75.9, 64.0], [76.0, 64.0], [76.1, 64.0], [76.2, 64.0], [76.3, 64.0], [76.4, 64.0], [76.5, 64.0], [76.6, 64.0], [76.7, 64.0], [76.8, 64.0], [76.9, 64.0], [77.0, 65.0], [77.1, 65.0], [77.2, 65.0], [77.3, 65.0], [77.4, 65.0], [77.5, 65.0], [77.6, 65.0], [77.7, 65.0], [77.8, 65.0], [77.9, 65.0], [78.0, 65.0], [78.1, 65.0], [78.2, 65.0], [78.3, 65.0], [78.4, 65.0], [78.5, 65.0], [78.6, 65.0], [78.7, 65.0], [78.8, 66.0], [78.9, 66.0], [79.0, 66.0], [79.1, 66.0], [79.2, 66.0], [79.3, 66.0], [79.4, 66.0], [79.5, 66.0], [79.6, 66.0], [79.7, 66.0], [79.8, 66.0], [79.9, 66.0], [80.0, 66.0], [80.1, 66.0], [80.2, 66.0], [80.3, 66.0], [80.4, 67.0], [80.5, 67.0], [80.6, 67.0], [80.7, 67.0], [80.8, 67.0], [80.9, 67.0], [81.0, 67.0], [81.1, 67.0], [81.2, 67.0], [81.3, 67.0], [81.4, 67.0], [81.5, 67.0], [81.6, 67.0], [81.7, 68.0], [81.8, 68.0], [81.9, 68.0], [82.0, 68.0], [82.1, 68.0], [82.2, 68.0], [82.3, 68.0], [82.4, 68.0], [82.5, 68.0], [82.6, 68.0], [82.7, 68.0], [82.8, 68.0], [82.9, 69.0], [83.0, 69.0], [83.1, 69.0], [83.2, 69.0], [83.3, 69.0], [83.4, 69.0], [83.5, 69.0], [83.6, 69.0], [83.7, 69.0], [83.8, 69.0], [83.9, 70.0], [84.0, 70.0], [84.1, 70.0], [84.2, 70.0], [84.3, 70.0], [84.4, 70.0], [84.5, 70.0], [84.6, 70.0], [84.7, 70.0], [84.8, 71.0], [84.9, 71.0], [85.0, 71.0], [85.1, 71.0], [85.2, 71.0], [85.3, 71.0], [85.4, 71.0], [85.5, 71.0], [85.6, 72.0], [85.7, 72.0], [85.8, 72.0], [85.9, 72.0], [86.0, 72.0], [86.1, 72.0], [86.2, 72.0], [86.3, 73.0], [86.4, 73.0], [86.5, 73.0], [86.6, 73.0], [86.7, 73.0], [86.8, 73.0], [86.9, 74.0], [87.0, 74.0], [87.1, 74.0], [87.2, 74.0], [87.3, 74.0], [87.4, 75.0], [87.5, 75.0], [87.6, 75.0], [87.7, 75.0], [87.8, 76.0], [87.9, 76.0], [88.0, 76.0], [88.1, 76.0], [88.2, 77.0], [88.3, 77.0], [88.4, 77.0], [88.5, 78.0], [88.6, 78.0], [88.7, 78.0], [88.8, 79.0], [88.9, 79.0], [89.0, 79.0], [89.1, 80.0], [89.2, 80.0], [89.3, 81.0], [89.4, 81.0], [89.5, 82.0], [89.6, 82.0], [89.7, 83.0], [89.8, 84.0], [89.9, 84.0], [90.0, 85.0], [90.1, 86.0], [90.2, 87.0], [90.3, 88.0], [90.4, 89.0], [90.5, 90.0], [90.6, 91.0], [90.7, 92.0], [90.8, 94.0], [90.9, 95.0], [91.0, 97.0], [91.1, 98.0], [91.2, 100.0], [91.3, 102.0], [91.4, 104.0], [91.5, 107.0], [91.6, 109.0], [91.7, 113.0], [91.8, 117.0], [91.9, 122.0], [92.0, 126.0], [92.1, 131.0], [92.2, 137.0], [92.3, 141.0], [92.4, 145.0], [92.5, 149.0], [92.6, 153.0], [92.7, 157.0], [92.8, 161.0], [92.9, 166.0], [93.0, 171.0], [93.1, 176.0], [93.2, 181.0], [93.3, 186.0], [93.4, 191.0], [93.5, 197.0], [93.6, 203.0], [93.7, 211.0], [93.8, 218.0], [93.9, 225.0], [94.0, 231.0], [94.1, 243.0], [94.2, 260.0], [94.3, 277.0], [94.4, 314.0], [94.5, 369.0], [94.6, 395.0], [94.7, 410.0], [94.8, 420.0], [94.9, 429.0], [95.0, 437.0], [95.1, 443.0], [95.2, 449.0], [95.3, 455.0], [95.4, 459.0], [95.5, 464.0], [95.6, 469.0], [95.7, 473.0], [95.8, 477.0], [95.9, 481.0], [96.0, 485.0], [96.1, 489.0], [96.2, 492.0], [96.3, 496.0], [96.4, 499.0], [96.5, 503.0], [96.6, 506.0], [96.7, 510.0], [96.8, 513.0], [96.9, 517.0], [97.0, 520.0], [97.1, 524.0], [97.2, 527.0], [97.3, 531.0], [97.4, 534.0], [97.5, 538.0], [97.6, 542.0], [97.7, 545.0], [97.8, 549.0], [97.9, 553.0], [98.0, 557.0], [98.1, 561.0], [98.2, 565.0], [98.3, 570.0], [98.4, 575.0], [98.5, 579.0], [98.6, 584.0], [98.7, 589.0], [98.8, 595.0], [98.9, 601.0], [99.0, 608.0], [99.1, 616.0], [99.2, 624.0], [99.3, 635.0], [99.4, 646.0], [99.5, 657.0], [99.6, 670.0], [99.7, 684.0], [99.8, 704.0], [99.9, 733.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1922502.0, "series": [{"data": [[0.0, 1922502.0], [600.0, 19187.0], [700.0, 4074.0], [200.0, 17404.0], [800.0, 499.0], [900.0, 2.0], [1000.0, 3.0], [1100.0, 1.0], [300.0, 5186.0], [1300.0, 1.0], [1400.0, 1.0], [100.0, 50377.0], [400.0, 37532.0], [500.0, 52137.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 75285.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2033621.0, "series": [{"data": [[0.0, 2033621.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 75285.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 562.6242019415936, "minX": 1.62607344E12, "maxY": 600.0, "series": [{"data": [[1.62607374E12, 563.1609687089615], [1.62607356E12, 600.0], [1.62607368E12, 600.0], [1.6260735E12, 600.0], [1.62607362E12, 600.0], [1.62607344E12, 562.6242019415936]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62607374E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 623.5, "series": [{"data": [[2.0, 1.75], [3.0, 1.5], [4.0, 1.3333333333333333], [5.0, 1.5], [6.0, 1.8181818181818181], [7.0, 1.4], [8.0, 2.5714285714285716], [9.0, 2.6666666666666665], [10.0, 2.25], [11.0, 1.875], [12.0, 2.0], [15.0, 8.875], [16.0, 9.5], [18.0, 10.0], [19.0, 10.0], [22.0, 9.666666666666666], [23.0, 4.833333333333333], [24.0, 2.076923076923077], [25.0, 2.1666666666666665], [26.0, 2.4125], [27.0, 4.888888888888889], [29.0, 8.5], [30.0, 9.666666666666666], [31.0, 11.187499999999998], [33.0, 4.897435897435901], [32.0, 4.2075471698113205], [35.0, 5.039538714991765], [34.0, 3.328571428571429], [37.0, 5.776435045317219], [36.0, 4.820224719101123], [39.0, 5.316872427983538], [38.0, 5.2884615384615365], [41.0, 12.157894736842106], [40.0, 6.05360824742268], [43.0, 5.372708757637478], [42.0, 6.488372093023253], [44.0, 6.808080808080813], [47.0, 43.0], [46.0, 17.0], [49.0, 47.0], [48.0, 17.0], [51.0, 64.75], [50.0, 33.333333333333336], [53.0, 42.0], [52.0, 63.0], [55.0, 42.0], [54.0, 59.50000000000001], [57.0, 152.0], [56.0, 115.0], [59.0, 153.0], [58.0, 152.0], [60.0, 153.0], [63.0, 128.33333333333334], [62.0, 154.0], [67.0, 152.75], [66.0, 152.0], [71.0, 4.7682926829268295], [70.0, 44.72727272727273], [69.0, 152.5], [75.0, 45.333333333333336], [74.0, 2.0], [73.0, 44.0], [72.0, 85.66666666666666], [79.0, 74.0], [77.0, 2.0], [76.0, 64.5], [83.0, 72.0], [82.0, 63.0], [81.0, 2.0], [80.0, 63.833333333333336], [86.0, 132.5], [85.0, 63.5], [84.0, 43.0], [89.0, 124.63636363636364], [88.0, 144.0], [94.0, 142.2], [93.0, 139.0], [92.0, 139.0], [99.0, 2.125], [98.0, 105.5], [97.0, 139.0], [103.0, 33.92857142857143], [102.0, 2.235294117647059], [100.0, 2.088235294117647], [106.0, 38.125], [105.0, 60.714285714285715], [111.0, 80.0], [110.0, 127.0], [114.0, 126.0], [112.0, 95.33333333333334], [119.0, 119.75], [118.0, 80.5], [117.0, 156.5], [116.0, 141.5], [123.0, 4.0], [122.0, 157.75], [127.0, 96.0], [125.0, 79.5], [124.0, 100.125], [134.0, 154.0], [133.0, 153.5], [132.0, 4.5], [131.0, 79.5], [130.0, 3.0], [129.0, 34.0], [128.0, 1.7], [143.0, 27.666666666666664], [142.0, 42.5], [141.0, 26.1], [139.0, 1.0], [137.0, 115.25], [136.0, 153.0], [151.0, 76.5], [150.0, 76.5], [149.0, 40.5], [148.0, 77.0], [147.0, 80.66666666666667], [145.0, 78.0], [159.0, 19.79115764979637], [158.0, 41.78260869565217], [157.0, 51.0], [156.0, 11.566037735849058], [155.0, 77.0], [153.0, 76.0], [152.0, 75.66666666666667], [167.0, 168.1818181818182], [166.0, 146.5], [165.0, 31.68292682926829], [164.0, 39.89719626168225], [163.0, 116.8], [162.0, 117.5], [161.0, 118.0], [160.0, 38.64596273291925], [175.0, 210.0], [174.0, 37.333333333333336], [173.0, 88.8888888888889], [172.0, 47.6], [171.0, 34.8953488372093], [170.0, 193.5], [169.0, 196.0], [177.0, 85.4413407821229], [181.0, 96.0909090909091], [183.0, 101.2], [180.0, 226.0], [179.0, 226.0], [178.0, 225.33333333333331], [190.0, 16.860215053763437], [184.0, 229.7777777777778], [189.0, 3.25], [188.0, 20.4909090909091], [186.0, 179.66666666666666], [191.0, 32.30000000000001], [187.0, 34.532710280373834], [185.0, 263.5], [192.0, 68.6], [193.0, 65.33333333333333], [194.0, 30.95774647887324], [195.0, 23.558189655172434], [198.0, 48.92682926829269], [197.0, 130.68965517241378], [196.0, 87.14285714285715], [199.0, 402.5], [200.0, 34.91794871794874], [207.0, 64.79411764705883], [206.0, 72.2439024390244], [205.0, 43.440000000000005], [204.0, 55.5], [202.0, 86.60000000000001], [203.0, 26.58823529411765], [201.0, 147.36363636363637], [208.0, 24.007761966364818], [209.0, 37.725519287833784], [210.0, 30.25842696629212], [211.0, 29.944134078212286], [215.0, 76.00000000000001], [214.0, 2.583333333333334], [213.0, 62.35000000000001], [212.0, 65.0], [223.0, 73.58823529411765], [222.0, 197.0], [219.0, 3.5], [217.0, 40.96774193548387], [221.0, 37.02127659574468], [220.0, 103.25], [218.0, 5.6], [216.0, 196.33333333333331], [227.0, 30.444444444444443], [228.0, 148.16666666666669], [229.0, 23.57341040462429], [226.0, 334.25], [231.0, 32.224137931034484], [230.0, 14.403846153846153], [225.0, 50.15384615384616], [224.0, 3.083333333333334], [234.0, 12.267399267399265], [232.0, 18.555555555555554], [233.0, 17.8625], [237.0, 34.723723723723715], [235.0, 19.111111111111107], [239.0, 18.86456692913387], [238.0, 22.449612403100744], [236.0, 2.0], [246.0, 28.38297872340425], [245.0, 277.51219512195115], [244.0, 133.36000000000004], [243.0, 40.770114942528735], [241.0, 25.375661375661384], [240.0, 23.208715596330304], [247.0, 29.869047619047617], [242.0, 90.66666666666667], [255.0, 52.68493150684932], [251.0, 25.42780748663102], [250.0, 32.247787610619476], [248.0, 24.934482758620693], [254.0, 31.27405247813412], [253.0, 29.036414565826313], [252.0, 23.856060606060606], [249.0, 182.2307692307692], [258.0, 110.53846153846153], [259.0, 37.655172413793146], [268.0, 18.440366972477065], [269.0, 21.802197802197803], [271.0, 45.31999999999999], [270.0, 175.4], [260.0, 42.61748633879786], [261.0, 25.122137404580144], [257.0, 44.85618729096994], [256.0, 40.605543710021294], [262.0, 23.24311926605505], [263.0, 55.74817813765178], [264.0, 57.27786885245899], [266.0, 20.241641337386024], [265.0, 16.823529411764707], [267.0, 119.96666666666667], [285.0, 77.12820512820512], [286.0, 45.74468085106384], [284.0, 16.378787878787875], [275.0, 35.1764705882353], [274.0, 20.11818181818182], [279.0, 59.66666666666666], [272.0, 34.51315789473684], [283.0, 25.381818181818183], [282.0, 44.82119205298012], [281.0, 30.118518518518528], [280.0, 20.571428571428573], [287.0, 15.0945945945946], [278.0, 35.93063583815028], [277.0, 42.583333333333336], [276.0, 74.02631578947367], [300.0, 7.8], [302.0, 4.0], [303.0, 54.32203389830511], [296.0, 156.88235294117646], [301.0, 84.79487179487178], [298.0, 22.638297872340424], [299.0, 17.27777777777778], [297.0, 66.94444444444444], [295.0, 28.190647482014374], [289.0, 64.52000000000001], [288.0, 36.93333333333333], [290.0, 45.11111111111111], [291.0, 32.540404040404034], [294.0, 50.03389830508475], [292.0, 18.6989247311828], [293.0, 18.0], [319.0, 44.26470588235295], [317.0, 70.62499999999999], [316.0, 15.760869565217389], [318.0, 198.15789473684208], [307.0, 104.52], [306.0, 60.25641025641026], [305.0, 15.4], [304.0, 12.38181818181818], [315.0, 3.0], [314.0, 63.34615384615383], [313.0, 85.49999999999999], [312.0, 33.5964912280702], [311.0, 19.611111111111114], [310.0, 20.75], [309.0, 26.333333333333336], [308.0, 97.5], [334.0, 46.97095837366899], [335.0, 24.32229185317817], [333.0, 50.63504706734249], [331.0, 49.01041666666668], [328.0, 17.0], [326.0, 40.911764705882355], [325.0, 64.55555555555557], [324.0, 28.918918918918905], [327.0, 17.818181818181813], [320.0, 23.393442622950815], [321.0, 107.33333333333333], [332.0, 31.5], [323.0, 67.00719424460426], [322.0, 122.63636363636363], [330.0, 48.460829493087566], [329.0, 20.789473684210524], [336.0, 43.7017543859649], [339.0, 22.54696132596685], [337.0, 51.806324110671945], [338.0, 69.80952380952381], [343.0, 33.08236403646657], [342.0, 93.4516129032258], [341.0, 60.894736842105246], [340.0, 49.51851851851854], [348.0, 41.254098360655725], [349.0, 11.904829545454554], [347.0, 44.14935064935067], [351.0, 22.759408602150536], [345.0, 48.71428571428571], [344.0, 38.4318181818182], [346.0, 49.499252615844526], [350.0, 62.18279569892473], [352.0, 33.92738589211619], [353.0, 42.03846153846153], [356.0, 39.95744680851064], [357.0, 55.016666666666666], [358.0, 27.165517241379316], [359.0, 20.8625], [355.0, 47.73809523809524], [365.0, 27.0], [364.0, 299.1428571428571], [367.0, 20.428571428571427], [366.0, 31.478260869565208], [354.0, 62.01], [361.0, 31.8303448275862], [363.0, 29.5], [362.0, 29.705882352941174], [360.0, 77.16964285714286], [382.0, 58.459016393442624], [383.0, 276.6], [380.0, 623.5], [371.0, 58.84374999999999], [370.0, 26.34736842105263], [369.0, 89.06666666666665], [368.0, 20.0], [379.0, 139.33333333333331], [378.0, 149.3], [377.0, 50.701886792452854], [376.0, 67.7358490566038], [375.0, 26.918918918918916], [374.0, 61.52272727272729], [373.0, 44.90972222222221], [372.0, 57.060301507537694], [398.0, 74.68367346938776], [399.0, 24.22222222222222], [397.0, 30.749999999999993], [396.0, 53.197007481296765], [395.0, 97.13333333333328], [394.0, 302.3], [393.0, 86.35466666666677], [392.0, 442.0], [391.0, 35.0], [385.0, 76.71428571428572], [384.0, 67.97452229299361], [387.0, 30.375], [386.0, 30.88235294117647], [390.0, 31.250000000000004], [389.0, 30.0], [388.0, 45.783783783783775], [414.0, 60.68148148148148], [415.0, 51.39716312056737], [413.0, 137.75], [412.0, 42.27551020408164], [411.0, 82.25000000000001], [410.0, 41.47777777777779], [409.0, 49.00786163522012], [408.0, 99.5185185185185], [407.0, 130.8125], [401.0, 50.0877192982456], [400.0, 28.499999999999996], [403.0, 41.5], [402.0, 90.61111111111111], [406.0, 83.83999999999999], [405.0, 516.0], [430.0, 26.956521739130437], [431.0, 48.25000000000001], [429.0, 35.54054054054055], [428.0, 49.62500000000001], [427.0, 25.781250000000004], [426.0, 24.79032258064516], [425.0, 41.44897959183672], [424.0, 37.85534591194968], [423.0, 27.442857142857147], [417.0, 66.0], [416.0, 46.180722891566276], [419.0, 121.5], [418.0, 44.888888888888886], [422.0, 28.4375], [421.0, 44.739999999999995], [420.0, 43.603686635944705], [444.0, 35.490384615384635], [434.0, 162.8032786885246], [435.0, 72.07142857142856], [436.0, 173.46473029045632], [437.0, 40.63888888888889], [438.0, 77.48969072164948], [439.0, 40.12848777127112], [433.0, 41.6153846153846], [432.0, 34.33333333333334], [442.0, 41.91666666666668], [443.0, 31.56521739130434], [445.0, 57.90384615384615], [446.0, 45.02173913043478], [447.0, 57.00000000000001], [441.0, 44.85000000000001], [440.0, 34.77777777777778], [451.0, 60.312499999999986], [448.0, 42.57837837837836], [449.0, 46.413793103448285], [450.0, 42.73873873873873], [452.0, 50.36363636363637], [454.0, 32.04761904761905], [453.0, 31.0], [455.0, 34.96551724137931], [463.0, 33.0], [456.0, 40.647058823529406], [459.0, 33.42857142857143], [458.0, 37.73684210526316], [462.0, 35.29411764705883], [461.0, 32.30769230769231], [460.0, 37.17241379310346], [478.0, 29.333333333333332], [479.0, 29.0], [477.0, 29.571428571428573], [476.0, 30.0], [475.0, 30.0], [473.0, 31.0], [472.0, 31.0], [470.0, 31.0], [467.0, 32.0], [465.0, 32.0], [469.0, 30.666666666666668], [468.0, 31.5], [495.0, 37.888888888888886], [489.0, 89.66666666666666], [492.0, 38.04545454545455], [483.0, 28.0], [482.0, 30.0], [481.0, 30.0], [480.0, 29.0], [494.0, 30.0], [493.0, 30.0], [491.0, 78.0], [490.0, 29.5], [488.0, 28.5], [487.0, 29.0], [486.0, 29.0], [485.0, 22.333333333333332], [484.0, 29.0], [508.0, 34.77777777777778], [510.0, 34.49999999999999], [511.0, 33.333333333333336], [509.0, 32.81818181818181], [507.0, 37.04347826086957], [506.0, 35.44444444444444], [503.0, 32.0], [497.0, 50.0], [496.0, 32.10526315789473], [499.0, 32.0], [498.0, 33.0], [501.0, 40.80952380952381], [500.0, 37.07142857142858], [536.0, 32.333333333333336], [540.0, 151.0], [512.0, 52.14285714285714], [515.0, 30.0], [513.0, 30.25], [517.0, 15.5], [516.0, 36.14285714285714], [519.0, 30.166666666666668], [518.0, 29.8], [527.0, 28.9], [526.0, 28.5], [525.0, 29.0], [524.0, 29.736842105263154], [523.0, 29.96], [521.0, 30.874999999999996], [520.0, 29.333333333333332], [541.0, 118.42857142857143], [542.0, 67.0], [543.0, 27.5], [529.0, 32.0], [528.0, 32.38461538461539], [531.0, 33.666666666666664], [530.0, 41.0], [535.0, 33.0], [534.0, 29.666666666666668], [539.0, 40.0], [538.0, 30.5], [537.0, 32.6], [549.0, 163.72727272727275], [545.0, 99.0], [544.0, 94.70491803278689], [558.0, 73.28915662650604], [559.0, 10.775956284153], [557.0, 73.81818181818181], [555.0, 115.83613445378151], [554.0, 82.84615384615385], [556.0, 215.57594936708864], [546.0, 141.6643356643357], [547.0, 162.0], [548.0, 202.74074074074076], [550.0, 187.83333333333337], [551.0, 248.60465116279067], [569.0, 127.81818181818181], [568.0, 193.40298507462688], [573.0, 76.0], [571.0, 124.55], [575.0, 94.71428571428572], [574.0, 3.75], [570.0, 93.24691358024691], [560.0, 74.49324324324321], [561.0, 30.05360443622921], [562.0, 36.83333333333333], [563.0, 27.647457627118648], [565.0, 121.0], [564.0, 114.42857142857143], [567.0, 159.0], [566.0, 135.3243243243243], [552.0, 53.667060212514706], [553.0, 110.11016949152543], [583.0, 49.918918918918905], [596.0, 66.08695652173917], [597.0, 69.36231884057972], [598.0, 135.07692307692307], [599.0, 62.10769230769232], [595.0, 53.91176470588234], [594.0, 76.1923076923077], [592.0, 127.81132075471699], [593.0, 110.1578947368421], [600.0, 86.37841663076277], [582.0, 3.0], [581.0, 33.5], [580.0, 59.0], [579.0, 83.0], [578.0, 203.4237288135593], [577.0, 190.35714285714283], [576.0, 98.0], [591.0, 51.75], [590.0, 61.416666666666664], [589.0, 56.1], [588.0, 60.93333333333333], [587.0, 72.45833333333333], [585.0, 74.89130434782606], [584.0, 79.6764705882353], [586.0, 122.31034482758616], [1.0, 2.0]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[591.5723071582736, 84.96674199798393]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 368199.5, "minX": 1.62607344E12, "maxY": 1819867.5, "series": [{"data": [[1.62607374E12, 597285.9], [1.62607356E12, 803426.3666666667], [1.62607368E12, 811839.0333333333], [1.6260735E12, 851458.2833333333], [1.62607362E12, 810698.9833333333], [1.62607344E12, 368199.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62607374E12, 1281575.1666666667], [1.62607356E12, 1717297.0], [1.62607368E12, 1741900.1833333333], [1.6260735E12, 1819867.5], [1.62607362E12, 1739478.5333333334], [1.62607344E12, 784807.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62607374E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 56.781834878432754, "minX": 1.62607344E12, "maxY": 90.0897909102273, "series": [{"data": [[1.62607374E12, 84.01681094007806], [1.62607356E12, 90.0897909102273], [1.62607368E12, 89.10027284284351], [1.6260735E12, 84.94108571090906], [1.62607362E12, 89.27292489726318], [1.62607344E12, 56.781834878432754]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62607374E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 56.77577838026927, "minX": 1.62607344E12, "maxY": 90.08947539751982, "series": [{"data": [[1.62607374E12, 84.01650442924877], [1.62607356E12, 90.08947539751982], [1.62607368E12, 89.09995068508043], [1.6260735E12, 84.9407879969258], [1.62607362E12, 89.27255762244089], [1.62607344E12, 56.77577838026927]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62607374E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.020699875349726386, "minX": 1.62607344E12, "maxY": 0.08543051425572921, "series": [{"data": [[1.62607374E12, 0.022462865034187905], [1.62607356E12, 0.023187679979967707], [1.62607368E12, 0.020699875349726386], [1.6260735E12, 0.023906905310414027], [1.62607362E12, 0.02126967898195329], [1.62607344E12, 0.08543051425572921]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62607374E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62607344E12, "maxY": 1406.0, "series": [{"data": [[1.62607374E12, 870.0], [1.62607356E12, 821.0], [1.62607368E12, 904.0], [1.6260735E12, 794.0], [1.62607362E12, 872.0], [1.62607344E12, 1406.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62607374E12, 29.0], [1.62607356E12, 105.0], [1.62607368E12, 72.0], [1.6260735E12, 79.0], [1.62607362E12, 71.0], [1.62607344E12, 117.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62607374E12, 453.0], [1.62607356E12, 672.0], [1.62607368E12, 609.9900000000016], [1.6260735E12, 680.0], [1.62607362E12, 586.9900000000016], [1.62607344E12, 522.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62607374E12, 259.0], [1.62607356E12, 470.0], [1.62607368E12, 458.0], [1.6260735E12, 460.0], [1.62607362E12, 438.0], [1.62607344E12, 216.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62607374E12, 1.0], [1.62607356E12, 1.0], [1.62607368E12, 1.0], [1.6260735E12, 1.0], [1.62607362E12, 1.0], [1.62607344E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62607374E12, 7.0], [1.62607356E12, 61.0], [1.62607368E12, 57.0], [1.6260735E12, 58.0], [1.62607362E12, 52.0], [1.62607344E12, 46.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62607374E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 1021.0, "maxY": 69.0, "series": [{"data": [[9425.0, 37.0], [10161.0, 39.0], [10133.0, 39.0], [11233.0, 36.0], [1021.0, 3.0], [2132.0, 17.0], [4792.0, 16.5], [5022.0, 69.0], [5204.0, 64.0], [5180.0, 63.0], [5572.0, 63.0], [5584.0, 61.0], [5730.0, 68.0], [5634.0, 63.0], [5682.0, 67.0], [5674.0, 57.0], [5834.0, 61.0], [6086.0, 61.0], [6034.0, 60.0], [6026.0, 57.0], [6096.0, 59.0], [6114.0, 60.0], [6044.0, 56.0], [5982.0, 57.0], [5964.0, 60.0], [5988.0, 58.0], [5992.0, 59.0], [5926.0, 57.0], [5920.0, 59.0], [6046.0, 68.0], [6060.0, 59.0], [6202.0, 65.0], [6364.0, 62.0], [6352.0, 62.0], [6324.0, 60.0], [6260.0, 59.0], [6262.0, 57.0], [6314.0, 54.0], [6330.0, 63.0], [6254.0, 66.0], [6250.0, 24.0], [6258.0, 58.0], [6156.0, 57.0], [6196.0, 59.0], [6486.0, 56.0], [6420.0, 58.0], [6470.0, 55.0], [6468.0, 62.0], [6484.0, 60.0], [6476.0, 57.0], [6496.0, 59.0], [6506.0, 62.0], [6508.0, 61.0], [6520.0, 59.0], [6412.0, 52.0], [6442.0, 60.0], [6434.0, 62.0], [6604.0, 61.0], [6616.0, 55.0], [6546.0, 56.0], [6624.0, 3.0], [6564.0, 61.0], [6576.0, 60.0], [6666.0, 55.0], [6674.0, 55.0], [6682.0, 57.0], [6688.0, 55.0], [6706.0, 53.0], [6740.0, 56.0], [6730.0, 50.0], [6758.0, 56.0], [6772.0, 56.0], [6860.0, 56.0], [6892.0, 56.0], [6878.0, 53.0], [6710.0, 54.0], [6718.0, 58.5], [6854.0, 54.0], [6834.0, 55.0], [6816.0, 58.0], [6806.0, 60.0], [6902.0, 59.0], [6802.0, 16.0], [6836.0, 59.0], [6840.0, 59.0], [7146.0, 53.0], [7080.0, 52.0], [7100.0, 56.0], [7096.0, 57.0], [6956.0, 54.0], [6972.0, 55.0], [7144.0, 56.0], [7110.0, 58.0], [7108.0, 57.0], [7150.0, 52.0], [7048.0, 57.0], [7078.0, 58.0], [7066.0, 55.0], [7022.0, 57.0], [6914.0, 58.0], [7032.0, 57.0], [6926.0, 56.0], [6928.0, 57.0], [6978.0, 58.0], [7018.0, 57.0], [7198.0, 55.0], [7172.0, 55.0], [7316.0, 51.0], [7232.0, 50.0], [7244.0, 53.0], [7294.0, 56.0], [7256.0, 56.0], [7278.0, 56.0], [7288.0, 55.0], [7176.0, 57.0], [7374.0, 54.0], [7228.0, 56.0], [7204.0, 57.0], [7378.0, 56.0], [7320.0, 55.0], [7334.0, 54.0], [7466.0, 55.0], [7670.0, 52.0], [7650.0, 6.0], [7640.0, 50.0], [7630.0, 54.0], [7494.0, 52.0], [7508.0, 54.0], [7514.0, 54.0], [7524.0, 53.0], [7588.0, 53.0], [7576.0, 53.0], [7424.0, 50.0], [7546.0, 54.0], [7548.0, 52.0], [7454.0, 54.0], [7806.0, 52.0], [7706.0, 52.0], [7716.0, 51.0], [7688.0, 52.0], [7736.0, 52.0], [7944.0, 51.0], [7958.0, 50.0], [9712.0, 39.0], [9824.0, 34.0], [10480.0, 36.0], [9051.0, 44.0], [9467.0, 42.0], [9827.0, 37.0], [9915.0, 37.0], [10951.0, 36.0], [5319.0, 60.0], [5343.0, 66.0], [5625.0, 58.0], [5421.0, 66.0], [5749.0, 13.0], [5697.0, 58.0], [5791.0, 60.0], [6069.0, 61.0], [6077.0, 57.0], [6081.0, 63.0], [5977.0, 68.0], [6063.0, 62.0], [5951.0, 62.0], [6039.0, 56.0], [6023.0, 59.0], [6155.0, 55.0], [6199.0, 59.0], [6237.0, 60.0], [6209.0, 64.0], [6241.0, 55.0], [6375.0, 59.0], [6389.0, 64.0], [6333.0, 58.0], [6189.0, 58.0], [6187.0, 57.0], [6163.0, 57.0], [6353.0, 55.0], [6153.0, 58.0], [6265.0, 61.0], [6251.0, 61.0], [6435.0, 62.0], [6471.0, 58.0], [6497.0, 61.0], [6501.0, 61.0], [6505.0, 57.0], [6517.0, 55.0], [6409.0, 62.0], [6405.0, 55.0], [6433.0, 61.0], [6457.0, 60.0], [6617.0, 56.0], [6621.0, 58.0], [6631.0, 55.0], [6635.0, 61.0], [6595.0, 59.0], [6647.0, 59.0], [6555.0, 60.0], [6543.0, 57.0], [6549.0, 62.0], [6573.0, 60.0], [6537.0, 59.0], [6653.0, 56.0], [6859.0, 54.0], [6693.0, 56.0], [6707.0, 58.0], [6699.0, 60.0], [6695.0, 61.0], [6777.0, 57.0], [6661.0, 60.0], [6687.0, 60.0], [6665.0, 56.0], [6809.0, 59.0], [6905.0, 59.0], [6795.0, 32.0], [6769.0, 60.0], [6737.0, 60.0], [6823.0, 59.0], [6821.0, 58.0], [7117.0, 56.0], [7105.0, 57.0], [6939.0, 53.0], [6945.0, 52.0], [7109.0, 56.0], [7099.0, 56.0], [7081.0, 57.0], [6951.0, 53.0], [6959.0, 57.0], [7131.0, 55.0], [7123.0, 57.0], [7139.0, 57.0], [7143.0, 54.0], [7059.0, 53.0], [7049.0, 57.0], [7047.0, 56.0], [7079.0, 57.0], [7073.0, 58.0], [7071.0, 58.0], [6999.0, 54.0], [7003.0, 54.0], [7019.0, 57.0], [7007.0, 58.0], [7029.0, 58.0], [7033.0, 56.0], [6921.0, 58.0], [6919.0, 58.0], [6987.0, 53.0], [6983.0, 58.0], [6995.0, 59.0], [7209.0, 56.0], [7219.0, 55.0], [7225.0, 55.0], [7231.0, 56.0], [7221.0, 56.0], [7187.0, 56.0], [7197.0, 52.0], [7297.0, 52.0], [7315.0, 55.0], [7303.0, 56.0], [7311.0, 56.0], [7249.0, 55.0], [7285.0, 53.0], [7275.0, 56.0], [7259.0, 55.0], [7295.0, 55.0], [7329.0, 52.0], [7339.0, 53.0], [7429.0, 47.0], [7483.0, 26.0], [7569.0, 50.0], [7605.0, 54.0], [7493.0, 54.0], [7489.0, 52.0], [7535.0, 53.0], [7461.0, 53.0], [7479.0, 53.0], [7541.0, 53.0], [7441.0, 55.0], [7435.0, 50.0], [7681.0, 52.0], [7719.0, 53.0], [7723.0, 53.0], [7815.0, 52.0], [7813.0, 51.0], [9662.0, 42.0], [11010.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11233.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 1021.0, "maxY": 69.0, "series": [{"data": [[9425.0, 37.0], [10161.0, 39.0], [10133.0, 39.0], [11233.0, 36.0], [1021.0, 3.0], [2132.0, 17.0], [4792.0, 16.5], [5022.0, 69.0], [5204.0, 64.0], [5180.0, 63.0], [5572.0, 63.0], [5584.0, 61.0], [5730.0, 68.0], [5634.0, 63.0], [5682.0, 67.0], [5674.0, 57.0], [5834.0, 61.0], [6086.0, 61.0], [6034.0, 60.0], [6026.0, 57.0], [6096.0, 59.0], [6114.0, 60.0], [6044.0, 56.0], [5982.0, 57.0], [5964.0, 60.0], [5988.0, 58.0], [5992.0, 59.0], [5926.0, 57.0], [5920.0, 59.0], [6046.0, 68.0], [6060.0, 59.0], [6202.0, 65.0], [6364.0, 62.0], [6352.0, 62.0], [6324.0, 60.0], [6260.0, 59.0], [6262.0, 57.0], [6314.0, 54.0], [6330.0, 63.0], [6254.0, 66.0], [6250.0, 24.0], [6258.0, 58.0], [6156.0, 57.0], [6196.0, 59.0], [6486.0, 56.0], [6420.0, 58.0], [6470.0, 55.0], [6468.0, 62.0], [6484.0, 60.0], [6476.0, 57.0], [6496.0, 59.0], [6506.0, 62.0], [6508.0, 61.0], [6520.0, 59.0], [6412.0, 52.0], [6442.0, 60.0], [6434.0, 62.0], [6604.0, 61.0], [6616.0, 55.0], [6546.0, 56.0], [6624.0, 3.0], [6564.0, 61.0], [6576.0, 60.0], [6666.0, 55.0], [6674.0, 55.0], [6682.0, 57.0], [6688.0, 55.0], [6706.0, 53.0], [6740.0, 56.0], [6730.0, 50.0], [6758.0, 56.0], [6772.0, 56.0], [6860.0, 56.0], [6892.0, 56.0], [6878.0, 53.0], [6710.0, 54.0], [6718.0, 58.0], [6854.0, 54.0], [6834.0, 55.0], [6816.0, 58.0], [6806.0, 60.0], [6902.0, 59.0], [6802.0, 16.0], [6836.0, 59.0], [6840.0, 59.0], [7146.0, 53.0], [7080.0, 52.0], [7100.0, 56.0], [7096.0, 57.0], [6956.0, 54.0], [6972.0, 55.0], [7144.0, 56.0], [7110.0, 58.0], [7108.0, 57.0], [7150.0, 52.0], [7048.0, 57.0], [7078.0, 58.0], [7066.0, 55.0], [7022.0, 57.0], [6914.0, 58.0], [7032.0, 57.0], [6926.0, 56.0], [6928.0, 57.0], [6978.0, 58.0], [7018.0, 57.0], [7198.0, 55.0], [7172.0, 55.0], [7316.0, 51.0], [7232.0, 50.0], [7244.0, 53.0], [7294.0, 56.0], [7256.0, 56.0], [7278.0, 56.0], [7288.0, 55.0], [7176.0, 57.0], [7374.0, 54.0], [7228.0, 56.0], [7204.0, 57.0], [7378.0, 56.0], [7320.0, 55.0], [7334.0, 54.0], [7466.0, 55.0], [7670.0, 52.0], [7650.0, 6.0], [7640.0, 50.0], [7630.0, 54.0], [7494.0, 52.0], [7508.0, 54.0], [7514.0, 54.0], [7524.0, 53.0], [7588.0, 53.0], [7576.0, 53.0], [7424.0, 50.0], [7546.0, 54.0], [7548.0, 52.0], [7454.0, 54.0], [7806.0, 52.0], [7706.0, 52.0], [7716.0, 51.0], [7688.0, 52.0], [7736.0, 52.0], [7944.0, 51.0], [7958.0, 50.0], [9712.0, 39.0], [9824.0, 34.0], [10480.0, 36.0], [9051.0, 44.0], [9467.0, 42.0], [9827.0, 37.0], [9915.0, 37.0], [10951.0, 36.0], [5319.0, 60.0], [5343.0, 66.0], [5625.0, 58.0], [5421.0, 66.0], [5749.0, 13.0], [5697.0, 58.0], [5791.0, 60.0], [6069.0, 61.0], [6077.0, 57.0], [6081.0, 63.0], [5977.0, 68.0], [6063.0, 62.0], [5951.0, 62.0], [6039.0, 56.0], [6023.0, 59.0], [6155.0, 55.0], [6199.0, 59.0], [6237.0, 60.0], [6209.0, 64.0], [6241.0, 55.0], [6375.0, 59.0], [6389.0, 64.0], [6333.0, 58.0], [6189.0, 58.0], [6187.0, 57.0], [6163.0, 57.0], [6353.0, 55.0], [6153.0, 58.0], [6265.0, 61.0], [6251.0, 61.0], [6435.0, 62.0], [6471.0, 58.0], [6497.0, 61.0], [6501.0, 61.0], [6505.0, 57.0], [6517.0, 55.0], [6409.0, 62.0], [6405.0, 55.0], [6433.0, 61.0], [6457.0, 60.0], [6617.0, 56.0], [6621.0, 58.0], [6631.0, 55.0], [6635.0, 61.0], [6595.0, 59.0], [6647.0, 59.0], [6555.0, 60.0], [6543.0, 57.0], [6549.0, 62.0], [6573.0, 60.0], [6537.0, 59.0], [6653.0, 56.0], [6859.0, 54.0], [6693.0, 56.0], [6707.0, 58.0], [6699.0, 60.0], [6695.0, 61.0], [6777.0, 57.0], [6661.0, 60.0], [6687.0, 60.0], [6665.0, 56.0], [6809.0, 59.0], [6905.0, 59.0], [6795.0, 32.0], [6769.0, 60.0], [6737.0, 60.0], [6823.0, 59.0], [6821.0, 58.0], [7117.0, 56.0], [7105.0, 57.0], [6939.0, 53.0], [6945.0, 52.0], [7109.0, 56.0], [7099.0, 56.0], [7081.0, 57.0], [6951.0, 53.0], [6959.0, 57.0], [7131.0, 55.0], [7123.0, 57.0], [7139.0, 57.0], [7143.0, 54.0], [7059.0, 53.0], [7049.0, 57.0], [7047.0, 56.0], [7079.0, 57.0], [7073.0, 58.0], [7071.0, 58.0], [6999.0, 54.0], [7003.0, 54.0], [7019.0, 57.0], [7007.0, 58.0], [7029.0, 58.0], [7033.0, 56.0], [6921.0, 58.0], [6919.0, 58.0], [6987.0, 53.0], [6983.0, 58.0], [6995.0, 59.0], [7209.0, 56.0], [7219.0, 55.0], [7225.0, 55.0], [7231.0, 56.0], [7221.0, 56.0], [7187.0, 56.0], [7197.0, 52.0], [7297.0, 52.0], [7315.0, 55.0], [7303.0, 56.0], [7311.0, 56.0], [7249.0, 55.0], [7285.0, 53.0], [7275.0, 56.0], [7259.0, 55.0], [7295.0, 55.0], [7329.0, 52.0], [7339.0, 53.0], [7429.0, 47.0], [7483.0, 26.0], [7569.0, 50.0], [7605.0, 54.0], [7493.0, 54.0], [7489.0, 52.0], [7535.0, 53.0], [7461.0, 53.0], [7479.0, 53.0], [7541.0, 53.0], [7441.0, 55.0], [7435.0, 50.0], [7681.0, 52.0], [7719.0, 53.0], [7723.0, 53.0], [7815.0, 52.0], [7813.0, 51.0], [9662.0, 42.0], [11010.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11233.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3059.0666666666666, "minX": 1.62607344E12, "maxY": 7053.75, "series": [{"data": [[1.62607374E12, 4938.166666666667], [1.62607356E12, 6655.816666666667], [1.62607368E12, 6725.5], [1.6260735E12, 7053.75], [1.62607362E12, 6716.133333333333], [1.62607344E12, 3059.0666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62607374E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3049.0666666666666, "minX": 1.62607344E12, "maxY": 7053.75, "series": [{"data": [[1.62607374E12, 4948.166666666667], [1.62607356E12, 6655.833333333333], [1.62607368E12, 6725.483333333334], [1.6260735E12, 7053.75], [1.62607362E12, 6716.133333333333], [1.62607344E12, 3049.0666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62607374E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3049.0666666666666, "minX": 1.62607344E12, "maxY": 7053.75, "series": [{"data": [[1.62607374E12, 4948.166666666667], [1.62607356E12, 6655.833333333333], [1.62607368E12, 6725.483333333334], [1.6260735E12, 7053.75], [1.62607362E12, 6716.133333333333], [1.62607344E12, 3049.0666666666666]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62607374E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3049.0666666666666, "minX": 1.62607344E12, "maxY": 7053.75, "series": [{"data": [[1.62607374E12, 4948.166666666667], [1.62607356E12, 6655.833333333333], [1.62607368E12, 6725.483333333334], [1.6260735E12, 7053.75], [1.62607362E12, 6716.133333333333], [1.62607344E12, 3049.0666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62607374E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

