/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1450.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 5.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 5.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 8.0], [26.0, 8.0], [26.1, 8.0], [26.2, 8.0], [26.3, 8.0], [26.4, 8.0], [26.5, 8.0], [26.6, 8.0], [26.7, 8.0], [26.8, 8.0], [26.9, 8.0], [27.0, 8.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 8.0], [29.7, 8.0], [29.8, 8.0], [29.9, 8.0], [30.0, 8.0], [30.1, 8.0], [30.2, 8.0], [30.3, 8.0], [30.4, 8.0], [30.5, 8.0], [30.6, 8.0], [30.7, 8.0], [30.8, 8.0], [30.9, 8.0], [31.0, 8.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 9.0], [33.0, 9.0], [33.1, 9.0], [33.2, 9.0], [33.3, 9.0], [33.4, 9.0], [33.5, 9.0], [33.6, 9.0], [33.7, 9.0], [33.8, 9.0], [33.9, 9.0], [34.0, 9.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 9.0], [35.0, 9.0], [35.1, 9.0], [35.2, 9.0], [35.3, 9.0], [35.4, 9.0], [35.5, 9.0], [35.6, 9.0], [35.7, 9.0], [35.8, 9.0], [35.9, 9.0], [36.0, 9.0], [36.1, 9.0], [36.2, 9.0], [36.3, 9.0], [36.4, 9.0], [36.5, 9.0], [36.6, 9.0], [36.7, 9.0], [36.8, 9.0], [36.9, 9.0], [37.0, 9.0], [37.1, 9.0], [37.2, 9.0], [37.3, 9.0], [37.4, 9.0], [37.5, 9.0], [37.6, 9.0], [37.7, 9.0], [37.8, 9.0], [37.9, 9.0], [38.0, 9.0], [38.1, 9.0], [38.2, 9.0], [38.3, 9.0], [38.4, 9.0], [38.5, 9.0], [38.6, 9.0], [38.7, 9.0], [38.8, 9.0], [38.9, 9.0], [39.0, 9.0], [39.1, 9.0], [39.2, 9.0], [39.3, 9.0], [39.4, 9.0], [39.5, 9.0], [39.6, 9.0], [39.7, 9.0], [39.8, 9.0], [39.9, 9.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 11.0], [46.9, 11.0], [47.0, 11.0], [47.1, 11.0], [47.2, 11.0], [47.3, 11.0], [47.4, 11.0], [47.5, 11.0], [47.6, 11.0], [47.7, 11.0], [47.8, 11.0], [47.9, 11.0], [48.0, 11.0], [48.1, 11.0], [48.2, 11.0], [48.3, 11.0], [48.4, 11.0], [48.5, 11.0], [48.6, 11.0], [48.7, 11.0], [48.8, 11.0], [48.9, 11.0], [49.0, 11.0], [49.1, 11.0], [49.2, 11.0], [49.3, 11.0], [49.4, 11.0], [49.5, 11.0], [49.6, 11.0], [49.7, 11.0], [49.8, 11.0], [49.9, 11.0], [50.0, 11.0], [50.1, 11.0], [50.2, 11.0], [50.3, 11.0], [50.4, 11.0], [50.5, 11.0], [50.6, 11.0], [50.7, 11.0], [50.8, 11.0], [50.9, 11.0], [51.0, 11.0], [51.1, 11.0], [51.2, 11.0], [51.3, 11.0], [51.4, 11.0], [51.5, 11.0], [51.6, 11.0], [51.7, 11.0], [51.8, 11.0], [51.9, 11.0], [52.0, 11.0], [52.1, 11.0], [52.2, 11.0], [52.3, 11.0], [52.4, 11.0], [52.5, 11.0], [52.6, 11.0], [52.7, 11.0], [52.8, 11.0], [52.9, 11.0], [53.0, 11.0], [53.1, 11.0], [53.2, 11.0], [53.3, 11.0], [53.4, 12.0], [53.5, 12.0], [53.6, 12.0], [53.7, 12.0], [53.8, 12.0], [53.9, 12.0], [54.0, 12.0], [54.1, 12.0], [54.2, 12.0], [54.3, 12.0], [54.4, 12.0], [54.5, 12.0], [54.6, 12.0], [54.7, 12.0], [54.8, 12.0], [54.9, 12.0], [55.0, 12.0], [55.1, 12.0], [55.2, 12.0], [55.3, 12.0], [55.4, 12.0], [55.5, 12.0], [55.6, 12.0], [55.7, 12.0], [55.8, 12.0], [55.9, 12.0], [56.0, 12.0], [56.1, 12.0], [56.2, 12.0], [56.3, 12.0], [56.4, 12.0], [56.5, 12.0], [56.6, 12.0], [56.7, 12.0], [56.8, 12.0], [56.9, 12.0], [57.0, 12.0], [57.1, 12.0], [57.2, 12.0], [57.3, 12.0], [57.4, 12.0], [57.5, 12.0], [57.6, 12.0], [57.7, 12.0], [57.8, 12.0], [57.9, 12.0], [58.0, 12.0], [58.1, 12.0], [58.2, 12.0], [58.3, 12.0], [58.4, 12.0], [58.5, 12.0], [58.6, 12.0], [58.7, 12.0], [58.8, 12.0], [58.9, 12.0], [59.0, 12.0], [59.1, 12.0], [59.2, 12.0], [59.3, 13.0], [59.4, 13.0], [59.5, 13.0], [59.6, 13.0], [59.7, 13.0], [59.8, 13.0], [59.9, 13.0], [60.0, 13.0], [60.1, 13.0], [60.2, 13.0], [60.3, 13.0], [60.4, 13.0], [60.5, 13.0], [60.6, 13.0], [60.7, 13.0], [60.8, 13.0], [60.9, 13.0], [61.0, 13.0], [61.1, 13.0], [61.2, 13.0], [61.3, 13.0], [61.4, 13.0], [61.5, 13.0], [61.6, 13.0], [61.7, 13.0], [61.8, 13.0], [61.9, 13.0], [62.0, 13.0], [62.1, 13.0], [62.2, 13.0], [62.3, 13.0], [62.4, 13.0], [62.5, 13.0], [62.6, 13.0], [62.7, 13.0], [62.8, 13.0], [62.9, 13.0], [63.0, 13.0], [63.1, 13.0], [63.2, 13.0], [63.3, 13.0], [63.4, 13.0], [63.5, 13.0], [63.6, 13.0], [63.7, 13.0], [63.8, 13.0], [63.9, 13.0], [64.0, 13.0], [64.1, 13.0], [64.2, 13.0], [64.3, 13.0], [64.4, 13.0], [64.5, 13.0], [64.6, 14.0], [64.7, 14.0], [64.8, 14.0], [64.9, 14.0], [65.0, 14.0], [65.1, 14.0], [65.2, 14.0], [65.3, 14.0], [65.4, 14.0], [65.5, 14.0], [65.6, 14.0], [65.7, 14.0], [65.8, 14.0], [65.9, 14.0], [66.0, 14.0], [66.1, 14.0], [66.2, 14.0], [66.3, 14.0], [66.4, 14.0], [66.5, 14.0], [66.6, 14.0], [66.7, 14.0], [66.8, 14.0], [66.9, 14.0], [67.0, 14.0], [67.1, 14.0], [67.2, 14.0], [67.3, 14.0], [67.4, 14.0], [67.5, 14.0], [67.6, 14.0], [67.7, 14.0], [67.8, 14.0], [67.9, 14.0], [68.0, 14.0], [68.1, 14.0], [68.2, 14.0], [68.3, 14.0], [68.4, 14.0], [68.5, 14.0], [68.6, 14.0], [68.7, 14.0], [68.8, 14.0], [68.9, 14.0], [69.0, 14.0], [69.1, 15.0], [69.2, 15.0], [69.3, 15.0], [69.4, 15.0], [69.5, 15.0], [69.6, 15.0], [69.7, 15.0], [69.8, 15.0], [69.9, 15.0], [70.0, 15.0], [70.1, 15.0], [70.2, 15.0], [70.3, 15.0], [70.4, 15.0], [70.5, 15.0], [70.6, 15.0], [70.7, 15.0], [70.8, 15.0], [70.9, 15.0], [71.0, 15.0], [71.1, 15.0], [71.2, 15.0], [71.3, 15.0], [71.4, 15.0], [71.5, 15.0], [71.6, 15.0], [71.7, 15.0], [71.8, 15.0], [71.9, 15.0], [72.0, 15.0], [72.1, 15.0], [72.2, 15.0], [72.3, 15.0], [72.4, 15.0], [72.5, 15.0], [72.6, 15.0], [72.7, 15.0], [72.8, 15.0], [72.9, 15.0], [73.0, 16.0], [73.1, 16.0], [73.2, 16.0], [73.3, 16.0], [73.4, 16.0], [73.5, 16.0], [73.6, 16.0], [73.7, 16.0], [73.8, 16.0], [73.9, 16.0], [74.0, 16.0], [74.1, 16.0], [74.2, 16.0], [74.3, 16.0], [74.4, 16.0], [74.5, 16.0], [74.6, 16.0], [74.7, 16.0], [74.8, 16.0], [74.9, 16.0], [75.0, 16.0], [75.1, 16.0], [75.2, 16.0], [75.3, 16.0], [75.4, 16.0], [75.5, 16.0], [75.6, 16.0], [75.7, 16.0], [75.8, 16.0], [75.9, 16.0], [76.0, 16.0], [76.1, 17.0], [76.2, 17.0], [76.3, 17.0], [76.4, 17.0], [76.5, 17.0], [76.6, 17.0], [76.7, 17.0], [76.8, 17.0], [76.9, 17.0], [77.0, 17.0], [77.1, 17.0], [77.2, 17.0], [77.3, 17.0], [77.4, 17.0], [77.5, 17.0], [77.6, 17.0], [77.7, 17.0], [77.8, 17.0], [77.9, 17.0], [78.0, 17.0], [78.1, 17.0], [78.2, 17.0], [78.3, 17.0], [78.4, 17.0], [78.5, 17.0], [78.6, 17.0], [78.7, 18.0], [78.8, 18.0], [78.9, 18.0], [79.0, 18.0], [79.1, 18.0], [79.2, 18.0], [79.3, 18.0], [79.4, 18.0], [79.5, 18.0], [79.6, 18.0], [79.7, 18.0], [79.8, 18.0], [79.9, 18.0], [80.0, 18.0], [80.1, 18.0], [80.2, 18.0], [80.3, 18.0], [80.4, 18.0], [80.5, 18.0], [80.6, 18.0], [80.7, 19.0], [80.8, 19.0], [80.9, 19.0], [81.0, 19.0], [81.1, 19.0], [81.2, 19.0], [81.3, 19.0], [81.4, 19.0], [81.5, 19.0], [81.6, 19.0], [81.7, 19.0], [81.8, 19.0], [81.9, 19.0], [82.0, 19.0], [82.1, 19.0], [82.2, 19.0], [82.3, 19.0], [82.4, 20.0], [82.5, 20.0], [82.6, 20.0], [82.7, 20.0], [82.8, 20.0], [82.9, 20.0], [83.0, 20.0], [83.1, 20.0], [83.2, 20.0], [83.3, 20.0], [83.4, 20.0], [83.5, 20.0], [83.6, 20.0], [83.7, 20.0], [83.8, 21.0], [83.9, 21.0], [84.0, 21.0], [84.1, 21.0], [84.2, 21.0], [84.3, 21.0], [84.4, 21.0], [84.5, 21.0], [84.6, 21.0], [84.7, 21.0], [84.8, 21.0], [84.9, 22.0], [85.0, 22.0], [85.1, 22.0], [85.2, 22.0], [85.3, 22.0], [85.4, 22.0], [85.5, 22.0], [85.6, 22.0], [85.7, 22.0], [85.8, 22.0], [85.9, 23.0], [86.0, 23.0], [86.1, 23.0], [86.2, 23.0], [86.3, 23.0], [86.4, 23.0], [86.5, 23.0], [86.6, 23.0], [86.7, 24.0], [86.8, 24.0], [86.9, 24.0], [87.0, 24.0], [87.1, 24.0], [87.2, 24.0], [87.3, 24.0], [87.4, 25.0], [87.5, 25.0], [87.6, 25.0], [87.7, 25.0], [87.8, 25.0], [87.9, 25.0], [88.0, 26.0], [88.1, 26.0], [88.2, 26.0], [88.3, 26.0], [88.4, 26.0], [88.5, 26.0], [88.6, 27.0], [88.7, 27.0], [88.8, 27.0], [88.9, 27.0], [89.0, 28.0], [89.1, 28.0], [89.2, 28.0], [89.3, 28.0], [89.4, 28.0], [89.5, 29.0], [89.6, 29.0], [89.7, 29.0], [89.8, 29.0], [89.9, 30.0], [90.0, 30.0], [90.1, 30.0], [90.2, 31.0], [90.3, 31.0], [90.4, 31.0], [90.5, 32.0], [90.6, 32.0], [90.7, 32.0], [90.8, 33.0], [90.9, 33.0], [91.0, 33.0], [91.1, 34.0], [91.2, 34.0], [91.3, 34.0], [91.4, 35.0], [91.5, 35.0], [91.6, 36.0], [91.7, 36.0], [91.8, 37.0], [91.9, 37.0], [92.0, 37.0], [92.1, 38.0], [92.2, 38.0], [92.3, 39.0], [92.4, 39.0], [92.5, 40.0], [92.6, 41.0], [92.7, 41.0], [92.8, 42.0], [92.9, 43.0], [93.0, 43.0], [93.1, 44.0], [93.2, 45.0], [93.3, 45.0], [93.4, 46.0], [93.5, 47.0], [93.6, 48.0], [93.7, 49.0], [93.8, 50.0], [93.9, 51.0], [94.0, 52.0], [94.1, 53.0], [94.2, 55.0], [94.3, 56.0], [94.4, 57.0], [94.5, 59.0], [94.6, 61.0], [94.7, 63.0], [94.8, 65.0], [94.9, 68.0], [95.0, 70.0], [95.1, 74.0], [95.2, 77.0], [95.3, 82.0], [95.4, 87.0], [95.5, 93.0], [95.6, 101.0], [95.7, 109.0], [95.8, 117.0], [95.9, 127.0], [96.0, 138.0], [96.1, 150.0], [96.2, 163.0], [96.3, 176.0], [96.4, 191.0], [96.5, 208.0], [96.6, 223.0], [96.7, 243.0], [96.8, 261.0], [96.9, 280.0], [97.0, 298.0], [97.1, 315.0], [97.2, 332.0], [97.3, 349.0], [97.4, 365.0], [97.5, 379.0], [97.6, 392.0], [97.7, 406.0], [97.8, 421.0], [97.9, 434.0], [98.0, 447.0], [98.1, 459.0], [98.2, 472.0], [98.3, 484.0], [98.4, 497.0], [98.5, 510.0], [98.6, 523.0], [98.7, 534.0], [98.8, 547.0], [98.9, 559.0], [99.0, 571.0], [99.1, 583.0], [99.2, 596.0], [99.3, 610.0], [99.4, 626.0], [99.5, 645.0], [99.6, 669.0], [99.7, 699.0], [99.8, 740.0], [99.9, 816.0], [100.0, 1450.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 5269395.0, "series": [{"data": [[0.0, 5269395.0], [600.0, 26075.0], [700.0, 9997.0], [200.0, 30550.0], [800.0, 4201.0], [900.0, 1718.0], [1000.0, 368.0], [1100.0, 55.0], [300.0, 35567.0], [1200.0, 45.0], [1300.0, 48.0], [1400.0, 28.0], [100.0, 48161.0], [400.0, 42284.0], [500.0, 44573.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 86679.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5426386.0, "series": [{"data": [[0.0, 5426386.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 86679.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 287.97235185044707, "minX": 1.62634266E12, "maxY": 300.0, "series": [{"data": [[1.62634284E12, 300.0], [1.62634266E12, 299.6918886023079], [1.62634296E12, 287.97235185044707], [1.62634278E12, 300.0], [1.6263429E12, 300.0], [1.62634272E12, 300.0]], "isOverall": false, "label": "role1", "isController": false}, {"data": [[1.62634284E12, 300.0], [1.62634266E12, 299.81197834717267], [1.62634296E12, 293.84636486696735], [1.62634278E12, 300.0], [1.6263429E12, 300.0], [1.62634272E12, 300.0]], "isOverall": false, "label": "role2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62634296E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 761.5, "series": [{"data": [[2.0, 3.0], [3.0, 3.0], [5.0, 2.0], [7.0, 3.0], [8.0, 6.0], [9.0, 3.5], [10.0, 7.857142857142856], [12.0, 2.0], [13.0, 1.6666666666666667], [14.0, 2.0], [15.0, 7.0], [18.0, 2.0], [19.0, 47.0], [20.0, 22.0], [21.0, 2.0], [22.0, 41.0], [23.0, 13.900000000000002], [26.0, 21.5], [28.0, 4.0], [29.0, 3.0], [30.0, 4.0], [31.0, 40.333333333333336], [33.0, 28.5], [32.0, 22.25], [34.0, 11.6], [37.0, 23.5], [36.0, 4.0], [38.0, 34.5], [40.0, 25.666666666666664], [43.0, 1.3333333333333333], [42.0, 54.5], [45.0, 31.11111111111111], [44.0, 11.0], [47.0, 34.5], [46.0, 3.6], [48.0, 5.0], [50.0, 3.0], [55.0, 43.0], [56.0, 35.0], [58.0, 46.333333333333336], [61.0, 42.0], [60.0, 36.77777777777777], [63.0, 3.0], [62.0, 38.0], [67.0, 18.5], [65.0, 47.75], [64.0, 64.0], [68.0, 63.0], [75.0, 15.624999999999998], [74.0, 1.0], [73.0, 1.6], [72.0, 20.269230769230766], [79.0, 1.846153846153846], [78.0, 1.5384615384615385], [77.0, 1.4285714285714286], [76.0, 2.0], [83.0, 1.8125], [82.0, 2.3076923076923075], [81.0, 1.6249999999999998], [80.0, 2.3333333333333335], [87.0, 2.2000000000000006], [86.0, 1.6666666666666665], [85.0, 2.5], [84.0, 1.6842105263157892], [91.0, 1.3333333333333333], [90.0, 8.781250000000002], [89.0, 1.0], [95.0, 38.166666666666664], [94.0, 33.083333333333336], [93.0, 40.0], [99.0, 4.405660377358492], [98.0, 6.92125984251969], [97.0, 10.115044247787614], [96.0, 38.333333333333336], [103.0, 8.53684210526316], [102.0, 20.776119402985074], [101.0, 18.613079019073574], [100.0, 10.711409395973154], [107.0, 8.413333333333334], [106.0, 6.816666666666666], [105.0, 7.290909090909093], [104.0, 8.803030303030303], [111.0, 45.142857142857146], [110.0, 12.779516358463745], [109.0, 10.279393173198462], [108.0, 17.727777777777774], [115.0, 2.0], [114.0, 12.833333333333332], [113.0, 50.29166666666667], [112.0, 9.421787709497211], [119.0, 2.0], [118.0, 2.0], [117.0, 110.5], [116.0, 218.0], [123.0, 103.57142857142857], [122.0, 62.23076923076923], [121.0, 50.5], [120.0, 50.785714285714285], [127.0, 150.375], [126.0, 21.285714285714285], [124.0, 139.0], [135.0, 2.5], [134.0, 18.761904761904766], [133.0, 9.80701754385965], [132.0, 303.25000000000006], [131.0, 234.0], [129.0, 248.8], [128.0, 209.4], [143.0, 3.0], [142.0, 4.217391304347827], [141.0, 14.0], [136.0, 152.25], [151.0, 174.66666666666666], [150.0, 4.333333333333333], [147.0, 3.0], [144.0, 8.0], [159.0, 413.0], [158.0, 8.0], [156.0, 70.18181818181819], [155.0, 68.83333333333333], [154.0, 6.769230769230769], [153.0, 12.0], [152.0, 4.75], [167.0, 442.5], [166.0, 7.0], [165.0, 299.66666666666663], [163.0, 296.75], [161.0, 408.0], [160.0, 7.0], [170.0, 123.32558139534886], [174.0, 8.34782608695652], [175.0, 118.33333333333333], [172.0, 342.3333333333333], [173.0, 455.75], [168.0, 476.0], [176.0, 253.7], [177.0, 90.33333333333334], [178.0, 86.85714285714286], [179.0, 126.2], [180.0, 213.5], [181.0, 6.846153846153846], [182.0, 318.44444444444446], [183.0, 161.57142857142856], [186.0, 527.5714285714286], [187.0, 24.5], [188.0, 373.8], [189.0, 410.0], [190.0, 309.4666666666667], [184.0, 10.733333333333334], [191.0, 5.681818181818182], [185.0, 597.0], [192.0, 101.92857142857142], [193.0, 126.41666666666667], [194.0, 9.772727272727273], [195.0, 533.75], [196.0, 71.0], [197.0, 112.57142857142857], [198.0, 7.5], [199.0, 761.5], [200.0, 456.2], [201.0, 27.333333333333332], [202.0, 225.14285714285714], [203.0, 75.45454545454545], [204.0, 17.583333333333336], [205.0, 38.916666666666664], [206.0, 23.933333333333337], [207.0, 35.60526315789474], [208.0, 48.61538461538461], [209.0, 173.4], [210.0, 145.5], [215.0, 20.428571428571427], [214.0, 46.59210526315789], [213.0, 9.5], [212.0, 105.0625], [211.0, 97.5263157894737], [219.0, 66.31428571428573], [220.0, 3.1], [218.0, 84.43636363636361], [221.0, 54.67857142857143], [222.0, 3.3235294117647065], [223.0, 33.0], [217.0, 9.316239316239315], [216.0, 45.85], [224.0, 4.617647058823532], [225.0, 6.5], [226.0, 10.640350877192985], [227.0, 22.499999999999993], [228.0, 6.666666666666666], [229.0, 52.46666666666667], [230.0, 349.375], [231.0, 119.0], [232.0, 248.07499999999996], [233.0, 147.56], [234.0, 117.91304347826086], [235.0, 68.28865979381443], [236.0, 79.63953488372091], [239.0, 41.400000000000006], [238.0, 14.981481481481481], [237.0, 12.2], [240.0, 42.42105263157893], [241.0, 104.73684210526315], [242.0, 35.26470588235294], [243.0, 20.03521126760563], [245.0, 37.871794871794876], [246.0, 35.614035087719294], [247.0, 10.523809523809522], [248.0, 45.714285714285715], [249.0, 12.094594594594593], [250.0, 21.388888888888893], [255.0, 21.65], [254.0, 12.687323943661962], [253.0, 54.32142857142856], [252.0, 13.706896551724137], [251.0, 17.742138364779873], [257.0, 30.227272727272727], [256.0, 20.16279069767442], [258.0, 23.17948717948718], [259.0, 11.59375], [260.0, 12.075], [261.0, 18.625], [262.0, 17.25], [263.0, 19.5], [264.0, 39.69230769230769], [268.0, 32.57692307692308], [269.0, 9.25], [270.0, 7.607142857142857], [271.0, 8.0], [266.0, 116.28571428571429], [265.0, 37.0], [267.0, 37.55555555555555], [284.0, 49.51685393258426], [272.0, 6.0], [273.0, 60.5], [274.0, 6.851851851851851], [275.0, 134.0], [277.0, 18.42857142857143], [276.0, 5.298701298701299], [278.0, 12.0], [279.0, 53.4], [280.0, 33.70833333333333], [281.0, 6.067567567567565], [283.0, 126.18181818181819], [282.0, 43.60526315789474], [285.0, 41.833333333333336], [286.0, 111.67293233082707], [287.0, 103.43396226415096], [291.0, 32.19565217391305], [289.0, 10.920000000000002], [288.0, 120.37349397590363], [290.0, 28.10512129380051], [296.0, 17.268691588785043], [295.0, 35.062499999999986], [297.0, 30.855243722304355], [294.0, 62.45098039215686], [293.0, 8.5], [292.0, 6.5476190476190474], [300.0, 60.78203434610302], [303.0, 21.663310258023927], [302.0, 29.912568306010918], [301.0, 31.553767993226067], [299.0, 29.190066857688613], [298.0, 16.500000000000004], [317.0, 16.650000000000002], [304.0, 41.72318339100344], [311.0, 6.636363636363639], [305.0, 11.193376068376057], [319.0, 28.299999999999997], [318.0, 25.0], [316.0, 24.032258064516125], [306.0, 68.78260869565217], [307.0, 1.5142857142857142], [315.0, 18.6], [314.0, 39.5], [313.0, 36.903225806451616], [312.0, 15.877777777777784], [310.0, 15.395833333333348], [309.0, 14.065948855989248], [308.0, 1.6562499999999996], [334.0, 4.5], [335.0, 9.439189189189188], [333.0, 3.5], [332.0, 3.6052631578947367], [331.0, 3.588235294117647], [330.0, 3.2111111111111117], [329.0, 2.714285714285715], [328.0, 3.1818181818181825], [327.0, 3.25], [321.0, 2.25], [320.0, 9.035714285714285], [323.0, 2.1904761904761902], [322.0, 2.8888888888888893], [326.0, 3.1578947368421053], [325.0, 2.8333333333333335], [349.0, 5.380952380952381], [351.0, 4.235294117647059], [348.0, 5.749999999999999], [339.0, 12.025000000000002], [338.0, 10.844444444444443], [337.0, 8.176470588235293], [336.0, 7.656716417910443], [347.0, 10.362025316455695], [346.0, 7.290697674418604], [345.0, 17.260869565217387], [344.0, 8.212707182320443], [343.0, 80.91341256366724], [342.0, 15.49308380797396], [341.0, 3.359605911330047], [340.0, 13.90839694656489], [366.0, 10.282608695652172], [367.0, 15.288732394366194], [365.0, 7.771929824561402], [364.0, 8.338235294117649], [363.0, 5.7388535031847105], [362.0, 5.523809523809525], [361.0, 12.348242811501596], [360.0, 5.903225806451612], [359.0, 9.024029574861363], [353.0, 10.074074074074076], [352.0, 11.114173228346456], [355.0, 22.83725490196079], [354.0, 10.166666666666666], [358.0, 27.363636363636363], [357.0, 8.959459459459469], [356.0, 11.571428571428573], [382.0, 4.111111111111111], [383.0, 15.000000000000002], [381.0, 4.40625], [370.0, 12.124999999999998], [369.0, 11.892857142857144], [368.0, 10.125], [379.0, 4.0], [378.0, 6.517241379310344], [377.0, 13.491228070175438], [376.0, 5.0], [375.0, 11.2], [374.0, 10.161290322580644], [373.0, 21.0], [372.0, 8.333333333333334], [398.0, 14.416666666666666], [399.0, 11.923076923076923], [397.0, 12.36220472440945], [396.0, 14.714285714285715], [395.0, 9.0], [394.0, 11.25], [393.0, 14.142857142857142], [392.0, 18.199999999999996], [391.0, 17.142857142857146], [385.0, 6.399999999999999], [384.0, 30.068965517241384], [387.0, 22.533333333333328], [386.0, 19.588235294117652], [390.0, 28.0], [389.0, 15.956521739130434], [388.0, 8.444444444444445], [414.0, 17.842105263157897], [409.0, 135.36065573770497], [410.0, 115.3076923076923], [407.0, 37.18181818181818], [401.0, 9.407407407407407], [400.0, 13.430555555555555], [403.0, 14.021739130434783], [402.0, 14.903030303030306], [406.0, 15.921212121212129], [405.0, 12.273833671399588], [404.0, 10.65168539325843], [415.0, 17.333333333333336], [413.0, 18.047619047619047], [412.0, 13.115384615384613], [411.0, 7.2857142857142865], [408.0, 16.65934065934066], [428.0, 10.045454545454547], [430.0, 15.5], [431.0, 16.5], [429.0, 14.5], [427.0, 14.333333333333334], [426.0, 14.0], [425.0, 13.714285714285714], [424.0, 14.2], [420.0, 16.0], [423.0, 14.666666666666668], [417.0, 6.0], [416.0, 13.571428571428571], [419.0, 15.2], [418.0, 88.0], [446.0, 205.0], [447.0, 220.0], [445.0, 135.5], [444.0, 247.5], [443.0, 109.0], [442.0, 103.0], [441.0, 25.703703703703702], [440.0, 128.5], [437.0, 32.2962962962963], [434.0, 51.095238095238095], [435.0, 11.777777777777779], [433.0, 20.5], [439.0, 17.0], [432.0, 4.0], [438.0, 16.6], [436.0, 30.12121212121212], [462.0, 22.493506493506494], [463.0, 32.69230769230769], [461.0, 24.364197530864196], [460.0, 15.666666666666666], [451.0, 44.12195121951218], [450.0, 37.0], [449.0, 12.0], [448.0, 219.66666666666666], [459.0, 37.21428571428571], [458.0, 148.77777777777783], [457.0, 70.16666666666667], [456.0, 44.5], [455.0, 20.362962962962975], [454.0, 21.11636363636362], [453.0, 28.366666666666664], [452.0, 20.70370370370371], [467.0, 14.444444444444443], [478.0, 25.0], [479.0, 81.16666666666667], [477.0, 73.08510638297872], [476.0, 10.333333333333334], [473.0, 18.07317073170732], [475.0, 10.0], [472.0, 4.0], [471.0, 7.0], [470.0, 37.0], [468.0, 35.76562499999999], [464.0, 29.5], [466.0, 21.684210526315795], [465.0, 12.666666666666668], [482.0, 10.9], [486.0, 13.749999999999998], [487.0, 37.11231884057975], [485.0, 4.0], [484.0, 8.0], [483.0, 5.0], [492.0, 48.524752475247524], [495.0, 7.75], [493.0, 37.75], [481.0, 10.666666666666666], [480.0, 28.0], [488.0, 50.22283356258593], [489.0, 30.325000000000014], [490.0, 19.195364238410598], [491.0, 60.23280423280425], [499.0, 5.25], [497.0, 23.5], [496.0, 11.10563380281689], [503.0, 18.833333333333336], [502.0, 43.72727272727272], [498.0, 9.341772151898736], [500.0, 11.480519480519481], [501.0, 61.226415094339615], [511.0, 202.5], [504.0, 102.23529411764709], [506.0, 149.25], [507.0, 3.4], [505.0, 187.0], [510.0, 123.75], [509.0, 33.16666666666667], [508.0, 184.0], [537.0, 118.99999999999999], [531.0, 209.47058823529412], [539.0, 119.0625], [540.0, 173.53333333333333], [541.0, 2.0], [529.0, 73.66666666666666], [528.0, 5.357142857142858], [543.0, 6.0], [538.0, 93.83333333333334], [536.0, 184.0], [518.0, 44.2], [515.0, 144.11111111111111], [517.0, 6.666666666666667], [516.0, 25.0], [513.0, 157.0], [512.0, 102.15384615384615], [527.0, 271.6666666666667], [526.0, 107.0], [525.0, 205.0], [524.0, 225.0], [523.0, 216.75], [521.0, 73.5], [520.0, 235.0], [535.0, 100.47368421052632], [534.0, 66.25], [533.0, 124.88888888888889], [532.0, 3.0], [574.0, 505.0], [575.0, 554.75], [563.0, 3.0], [560.0, 6.0], [565.0, 4.0], [564.0, 4.6], [573.0, 59.864999999999974], [572.0, 8.093749999999986], [570.0, 52.0], [569.0, 5.5], [568.0, 7.0], [548.0, 58.0], [547.0, 10.0], [546.0, 8.0], [544.0, 4.0], [558.0, 4.0], [555.0, 6.0], [567.0, 6.333333333333334], [566.0, 5.333333333333333], [594.0, 286.72727272727275], [597.0, 42.583333333333336], [600.0, 30.828555093570625], [599.0, 59.94117647058823], [595.0, 80.72916666666667], [578.0, 553.2307692307692], [577.0, 287.0], [576.0, 371.46153846153845], [579.0, 598.0], [582.0, 163.9087719298245], [581.0, 2.0], [591.0, 109.9642857142857], [590.0, 78.76419213973801], [589.0, 18.000000000000004], [588.0, 36.18446601941748], [587.0, 9.371794871794872], [586.0, 2.7647058823529407], [585.0, 6.029411764705882], [584.0, 4.352941176470588], [598.0, 106.8], [596.0, 75.6], [593.0, 16.0], [592.0, 133.82758620689654], [1.0, 1.0]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[597.8044229480738, 30.81847520390138]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 627745.4833333333, "minX": 1.62634266E12, "maxY": 5019266.3, "series": [{"data": [[1.62634284E12, 2140464.75], [1.62634266E12, 1680948.2666666666], [1.62634296E12, 627745.4833333333], [1.62634278E12, 2137869.3666666667], [1.6263429E12, 2156215.2], [1.62634272E12, 2348267.7666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62634284E12, 4592670.016666667], [1.62634266E12, 3588778.8], [1.62634296E12, 1346916.55], [1.62634278E12, 4586947.516666667], [1.6263429E12, 4626447.933333334], [1.62634272E12, 5019266.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62634296E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21.438781702557662, "minX": 1.62634266E12, "maxY": 33.37755386553036, "series": [{"data": [[1.62634284E12, 33.345650455524115], [1.62634266E12, 21.438781702557662], [1.62634296E12, 33.37755386553036], [1.62634278E12, 33.30231676182324], [1.6263429E12, 33.185884205849625], [1.62634272E12, 30.10940631085459]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62634296E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21.424478222202772, "minX": 1.62634266E12, "maxY": 33.377210946488155, "series": [{"data": [[1.62634284E12, 33.345229378753764], [1.62634266E12, 21.424478222202772], [1.62634296E12, 33.377210946488155], [1.62634278E12, 33.301835887176736], [1.6263429E12, 33.185528717141615], [1.62634272E12, 30.108834014291492]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62634296E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.031146782314016838, "minX": 1.62634266E12, "maxY": 0.25382273978078596, "series": [{"data": [[1.62634284E12, 0.03534131186092158], [1.62634266E12, 0.25382273978078596], [1.62634296E12, 0.03596163152547742], [1.62634278E12, 0.03353983025407325], [1.6263429E12, 0.031146782314016838], [1.62634272E12, 0.06427455841922745]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62634296E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62634266E12, "maxY": 1450.0, "series": [{"data": [[1.62634284E12, 1124.0], [1.62634266E12, 1450.0], [1.62634296E12, 995.0], [1.62634278E12, 1127.0], [1.6263429E12, 1067.0], [1.62634272E12, 987.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62634284E12, 19.0], [1.62634266E12, 36.0], [1.62634296E12, 21.0], [1.62634278E12, 19.0], [1.6263429E12, 19.0], [1.62634272E12, 24.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62634284E12, 727.9900000000016], [1.62634266E12, 72.0], [1.62634296E12, 649.0], [1.62634278E12, 640.9900000000016], [1.6263429E12, 633.0], [1.62634272E12, 550.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62634284E12, 45.0], [1.62634266E12, 45.0], [1.62634296E12, 49.0], [1.62634278E12, 37.0], [1.6263429E12, 46.0], [1.62634272E12, 166.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62634284E12, 1.0], [1.62634266E12, 1.0], [1.62634296E12, 1.0], [1.62634278E12, 1.0], [1.6263429E12, 0.0], [1.62634272E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62634284E12, 10.0], [1.62634266E12, 15.0], [1.62634296E12, 7.0], [1.62634278E12, 11.0], [1.6263429E12, 10.0], [1.62634272E12, 10.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62634296E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 482.0, "maxY": 24.0, "series": [{"data": [[16763.0, 18.0], [17115.0, 10.0], [16691.0, 10.0], [17187.0, 11.0], [16987.0, 10.0], [17419.0, 10.0], [18275.0, 10.0], [18043.0, 10.0], [17579.0, 10.0], [17899.0, 11.0], [17843.0, 11.0], [18123.0, 10.0], [18643.0, 11.0], [19299.0, 10.0], [18683.0, 23.0], [19315.0, 10.0], [19075.0, 11.0], [18875.0, 11.0], [18731.0, 10.0], [18699.0, 10.0], [18771.0, 10.0], [18931.0, 11.0], [18603.0, 10.0], [18499.0, 11.0], [19491.0, 10.0], [22955.0, 17.0], [8625.0, 23.0], [8885.0, 4.0], [10657.0, 9.0], [10901.0, 10.0], [15333.0, 8.0], [15865.0, 10.0], [16289.0, 11.0], [16261.0, 10.0], [15937.0, 11.0], [16357.0, 11.0], [17362.0, 10.0], [17234.0, 10.0], [17002.0, 11.0], [16818.0, 10.0], [18290.0, 11.0], [17546.0, 10.0], [17458.0, 10.0], [18266.0, 10.0], [17514.0, 10.0], [17922.0, 11.0], [18018.0, 11.0], [18026.0, 11.0], [18298.0, 10.0], [18362.0, 11.0], [17682.0, 11.0], [18418.0, 11.0], [18706.0, 10.0], [18698.0, 11.0], [19250.0, 11.0], [19090.0, 10.0], [19322.0, 10.0], [18586.0, 10.0], [20850.0, 16.0], [22250.0, 13.0], [24290.0, 15.0], [25434.0, 15.0], [25442.0, 15.0], [27850.0, 17.0], [27826.0, 20.0], [482.0, 14.0], [16417.0, 11.0], [16953.0, 11.0], [16977.0, 10.0], [17001.0, 11.0], [16585.0, 10.0], [16881.0, 10.0], [17353.0, 11.0], [17401.0, 10.0], [17993.0, 11.0], [18177.0, 10.0], [18417.0, 10.0], [17721.0, 11.0], [17809.0, 10.0], [17897.0, 10.0], [17625.0, 10.0], [18601.0, 10.0], [18825.0, 10.0], [19025.0, 10.0], [18465.0, 10.0], [18529.0, 10.0], [19161.0, 10.0], [18689.0, 10.0], [19049.0, 10.0], [19145.0, 10.0], [19385.0, 10.0], [1572.0, 10.0], [25185.0, 16.0], [26377.0, 15.0], [3902.0, 10.0], [4042.0, 21.0], [6544.0, 20.0], [8004.0, 23.0], [15136.0, 10.0], [15256.0, 11.0], [16160.0, 23.0], [16368.0, 10.0], [16052.0, 11.0], [16976.0, 10.0], [16896.0, 11.0], [16560.0, 11.0], [17104.0, 10.0], [17032.0, 10.0], [18320.0, 10.0], [17560.0, 11.0], [18376.0, 10.0], [18032.0, 10.0], [17960.0, 10.0], [18424.0, 11.0], [17928.0, 10.0], [18048.0, 10.0], [18096.0, 10.0], [18336.0, 10.0], [18352.0, 10.0], [17656.0, 11.0], [18192.0, 11.0], [18248.0, 10.0], [17504.0, 10.0], [17880.0, 10.0], [17808.0, 11.0], [17800.0, 10.0], [17728.0, 11.0], [18904.0, 19.0], [18888.0, 10.0], [19016.0, 11.0], [19360.0, 11.0], [18760.0, 10.0], [18864.0, 10.0], [18696.0, 11.0], [19960.0, 18.0], [21760.0, 15.0], [21912.0, 14.0], [22688.0, 15.0], [25664.0, 15.0], [28024.0, 15.0], [28048.0, 16.0], [16975.0, 11.0], [17239.0, 11.0], [17023.0, 10.0], [16687.0, 10.0], [17135.0, 10.0], [16655.0, 10.0], [17175.0, 10.0], [17087.0, 10.0], [18431.0, 11.0], [17591.0, 11.0], [18151.0, 10.0], [17711.0, 10.0], [18351.0, 11.0], [17991.0, 11.0], [18303.0, 10.0], [18111.0, 11.0], [17959.0, 11.0], [19391.0, 10.0], [19071.0, 10.0], [19351.0, 11.0], [18663.0, 11.0], [18455.0, 10.0], [18903.0, 10.0], [18615.0, 11.0], [22215.0, 16.0], [27351.0, 15.0], [12131.0, 24.0], [13879.0, 15.0], [14843.0, 11.0], [15547.0, 10.0], [15819.0, 10.0], [16123.0, 11.0], [16279.0, 11.0], [15979.0, 11.0], [17382.0, 10.0], [17014.0, 10.0], [17022.0, 11.0], [17086.0, 10.0], [17310.0, 10.0], [17166.0, 10.0], [17294.0, 10.0], [16830.0, 10.0], [16886.0, 10.0], [16934.0, 11.0], [17406.0, 11.0], [16918.0, 10.0], [16974.0, 11.0], [16950.0, 11.0], [16622.0, 11.0], [18238.0, 10.0], [17606.0, 10.0], [17550.0, 11.0], [18070.0, 10.0], [17542.0, 11.0], [18102.0, 11.0], [17766.0, 11.0], [19214.0, 10.0], [19398.0, 10.0], [18510.0, 10.0], [18582.0, 10.0], [18470.0, 10.0], [19126.0, 11.0], [19190.0, 10.0], [19086.0, 10.0], [18446.0, 10.0], [18758.0, 10.0], [24670.0, 16.0], [24758.0, 13.0], [25414.0, 16.0], [27262.0, 14.0], [17053.0, 18.0], [16957.0, 10.0], [16837.0, 11.0], [17357.0, 11.0], [16493.0, 11.0], [16869.0, 11.0], [16901.0, 10.0], [18213.0, 10.0], [17621.0, 10.0], [17757.0, 10.0], [18021.0, 10.0], [17597.0, 11.0], [17541.0, 11.0], [18197.0, 11.0], [18221.0, 11.0], [18229.0, 10.0], [18293.0, 11.0], [18501.0, 11.0], [18525.0, 11.0], [18581.0, 10.0], [18437.0, 11.0], [18789.0, 10.0], [19093.0, 10.0], [19109.0, 10.0], [18957.0, 10.0], [18773.0, 11.0], [18765.0, 10.0], [18781.0, 10.0], [18469.0, 10.0], [20045.0, 12.0], [21789.0, 13.0], [26701.0, 14.0], [27621.0, 15.0], [26813.0, 16.0], [28741.0, 15.0], [5347.0, 15.0], [15306.0, 10.0], [15466.0, 10.0], [15894.0, 11.0], [16166.0, 10.0], [16828.0, 10.0], [16428.0, 20.0], [17364.0, 10.0], [17068.0, 11.0], [16708.0, 10.0], [16740.0, 11.0], [16412.0, 12.0], [17228.0, 10.0], [16772.0, 10.0], [16796.0, 11.0], [17660.0, 10.0], [18004.0, 10.0], [18092.0, 10.0], [17780.0, 11.0], [18204.0, 10.0], [18364.0, 10.0], [17588.0, 10.0], [17652.0, 10.0], [17516.0, 10.0], [17500.0, 11.0], [17852.0, 10.0], [17812.0, 11.0], [18516.0, 10.0], [19220.0, 10.0], [18532.0, 11.0], [18956.0, 11.0], [18660.0, 11.0], [19364.0, 11.0], [18788.0, 10.0], [19068.0, 11.0], [20628.0, 14.0], [20820.0, 12.0], [21988.0, 14.0], [22340.0, 15.0], [22676.0, 14.0], [22532.0, 17.0], [24164.0, 16.0], [24740.0, 14.0], [26516.0, 15.0], [27100.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28741.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 482.0, "maxY": 24.0, "series": [{"data": [[16763.0, 18.0], [17115.0, 10.0], [16691.0, 10.0], [17187.0, 11.0], [16987.0, 10.0], [17419.0, 10.0], [18275.0, 10.0], [18043.0, 10.0], [17579.0, 10.0], [17899.0, 11.0], [17843.0, 11.0], [18123.0, 10.0], [18643.0, 11.0], [19299.0, 10.0], [18683.0, 23.0], [19315.0, 10.0], [19075.0, 11.0], [18875.0, 11.0], [18731.0, 10.0], [18699.0, 10.0], [18771.0, 10.0], [18931.0, 11.0], [18603.0, 10.0], [18499.0, 11.0], [19491.0, 10.0], [22955.0, 17.0], [8625.0, 23.0], [8885.0, 4.0], [10657.0, 9.0], [10901.0, 10.0], [15333.0, 8.0], [15865.0, 10.0], [16289.0, 11.0], [16261.0, 10.0], [15937.0, 11.0], [16357.0, 11.0], [17362.0, 10.0], [17234.0, 10.0], [17002.0, 11.0], [16818.0, 10.0], [18290.0, 11.0], [17546.0, 10.0], [17458.0, 10.0], [18266.0, 10.0], [17514.0, 10.0], [17922.0, 11.0], [18018.0, 11.0], [18026.0, 11.0], [18298.0, 10.0], [18362.0, 11.0], [17682.0, 11.0], [18418.0, 11.0], [18706.0, 10.0], [18698.0, 11.0], [19250.0, 11.0], [19090.0, 10.0], [19322.0, 10.0], [18586.0, 10.0], [20850.0, 16.0], [22250.0, 13.0], [24290.0, 15.0], [25434.0, 15.0], [25442.0, 15.0], [27850.0, 17.0], [27826.0, 20.0], [482.0, 14.0], [16417.0, 11.0], [16953.0, 11.0], [16977.0, 10.0], [17001.0, 11.0], [16585.0, 10.0], [16881.0, 10.0], [17353.0, 11.0], [17401.0, 10.0], [17993.0, 11.0], [18177.0, 10.0], [18417.0, 10.0], [17721.0, 11.0], [17809.0, 10.0], [17897.0, 10.0], [17625.0, 10.0], [18601.0, 10.0], [18825.0, 10.0], [19025.0, 10.0], [18465.0, 10.0], [18529.0, 10.0], [19161.0, 10.0], [18689.0, 10.0], [19049.0, 10.0], [19145.0, 10.0], [19385.0, 10.0], [1572.0, 10.0], [25185.0, 16.0], [26377.0, 15.0], [3902.0, 10.0], [4042.0, 21.0], [6544.0, 20.0], [8004.0, 23.0], [15136.0, 10.0], [15256.0, 11.0], [16160.0, 23.0], [16368.0, 10.0], [16052.0, 11.0], [16976.0, 10.0], [16896.0, 11.0], [16560.0, 11.0], [17104.0, 10.0], [17032.0, 10.0], [18320.0, 10.0], [17560.0, 11.0], [18376.0, 10.0], [18032.0, 10.0], [17960.0, 10.0], [18424.0, 11.0], [17928.0, 10.0], [18048.0, 10.0], [18096.0, 10.0], [18336.0, 10.0], [18352.0, 10.0], [17656.0, 11.0], [18192.0, 11.0], [18248.0, 10.0], [17504.0, 10.0], [17880.0, 10.0], [17808.0, 11.0], [17800.0, 10.0], [17728.0, 11.0], [18904.0, 19.0], [18888.0, 10.0], [19016.0, 11.0], [19360.0, 11.0], [18760.0, 10.0], [18864.0, 10.0], [18696.0, 11.0], [19960.0, 18.0], [21760.0, 15.0], [21912.0, 14.0], [22688.0, 15.0], [25664.0, 15.0], [28024.0, 15.0], [28048.0, 16.0], [16975.0, 11.0], [17239.0, 11.0], [17023.0, 10.0], [16687.0, 10.0], [17135.0, 10.0], [16655.0, 10.0], [17175.0, 10.0], [17087.0, 10.0], [18431.0, 11.0], [17591.0, 11.0], [18151.0, 10.0], [17711.0, 10.0], [18351.0, 11.0], [17991.0, 11.0], [18303.0, 10.0], [18111.0, 11.0], [17959.0, 11.0], [19391.0, 10.0], [19071.0, 10.0], [19351.0, 11.0], [18663.0, 11.0], [18455.0, 10.0], [18903.0, 10.0], [18615.0, 11.0], [22215.0, 16.0], [27351.0, 15.0], [12131.0, 24.0], [13879.0, 15.0], [14843.0, 11.0], [15547.0, 10.0], [15819.0, 10.0], [16123.0, 11.0], [16279.0, 11.0], [15979.0, 11.0], [17382.0, 10.0], [17014.0, 10.0], [17022.0, 11.0], [17086.0, 10.0], [17310.0, 10.0], [17166.0, 10.0], [17294.0, 10.0], [16830.0, 10.0], [16886.0, 10.0], [16934.0, 11.0], [17406.0, 11.0], [16918.0, 10.0], [16974.0, 11.0], [16950.0, 11.0], [16622.0, 11.0], [18238.0, 10.0], [17606.0, 10.0], [17550.0, 11.0], [18070.0, 10.0], [17542.0, 11.0], [18102.0, 11.0], [17766.0, 11.0], [19214.0, 10.0], [19398.0, 10.0], [18510.0, 10.0], [18582.0, 10.0], [18470.0, 10.0], [19126.0, 11.0], [19190.0, 10.0], [19086.0, 10.0], [18446.0, 10.0], [18758.0, 10.0], [24670.0, 16.0], [24758.0, 13.0], [25414.0, 16.0], [27262.0, 14.0], [17053.0, 18.0], [16957.0, 10.0], [16837.0, 11.0], [17357.0, 11.0], [16493.0, 11.0], [16869.0, 11.0], [16901.0, 10.0], [18213.0, 10.0], [17621.0, 10.0], [17757.0, 10.0], [18021.0, 10.0], [17597.0, 11.0], [17541.0, 11.0], [18197.0, 11.0], [18221.0, 11.0], [18229.0, 10.0], [18293.0, 11.0], [18501.0, 11.0], [18525.0, 11.0], [18581.0, 10.0], [18437.0, 11.0], [18789.0, 10.0], [19093.0, 10.0], [19109.0, 10.0], [18957.0, 10.0], [18773.0, 11.0], [18765.0, 10.0], [18781.0, 10.0], [18469.0, 10.0], [20045.0, 12.0], [21789.0, 13.0], [26701.0, 14.0], [27621.0, 15.0], [26813.0, 16.0], [28741.0, 15.0], [5347.0, 15.0], [15306.0, 10.0], [15466.0, 10.0], [15894.0, 11.0], [16166.0, 10.0], [16828.0, 10.0], [16428.0, 20.0], [17364.0, 10.0], [17068.0, 11.0], [16708.0, 10.0], [16740.0, 11.0], [16412.0, 12.0], [17228.0, 10.0], [16772.0, 10.0], [16796.0, 11.0], [17660.0, 10.0], [18004.0, 10.0], [18092.0, 10.0], [17780.0, 11.0], [18204.0, 10.0], [18364.0, 10.0], [17588.0, 10.0], [17652.0, 10.0], [17516.0, 10.0], [17500.0, 11.0], [17852.0, 10.0], [17812.0, 11.0], [18516.0, 10.0], [19220.0, 10.0], [18532.0, 11.0], [18956.0, 11.0], [18660.0, 11.0], [19364.0, 11.0], [18788.0, 10.0], [19068.0, 11.0], [20628.0, 14.0], [20820.0, 12.0], [21988.0, 14.0], [22340.0, 15.0], [22676.0, 14.0], [22532.0, 17.0], [24164.0, 16.0], [24740.0, 14.0], [26516.0, 15.0], [27100.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28741.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5190.466666666666, "minX": 1.62634266E12, "maxY": 19453.783333333333, "series": [{"data": [[1.62634284E12, 17732.783333333333], [1.62634266E12, 13934.35], [1.62634296E12, 5190.466666666666], [1.62634278E12, 17710.316666666666], [1.6263429E12, 17862.716666666667], [1.62634272E12, 19453.783333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62634296E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5200.45, "minX": 1.62634266E12, "maxY": 19453.783333333333, "series": [{"data": [[1.62634284E12, 17732.316666666666], [1.62634266E12, 13924.35], [1.62634296E12, 5200.45], [1.62634278E12, 17710.783333333333], [1.6263429E12, 17862.733333333334], [1.62634272E12, 19453.783333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62634296E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5200.45, "minX": 1.62634266E12, "maxY": 19453.783333333333, "series": [{"data": [[1.62634284E12, 17732.316666666666], [1.62634266E12, 13924.35], [1.62634296E12, 5200.45], [1.62634278E12, 17710.783333333333], [1.6263429E12, 17862.733333333334], [1.62634272E12, 19453.783333333333]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62634296E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5200.45, "minX": 1.62634266E12, "maxY": 19453.783333333333, "series": [{"data": [[1.62634284E12, 17732.316666666666], [1.62634266E12, 13924.35], [1.62634296E12, 5200.45], [1.62634278E12, 17710.783333333333], [1.6263429E12, 17862.733333333334], [1.62634272E12, 19453.783333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62634296E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

