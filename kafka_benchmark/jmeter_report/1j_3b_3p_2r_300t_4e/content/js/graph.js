/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1069.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 9.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 9.0], [8.1, 9.0], [8.2, 9.0], [8.3, 9.0], [8.4, 9.0], [8.5, 9.0], [8.6, 9.0], [8.7, 9.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 10.0], [10.1, 10.0], [10.2, 10.0], [10.3, 10.0], [10.4, 10.0], [10.5, 10.0], [10.6, 10.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 12.0], [14.2, 12.0], [14.3, 12.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 12.0], [20.4, 12.0], [20.5, 12.0], [20.6, 12.0], [20.7, 12.0], [20.8, 12.0], [20.9, 12.0], [21.0, 12.0], [21.1, 12.0], [21.2, 12.0], [21.3, 12.0], [21.4, 12.0], [21.5, 12.0], [21.6, 12.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 13.0], [22.9, 13.0], [23.0, 13.0], [23.1, 13.0], [23.2, 13.0], [23.3, 13.0], [23.4, 13.0], [23.5, 13.0], [23.6, 13.0], [23.7, 13.0], [23.8, 13.0], [23.9, 13.0], [24.0, 13.0], [24.1, 13.0], [24.2, 13.0], [24.3, 13.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 13.0], [24.8, 13.0], [24.9, 13.0], [25.0, 13.0], [25.1, 13.0], [25.2, 13.0], [25.3, 13.0], [25.4, 13.0], [25.5, 13.0], [25.6, 13.0], [25.7, 13.0], [25.8, 13.0], [25.9, 13.0], [26.0, 13.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 13.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 13.0], [27.2, 13.0], [27.3, 13.0], [27.4, 13.0], [27.5, 13.0], [27.6, 13.0], [27.7, 13.0], [27.8, 13.0], [27.9, 13.0], [28.0, 13.0], [28.1, 13.0], [28.2, 13.0], [28.3, 13.0], [28.4, 13.0], [28.5, 13.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 13.0], [30.6, 13.0], [30.7, 13.0], [30.8, 13.0], [30.9, 13.0], [31.0, 13.0], [31.1, 13.0], [31.2, 13.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 13.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 13.0], [35.6, 13.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 14.0], [43.3, 14.0], [43.4, 14.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 14.0], [44.4, 14.0], [44.5, 14.0], [44.6, 14.0], [44.7, 14.0], [44.8, 14.0], [44.9, 14.0], [45.0, 14.0], [45.1, 14.0], [45.2, 14.0], [45.3, 14.0], [45.4, 14.0], [45.5, 14.0], [45.6, 14.0], [45.7, 14.0], [45.8, 14.0], [45.9, 14.0], [46.0, 14.0], [46.1, 14.0], [46.2, 14.0], [46.3, 14.0], [46.4, 14.0], [46.5, 14.0], [46.6, 14.0], [46.7, 14.0], [46.8, 14.0], [46.9, 14.0], [47.0, 14.0], [47.1, 14.0], [47.2, 14.0], [47.3, 14.0], [47.4, 14.0], [47.5, 14.0], [47.6, 14.0], [47.7, 14.0], [47.8, 14.0], [47.9, 14.0], [48.0, 14.0], [48.1, 14.0], [48.2, 14.0], [48.3, 14.0], [48.4, 14.0], [48.5, 14.0], [48.6, 14.0], [48.7, 14.0], [48.8, 14.0], [48.9, 14.0], [49.0, 14.0], [49.1, 14.0], [49.2, 14.0], [49.3, 14.0], [49.4, 14.0], [49.5, 14.0], [49.6, 14.0], [49.7, 14.0], [49.8, 14.0], [49.9, 14.0], [50.0, 14.0], [50.1, 14.0], [50.2, 14.0], [50.3, 14.0], [50.4, 14.0], [50.5, 14.0], [50.6, 14.0], [50.7, 14.0], [50.8, 14.0], [50.9, 14.0], [51.0, 14.0], [51.1, 14.0], [51.2, 14.0], [51.3, 14.0], [51.4, 14.0], [51.5, 14.0], [51.6, 14.0], [51.7, 14.0], [51.8, 14.0], [51.9, 14.0], [52.0, 14.0], [52.1, 14.0], [52.2, 14.0], [52.3, 14.0], [52.4, 14.0], [52.5, 14.0], [52.6, 14.0], [52.7, 14.0], [52.8, 14.0], [52.9, 14.0], [53.0, 14.0], [53.1, 14.0], [53.2, 14.0], [53.3, 14.0], [53.4, 14.0], [53.5, 14.0], [53.6, 14.0], [53.7, 14.0], [53.8, 14.0], [53.9, 14.0], [54.0, 14.0], [54.1, 14.0], [54.2, 14.0], [54.3, 14.0], [54.4, 14.0], [54.5, 14.0], [54.6, 14.0], [54.7, 14.0], [54.8, 14.0], [54.9, 14.0], [55.0, 14.0], [55.1, 14.0], [55.2, 14.0], [55.3, 14.0], [55.4, 14.0], [55.5, 14.0], [55.6, 14.0], [55.7, 14.0], [55.8, 14.0], [55.9, 14.0], [56.0, 14.0], [56.1, 14.0], [56.2, 14.0], [56.3, 14.0], [56.4, 15.0], [56.5, 15.0], [56.6, 15.0], [56.7, 15.0], [56.8, 15.0], [56.9, 15.0], [57.0, 15.0], [57.1, 15.0], [57.2, 15.0], [57.3, 15.0], [57.4, 15.0], [57.5, 15.0], [57.6, 15.0], [57.7, 15.0], [57.8, 15.0], [57.9, 15.0], [58.0, 15.0], [58.1, 15.0], [58.2, 15.0], [58.3, 15.0], [58.4, 15.0], [58.5, 15.0], [58.6, 15.0], [58.7, 15.0], [58.8, 15.0], [58.9, 15.0], [59.0, 15.0], [59.1, 15.0], [59.2, 15.0], [59.3, 15.0], [59.4, 15.0], [59.5, 15.0], [59.6, 15.0], [59.7, 15.0], [59.8, 15.0], [59.9, 15.0], [60.0, 15.0], [60.1, 15.0], [60.2, 15.0], [60.3, 15.0], [60.4, 15.0], [60.5, 15.0], [60.6, 15.0], [60.7, 15.0], [60.8, 15.0], [60.9, 15.0], [61.0, 15.0], [61.1, 15.0], [61.2, 15.0], [61.3, 15.0], [61.4, 15.0], [61.5, 15.0], [61.6, 15.0], [61.7, 15.0], [61.8, 15.0], [61.9, 15.0], [62.0, 15.0], [62.1, 15.0], [62.2, 15.0], [62.3, 15.0], [62.4, 15.0], [62.5, 15.0], [62.6, 15.0], [62.7, 15.0], [62.8, 15.0], [62.9, 15.0], [63.0, 15.0], [63.1, 15.0], [63.2, 15.0], [63.3, 15.0], [63.4, 15.0], [63.5, 15.0], [63.6, 15.0], [63.7, 15.0], [63.8, 15.0], [63.9, 15.0], [64.0, 15.0], [64.1, 15.0], [64.2, 15.0], [64.3, 15.0], [64.4, 15.0], [64.5, 15.0], [64.6, 15.0], [64.7, 15.0], [64.8, 15.0], [64.9, 15.0], [65.0, 15.0], [65.1, 15.0], [65.2, 15.0], [65.3, 15.0], [65.4, 15.0], [65.5, 15.0], [65.6, 15.0], [65.7, 15.0], [65.8, 15.0], [65.9, 15.0], [66.0, 15.0], [66.1, 15.0], [66.2, 15.0], [66.3, 15.0], [66.4, 15.0], [66.5, 15.0], [66.6, 15.0], [66.7, 15.0], [66.8, 15.0], [66.9, 15.0], [67.0, 15.0], [67.1, 15.0], [67.2, 15.0], [67.3, 15.0], [67.4, 15.0], [67.5, 15.0], [67.6, 15.0], [67.7, 15.0], [67.8, 15.0], [67.9, 15.0], [68.0, 15.0], [68.1, 15.0], [68.2, 15.0], [68.3, 15.0], [68.4, 15.0], [68.5, 15.0], [68.6, 15.0], [68.7, 15.0], [68.8, 15.0], [68.9, 15.0], [69.0, 15.0], [69.1, 15.0], [69.2, 15.0], [69.3, 15.0], [69.4, 15.0], [69.5, 15.0], [69.6, 15.0], [69.7, 15.0], [69.8, 15.0], [69.9, 15.0], [70.0, 15.0], [70.1, 15.0], [70.2, 15.0], [70.3, 15.0], [70.4, 15.0], [70.5, 15.0], [70.6, 15.0], [70.7, 15.0], [70.8, 15.0], [70.9, 15.0], [71.0, 15.0], [71.1, 15.0], [71.2, 15.0], [71.3, 15.0], [71.4, 15.0], [71.5, 15.0], [71.6, 15.0], [71.7, 15.0], [71.8, 15.0], [71.9, 15.0], [72.0, 15.0], [72.1, 15.0], [72.2, 15.0], [72.3, 15.0], [72.4, 15.0], [72.5, 16.0], [72.6, 16.0], [72.7, 16.0], [72.8, 16.0], [72.9, 16.0], [73.0, 16.0], [73.1, 16.0], [73.2, 16.0], [73.3, 16.0], [73.4, 16.0], [73.5, 16.0], [73.6, 16.0], [73.7, 16.0], [73.8, 16.0], [73.9, 16.0], [74.0, 16.0], [74.1, 16.0], [74.2, 16.0], [74.3, 16.0], [74.4, 16.0], [74.5, 16.0], [74.6, 16.0], [74.7, 16.0], [74.8, 16.0], [74.9, 16.0], [75.0, 16.0], [75.1, 16.0], [75.2, 16.0], [75.3, 16.0], [75.4, 16.0], [75.5, 16.0], [75.6, 16.0], [75.7, 16.0], [75.8, 16.0], [75.9, 16.0], [76.0, 16.0], [76.1, 16.0], [76.2, 16.0], [76.3, 16.0], [76.4, 16.0], [76.5, 16.0], [76.6, 16.0], [76.7, 16.0], [76.8, 16.0], [76.9, 16.0], [77.0, 16.0], [77.1, 16.0], [77.2, 16.0], [77.3, 16.0], [77.4, 16.0], [77.5, 16.0], [77.6, 16.0], [77.7, 16.0], [77.8, 16.0], [77.9, 16.0], [78.0, 16.0], [78.1, 16.0], [78.2, 16.0], [78.3, 16.0], [78.4, 16.0], [78.5, 16.0], [78.6, 16.0], [78.7, 16.0], [78.8, 16.0], [78.9, 16.0], [79.0, 16.0], [79.1, 16.0], [79.2, 16.0], [79.3, 16.0], [79.4, 16.0], [79.5, 16.0], [79.6, 16.0], [79.7, 16.0], [79.8, 16.0], [79.9, 16.0], [80.0, 16.0], [80.1, 16.0], [80.2, 16.0], [80.3, 16.0], [80.4, 16.0], [80.5, 16.0], [80.6, 16.0], [80.7, 16.0], [80.8, 16.0], [80.9, 16.0], [81.0, 16.0], [81.1, 16.0], [81.2, 16.0], [81.3, 16.0], [81.4, 16.0], [81.5, 16.0], [81.6, 16.0], [81.7, 16.0], [81.8, 16.0], [81.9, 16.0], [82.0, 16.0], [82.1, 17.0], [82.2, 17.0], [82.3, 17.0], [82.4, 17.0], [82.5, 17.0], [82.6, 17.0], [82.7, 17.0], [82.8, 17.0], [82.9, 17.0], [83.0, 17.0], [83.1, 17.0], [83.2, 17.0], [83.3, 17.0], [83.4, 17.0], [83.5, 17.0], [83.6, 17.0], [83.7, 17.0], [83.8, 17.0], [83.9, 17.0], [84.0, 17.0], [84.1, 17.0], [84.2, 17.0], [84.3, 17.0], [84.4, 17.0], [84.5, 17.0], [84.6, 17.0], [84.7, 17.0], [84.8, 17.0], [84.9, 17.0], [85.0, 17.0], [85.1, 17.0], [85.2, 17.0], [85.3, 17.0], [85.4, 17.0], [85.5, 17.0], [85.6, 17.0], [85.7, 17.0], [85.8, 17.0], [85.9, 17.0], [86.0, 17.0], [86.1, 17.0], [86.2, 17.0], [86.3, 17.0], [86.4, 17.0], [86.5, 17.0], [86.6, 17.0], [86.7, 17.0], [86.8, 17.0], [86.9, 17.0], [87.0, 17.0], [87.1, 17.0], [87.2, 17.0], [87.3, 18.0], [87.4, 18.0], [87.5, 18.0], [87.6, 18.0], [87.7, 18.0], [87.8, 18.0], [87.9, 18.0], [88.0, 18.0], [88.1, 18.0], [88.2, 18.0], [88.3, 18.0], [88.4, 18.0], [88.5, 18.0], [88.6, 18.0], [88.7, 18.0], [88.8, 18.0], [88.9, 18.0], [89.0, 18.0], [89.1, 18.0], [89.2, 18.0], [89.3, 18.0], [89.4, 18.0], [89.5, 18.0], [89.6, 18.0], [89.7, 18.0], [89.8, 18.0], [89.9, 18.0], [90.0, 18.0], [90.1, 19.0], [90.2, 19.0], [90.3, 19.0], [90.4, 19.0], [90.5, 19.0], [90.6, 19.0], [90.7, 19.0], [90.8, 19.0], [90.9, 19.0], [91.0, 19.0], [91.1, 19.0], [91.2, 19.0], [91.3, 19.0], [91.4, 19.0], [91.5, 19.0], [91.6, 19.0], [91.7, 19.0], [91.8, 19.0], [91.9, 19.0], [92.0, 20.0], [92.1, 20.0], [92.2, 20.0], [92.3, 20.0], [92.4, 20.0], [92.5, 20.0], [92.6, 20.0], [92.7, 20.0], [92.8, 20.0], [92.9, 20.0], [93.0, 20.0], [93.1, 20.0], [93.2, 20.0], [93.3, 20.0], [93.4, 20.0], [93.5, 21.0], [93.6, 21.0], [93.7, 21.0], [93.8, 21.0], [93.9, 21.0], [94.0, 21.0], [94.1, 21.0], [94.2, 21.0], [94.3, 21.0], [94.4, 21.0], [94.5, 21.0], [94.6, 21.0], [94.7, 22.0], [94.8, 22.0], [94.9, 22.0], [95.0, 22.0], [95.1, 22.0], [95.2, 22.0], [95.3, 22.0], [95.4, 22.0], [95.5, 23.0], [95.6, 23.0], [95.7, 23.0], [95.8, 23.0], [95.9, 23.0], [96.0, 23.0], [96.1, 24.0], [96.2, 24.0], [96.3, 24.0], [96.4, 24.0], [96.5, 24.0], [96.6, 25.0], [96.7, 25.0], [96.8, 25.0], [96.9, 26.0], [97.0, 26.0], [97.1, 26.0], [97.2, 27.0], [97.3, 27.0], [97.4, 28.0], [97.5, 28.0], [97.6, 29.0], [97.7, 29.0], [97.8, 30.0], [97.9, 30.0], [98.0, 31.0], [98.1, 32.0], [98.2, 32.0], [98.3, 33.0], [98.4, 34.0], [98.5, 35.0], [98.6, 36.0], [98.7, 37.0], [98.8, 38.0], [98.9, 39.0], [99.0, 40.0], [99.1, 41.0], [99.2, 43.0], [99.3, 44.0], [99.4, 46.0], [99.5, 48.0], [99.6, 50.0], [99.7, 53.0], [99.8, 59.0], [99.9, 78.0], [100.0, 1069.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 5905170.0, "series": [{"data": [[0.0, 5905170.0], [300.0, 224.0], [600.0, 78.0], [700.0, 2.0], [100.0, 2631.0], [200.0, 640.0], [400.0, 17.0], [900.0, 244.0], [500.0, 35.0], [1000.0, 57.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 416.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5908682.0, "series": [{"data": [[0.0, 5908682.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 416.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 288.8836965967286, "minX": 1.62667194E12, "maxY": 300.0, "series": [{"data": [[1.62667206E12, 300.0], [1.626672E12, 300.0], [1.62667218E12, 300.0], [1.62667212E12, 300.0], [1.62667224E12, 288.8836965967286], [1.62667194E12, 299.9008251105921]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62667224E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 264.9225352112676, "series": [{"data": [[2.0, 1.6666666666666665], [3.0, 1.4583333333333337], [4.0, 1.3050000000000004], [5.0, 1.7058823529411762], [6.0, 5.8999999999999995], [7.0, 1.3333333333333333], [8.0, 1.4354838709677422], [9.0, 2.0], [10.0, 1.3552833078101079], [11.0, 1.4000000000000001], [12.0, 1.3461538461538463], [13.0, 1.5259740259740264], [14.0, 1.4], [15.0, 1.505548705302098], [16.0, 9.0], [17.0, 1.2222222222222228], [18.0, 1.6], [19.0, 1.2882882882882882], [20.0, 1.5], [21.0, 1.6516853932584263], [22.0, 1.8235294117647058], [23.0, 1.7777777777777777], [24.0, 1.5714285714285712], [25.0, 1.4848993288590606], [26.0, 1.5714285714285716], [27.0, 1.8571428571428572], [28.0, 1.6091081593927887], [29.0, 1.8749999999999998], [30.0, 2.1538461538461537], [31.0, 1.0], [33.0, 1.688679245283019], [32.0, 1.590452261306533], [35.0, 2.166666666666667], [34.0, 1.5600000000000005], [37.0, 2.111111111111111], [36.0, 2.1071428571428568], [39.0, 4.666666666666667], [38.0, 1.0], [41.0, 2.388888888888889], [40.0, 2.0], [43.0, 2.0074074074074053], [42.0, 2.333333333333333], [45.0, 2.3947368421052633], [44.0, 3.0], [47.0, 2.588235294117647], [46.0, 4.0], [49.0, 2.3888888888888893], [48.0, 3.0], [51.0, 2.607142857142857], [50.0, 2.5238095238095237], [53.0, 2.21081081081081], [52.0, 2.9107142857142856], [55.0, 2.501628664495113], [54.0, 2.46218487394958], [57.0, 2.565217391304346], [56.0, 2.9999999999999996], [59.0, 2.05], [58.0, 2.107142857142857], [61.0, 2.4736842105263164], [60.0, 2.2222222222222223], [63.0, 3.0], [62.0, 2.608695652173914], [67.0, 3.384057971014493], [66.0, 3.2121212121212115], [65.0, 3.3524590163934422], [64.0, 2.9111111111111114], [71.0, 3.2536231884057965], [70.0, 3.1904761904761907], [69.0, 3.0057142857142862], [68.0, 4.97324414715719], [75.0, 3.8361344537815123], [74.0, 3.7045454545454537], [73.0, 3.412621359223302], [72.0, 3.0400000000000005], [79.0, 4.333333333333335], [78.0, 4.090909090909091], [77.0, 3.916666666666666], [76.0, 3.7659574468085117], [83.0, 3.4521739130434788], [82.0, 3.8145695364238406], [81.0, 3.9259259259259265], [80.0, 4.300000000000001], [87.0, 4.5810810810810825], [86.0, 4.200000000000001], [85.0, 3.5], [84.0, 3.8750000000000004], [90.0, 4.8695652173913055], [89.0, 5.011764705882353], [88.0, 4.38095238095238], [94.0, 7.246153846153847], [93.0, 3.666666666666667], [92.0, 4.171428571428572], [99.0, 2.2058823529411766], [98.0, 8.317460317460316], [97.0, 7.902439024390246], [96.0, 7.869565217391302], [103.0, 5.592592592592592], [102.0, 8.333333333333332], [101.0, 7.666666666666667], [100.0, 6.208333333333334], [107.0, 5.351351351351352], [106.0, 4.863636363636363], [105.0, 4.604166666666666], [104.0, 4.0], [111.0, 5.170731707317073], [110.0, 5.285714285714286], [109.0, 5.794117647058825], [108.0, 5.2742474916387945], [115.0, 4.5], [114.0, 5.642857142857143], [113.0, 5.25], [112.0, 5.745454545454546], [119.0, 5.849056603773586], [118.0, 5.206896551724138], [117.0, 4.984126984126985], [116.0, 5.0666666666666655], [123.0, 6.0588235294117645], [122.0, 6.0], [121.0, 6.2105263157894735], [120.0, 6.137931034482758], [126.0, 5.75], [125.0, 6.411764705882353], [124.0, 6.0], [135.0, 5.25], [134.0, 5.712550607287447], [133.0, 6.166666666666666], [132.0, 6.91304347826087], [131.0, 6.6976744186046515], [130.0, 6.65625], [129.0, 6.764705882352942], [128.0, 6.529411764705884], [143.0, 7.166666666666668], [142.0, 6.77205882352941], [141.0, 7.0], [140.0, 6.898550724637681], [139.0, 6.722891566265061], [138.0, 7.578947368421053], [137.0, 6.333333333333334], [136.0, 6.380952380952381], [151.0, 8.5], [150.0, 7.964912280701755], [149.0, 7.090909090909092], [148.0, 7.111111111111111], [147.0, 7.25], [146.0, 7.424242424242426], [145.0, 7.923076923076923], [144.0, 6.6000000000000005], [159.0, 6.125], [158.0, 6.285714285714286], [157.0, 6.5], [156.0, 6.7857142857142865], [155.0, 7.437499999999999], [154.0, 7.0], [153.0, 7.0], [152.0, 7.7272727272727275], [167.0, 8.471428571428573], [166.0, 8.55], [165.0, 8.488721804511277], [164.0, 7.665217391304345], [163.0, 7.800000000000001], [162.0, 8.244897959183675], [161.0, 7.421568627450981], [160.0, 6.81818181818182], [174.0, 8.818181818181817], [173.0, 9.030927835051546], [171.0, 8.578947368421051], [170.0, 8.227272727272728], [169.0, 8.526315789473687], [168.0, 9.275862068965518], [183.0, 10.645833333333334], [182.0, 8.999999999999998], [181.0, 9.960784313725489], [180.0, 7.3076923076923075], [179.0, 7.357142857142857], [178.0, 8.333333333333334], [177.0, 7.741935483870966], [176.0, 8.0], [184.0, 12.517241379310347], [185.0, 8.035714285714285], [186.0, 9.150943396226417], [188.0, 8.460431654676261], [189.0, 6.666666666666667], [190.0, 8.1], [191.0, 7.538461538461538], [187.0, 9.333333333333332], [192.0, 9.038461538461538], [193.0, 9.0], [195.0, 7.6000000000000005], [196.0, 6.388888888888888], [197.0, 9.142857142857142], [198.0, 8.60714285714286], [199.0, 8.375], [194.0, 8.900763358778628], [200.0, 7.742857142857143], [201.0, 9.215384615384618], [202.0, 7.5], [203.0, 7.923076923076923], [207.0, 45.0], [206.0, 6.714285714285714], [205.0, 9.0], [204.0, 9.142857142857144], [209.0, 11.010752688172044], [208.0, 87.0], [210.0, 33.620689655172406], [212.0, 19.85185185185186], [214.0, 76.5], [215.0, 14.227272727272737], [213.0, 11.341463414634147], [211.0, 12.0], [217.0, 90.3846153846154], [218.0, 45.0888888888889], [219.0, 7.615384615384615], [220.0, 10.346153846153845], [222.0, 7.647058823529413], [223.0, 8.75], [221.0, 10.25], [216.0, 10.923076923076923], [224.0, 7.176470588235294], [225.0, 8.166666666666666], [226.0, 8.941176470588236], [227.0, 7.933333333333333], [228.0, 7.749999999999999], [229.0, 9.4], [230.0, 9.653846153846153], [231.0, 9.886792452830187], [232.0, 9.644067796610168], [233.0, 7.857142857142857], [234.0, 8.235294117647056], [235.0, 9.037037037037038], [239.0, 19.77777777777778], [237.0, 13.340425531914883], [236.0, 8.95555555555556], [238.0, 9.88888888888889], [243.0, 12.37837837837838], [244.0, 12.500000000000002], [245.0, 25.333333333333332], [246.0, 5.8], [247.0, 8.189504373177844], [242.0, 18.08823529411765], [241.0, 15.055555555555555], [240.0, 29.15384615384615], [248.0, 5.833333333333333], [249.0, 4.6], [250.0, 6.9714285714285715], [251.0, 6.1304347826086945], [252.0, 5.964912280701756], [255.0, 259.5714285714286], [254.0, 218.57142857142864], [253.0, 5.5], [256.0, 31.34146341463416], [257.0, 13.093749999999998], [258.0, 4.5555555555555545], [259.0, 5.2], [268.0, 16.04878048780488], [269.0, 15.78518518518518], [270.0, 3.749999999999999], [271.0, 5.712121212121213], [260.0, 5.120253164556964], [261.0, 6.050000000000002], [262.0, 4.518518518518519], [263.0, 5.470588235294118], [264.0, 4.865384615384616], [265.0, 8.253968253968255], [266.0, 6.829787234042552], [267.0, 13.222222222222221], [286.0, 16.879310344827587], [272.0, 10.793103448275861], [274.0, 14.451612903225808], [275.0, 7.5], [273.0, 190.22222222222223], [285.0, 26.38571428571428], [284.0, 18.799999999999994], [283.0, 21.268011527377524], [282.0, 27.892857142857142], [281.0, 31.189189189189182], [287.0, 11.047619047619047], [280.0, 2.0], [279.0, 38.0], [276.0, 2.875], [278.0, 2.0], [277.0, 1.8], [289.0, 28.432748538011705], [288.0, 19.657894736842106], [291.0, 166.96511627906978], [290.0, 19.863636363636363], [300.0, 14.77374224759219], [292.0, 264.9225352112676], [293.0, 67.29629629629628], [295.0, 25.181818181818176], [294.0, 21.866666666666667], [296.0, 16.32530120481928], [297.0, 11.071428571428573], [298.0, 8.740585774058578], [299.0, 8.190476190476192], [1.0, 1.2000000000000006]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[299.4560139296988, 14.763851267995076]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 567211.2333333333, "minX": 1.62667194E12, "maxY": 5245617.65, "series": [{"data": [[1.62667206E12, 2409658.283333333], [1.626672E12, 2421255.6166666667], [1.62667218E12, 2444782.85], [1.62667212E12, 2414511.216666667], [1.62667224E12, 567211.2333333333], [1.62667194E12, 1630777.9666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62667206E12, 5170244.333333333], [1.626672E12, 5191985.516666667], [1.62667218E12, 5245617.65], [1.62667212E12, 5180673.4], [1.62667224E12, 1217019.4166666667], [1.62667194E12, 3483547.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62667224E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14.091581392874295, "minX": 1.62667194E12, "maxY": 15.143734316360108, "series": [{"data": [[1.62667206E12, 14.777785662998848], [1.626672E12, 14.753418340385267], [1.62667218E12, 14.598566821455822], [1.62667212E12, 14.829125547011795], [1.62667224E12, 14.091581392874295], [1.62667194E12, 15.143734316360108]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62667224E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14.091247982691074, "minX": 1.62667194E12, "maxY": 15.141347072016957, "series": [{"data": [[1.62667206E12, 14.777382403526039], [1.626672E12, 14.753149958289155], [1.62667218E12, 14.598158658526646], [1.62667212E12, 14.828654774878865], [1.62667224E12, 14.091247982691074], [1.62667194E12, 15.141347072016957]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62667224E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.02474683881036412, "minX": 1.62667194E12, "maxY": 0.1084339430367697, "series": [{"data": [[1.62667206E12, 0.02974518676841448], [1.626672E12, 0.03021999022856463], [1.62667218E12, 0.02562374454925627], [1.62667212E12, 0.027313949186605187], [1.62667224E12, 0.02474683881036412], [1.62667194E12, 0.1084339430367697]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62667224E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62667194E12, "maxY": 1069.0, "series": [{"data": [[1.62667206E12, 259.0], [1.626672E12, 232.0], [1.62667218E12, 231.0], [1.62667212E12, 1027.0], [1.62667224E12, 220.0], [1.62667194E12, 1069.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62667206E12, 18.0], [1.626672E12, 19.0], [1.62667218E12, 18.0], [1.62667212E12, 17.0], [1.62667224E12, 15.0], [1.62667194E12, 18.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62667206E12, 41.0], [1.626672E12, 39.0], [1.62667218E12, 36.0], [1.62667212E12, 32.0], [1.62667224E12, 32.0], [1.62667194E12, 37.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62667206E12, 21.0], [1.626672E12, 22.0], [1.62667218E12, 21.0], [1.62667212E12, 21.0], [1.62667224E12, 18.0], [1.62667194E12, 20.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62667206E12, 1.0], [1.626672E12, 1.0], [1.62667218E12, 1.0], [1.62667212E12, 1.0], [1.62667224E12, 1.0], [1.62667194E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62667206E12, 14.0], [1.626672E12, 13.0], [1.62667218E12, 14.0], [1.62667212E12, 14.0], [1.62667224E12, 5.0], [1.62667194E12, 14.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62667224E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1144.0, "maxY": 17.0, "series": [{"data": [[17931.0, 12.0], [18211.0, 13.0], [18315.0, 16.0], [18643.0, 13.0], [18843.0, 15.0], [19131.0, 15.0], [19363.0, 14.0], [19355.0, 15.0], [19507.0, 15.0], [20443.0, 14.0], [20403.0, 13.0], [20435.0, 14.0], [20363.0, 14.0], [20339.0, 14.0], [19651.0, 14.0], [20451.0, 14.0], [19483.0, 15.0], [19499.0, 15.0], [19939.0, 15.0], [19843.0, 14.0], [19787.0, 15.0], [19803.0, 15.0], [19851.0, 14.0], [19915.0, 15.0], [19923.0, 14.0], [19747.0, 15.0], [20595.0, 14.0], [20907.0, 13.0], [20667.0, 14.0], [20491.0, 14.0], [20819.0, 14.0], [21139.0, 14.0], [21715.0, 12.0], [14705.0, 14.0], [17250.0, 10.0], [16802.0, 12.0], [18170.0, 16.0], [18586.0, 15.0], [18986.0, 15.0], [18794.0, 11.0], [18786.0, 16.0], [18898.0, 15.0], [19346.0, 15.0], [19290.0, 15.0], [19066.0, 15.0], [19098.0, 15.0], [18922.0, 16.0], [19250.0, 15.0], [19146.0, 15.0], [20322.0, 14.0], [20130.0, 14.0], [20186.0, 12.0], [20266.0, 14.0], [20378.0, 14.0], [20362.0, 14.0], [19962.0, 14.0], [19618.0, 15.0], [19738.0, 15.0], [19890.0, 14.0], [21442.0, 13.0], [21074.0, 13.0], [20538.0, 14.0], [21274.0, 14.0], [21034.0, 13.0], [21018.0, 14.0], [20794.0, 14.0], [20738.0, 14.0], [20914.0, 14.0], [20882.0, 14.0], [20954.0, 13.0], [21082.0, 14.0], [21090.0, 14.0], [21122.0, 14.0], [22234.0, 13.0], [21658.0, 13.0], [18025.0, 15.0], [1144.0, 1.0], [1164.0, 6.0], [18521.0, 12.0], [18649.0, 15.0], [19161.0, 15.0], [19449.0, 15.0], [18721.0, 15.0], [20345.0, 14.0], [20065.0, 14.0], [20369.0, 13.0], [20001.0, 14.0], [20161.0, 14.0], [20193.0, 14.0], [20169.0, 14.0], [19705.0, 15.0], [20241.0, 14.0], [19801.0, 15.0], [19793.0, 14.0], [20337.0, 14.0], [20553.0, 14.0], [21161.0, 13.0], [20745.0, 14.0], [20681.0, 14.0], [21721.0, 13.0], [4982.0, 16.0], [6130.0, 12.0], [6732.0, 15.0], [9704.0, 8.0], [12196.0, 12.0], [14540.0, 11.0], [17352.0, 10.0], [18904.0, 13.0], [19040.0, 15.0], [19240.0, 15.0], [18920.0, 15.0], [18856.0, 16.0], [20304.0, 14.0], [20008.0, 15.0], [20192.0, 14.0], [20208.0, 14.0], [20080.0, 14.0], [20048.0, 14.0], [20144.0, 14.0], [19984.0, 13.0], [20360.0, 14.0], [19928.0, 14.0], [19944.0, 14.0], [19512.0, 15.0], [20232.0, 14.0], [19960.0, 15.0], [19488.0, 15.0], [19752.0, 14.0], [19848.0, 14.0], [19824.0, 14.0], [19792.0, 14.0], [19720.0, 14.0], [19896.0, 14.0], [20688.0, 14.0], [21360.0, 13.0], [21248.0, 13.0], [21288.0, 13.0], [20744.0, 13.0], [20552.0, 14.0], [20952.0, 14.0], [21280.0, 14.0], [20536.0, 14.0], [21544.0, 13.0], [19239.0, 14.0], [19311.0, 15.0], [18839.0, 15.0], [19439.0, 15.0], [18663.0, 15.0], [19391.0, 14.0], [19263.0, 15.0], [19215.0, 15.0], [18495.0, 15.0], [18855.0, 15.0], [19655.0, 14.0], [20047.0, 15.0], [20471.0, 14.0], [20311.0, 14.0], [20071.0, 14.0], [20207.0, 14.0], [19575.0, 15.0], [19559.0, 15.0], [19487.0, 14.0], [19815.0, 14.0], [19855.0, 14.0], [19871.0, 14.0], [19903.0, 15.0], [19967.0, 14.0], [19735.0, 14.0], [20615.0, 14.0], [20935.0, 14.0], [20783.0, 14.0], [21391.0, 14.0], [20591.0, 14.0], [21039.0, 14.0], [21487.0, 14.0], [21031.0, 14.0], [21375.0, 13.0], [21279.0, 13.0], [22047.0, 13.0], [21783.0, 13.0], [18150.0, 12.0], [18422.0, 16.0], [18814.0, 15.0], [19166.0, 15.0], [20334.0, 13.0], [20166.0, 14.0], [20158.0, 14.0], [19462.0, 14.0], [19958.0, 14.0], [19910.0, 14.0], [19470.0, 15.0], [19662.0, 15.0], [19526.0, 15.0], [20350.0, 14.0], [20358.0, 14.0], [19814.0, 14.0], [19766.0, 14.0], [19838.0, 14.0], [19846.0, 15.0], [20982.0, 14.0], [20622.0, 14.0], [20774.0, 14.0], [20950.0, 14.0], [20510.0, 14.0], [21694.0, 13.0], [22094.0, 13.0], [21534.0, 13.0], [22438.0, 13.0], [17765.0, 8.0], [17757.0, 15.0], [18981.0, 16.0], [19453.0, 15.0], [18669.0, 15.0], [18893.0, 15.0], [18789.0, 15.0], [19117.0, 15.0], [18645.0, 15.0], [19693.0, 15.0], [20429.0, 14.0], [20061.0, 14.0], [20077.0, 14.0], [20085.0, 14.0], [20165.0, 14.0], [19557.0, 15.0], [19653.0, 15.0], [19637.0, 14.0], [19845.0, 14.0], [19741.0, 14.0], [19797.0, 14.0], [19805.0, 15.0], [19749.0, 15.0], [19757.0, 14.0], [19717.0, 14.0], [19909.0, 15.0], [19917.0, 14.0], [19469.0, 14.0], [20365.0, 14.0], [20797.0, 14.0], [20837.0, 14.0], [21181.0, 13.0], [20725.0, 14.0], [20981.0, 14.0], [21509.0, 13.0], [21653.0, 13.0], [7839.0, 9.0], [11266.0, 13.0], [16980.0, 17.0], [18004.0, 5.0], [18972.0, 15.0], [19300.0, 15.0], [18588.0, 15.0], [19188.0, 15.0], [19092.0, 15.0], [19044.0, 15.0], [18700.0, 15.0], [18884.0, 15.0], [19028.0, 15.0], [18980.0, 15.0], [19404.0, 15.0], [20460.0, 14.0], [20372.0, 14.0], [19988.0, 14.0], [20220.0, 14.0], [20060.0, 14.0], [20148.0, 14.0], [19668.0, 13.0], [19612.0, 15.0], [19580.0, 14.0], [20476.0, 14.0], [20388.0, 14.0], [20340.0, 14.0], [20300.0, 14.0], [20228.0, 14.0], [20332.0, 14.0], [20364.0, 14.0], [20348.0, 14.0], [19804.0, 14.0], [20532.0, 14.0], [21388.0, 13.0], [20876.0, 13.0], [20948.0, 14.0], [20644.0, 14.0], [20708.0, 14.0], [20620.0, 14.0], [20524.0, 14.0], [20924.0, 14.0], [21772.0, 13.0], [23164.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23164.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1144.0, "maxY": 17.0, "series": [{"data": [[17931.0, 12.0], [18211.0, 13.0], [18315.0, 16.0], [18643.0, 13.0], [18843.0, 15.0], [19131.0, 15.0], [19363.0, 14.0], [19355.0, 15.0], [19507.0, 15.0], [20443.0, 14.0], [20403.0, 13.0], [20435.0, 14.0], [20363.0, 14.0], [20339.0, 14.0], [19651.0, 14.0], [20451.0, 14.0], [19483.0, 15.0], [19499.0, 15.0], [19939.0, 15.0], [19843.0, 14.0], [19787.0, 15.0], [19803.0, 15.0], [19851.0, 14.0], [19915.0, 15.0], [19923.0, 14.0], [19747.0, 15.0], [20595.0, 14.0], [20907.0, 13.0], [20667.0, 14.0], [20491.0, 14.0], [20819.0, 14.0], [21139.0, 14.0], [21715.0, 12.0], [14705.0, 14.0], [17250.0, 10.0], [16802.0, 12.0], [18170.0, 16.0], [18586.0, 15.0], [18986.0, 15.0], [18794.0, 11.0], [18786.0, 16.0], [18898.0, 15.0], [19346.0, 15.0], [19290.0, 15.0], [19066.0, 15.0], [19098.0, 15.0], [18922.0, 16.0], [19250.0, 15.0], [19146.0, 15.0], [20322.0, 14.0], [20130.0, 14.0], [20186.0, 12.0], [20266.0, 14.0], [20378.0, 14.0], [20362.0, 14.0], [19962.0, 14.0], [19618.0, 15.0], [19738.0, 15.0], [19890.0, 14.0], [21442.0, 13.0], [21074.0, 13.0], [20538.0, 14.0], [21274.0, 14.0], [21034.0, 13.0], [21018.0, 14.0], [20794.0, 14.0], [20738.0, 14.0], [20914.0, 14.0], [20882.0, 14.0], [20954.0, 13.0], [21082.0, 14.0], [21090.0, 14.0], [21122.0, 14.0], [22234.0, 13.0], [21658.0, 13.0], [18025.0, 15.0], [1144.0, 1.0], [1164.0, 6.0], [18521.0, 12.0], [18649.0, 15.0], [19161.0, 15.0], [19449.0, 15.0], [18721.0, 15.0], [20345.0, 14.0], [20065.0, 14.0], [20369.0, 13.0], [20001.0, 14.0], [20161.0, 14.0], [20193.0, 14.0], [20169.0, 14.0], [19705.0, 15.0], [20241.0, 14.0], [19801.0, 15.0], [19793.0, 14.0], [20337.0, 14.0], [20553.0, 14.0], [21161.0, 13.0], [20745.0, 14.0], [20681.0, 14.0], [21721.0, 13.0], [4982.0, 16.0], [6130.0, 12.0], [6732.0, 15.0], [9704.0, 8.0], [12196.0, 12.0], [14540.0, 11.0], [17352.0, 10.0], [18904.0, 13.0], [19040.0, 15.0], [19240.0, 15.0], [18920.0, 15.0], [18856.0, 16.0], [20304.0, 14.0], [20008.0, 15.0], [20192.0, 14.0], [20208.0, 14.0], [20080.0, 14.0], [20048.0, 14.0], [20144.0, 14.0], [19984.0, 13.0], [20360.0, 14.0], [19928.0, 14.0], [19944.0, 14.0], [19512.0, 15.0], [20232.0, 14.0], [19960.0, 15.0], [19488.0, 15.0], [19752.0, 14.0], [19848.0, 14.0], [19824.0, 14.0], [19792.0, 14.0], [19720.0, 14.0], [19896.0, 14.0], [20688.0, 14.0], [21360.0, 13.0], [21248.0, 13.0], [21288.0, 13.0], [20744.0, 13.0], [20552.0, 14.0], [20952.0, 14.0], [21280.0, 14.0], [20536.0, 14.0], [21544.0, 13.0], [19239.0, 14.0], [19311.0, 15.0], [18839.0, 15.0], [19439.0, 15.0], [18663.0, 15.0], [19391.0, 14.0], [19263.0, 15.0], [19215.0, 15.0], [18495.0, 15.0], [18855.0, 15.0], [19655.0, 14.0], [20047.0, 15.0], [20471.0, 14.0], [20311.0, 14.0], [20071.0, 14.0], [20207.0, 14.0], [19575.0, 15.0], [19559.0, 15.0], [19487.0, 14.0], [19815.0, 14.0], [19855.0, 14.0], [19871.0, 14.0], [19903.0, 15.0], [19967.0, 14.0], [19735.0, 14.0], [20615.0, 14.0], [20935.0, 14.0], [20783.0, 14.0], [21391.0, 14.0], [20591.0, 14.0], [21039.0, 14.0], [21487.0, 14.0], [21031.0, 14.0], [21375.0, 13.0], [21279.0, 13.0], [22047.0, 13.0], [21783.0, 13.0], [18150.0, 12.0], [18422.0, 16.0], [18814.0, 15.0], [19166.0, 15.0], [20334.0, 13.0], [20166.0, 14.0], [20158.0, 14.0], [19462.0, 14.0], [19958.0, 14.0], [19910.0, 14.0], [19470.0, 15.0], [19662.0, 15.0], [19526.0, 15.0], [20350.0, 14.0], [20358.0, 14.0], [19814.0, 14.0], [19766.0, 14.0], [19838.0, 14.0], [19846.0, 15.0], [20982.0, 14.0], [20622.0, 14.0], [20774.0, 14.0], [20950.0, 14.0], [20510.0, 14.0], [21694.0, 13.0], [22094.0, 13.0], [21534.0, 13.0], [22438.0, 13.0], [17765.0, 8.0], [17757.0, 15.0], [18981.0, 16.0], [19453.0, 15.0], [18669.0, 15.0], [18893.0, 15.0], [18789.0, 15.0], [19117.0, 15.0], [18645.0, 15.0], [19693.0, 15.0], [20429.0, 14.0], [20061.0, 14.0], [20077.0, 14.0], [20085.0, 14.0], [20165.0, 14.0], [19557.0, 15.0], [19653.0, 15.0], [19637.0, 14.0], [19845.0, 14.0], [19741.0, 14.0], [19797.0, 14.0], [19805.0, 15.0], [19749.0, 15.0], [19757.0, 14.0], [19717.0, 14.0], [19909.0, 15.0], [19917.0, 14.0], [19469.0, 14.0], [20365.0, 14.0], [20797.0, 14.0], [20837.0, 14.0], [21181.0, 13.0], [20725.0, 14.0], [20981.0, 14.0], [21509.0, 13.0], [21653.0, 13.0], [7839.0, 9.0], [11266.0, 13.0], [16980.0, 17.0], [18004.0, 5.0], [18972.0, 15.0], [19300.0, 15.0], [18588.0, 15.0], [19188.0, 15.0], [19092.0, 15.0], [19044.0, 15.0], [18700.0, 15.0], [18884.0, 15.0], [19028.0, 15.0], [18980.0, 15.0], [19404.0, 15.0], [20460.0, 14.0], [20372.0, 14.0], [19988.0, 14.0], [20220.0, 14.0], [20060.0, 14.0], [20148.0, 14.0], [19668.0, 13.0], [19612.0, 15.0], [19580.0, 14.0], [20476.0, 14.0], [20388.0, 14.0], [20340.0, 14.0], [20300.0, 14.0], [20228.0, 14.0], [20332.0, 14.0], [20364.0, 14.0], [20348.0, 14.0], [19804.0, 14.0], [20532.0, 14.0], [21388.0, 13.0], [20876.0, 13.0], [20948.0, 14.0], [20644.0, 14.0], [20708.0, 14.0], [20620.0, 14.0], [20524.0, 14.0], [20924.0, 14.0], [21772.0, 13.0], [23164.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23164.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4693.916666666667, "minX": 1.62667194E12, "maxY": 20253.5, "series": [{"data": [[1.62667206E12, 19962.383333333335], [1.626672E12, 20058.333333333332], [1.62667218E12, 20253.5], [1.62667212E12, 20002.533333333333], [1.62667224E12, 4693.916666666667], [1.62667194E12, 13514.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62667224E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4698.916666666667, "minX": 1.62667194E12, "maxY": 20253.35, "series": [{"data": [[1.62667206E12, 19962.333333333332], [1.626672E12, 20058.466666666667], [1.62667218E12, 20253.35], [1.62667212E12, 20002.6], [1.62667224E12, 4698.916666666667], [1.62667194E12, 13509.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62667224E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4698.916666666667, "minX": 1.62667194E12, "maxY": 20253.35, "series": [{"data": [[1.62667206E12, 19962.333333333332], [1.626672E12, 20058.466666666667], [1.62667218E12, 20253.35], [1.62667212E12, 20002.6], [1.62667224E12, 4698.916666666667], [1.62667194E12, 13509.3]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62667224E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4698.916666666667, "minX": 1.62667194E12, "maxY": 20253.35, "series": [{"data": [[1.62667206E12, 19962.333333333332], [1.626672E12, 20058.466666666667], [1.62667218E12, 20253.35], [1.62667212E12, 20002.6], [1.62667224E12, 4698.916666666667], [1.62667194E12, 13509.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62667224E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

