/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2036.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 4.0], [0.3, 5.0], [0.4, 5.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 7.0], [0.9, 7.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 9.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 11.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 16.0], [4.1, 16.0], [4.2, 16.0], [4.3, 16.0], [4.4, 16.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 17.0], [5.1, 17.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 18.0], [5.6, 18.0], [5.7, 18.0], [5.8, 18.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 19.0], [6.3, 19.0], [6.4, 19.0], [6.5, 19.0], [6.6, 19.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 21.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 23.0], [10.4, 23.0], [10.5, 23.0], [10.6, 23.0], [10.7, 23.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 24.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 24.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 24.0], [14.0, 24.0], [14.1, 24.0], [14.2, 24.0], [14.3, 24.0], [14.4, 24.0], [14.5, 24.0], [14.6, 24.0], [14.7, 24.0], [14.8, 24.0], [14.9, 24.0], [15.0, 24.0], [15.1, 24.0], [15.2, 24.0], [15.3, 24.0], [15.4, 24.0], [15.5, 24.0], [15.6, 24.0], [15.7, 24.0], [15.8, 24.0], [15.9, 24.0], [16.0, 24.0], [16.1, 24.0], [16.2, 24.0], [16.3, 24.0], [16.4, 25.0], [16.5, 25.0], [16.6, 25.0], [16.7, 25.0], [16.8, 25.0], [16.9, 25.0], [17.0, 25.0], [17.1, 25.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 25.0], [17.6, 25.0], [17.7, 25.0], [17.8, 25.0], [17.9, 25.0], [18.0, 25.0], [18.1, 25.0], [18.2, 25.0], [18.3, 25.0], [18.4, 25.0], [18.5, 25.0], [18.6, 25.0], [18.7, 25.0], [18.8, 25.0], [18.9, 25.0], [19.0, 25.0], [19.1, 25.0], [19.2, 25.0], [19.3, 25.0], [19.4, 25.0], [19.5, 25.0], [19.6, 25.0], [19.7, 25.0], [19.8, 25.0], [19.9, 25.0], [20.0, 25.0], [20.1, 25.0], [20.2, 25.0], [20.3, 25.0], [20.4, 25.0], [20.5, 25.0], [20.6, 25.0], [20.7, 25.0], [20.8, 25.0], [20.9, 25.0], [21.0, 25.0], [21.1, 25.0], [21.2, 25.0], [21.3, 25.0], [21.4, 25.0], [21.5, 25.0], [21.6, 25.0], [21.7, 25.0], [21.8, 25.0], [21.9, 25.0], [22.0, 25.0], [22.1, 25.0], [22.2, 25.0], [22.3, 25.0], [22.4, 25.0], [22.5, 25.0], [22.6, 25.0], [22.7, 25.0], [22.8, 26.0], [22.9, 26.0], [23.0, 26.0], [23.1, 26.0], [23.2, 26.0], [23.3, 26.0], [23.4, 26.0], [23.5, 26.0], [23.6, 26.0], [23.7, 26.0], [23.8, 26.0], [23.9, 26.0], [24.0, 26.0], [24.1, 26.0], [24.2, 26.0], [24.3, 26.0], [24.4, 26.0], [24.5, 26.0], [24.6, 26.0], [24.7, 26.0], [24.8, 26.0], [24.9, 26.0], [25.0, 26.0], [25.1, 26.0], [25.2, 26.0], [25.3, 26.0], [25.4, 26.0], [25.5, 26.0], [25.6, 26.0], [25.7, 26.0], [25.8, 26.0], [25.9, 26.0], [26.0, 26.0], [26.1, 26.0], [26.2, 26.0], [26.3, 26.0], [26.4, 26.0], [26.5, 26.0], [26.6, 26.0], [26.7, 26.0], [26.8, 26.0], [26.9, 26.0], [27.0, 26.0], [27.1, 26.0], [27.2, 26.0], [27.3, 26.0], [27.4, 26.0], [27.5, 26.0], [27.6, 26.0], [27.7, 26.0], [27.8, 26.0], [27.9, 26.0], [28.0, 26.0], [28.1, 26.0], [28.2, 26.0], [28.3, 26.0], [28.4, 26.0], [28.5, 26.0], [28.6, 26.0], [28.7, 26.0], [28.8, 26.0], [28.9, 26.0], [29.0, 26.0], [29.1, 26.0], [29.2, 26.0], [29.3, 26.0], [29.4, 26.0], [29.5, 26.0], [29.6, 26.0], [29.7, 26.0], [29.8, 26.0], [29.9, 26.0], [30.0, 26.0], [30.1, 26.0], [30.2, 26.0], [30.3, 26.0], [30.4, 26.0], [30.5, 26.0], [30.6, 26.0], [30.7, 26.0], [30.8, 26.0], [30.9, 26.0], [31.0, 26.0], [31.1, 26.0], [31.2, 26.0], [31.3, 26.0], [31.4, 26.0], [31.5, 27.0], [31.6, 27.0], [31.7, 27.0], [31.8, 27.0], [31.9, 27.0], [32.0, 27.0], [32.1, 27.0], [32.2, 27.0], [32.3, 27.0], [32.4, 27.0], [32.5, 27.0], [32.6, 27.0], [32.7, 27.0], [32.8, 27.0], [32.9, 27.0], [33.0, 27.0], [33.1, 27.0], [33.2, 27.0], [33.3, 27.0], [33.4, 27.0], [33.5, 27.0], [33.6, 27.0], [33.7, 27.0], [33.8, 27.0], [33.9, 27.0], [34.0, 27.0], [34.1, 27.0], [34.2, 27.0], [34.3, 27.0], [34.4, 27.0], [34.5, 27.0], [34.6, 27.0], [34.7, 27.0], [34.8, 27.0], [34.9, 27.0], [35.0, 27.0], [35.1, 27.0], [35.2, 27.0], [35.3, 27.0], [35.4, 27.0], [35.5, 27.0], [35.6, 27.0], [35.7, 27.0], [35.8, 27.0], [35.9, 27.0], [36.0, 27.0], [36.1, 27.0], [36.2, 27.0], [36.3, 27.0], [36.4, 27.0], [36.5, 27.0], [36.6, 27.0], [36.7, 27.0], [36.8, 27.0], [36.9, 27.0], [37.0, 27.0], [37.1, 27.0], [37.2, 27.0], [37.3, 27.0], [37.4, 27.0], [37.5, 27.0], [37.6, 27.0], [37.7, 27.0], [37.8, 27.0], [37.9, 27.0], [38.0, 27.0], [38.1, 27.0], [38.2, 27.0], [38.3, 27.0], [38.4, 27.0], [38.5, 27.0], [38.6, 27.0], [38.7, 27.0], [38.8, 27.0], [38.9, 27.0], [39.0, 27.0], [39.1, 27.0], [39.2, 27.0], [39.3, 27.0], [39.4, 27.0], [39.5, 27.0], [39.6, 27.0], [39.7, 27.0], [39.8, 27.0], [39.9, 27.0], [40.0, 27.0], [40.1, 27.0], [40.2, 27.0], [40.3, 27.0], [40.4, 27.0], [40.5, 27.0], [40.6, 27.0], [40.7, 27.0], [40.8, 27.0], [40.9, 27.0], [41.0, 27.0], [41.1, 27.0], [41.2, 27.0], [41.3, 27.0], [41.4, 27.0], [41.5, 27.0], [41.6, 27.0], [41.7, 27.0], [41.8, 27.0], [41.9, 27.0], [42.0, 27.0], [42.1, 27.0], [42.2, 27.0], [42.3, 27.0], [42.4, 27.0], [42.5, 28.0], [42.6, 28.0], [42.7, 28.0], [42.8, 28.0], [42.9, 28.0], [43.0, 28.0], [43.1, 28.0], [43.2, 28.0], [43.3, 28.0], [43.4, 28.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 28.0], [44.3, 28.0], [44.4, 28.0], [44.5, 28.0], [44.6, 28.0], [44.7, 28.0], [44.8, 28.0], [44.9, 28.0], [45.0, 28.0], [45.1, 28.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 28.0], [45.9, 28.0], [46.0, 28.0], [46.1, 28.0], [46.2, 28.0], [46.3, 28.0], [46.4, 28.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 28.0], [48.8, 28.0], [48.9, 28.0], [49.0, 28.0], [49.1, 28.0], [49.2, 28.0], [49.3, 28.0], [49.4, 28.0], [49.5, 28.0], [49.6, 28.0], [49.7, 28.0], [49.8, 28.0], [49.9, 28.0], [50.0, 28.0], [50.1, 28.0], [50.2, 28.0], [50.3, 28.0], [50.4, 28.0], [50.5, 28.0], [50.6, 28.0], [50.7, 28.0], [50.8, 28.0], [50.9, 28.0], [51.0, 28.0], [51.1, 28.0], [51.2, 28.0], [51.3, 28.0], [51.4, 28.0], [51.5, 28.0], [51.6, 28.0], [51.7, 28.0], [51.8, 28.0], [51.9, 28.0], [52.0, 28.0], [52.1, 28.0], [52.2, 28.0], [52.3, 28.0], [52.4, 28.0], [52.5, 28.0], [52.6, 28.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 28.0], [53.2, 28.0], [53.3, 28.0], [53.4, 28.0], [53.5, 28.0], [53.6, 28.0], [53.7, 28.0], [53.8, 28.0], [53.9, 28.0], [54.0, 28.0], [54.1, 28.0], [54.2, 28.0], [54.3, 28.0], [54.4, 28.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 28.0], [55.2, 28.0], [55.3, 28.0], [55.4, 29.0], [55.5, 29.0], [55.6, 29.0], [55.7, 29.0], [55.8, 29.0], [55.9, 29.0], [56.0, 29.0], [56.1, 29.0], [56.2, 29.0], [56.3, 29.0], [56.4, 29.0], [56.5, 29.0], [56.6, 29.0], [56.7, 29.0], [56.8, 29.0], [56.9, 29.0], [57.0, 29.0], [57.1, 29.0], [57.2, 29.0], [57.3, 29.0], [57.4, 29.0], [57.5, 29.0], [57.6, 29.0], [57.7, 29.0], [57.8, 29.0], [57.9, 29.0], [58.0, 29.0], [58.1, 29.0], [58.2, 29.0], [58.3, 29.0], [58.4, 29.0], [58.5, 29.0], [58.6, 29.0], [58.7, 29.0], [58.8, 29.0], [58.9, 29.0], [59.0, 29.0], [59.1, 29.0], [59.2, 29.0], [59.3, 29.0], [59.4, 29.0], [59.5, 29.0], [59.6, 29.0], [59.7, 29.0], [59.8, 29.0], [59.9, 29.0], [60.0, 29.0], [60.1, 29.0], [60.2, 29.0], [60.3, 29.0], [60.4, 29.0], [60.5, 29.0], [60.6, 29.0], [60.7, 29.0], [60.8, 29.0], [60.9, 29.0], [61.0, 29.0], [61.1, 29.0], [61.2, 29.0], [61.3, 29.0], [61.4, 29.0], [61.5, 29.0], [61.6, 29.0], [61.7, 29.0], [61.8, 29.0], [61.9, 29.0], [62.0, 29.0], [62.1, 29.0], [62.2, 29.0], [62.3, 29.0], [62.4, 29.0], [62.5, 29.0], [62.6, 29.0], [62.7, 29.0], [62.8, 29.0], [62.9, 29.0], [63.0, 29.0], [63.1, 29.0], [63.2, 29.0], [63.3, 29.0], [63.4, 29.0], [63.5, 29.0], [63.6, 29.0], [63.7, 29.0], [63.8, 29.0], [63.9, 29.0], [64.0, 29.0], [64.1, 29.0], [64.2, 29.0], [64.3, 29.0], [64.4, 29.0], [64.5, 29.0], [64.6, 29.0], [64.7, 29.0], [64.8, 29.0], [64.9, 29.0], [65.0, 29.0], [65.1, 29.0], [65.2, 29.0], [65.3, 29.0], [65.4, 29.0], [65.5, 29.0], [65.6, 29.0], [65.7, 29.0], [65.8, 29.0], [65.9, 29.0], [66.0, 29.0], [66.1, 29.0], [66.2, 29.0], [66.3, 29.0], [66.4, 29.0], [66.5, 29.0], [66.6, 29.0], [66.7, 29.0], [66.8, 29.0], [66.9, 29.0], [67.0, 29.0], [67.1, 29.0], [67.2, 30.0], [67.3, 30.0], [67.4, 30.0], [67.5, 30.0], [67.6, 30.0], [67.7, 30.0], [67.8, 30.0], [67.9, 30.0], [68.0, 30.0], [68.1, 30.0], [68.2, 30.0], [68.3, 30.0], [68.4, 30.0], [68.5, 30.0], [68.6, 30.0], [68.7, 30.0], [68.8, 30.0], [68.9, 30.0], [69.0, 30.0], [69.1, 30.0], [69.2, 30.0], [69.3, 30.0], [69.4, 30.0], [69.5, 30.0], [69.6, 30.0], [69.7, 30.0], [69.8, 30.0], [69.9, 30.0], [70.0, 30.0], [70.1, 30.0], [70.2, 30.0], [70.3, 30.0], [70.4, 30.0], [70.5, 30.0], [70.6, 30.0], [70.7, 30.0], [70.8, 30.0], [70.9, 30.0], [71.0, 30.0], [71.1, 30.0], [71.2, 30.0], [71.3, 30.0], [71.4, 30.0], [71.5, 30.0], [71.6, 30.0], [71.7, 30.0], [71.8, 30.0], [71.9, 30.0], [72.0, 30.0], [72.1, 30.0], [72.2, 30.0], [72.3, 30.0], [72.4, 30.0], [72.5, 30.0], [72.6, 30.0], [72.7, 30.0], [72.8, 30.0], [72.9, 30.0], [73.0, 30.0], [73.1, 30.0], [73.2, 30.0], [73.3, 30.0], [73.4, 30.0], [73.5, 30.0], [73.6, 30.0], [73.7, 30.0], [73.8, 30.0], [73.9, 30.0], [74.0, 30.0], [74.1, 30.0], [74.2, 30.0], [74.3, 30.0], [74.4, 30.0], [74.5, 30.0], [74.6, 30.0], [74.7, 30.0], [74.8, 30.0], [74.9, 30.0], [75.0, 30.0], [75.1, 30.0], [75.2, 30.0], [75.3, 30.0], [75.4, 30.0], [75.5, 31.0], [75.6, 31.0], [75.7, 31.0], [75.8, 31.0], [75.9, 31.0], [76.0, 31.0], [76.1, 31.0], [76.2, 31.0], [76.3, 31.0], [76.4, 31.0], [76.5, 31.0], [76.6, 31.0], [76.7, 31.0], [76.8, 31.0], [76.9, 31.0], [77.0, 31.0], [77.1, 31.0], [77.2, 31.0], [77.3, 31.0], [77.4, 31.0], [77.5, 31.0], [77.6, 31.0], [77.7, 31.0], [77.8, 31.0], [77.9, 31.0], [78.0, 31.0], [78.1, 31.0], [78.2, 31.0], [78.3, 31.0], [78.4, 31.0], [78.5, 31.0], [78.6, 31.0], [78.7, 31.0], [78.8, 31.0], [78.9, 31.0], [79.0, 31.0], [79.1, 31.0], [79.2, 31.0], [79.3, 31.0], [79.4, 31.0], [79.5, 31.0], [79.6, 31.0], [79.7, 31.0], [79.8, 31.0], [79.9, 31.0], [80.0, 31.0], [80.1, 31.0], [80.2, 31.0], [80.3, 31.0], [80.4, 31.0], [80.5, 31.0], [80.6, 31.0], [80.7, 31.0], [80.8, 31.0], [80.9, 31.0], [81.0, 32.0], [81.1, 32.0], [81.2, 32.0], [81.3, 32.0], [81.4, 32.0], [81.5, 32.0], [81.6, 32.0], [81.7, 32.0], [81.8, 32.0], [81.9, 32.0], [82.0, 32.0], [82.1, 32.0], [82.2, 32.0], [82.3, 32.0], [82.4, 32.0], [82.5, 32.0], [82.6, 32.0], [82.7, 32.0], [82.8, 32.0], [82.9, 32.0], [83.0, 32.0], [83.1, 32.0], [83.2, 32.0], [83.3, 32.0], [83.4, 32.0], [83.5, 32.0], [83.6, 32.0], [83.7, 32.0], [83.8, 32.0], [83.9, 32.0], [84.0, 32.0], [84.1, 32.0], [84.2, 32.0], [84.3, 32.0], [84.4, 32.0], [84.5, 32.0], [84.6, 32.0], [84.7, 32.0], [84.8, 33.0], [84.9, 33.0], [85.0, 33.0], [85.1, 33.0], [85.2, 33.0], [85.3, 33.0], [85.4, 33.0], [85.5, 33.0], [85.6, 33.0], [85.7, 33.0], [85.8, 33.0], [85.9, 33.0], [86.0, 33.0], [86.1, 33.0], [86.2, 33.0], [86.3, 33.0], [86.4, 33.0], [86.5, 33.0], [86.6, 33.0], [86.7, 33.0], [86.8, 33.0], [86.9, 33.0], [87.0, 33.0], [87.1, 33.0], [87.2, 33.0], [87.3, 33.0], [87.4, 33.0], [87.5, 33.0], [87.6, 34.0], [87.7, 34.0], [87.8, 34.0], [87.9, 34.0], [88.0, 34.0], [88.1, 34.0], [88.2, 34.0], [88.3, 34.0], [88.4, 34.0], [88.5, 34.0], [88.6, 34.0], [88.7, 34.0], [88.8, 34.0], [88.9, 34.0], [89.0, 34.0], [89.1, 34.0], [89.2, 34.0], [89.3, 34.0], [89.4, 34.0], [89.5, 34.0], [89.6, 34.0], [89.7, 35.0], [89.8, 35.0], [89.9, 35.0], [90.0, 35.0], [90.1, 35.0], [90.2, 35.0], [90.3, 35.0], [90.4, 35.0], [90.5, 35.0], [90.6, 35.0], [90.7, 35.0], [90.8, 35.0], [90.9, 35.0], [91.0, 35.0], [91.1, 36.0], [91.2, 36.0], [91.3, 36.0], [91.4, 36.0], [91.5, 36.0], [91.6, 36.0], [91.7, 36.0], [91.8, 36.0], [91.9, 36.0], [92.0, 36.0], [92.1, 36.0], [92.2, 37.0], [92.3, 37.0], [92.4, 37.0], [92.5, 37.0], [92.6, 37.0], [92.7, 37.0], [92.8, 37.0], [92.9, 38.0], [93.0, 38.0], [93.1, 38.0], [93.2, 38.0], [93.3, 38.0], [93.4, 38.0], [93.5, 39.0], [93.6, 39.0], [93.7, 39.0], [93.8, 39.0], [93.9, 40.0], [94.0, 40.0], [94.1, 40.0], [94.2, 41.0], [94.3, 41.0], [94.4, 41.0], [94.5, 42.0], [94.6, 42.0], [94.7, 42.0], [94.8, 43.0], [94.9, 44.0], [95.0, 44.0], [95.1, 45.0], [95.2, 46.0], [95.3, 46.0], [95.4, 47.0], [95.5, 48.0], [95.6, 49.0], [95.7, 49.0], [95.8, 50.0], [95.9, 51.0], [96.0, 52.0], [96.1, 53.0], [96.2, 54.0], [96.3, 55.0], [96.4, 56.0], [96.5, 57.0], [96.6, 59.0], [96.7, 60.0], [96.8, 61.0], [96.9, 62.0], [97.0, 63.0], [97.1, 65.0], [97.2, 66.0], [97.3, 67.0], [97.4, 68.0], [97.5, 70.0], [97.6, 71.0], [97.7, 72.0], [97.8, 73.0], [97.9, 75.0], [98.0, 76.0], [98.1, 77.0], [98.2, 78.0], [98.3, 80.0], [98.4, 81.0], [98.5, 83.0], [98.6, 84.0], [98.7, 85.0], [98.8, 87.0], [98.9, 89.0], [99.0, 90.0], [99.1, 92.0], [99.2, 95.0], [99.3, 98.0], [99.4, 101.0], [99.5, 108.0], [99.6, 115.0], [99.7, 123.0], [99.8, 157.0], [99.9, 243.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5890824.0, "series": [{"data": [[0.0, 5890824.0], [600.0, 118.0], [700.0, 82.0], [800.0, 89.0], [200.0, 8304.0], [900.0, 115.0], [1000.0, 124.0], [1100.0, 21.0], [1200.0, 47.0], [300.0, 1046.0], [1300.0, 6.0], [1400.0, 2.0], [1500.0, 20.0], [400.0, 512.0], [1600.0, 70.0], [100.0, 27459.0], [1700.0, 2.0], [500.0, 85.0], [2000.0, 1.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5928148.0, "series": [{"data": [[0.0, 5928148.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 686.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 93.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 496.445539978433, "minX": 1.62666198E12, "maxY": 600.0, "series": [{"data": [[1.62666222E12, 600.0], [1.62666204E12, 600.0], [1.62666216E12, 600.0], [1.62666198E12, 600.0], [1.62666228E12, 496.445539978433], [1.6266621E12, 600.0]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666228E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 221.0, "series": [{"data": [[2.0, 4.0], [3.0, 221.0], [5.0, 5.0], [6.0, 1.0], [7.0, 4.25], [8.0, 6.0], [9.0, 4.25], [10.0, 4.0], [11.0, 4.0], [12.0, 3.6666666666666665], [13.0, 5.0], [15.0, 4.363636363636364], [16.0, 3.818181818181818], [17.0, 3.5], [18.0, 2.0], [19.0, 3.1944444444444446], [20.0, 2.6666666666666665], [21.0, 3.5], [22.0, 4.0], [23.0, 3.45], [24.0, 2.5], [25.0, 4.1], [26.0, 4.1], [27.0, 3.4444444444444446], [28.0, 3.8], [29.0, 5.9638554216867465], [30.0, 3.7777777777777777], [33.0, 4.6000000000000005], [32.0, 3.571428571428571], [35.0, 3.75], [34.0, 3.894736842105263], [37.0, 2.9999999999999996], [36.0, 3.866666666666666], [39.0, 3.4799999999999995], [38.0, 3.0714285714285716], [41.0, 4.222222222222221], [40.0, 3.244897959183674], [43.0, 7.5], [42.0, 5.562499999999999], [45.0, 5.9375], [47.0, 4.7], [46.0, 5.75], [49.0, 4.7], [48.0, 4.3076923076923075], [51.0, 5.352941176470588], [50.0, 5.142857142857143], [53.0, 5.75], [52.0, 4.333333333333334], [55.0, 6.0], [54.0, 6.705882352941177], [57.0, 6.479999999999999], [56.0, 5.199999999999999], [59.0, 4.666666666666667], [58.0, 5.25], [60.0, 5.249999999999999], [63.0, 17.294117647058822], [67.0, 5.068965517241379], [66.0, 4.0], [65.0, 4.378378378378378], [64.0, 4.5], [71.0, 9.0], [70.0, 3.621621621621621], [69.0, 3.875], [68.0, 4.0], [75.0, 6.142857142857142], [74.0, 5.7], [73.0, 5.545454545454545], [72.0, 3.8095238095238093], [79.0, 4.900000000000001], [78.0, 4.857142857142858], [77.0, 5.0], [76.0, 6.076923076923075], [83.0, 4.609756097560977], [82.0, 4.636363636363636], [81.0, 4.428571428571428], [80.0, 4.175438596491227], [87.0, 5.898305084745764], [86.0, 4.198275862068966], [85.0, 3.0], [84.0, 4.3999999999999995], [91.0, 6.666666666666667], [90.0, 5.0], [89.0, 5.590909090909091], [88.0, 6.476190476190477], [95.0, 3.5], [94.0, 4.671428571428572], [93.0, 4.588235294117647], [92.0, 5.655172413793102], [99.0, 7.0], [98.0, 5.288461538461539], [97.0, 6.615384615384615], [96.0, 5.8717948717948705], [103.0, 4.074074074074074], [102.0, 4.428571428571431], [101.0, 7.5], [100.0, 3.72], [107.0, 4.725], [106.0, 2.0], [105.0, 4.285714285714286], [104.0, 4.692307692307692], [111.0, 6.333333333333333], [110.0, 5.090909090909091], [109.0, 13.88], [108.0, 4.777777777777777], [115.0, 5.0], [114.0, 4.333333333333333], [113.0, 5.031034482758623], [112.0, 7.0], [119.0, 5.555555555555555], [118.0, 5.571428571428571], [117.0, 5.999999999999999], [116.0, 5.560975609756097], [123.0, 6.324999999999999], [122.0, 5.319148936170213], [121.0, 4.888888888888888], [120.0, 6.125], [127.0, 6.142857142857142], [126.0, 6.0], [125.0, 5.507462686567163], [124.0, 4.8], [135.0, 9.53488372093023], [134.0, 9.272727272727275], [133.0, 6.655172413793104], [132.0, 5.822222222222219], [131.0, 5.80952380952381], [130.0, 5.65625], [129.0, 6.08695652173913], [128.0, 5.96774193548387], [142.0, 8.33333333333333], [141.0, 8.799999999999999], [140.0, 9.949999999999998], [139.0, 12.0], [138.0, 11.85714285714286], [137.0, 10.5], [136.0, 9.5], [151.0, 6.974999999999999], [150.0, 7.187499999999999], [149.0, 7.016949152542371], [148.0, 10.072463768115945], [147.0, 7.681818181818182], [146.0, 7.917525773195877], [145.0, 10.589041095890408], [144.0, 7.655172413793102], [159.0, 11.379310344827584], [158.0, 12.705882352941178], [157.0, 5.75], [156.0, 10.749999999999998], [155.0, 7.537634408602149], [154.0, 7.257142857142856], [153.0, 7.0386473429951675], [152.0, 6.500000000000001], [167.0, 7.562499999999999], [165.0, 7.548611111111111], [164.0, 7.5], [163.0, 8.052631578947368], [162.0, 7.767441860465115], [161.0, 8.928571428571429], [160.0, 8.555555555555555], [175.0, 7.971428571428571], [174.0, 6.39622641509434], [173.0, 6.090909090909092], [172.0, 12.72972972972973], [171.0, 7.654205607476633], [170.0, 7.980769230769231], [169.0, 7.800000000000001], [168.0, 7.7124999999999995], [183.0, 17.82051282051282], [182.0, 12.193548387096776], [181.0, 9.681818181818182], [180.0, 9.358974358974358], [179.0, 12.96], [178.0, 11.09090909090909], [177.0, 5.541666666666666], [176.0, 6.166666666666666], [191.0, 7.710526315789473], [190.0, 8.285714285714285], [189.0, 8.417582417582418], [188.0, 8.756756756756756], [187.0, 11.430000000000001], [186.0, 16.4], [185.0, 17.26923076923077], [184.0, 17.392857142857142], [199.0, 8.5], [198.0, 9.125], [197.0, 8.25], [196.0, 9.00386847195358], [195.0, 6.0], [194.0, 9.833333333333334], [193.0, 8.374999999999996], [192.0, 8.756410256410254], [207.0, 9.612903225806454], [206.0, 9.718750000000002], [205.0, 9.694444444444443], [204.0, 9.866666666666665], [203.0, 9.526315789473687], [202.0, 9.190476190476195], [201.0, 8.611111111111112], [200.0, 7.0], [215.0, 10.0625], [214.0, 9.979591836734695], [213.0, 9.177777777777777], [212.0, 9.0], [211.0, 14.404255319148936], [210.0, 9.75409836065574], [209.0, 9.605263157894736], [208.0, 9.567164179104477], [223.0, 13.323529411764703], [222.0, 14.782608695652174], [221.0, 11.18085106382979], [220.0, 10.436548223350252], [219.0, 10.0], [218.0, 10.684210526315788], [217.0, 10.736842105263156], [216.0, 10.400000000000004], [231.0, 10.333333333333334], [230.0, 11.450000000000001], [229.0, 13.925], [228.0, 14.600000000000001], [227.0, 13.5], [226.0, 13.606060606060602], [225.0, 14.166666666666666], [224.0, 13.372093023255813], [239.0, 12.9375], [238.0, 13.833333333333334], [237.0, 12.835443037974686], [236.0, 11.75], [235.0, 12.214285714285714], [234.0, 11.988235294117647], [232.0, 11.057142857142859], [247.0, 12.260869565217389], [246.0, 12.615384615384613], [245.0, 12.760869565217394], [244.0, 12.666666666666666], [243.0, 13.75], [242.0, 12.53846153846154], [241.0, 12.722222222222223], [240.0, 13.5], [255.0, 12.789473684210527], [254.0, 12.362068965517242], [253.0, 12.531249999999996], [252.0, 11.71641791044776], [250.0, 11.666666666666666], [249.0, 11.805970149253731], [248.0, 11.862068965517238], [270.0, 14.123222748815166], [271.0, 14.46875], [268.0, 13.90909090909091], [259.0, 13.513513513513512], [258.0, 13.18421052631579], [257.0, 13.27906976744186], [256.0, 12.71794871794872], [267.0, 13.611764705882354], [266.0, 13.333333333333334], [265.0, 13.894736842105264], [264.0, 14.318181818181817], [263.0, 14.894736842105264], [262.0, 13.5], [261.0, 14.333333333333334], [260.0, 14.318181818181817], [286.0, 14.606060606060607], [287.0, 15.333333333333334], [285.0, 14.793103448275861], [284.0, 15.083333333333334], [283.0, 14.934426229508196], [282.0, 15.125000000000002], [281.0, 15.66], [280.0, 15.615384615384617], [279.0, 15.38095238095238], [273.0, 14.933333333333335], [272.0, 15.347222222222225], [275.0, 14.0], [274.0, 15.380952380952381], [278.0, 15.673913043478265], [277.0, 15.19642857142857], [276.0, 14.88888888888889], [302.0, 15.346153846153847], [303.0, 16.083333333333336], [301.0, 14.058823529411764], [300.0, 15.439024390243903], [299.0, 13.830985915492958], [298.0, 12.0], [297.0, 12.214285714285715], [296.0, 12.305555555555555], [295.0, 13.625000000000005], [289.0, 15.125], [288.0, 14.841666666666661], [291.0, 13.0], [290.0, 14.956521739130435], [294.0, 12.285714285714285], [293.0, 13.181249999999995], [292.0, 14.124463519313306], [318.0, 14.585034013605444], [319.0, 14.458333333333334], [317.0, 11.4], [316.0, 15.48387096774193], [315.0, 12.619047619047619], [314.0, 12.40909090909091], [313.0, 13.277777777777779], [312.0, 13.321428571428571], [311.0, 14.564516129032256], [305.0, 16.36842105263158], [304.0, 15.86363636363636], [307.0, 15.982758620689665], [306.0, 15.4], [310.0, 15.861111111111112], [309.0, 15.792452830188681], [308.0, 16.263157894736842], [334.0, 35.405405405405425], [335.0, 24.36842105263158], [333.0, 15.0], [332.0, 13.39583333333333], [331.0, 13.416666666666666], [329.0, 14.349206349206352], [328.0, 14.41666666666667], [327.0, 15.75], [321.0, 12.666666666666666], [320.0, 14.309523809523808], [323.0, 19.0], [322.0, 12.967741935483872], [326.0, 14.318181818181822], [325.0, 13.017241379310343], [324.0, 13.342465753424657], [350.0, 23.666666666666668], [351.0, 6.0], [349.0, 19.166666666666668], [348.0, 36.12244897959185], [347.0, 31.18181818181818], [346.0, 11.0], [345.0, 21.354166666666668], [344.0, 33.88571428571429], [343.0, 21.42857142857143], [337.0, 28.842105263157897], [336.0, 13.666666666666666], [339.0, 14.0], [338.0, 12.25], [342.0, 12.545454545454545], [341.0, 29.285714285714285], [340.0, 22.368421052631575], [366.0, 24.90476190476191], [367.0, 24.814814814814817], [365.0, 25.03030303030303], [364.0, 24.727272727272727], [363.0, 24.25], [362.0, 24.749999999999996], [361.0, 24.842105263157894], [360.0, 19.217171717171713], [359.0, 14.416666666666668], [353.0, 14.76923076923077], [352.0, 23.000000000000004], [355.0, 6.0], [354.0, 4.0], [358.0, 15.047619047619046], [357.0, 11.283582089552246], [356.0, 16.83898305084746], [382.0, 30.666666666666664], [383.0, 33.050505050505045], [381.0, 30.351851851851844], [380.0, 29.695833333333347], [379.0, 17.718750000000007], [378.0, 18.232954545454543], [377.0, 24.79289940828402], [376.0, 26.404494382022463], [375.0, 25.970873786407775], [369.0, 25.333333333333332], [368.0, 24.727272727272723], [371.0, 24.428571428571427], [370.0, 25.625], [374.0, 25.479999999999997], [373.0, 25.09090909090909], [372.0, 24.903225806451612], [397.0, 26.088235294117645], [399.0, 25.192307692307693], [396.0, 32.78125000000001], [387.0, 23.73684210526316], [386.0, 24.322580645161292], [385.0, 25.196078431372545], [384.0, 25.625], [395.0, 24.733333333333345], [394.0, 24.25], [393.0, 23.625000000000007], [392.0, 22.666666666666668], [391.0, 25.5], [390.0, 23.1375], [389.0, 23.20588235294118], [388.0, 22.957446808510635], [414.0, 24.83783783783784], [415.0, 25.511627906976745], [413.0, 22.677777777777774], [412.0, 20.04950495049504], [411.0, 19.50769230769231], [410.0, 20.794117647058826], [409.0, 21.579710144927542], [408.0, 23.111111111111107], [407.0, 22.612499999999994], [401.0, 24.383333333333333], [400.0, 24.805194805194798], [403.0, 23.08602150537635], [402.0, 23.965517241379313], [406.0, 21.928571428571423], [405.0, 21.615384615384617], [404.0, 21.965909090909093], [430.0, 24.400000000000002], [431.0, 22.529411764705884], [429.0, 28.46408839779006], [428.0, 29.16528925619835], [427.0, 26.988764044943814], [426.0, 23.766666666666676], [425.0, 26.030303030303024], [424.0, 27.0], [423.0, 25.894736842105264], [417.0, 25.416666666666664], [416.0, 24.0625], [419.0, 25.461538461538467], [418.0, 25.18181818181818], [421.0, 26.333333333333332], [420.0, 26.0], [446.0, 22.0], [447.0, 23.073394495412835], [445.0, 21.363636363636363], [444.0, 22.777777777777775], [443.0, 22.486842105263165], [442.0, 23.11874999999999], [441.0, 22.781250000000004], [440.0, 23.244444444444447], [439.0, 23.05263157894737], [433.0, 21.955056179775298], [432.0, 21.771428571428572], [435.0, 21.818181818181817], [434.0, 21.76190476190476], [438.0, 22.707317073170735], [437.0, 22.187500000000004], [436.0, 22.227272727272727], [462.0, 24.142857142857142], [463.0, 24.12727272727273], [461.0, 24.627906976744185], [460.0, 24.431034482758626], [459.0, 25.125], [458.0, 24.391304347826093], [457.0, 23.6], [456.0, 24.375], [455.0, 25.30514705882354], [449.0, 23.63157894736842], [448.0, 24.0], [451.0, 23.717391304347824], [450.0, 23.0], [454.0, 23.935483870967744], [453.0, 23.733333333333338], [452.0, 23.666666666666668], [476.0, 21.0], [478.0, 22.0], [479.0, 23.424242424242426], [477.0, 23.0], [474.0, 23.571428571428573], [473.0, 22.486486486486484], [471.0, 25.0], [465.0, 23.0], [467.0, 23.666666666666668], [466.0, 25.0], [470.0, 23.0], [469.0, 25.0], [468.0, 23.6], [495.0, 21.400000000000002], [494.0, 23.0], [483.0, 22.38888888888889], [482.0, 22.60714285714286], [481.0, 22.647058823529417], [480.0, 22.555555555555557], [491.0, 22.0], [490.0, 21.900000000000002], [489.0, 22.666666666666668], [488.0, 21.230769230769234], [487.0, 22.218750000000004], [486.0, 26.0], [485.0, 23.6], [484.0, 22.333333333333332], [510.0, 22.0], [511.0, 19.0], [509.0, 19.0], [508.0, 21.333333333333332], [507.0, 19.38888888888889], [506.0, 18.38297872340425], [505.0, 18.8], [504.0, 20.88888888888889], [503.0, 19.421052631578945], [497.0, 20.92592592592592], [496.0, 21.000000000000004], [499.0, 20.0], [498.0, 21.090909090909093], [502.0, 20.12499999999999], [501.0, 20.35897435897436], [537.0, 99.78571428571426], [542.0, 78.27272727272728], [543.0, 9.333333333333334], [529.0, 19.0], [528.0, 79.99999999999999], [531.0, 12.5], [530.0, 78.7741935483871], [533.0, 71.22222222222223], [532.0, 74.49999999999997], [541.0, 89.5], [540.0, 90.25], [538.0, 112.66666666666667], [536.0, 74.71875], [519.0, 51.16216216216216], [518.0, 58.40909090909091], [517.0, 55.121212121212125], [516.0, 16.0], [514.0, 17.5], [513.0, 15.333333333333334], [512.0, 18.666666666666668], [527.0, 87.06666666666668], [526.0, 78.86046511627909], [525.0, 59.754838709677436], [524.0, 51.763636363636365], [523.0, 66.77777777777777], [522.0, 55.36363636363636], [521.0, 54.66666666666667], [520.0, 58.79166666666667], [535.0, 168.0], [534.0, 43.2], [572.0, 15.571428571428571], [575.0, 37.0], [561.0, 64.83333333333334], [560.0, 53.888888888888886], [563.0, 54.0], [562.0, 55.5], [565.0, 80.92000000000002], [564.0, 78.91891891891893], [574.0, 7.0], [573.0, 31.499999999999996], [571.0, 88.83333333333331], [570.0, 91.39999999999998], [569.0, 66.64999999999998], [568.0, 35.4], [559.0, 71.38787878787876], [545.0, 85.50000000000001], [544.0, 72.60000000000001], [547.0, 86.83333333333333], [546.0, 9.666666666666666], [549.0, 71.2], [548.0, 59.666666666666664], [551.0, 106.66666666666666], [550.0, 86.5], [558.0, 99.41666666666666], [557.0, 77.28571428571429], [556.0, 79.03999999999996], [555.0, 68.19999999999999], [554.0, 60.52631578947367], [553.0, 44.64], [552.0, 69.6], [567.0, 22.52083333333333], [566.0, 5.0], [592.0, 31.5], [600.0, 30.076773628928038], [599.0, 32.19148936170214], [597.0, 33.5], [593.0, 63.00000000000001], [591.0, 30.0], [584.0, 13.714285714285715], [585.0, 66.0], [586.0, 3.0], [589.0, 3.5], [590.0, 2.0], [583.0, 21.642857142857142], [582.0, 68.75], [581.0, 41.0], [579.0, 16.333333333333332], [578.0, 23.63157894736842], [577.0, 27.72727272727273], [576.0, 81.19999999999999], [1.0, 215.0]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[598.8662815379514, 30.033987600116006]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 130584.76666666666, "minX": 1.62666198E12, "maxY": 5409998.833333333, "series": [{"data": [[1.62666222E12, 2495811.1333333333], [1.62666204E12, 2522158.316666667], [1.62666216E12, 2493685.0833333335], [1.62666198E12, 1816865.45], [1.62666228E12, 130584.76666666666], [1.6266621E12, 2469050.933333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62666222E12, 5355096.95], [1.62666204E12, 5409998.833333333], [1.62666216E12, 5350547.183333334], [1.62666198E12, 3881155.75], [1.62666228E12, 280194.8333333333], [1.6266621E12, 5297689.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666228E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.26097673702048, "minX": 1.62666198E12, "maxY": 37.570255530023005, "series": [{"data": [[1.62666222E12, 28.746598117145027], [1.62666204E12, 28.430752933819743], [1.62666216E12, 28.77076971607321], [1.62666198E12, 37.570255530023005], [1.62666228E12, 25.26097673702048], [1.6266621E12, 28.956094206298562]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666228E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.258496379602608, "minX": 1.62666198E12, "maxY": 37.56994103153083, "series": [{"data": [[1.62666222E12, 28.74633936365993], [1.62666204E12, 28.430480131711104], [1.62666216E12, 28.77049218682593], [1.62666198E12, 37.56994103153083], [1.62666228E12, 25.258496379602608], [1.6266621E12, 28.955843241551825]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666228E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04937605915883538, "minX": 1.62666198E12, "maxY": 0.29082472799756925, "series": [{"data": [[1.62666222E12, 0.06527842600496747], [1.62666204E12, 0.06334433050214615], [1.62666216E12, 0.06086845678409727], [1.62666198E12, 0.29082472799756925], [1.62666228E12, 0.04937605915883538], [1.6266621E12, 0.061190583281184964]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666228E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62666198E12, "maxY": 2036.0, "series": [{"data": [[1.62666222E12, 1082.0], [1.62666204E12, 1101.0], [1.62666216E12, 1065.0], [1.62666198E12, 2036.0], [1.62666228E12, 286.0], [1.6266621E12, 1090.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62666222E12, 34.0], [1.62666204E12, 34.0], [1.62666216E12, 32.0], [1.62666198E12, 33.0], [1.62666228E12, 25.0], [1.6266621E12, 34.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62666222E12, 73.0], [1.62666204E12, 77.0], [1.62666216E12, 63.0], [1.62666198E12, 76.0], [1.62666228E12, 48.9900000000016], [1.6266621E12, 55.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62666222E12, 39.0], [1.62666204E12, 39.0], [1.62666216E12, 34.0], [1.62666198E12, 39.0], [1.62666228E12, 28.0], [1.6266621E12, 38.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62666222E12, 1.0], [1.62666204E12, 1.0], [1.62666216E12, 1.0], [1.62666198E12, 1.0], [1.62666228E12, 1.0], [1.6266621E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62666222E12, 29.0], [1.62666204E12, 28.0], [1.62666216E12, 27.0], [1.62666198E12, 27.0], [1.62666228E12, 13.0], [1.6266621E12, 29.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666228E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 474.0, "maxY": 907.5, "series": [{"data": [[19299.0, 30.0], [19051.0, 31.0], [20315.0, 29.0], [20307.0, 29.0], [20475.0, 27.0], [20131.0, 29.0], [20115.0, 29.0], [19731.0, 30.0], [19835.0, 29.0], [20283.0, 29.0], [20227.0, 29.0], [20371.0, 28.0], [20339.0, 28.0], [20611.0, 28.0], [21347.0, 27.0], [20859.0, 28.0], [20803.0, 27.0], [20827.0, 28.0], [20771.0, 28.0], [20763.0, 28.0], [20795.0, 28.0], [20483.0, 29.0], [20515.0, 28.0], [20579.0, 28.0], [20499.0, 28.0], [21067.0, 28.0], [21131.0, 28.0], [20731.0, 29.0], [20715.0, 28.0], [20651.0, 29.0], [21459.0, 27.0], [21547.0, 27.0], [21723.0, 27.0], [21531.0, 28.0], [21643.0, 27.0], [22363.0, 26.0], [21827.0, 27.0], [11149.0, 52.0], [14661.0, 27.0], [19266.0, 29.0], [18738.0, 30.0], [20322.0, 29.0], [19546.0, 29.0], [20050.0, 29.0], [19834.0, 29.0], [19466.0, 29.0], [20106.0, 29.0], [20170.0, 29.0], [20218.0, 29.0], [20114.0, 29.0], [20402.0, 29.0], [20378.0, 29.0], [20346.0, 28.0], [19610.0, 29.0], [20234.0, 29.0], [20538.0, 28.0], [20730.0, 28.0], [21258.0, 27.0], [21426.0, 27.0], [20930.0, 28.0], [20802.0, 28.0], [20738.0, 28.0], [20770.0, 28.0], [20754.0, 28.0], [20602.0, 29.0], [20714.0, 28.0], [20690.0, 28.0], [21450.0, 26.0], [21098.0, 27.0], [21434.0, 28.0], [21554.0, 26.0], [21618.0, 27.0], [21602.0, 27.0], [21658.0, 26.0], [21994.0, 26.0], [22554.0, 25.0], [474.0, 907.5], [20417.0, 29.0], [20273.0, 28.0], [19689.0, 29.0], [19593.0, 28.0], [19833.0, 28.0], [19497.0, 30.0], [20177.0, 29.0], [20137.0, 29.0], [20473.0, 28.0], [20345.0, 29.0], [20673.0, 27.0], [20489.0, 28.0], [20497.0, 28.0], [20569.0, 29.0], [20953.0, 26.0], [20809.0, 27.0], [20817.0, 28.0], [20761.0, 28.0], [20681.0, 28.0], [20921.0, 28.0], [20841.0, 28.0], [20873.0, 27.0], [20825.0, 28.0], [21225.0, 28.0], [21241.0, 27.0], [21233.0, 27.0], [21265.0, 28.0], [20705.0, 28.0], [21401.0, 27.0], [21217.0, 27.0], [21017.0, 28.0], [21273.0, 28.0], [21929.0, 27.0], [21873.0, 27.0], [1753.0, 374.0], [2528.0, 268.0], [5734.0, 102.0], [6318.0, 94.0], [7074.0, 86.0], [6916.0, 7.0], [7206.0, 84.0], [19216.0, 29.0], [19256.0, 29.0], [20456.0, 29.0], [20216.0, 28.0], [19664.0, 29.0], [19880.0, 29.0], [19688.0, 30.0], [20448.0, 28.0], [20096.0, 29.0], [20208.0, 28.0], [19768.0, 29.0], [19744.0, 28.0], [20336.0, 27.0], [21008.0, 28.0], [21112.0, 28.0], [21088.0, 28.0], [20840.0, 28.0], [20952.0, 28.0], [21064.0, 28.0], [21016.0, 28.0], [20728.0, 27.0], [20616.0, 28.0], [20968.0, 28.0], [20784.0, 28.0], [21616.0, 27.0], [22224.0, 26.0], [16991.0, 21.0], [18767.0, 30.0], [19343.0, 29.0], [19367.0, 29.0], [19127.0, 30.0], [20359.0, 29.0], [20215.0, 29.0], [20031.0, 29.0], [19847.0, 29.0], [19887.0, 28.0], [19903.0, 28.0], [19911.0, 28.0], [20335.0, 29.0], [20415.0, 28.0], [20479.0, 29.0], [21271.0, 27.0], [21287.0, 28.0], [20695.0, 28.0], [20687.0, 27.0], [20975.0, 28.0], [20911.0, 28.0], [21015.0, 28.0], [21167.0, 28.0], [21151.0, 28.0], [20719.0, 27.0], [21263.0, 28.0], [21495.0, 26.0], [21511.0, 27.0], [21719.0, 26.0], [21575.0, 27.0], [21975.0, 26.0], [22391.0, 26.0], [9259.0, 63.0], [19374.0, 29.0], [19262.0, 29.0], [19350.0, 29.0], [20390.0, 28.0], [19902.0, 29.0], [19838.0, 28.0], [20094.0, 29.0], [20158.0, 29.0], [20110.0, 29.0], [20414.0, 29.0], [20446.0, 28.0], [19462.0, 30.0], [21086.0, 28.0], [20726.0, 28.0], [21326.0, 27.0], [20662.0, 28.0], [21166.0, 28.0], [21158.0, 27.0], [21142.0, 28.0], [20606.0, 28.0], [20886.0, 28.0], [21054.0, 27.0], [20702.0, 28.0], [20678.0, 28.0], [21518.0, 26.0], [21686.0, 27.0], [21654.0, 27.0], [22662.0, 26.0], [19053.0, 29.0], [18797.0, 31.0], [19141.0, 30.0], [20309.0, 29.0], [20453.0, 29.0], [19789.0, 29.0], [19965.0, 30.0], [20181.0, 29.0], [20125.0, 28.0], [19821.0, 30.0], [20477.0, 28.0], [20445.0, 29.0], [20629.0, 28.0], [20805.0, 28.0], [20829.0, 28.0], [20981.0, 27.0], [20677.0, 28.0], [20621.0, 28.0], [20605.0, 28.0], [20861.0, 28.0], [20933.0, 27.0], [20837.0, 28.0], [21037.0, 28.0], [21125.0, 28.0], [21173.0, 28.0], [22197.0, 26.0], [22341.0, 26.0], [21837.0, 27.0], [21605.0, 27.0], [22061.0, 26.0], [21845.0, 27.0], [22629.0, 25.0], [5233.0, 118.0], [5549.0, 112.0], [5925.0, 97.0], [6023.0, 98.0], [6275.0, 94.0], [6451.0, 89.0], [7563.0, 78.0], [7977.0, 76.0], [12642.0, 47.0], [16382.0, 35.0], [19132.0, 30.0], [19284.0, 30.0], [20252.0, 28.0], [20348.0, 28.0], [19860.0, 29.0], [20020.0, 29.0], [20444.0, 29.0], [20468.0, 28.0], [20404.0, 29.0], [20052.0, 28.0], [20212.0, 29.0], [20116.0, 29.0], [19812.0, 29.0], [19772.0, 29.0], [19780.0, 29.0], [20276.0, 28.0], [19636.0, 29.0], [20244.0, 29.0], [20668.0, 28.0], [21332.0, 28.0], [20972.0, 28.0], [21212.0, 28.0], [21172.0, 28.0], [20628.0, 29.0], [20580.0, 28.0], [20700.0, 28.0], [21148.0, 28.0], [20828.0, 28.0], [20764.0, 28.0], [20740.0, 28.0], [21548.0, 27.0], [22300.0, 26.0], [21892.0, 27.0], [21540.0, 26.0], [22164.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22662.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 474.0, "maxY": 907.5, "series": [{"data": [[19299.0, 30.0], [19051.0, 31.0], [20315.0, 29.0], [20307.0, 29.0], [20475.0, 27.0], [20131.0, 29.0], [20115.0, 29.0], [19731.0, 30.0], [19835.0, 29.0], [20283.0, 29.0], [20227.0, 29.0], [20371.0, 28.0], [20339.0, 28.0], [20611.0, 28.0], [21347.0, 27.0], [20859.0, 28.0], [20803.0, 27.0], [20827.0, 28.0], [20771.0, 28.0], [20763.0, 28.0], [20795.0, 28.0], [20483.0, 29.0], [20515.0, 28.0], [20579.0, 28.0], [20499.0, 28.0], [21067.0, 28.0], [21131.0, 28.0], [20731.0, 29.0], [20715.0, 28.0], [20651.0, 29.0], [21459.0, 27.0], [21547.0, 27.0], [21723.0, 27.0], [21531.0, 28.0], [21643.0, 27.0], [22363.0, 26.0], [21827.0, 27.0], [11149.0, 52.0], [14661.0, 27.0], [19266.0, 29.0], [18738.0, 30.0], [20322.0, 29.0], [19546.0, 29.0], [20050.0, 29.0], [19834.0, 29.0], [19466.0, 29.0], [20106.0, 29.0], [20170.0, 29.0], [20218.0, 29.0], [20114.0, 29.0], [20402.0, 29.0], [20378.0, 29.0], [20346.0, 28.0], [19610.0, 29.0], [20234.0, 29.0], [20538.0, 28.0], [20730.0, 28.0], [21258.0, 27.0], [21426.0, 27.0], [20930.0, 28.0], [20802.0, 28.0], [20738.0, 28.0], [20770.0, 28.0], [20754.0, 28.0], [20602.0, 29.0], [20714.0, 28.0], [20690.0, 28.0], [21450.0, 26.0], [21098.0, 27.0], [21434.0, 28.0], [21554.0, 26.0], [21618.0, 27.0], [21602.0, 27.0], [21658.0, 26.0], [21994.0, 26.0], [22554.0, 25.0], [474.0, 907.5], [20417.0, 29.0], [20273.0, 28.0], [19689.0, 29.0], [19593.0, 28.0], [19833.0, 28.0], [19497.0, 30.0], [20177.0, 29.0], [20137.0, 29.0], [20473.0, 28.0], [20345.0, 29.0], [20673.0, 27.0], [20489.0, 28.0], [20497.0, 28.0], [20569.0, 29.0], [20953.0, 26.0], [20809.0, 27.0], [20817.0, 28.0], [20761.0, 28.0], [20681.0, 28.0], [20921.0, 28.0], [20841.0, 28.0], [20873.0, 27.0], [20825.0, 28.0], [21225.0, 28.0], [21241.0, 27.0], [21233.0, 27.0], [21265.0, 28.0], [20705.0, 28.0], [21401.0, 27.0], [21217.0, 27.0], [21017.0, 28.0], [21273.0, 28.0], [21929.0, 27.0], [21873.0, 27.0], [1753.0, 374.0], [2528.0, 268.0], [5734.0, 102.0], [6318.0, 94.0], [7074.0, 86.0], [6916.0, 7.0], [7206.0, 84.0], [19216.0, 29.0], [19256.0, 29.0], [20456.0, 29.0], [20216.0, 28.0], [19664.0, 29.0], [19880.0, 29.0], [19688.0, 30.0], [20448.0, 28.0], [20096.0, 29.0], [20208.0, 28.0], [19768.0, 29.0], [19744.0, 28.0], [20336.0, 27.0], [21008.0, 28.0], [21112.0, 28.0], [21088.0, 28.0], [20840.0, 28.0], [20952.0, 28.0], [21064.0, 28.0], [21016.0, 28.0], [20728.0, 27.0], [20616.0, 28.0], [20968.0, 28.0], [20784.0, 28.0], [21616.0, 27.0], [22224.0, 26.0], [16991.0, 21.0], [18767.0, 30.0], [19343.0, 29.0], [19367.0, 29.0], [19127.0, 30.0], [20359.0, 29.0], [20215.0, 29.0], [20031.0, 29.0], [19847.0, 29.0], [19887.0, 28.0], [19903.0, 28.0], [19911.0, 28.0], [20335.0, 29.0], [20415.0, 28.0], [20479.0, 29.0], [21271.0, 27.0], [21287.0, 28.0], [20695.0, 28.0], [20687.0, 27.0], [20975.0, 28.0], [20911.0, 28.0], [21015.0, 28.0], [21167.0, 28.0], [21151.0, 28.0], [20719.0, 27.0], [21263.0, 28.0], [21495.0, 26.0], [21511.0, 27.0], [21719.0, 26.0], [21575.0, 27.0], [21975.0, 26.0], [22391.0, 26.0], [9259.0, 63.0], [19374.0, 29.0], [19262.0, 29.0], [19350.0, 29.0], [20390.0, 28.0], [19902.0, 29.0], [19838.0, 28.0], [20094.0, 29.0], [20158.0, 29.0], [20110.0, 29.0], [20414.0, 29.0], [20446.0, 28.0], [19462.0, 30.0], [21086.0, 28.0], [20726.0, 28.0], [21326.0, 27.0], [20662.0, 28.0], [21166.0, 28.0], [21158.0, 27.0], [21142.0, 28.0], [20606.0, 28.0], [20886.0, 28.0], [21054.0, 27.0], [20702.0, 28.0], [20678.0, 28.0], [21518.0, 26.0], [21686.0, 27.0], [21654.0, 27.0], [22662.0, 26.0], [19053.0, 29.0], [18797.0, 31.0], [19141.0, 30.0], [20309.0, 29.0], [20453.0, 29.0], [19789.0, 29.0], [19965.0, 30.0], [20181.0, 29.0], [20125.0, 28.0], [19821.0, 30.0], [20477.0, 28.0], [20445.0, 29.0], [20629.0, 28.0], [20805.0, 28.0], [20829.0, 28.0], [20981.0, 27.0], [20677.0, 28.0], [20621.0, 28.0], [20605.0, 28.0], [20861.0, 28.0], [20933.0, 27.0], [20837.0, 28.0], [21037.0, 28.0], [21125.0, 28.0], [21173.0, 28.0], [22197.0, 26.0], [22341.0, 26.0], [21837.0, 27.0], [21605.0, 27.0], [22061.0, 26.0], [21845.0, 27.0], [22629.0, 25.0], [5233.0, 118.0], [5549.0, 112.0], [5925.0, 97.0], [6023.0, 98.0], [6275.0, 94.0], [6451.0, 89.0], [7563.0, 78.0], [7977.0, 76.0], [12642.0, 47.0], [16382.0, 35.0], [19132.0, 30.0], [19284.0, 30.0], [20252.0, 28.0], [20348.0, 28.0], [19860.0, 29.0], [20020.0, 29.0], [20444.0, 29.0], [20468.0, 28.0], [20404.0, 29.0], [20052.0, 28.0], [20212.0, 29.0], [20116.0, 29.0], [19812.0, 29.0], [19772.0, 29.0], [19780.0, 29.0], [20276.0, 28.0], [19636.0, 29.0], [20244.0, 29.0], [20668.0, 28.0], [21332.0, 28.0], [20972.0, 28.0], [21212.0, 28.0], [21172.0, 28.0], [20628.0, 29.0], [20580.0, 28.0], [20700.0, 28.0], [21148.0, 28.0], [20828.0, 28.0], [20764.0, 28.0], [20740.0, 28.0], [21548.0, 27.0], [22300.0, 26.0], [21892.0, 27.0], [21540.0, 26.0], [22164.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22662.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1071.8666666666666, "minX": 1.62666198E12, "maxY": 20894.483333333334, "series": [{"data": [[1.62666222E12, 20676.05], [1.62666204E12, 20894.483333333334], [1.62666216E12, 20658.716666666667], [1.62666198E12, 15060.183333333332], [1.62666228E12, 1071.8666666666666], [1.6266621E12, 20454.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666228E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1081.8333333333333, "minX": 1.62666198E12, "maxY": 20894.266666666666, "series": [{"data": [[1.62666222E12, 20676.05], [1.62666204E12, 20894.266666666666], [1.62666216E12, 20658.483333333334], [1.62666198E12, 15050.416666666666], [1.62666228E12, 1081.8333333333333], [1.6266621E12, 20454.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666228E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1081.8333333333333, "minX": 1.62666198E12, "maxY": 20894.266666666666, "series": [{"data": [[1.62666222E12, 20676.05], [1.62666204E12, 20894.266666666666], [1.62666216E12, 20658.483333333334], [1.62666198E12, 15050.416666666666], [1.62666228E12, 1081.8333333333333], [1.6266621E12, 20454.4]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666228E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1081.8333333333333, "minX": 1.62666198E12, "maxY": 20894.266666666666, "series": [{"data": [[1.62666222E12, 20676.05], [1.62666204E12, 20894.266666666666], [1.62666216E12, 20658.483333333334], [1.62666198E12, 15050.416666666666], [1.62666228E12, 1081.8333333333333], [1.6266621E12, 20454.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666228E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

