/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3189.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 11.0], [3.4, 11.0], [3.5, 11.0], [3.6, 11.0], [3.7, 11.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 13.0], [4.4, 13.0], [4.5, 13.0], [4.6, 13.0], [4.7, 13.0], [4.8, 13.0], [4.9, 14.0], [5.0, 14.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 15.0], [5.7, 15.0], [5.8, 15.0], [5.9, 15.0], [6.0, 15.0], [6.1, 15.0], [6.2, 15.0], [6.3, 16.0], [6.4, 16.0], [6.5, 16.0], [6.6, 16.0], [6.7, 16.0], [6.8, 16.0], [6.9, 16.0], [7.0, 17.0], [7.1, 17.0], [7.2, 17.0], [7.3, 17.0], [7.4, 17.0], [7.5, 17.0], [7.6, 17.0], [7.7, 17.0], [7.8, 18.0], [7.9, 18.0], [8.0, 18.0], [8.1, 18.0], [8.2, 18.0], [8.3, 18.0], [8.4, 18.0], [8.5, 18.0], [8.6, 18.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 19.0], [9.1, 19.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 20.0], [10.0, 20.0], [10.1, 20.0], [10.2, 20.0], [10.3, 21.0], [10.4, 21.0], [10.5, 21.0], [10.6, 21.0], [10.7, 21.0], [10.8, 21.0], [10.9, 21.0], [11.0, 21.0], [11.1, 21.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 25.0], [14.0, 25.0], [14.1, 25.0], [14.2, 25.0], [14.3, 25.0], [14.4, 25.0], [14.5, 25.0], [14.6, 25.0], [14.7, 25.0], [14.8, 26.0], [14.9, 26.0], [15.0, 26.0], [15.1, 26.0], [15.2, 26.0], [15.3, 26.0], [15.4, 26.0], [15.5, 26.0], [15.6, 26.0], [15.7, 26.0], [15.8, 27.0], [15.9, 27.0], [16.0, 27.0], [16.1, 27.0], [16.2, 27.0], [16.3, 27.0], [16.4, 27.0], [16.5, 27.0], [16.6, 27.0], [16.7, 27.0], [16.8, 28.0], [16.9, 28.0], [17.0, 28.0], [17.1, 28.0], [17.2, 28.0], [17.3, 28.0], [17.4, 28.0], [17.5, 28.0], [17.6, 28.0], [17.7, 28.0], [17.8, 28.0], [17.9, 29.0], [18.0, 29.0], [18.1, 29.0], [18.2, 29.0], [18.3, 29.0], [18.4, 29.0], [18.5, 29.0], [18.6, 29.0], [18.7, 29.0], [18.8, 29.0], [18.9, 29.0], [19.0, 30.0], [19.1, 30.0], [19.2, 30.0], [19.3, 30.0], [19.4, 30.0], [19.5, 30.0], [19.6, 30.0], [19.7, 30.0], [19.8, 30.0], [19.9, 30.0], [20.0, 30.0], [20.1, 31.0], [20.2, 31.0], [20.3, 31.0], [20.4, 31.0], [20.5, 31.0], [20.6, 31.0], [20.7, 31.0], [20.8, 31.0], [20.9, 31.0], [21.0, 31.0], [21.1, 31.0], [21.2, 31.0], [21.3, 32.0], [21.4, 32.0], [21.5, 32.0], [21.6, 32.0], [21.7, 32.0], [21.8, 32.0], [21.9, 32.0], [22.0, 32.0], [22.1, 32.0], [22.2, 32.0], [22.3, 32.0], [22.4, 32.0], [22.5, 33.0], [22.6, 33.0], [22.7, 33.0], [22.8, 33.0], [22.9, 33.0], [23.0, 33.0], [23.1, 33.0], [23.2, 33.0], [23.3, 33.0], [23.4, 33.0], [23.5, 33.0], [23.6, 33.0], [23.7, 33.0], [23.8, 34.0], [23.9, 34.0], [24.0, 34.0], [24.1, 34.0], [24.2, 34.0], [24.3, 34.0], [24.4, 34.0], [24.5, 34.0], [24.6, 34.0], [24.7, 34.0], [24.8, 34.0], [24.9, 34.0], [25.0, 34.0], [25.1, 35.0], [25.2, 35.0], [25.3, 35.0], [25.4, 35.0], [25.5, 35.0], [25.6, 35.0], [25.7, 35.0], [25.8, 35.0], [25.9, 35.0], [26.0, 35.0], [26.1, 35.0], [26.2, 35.0], [26.3, 35.0], [26.4, 35.0], [26.5, 36.0], [26.6, 36.0], [26.7, 36.0], [26.8, 36.0], [26.9, 36.0], [27.0, 36.0], [27.1, 36.0], [27.2, 36.0], [27.3, 36.0], [27.4, 36.0], [27.5, 36.0], [27.6, 36.0], [27.7, 36.0], [27.8, 36.0], [27.9, 37.0], [28.0, 37.0], [28.1, 37.0], [28.2, 37.0], [28.3, 37.0], [28.4, 37.0], [28.5, 37.0], [28.6, 37.0], [28.7, 37.0], [28.8, 37.0], [28.9, 37.0], [29.0, 37.0], [29.1, 37.0], [29.2, 37.0], [29.3, 37.0], [29.4, 37.0], [29.5, 38.0], [29.6, 38.0], [29.7, 38.0], [29.8, 38.0], [29.9, 38.0], [30.0, 38.0], [30.1, 38.0], [30.2, 38.0], [30.3, 38.0], [30.4, 38.0], [30.5, 38.0], [30.6, 38.0], [30.7, 38.0], [30.8, 38.0], [30.9, 38.0], [31.0, 38.0], [31.1, 39.0], [31.2, 39.0], [31.3, 39.0], [31.4, 39.0], [31.5, 39.0], [31.6, 39.0], [31.7, 39.0], [31.8, 39.0], [31.9, 39.0], [32.0, 39.0], [32.1, 39.0], [32.2, 39.0], [32.3, 39.0], [32.4, 39.0], [32.5, 39.0], [32.6, 39.0], [32.7, 39.0], [32.8, 40.0], [32.9, 40.0], [33.0, 40.0], [33.1, 40.0], [33.2, 40.0], [33.3, 40.0], [33.4, 40.0], [33.5, 40.0], [33.6, 40.0], [33.7, 40.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 40.0], [34.2, 40.0], [34.3, 40.0], [34.4, 40.0], [34.5, 41.0], [34.6, 41.0], [34.7, 41.0], [34.8, 41.0], [34.9, 41.0], [35.0, 41.0], [35.1, 41.0], [35.2, 41.0], [35.3, 41.0], [35.4, 41.0], [35.5, 41.0], [35.6, 41.0], [35.7, 41.0], [35.8, 41.0], [35.9, 41.0], [36.0, 41.0], [36.1, 41.0], [36.2, 41.0], [36.3, 41.0], [36.4, 42.0], [36.5, 42.0], [36.6, 42.0], [36.7, 42.0], [36.8, 42.0], [36.9, 42.0], [37.0, 42.0], [37.1, 42.0], [37.2, 42.0], [37.3, 42.0], [37.4, 42.0], [37.5, 42.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 43.0], [38.5, 43.0], [38.6, 43.0], [38.7, 43.0], [38.8, 43.0], [38.9, 43.0], [39.0, 43.0], [39.1, 43.0], [39.2, 43.0], [39.3, 43.0], [39.4, 43.0], [39.5, 43.0], [39.6, 43.0], [39.7, 43.0], [39.8, 43.0], [39.9, 43.0], [40.0, 43.0], [40.1, 43.0], [40.2, 43.0], [40.3, 43.0], [40.4, 44.0], [40.5, 44.0], [40.6, 44.0], [40.7, 44.0], [40.8, 44.0], [40.9, 44.0], [41.0, 44.0], [41.1, 44.0], [41.2, 44.0], [41.3, 44.0], [41.4, 44.0], [41.5, 44.0], [41.6, 44.0], [41.7, 44.0], [41.8, 44.0], [41.9, 44.0], [42.0, 44.0], [42.1, 44.0], [42.2, 44.0], [42.3, 44.0], [42.4, 44.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 45.0], [43.7, 45.0], [43.8, 45.0], [43.9, 45.0], [44.0, 45.0], [44.1, 45.0], [44.2, 45.0], [44.3, 45.0], [44.4, 45.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 46.0], [46.0, 46.0], [46.1, 46.0], [46.2, 46.0], [46.3, 46.0], [46.4, 46.0], [46.5, 46.0], [46.6, 47.0], [46.7, 47.0], [46.8, 47.0], [46.9, 47.0], [47.0, 47.0], [47.1, 47.0], [47.2, 47.0], [47.3, 47.0], [47.4, 47.0], [47.5, 47.0], [47.6, 47.0], [47.7, 47.0], [47.8, 47.0], [47.9, 47.0], [48.0, 47.0], [48.1, 47.0], [48.2, 47.0], [48.3, 47.0], [48.4, 47.0], [48.5, 47.0], [48.6, 47.0], [48.7, 47.0], [48.8, 48.0], [48.9, 48.0], [49.0, 48.0], [49.1, 48.0], [49.2, 48.0], [49.3, 48.0], [49.4, 48.0], [49.5, 48.0], [49.6, 48.0], [49.7, 48.0], [49.8, 48.0], [49.9, 48.0], [50.0, 48.0], [50.1, 48.0], [50.2, 48.0], [50.3, 48.0], [50.4, 48.0], [50.5, 48.0], [50.6, 48.0], [50.7, 48.0], [50.8, 48.0], [50.9, 49.0], [51.0, 49.0], [51.1, 49.0], [51.2, 49.0], [51.3, 49.0], [51.4, 49.0], [51.5, 49.0], [51.6, 49.0], [51.7, 49.0], [51.8, 49.0], [51.9, 49.0], [52.0, 49.0], [52.1, 49.0], [52.2, 49.0], [52.3, 49.0], [52.4, 49.0], [52.5, 49.0], [52.6, 49.0], [52.7, 49.0], [52.8, 49.0], [52.9, 49.0], [53.0, 50.0], [53.1, 50.0], [53.2, 50.0], [53.3, 50.0], [53.4, 50.0], [53.5, 50.0], [53.6, 50.0], [53.7, 50.0], [53.8, 50.0], [53.9, 50.0], [54.0, 50.0], [54.1, 50.0], [54.2, 50.0], [54.3, 50.0], [54.4, 50.0], [54.5, 50.0], [54.6, 50.0], [54.7, 50.0], [54.8, 50.0], [54.9, 50.0], [55.0, 50.0], [55.1, 51.0], [55.2, 51.0], [55.3, 51.0], [55.4, 51.0], [55.5, 51.0], [55.6, 51.0], [55.7, 51.0], [55.8, 51.0], [55.9, 51.0], [56.0, 51.0], [56.1, 51.0], [56.2, 51.0], [56.3, 51.0], [56.4, 51.0], [56.5, 51.0], [56.6, 51.0], [56.7, 51.0], [56.8, 51.0], [56.9, 51.0], [57.0, 51.0], [57.1, 52.0], [57.2, 52.0], [57.3, 52.0], [57.4, 52.0], [57.5, 52.0], [57.6, 52.0], [57.7, 52.0], [57.8, 52.0], [57.9, 52.0], [58.0, 52.0], [58.1, 52.0], [58.2, 52.0], [58.3, 52.0], [58.4, 52.0], [58.5, 52.0], [58.6, 52.0], [58.7, 52.0], [58.8, 52.0], [58.9, 52.0], [59.0, 52.0], [59.1, 53.0], [59.2, 53.0], [59.3, 53.0], [59.4, 53.0], [59.5, 53.0], [59.6, 53.0], [59.7, 53.0], [59.8, 53.0], [59.9, 53.0], [60.0, 53.0], [60.1, 53.0], [60.2, 53.0], [60.3, 53.0], [60.4, 53.0], [60.5, 53.0], [60.6, 53.0], [60.7, 53.0], [60.8, 53.0], [60.9, 53.0], [61.0, 54.0], [61.1, 54.0], [61.2, 54.0], [61.3, 54.0], [61.4, 54.0], [61.5, 54.0], [61.6, 54.0], [61.7, 54.0], [61.8, 54.0], [61.9, 54.0], [62.0, 54.0], [62.1, 54.0], [62.2, 54.0], [62.3, 54.0], [62.4, 54.0], [62.5, 54.0], [62.6, 54.0], [62.7, 54.0], [62.8, 54.0], [62.9, 55.0], [63.0, 55.0], [63.1, 55.0], [63.2, 55.0], [63.3, 55.0], [63.4, 55.0], [63.5, 55.0], [63.6, 55.0], [63.7, 55.0], [63.8, 55.0], [63.9, 55.0], [64.0, 55.0], [64.1, 55.0], [64.2, 55.0], [64.3, 55.0], [64.4, 55.0], [64.5, 55.0], [64.6, 55.0], [64.7, 56.0], [64.8, 56.0], [64.9, 56.0], [65.0, 56.0], [65.1, 56.0], [65.2, 56.0], [65.3, 56.0], [65.4, 56.0], [65.5, 56.0], [65.6, 56.0], [65.7, 56.0], [65.8, 56.0], [65.9, 56.0], [66.0, 56.0], [66.1, 56.0], [66.2, 56.0], [66.3, 56.0], [66.4, 56.0], [66.5, 57.0], [66.6, 57.0], [66.7, 57.0], [66.8, 57.0], [66.9, 57.0], [67.0, 57.0], [67.1, 57.0], [67.2, 57.0], [67.3, 57.0], [67.4, 57.0], [67.5, 57.0], [67.6, 57.0], [67.7, 57.0], [67.8, 57.0], [67.9, 57.0], [68.0, 57.0], [68.1, 58.0], [68.2, 58.0], [68.3, 58.0], [68.4, 58.0], [68.5, 58.0], [68.6, 58.0], [68.7, 58.0], [68.8, 58.0], [68.9, 58.0], [69.0, 58.0], [69.1, 58.0], [69.2, 58.0], [69.3, 58.0], [69.4, 58.0], [69.5, 58.0], [69.6, 58.0], [69.7, 59.0], [69.8, 59.0], [69.9, 59.0], [70.0, 59.0], [70.1, 59.0], [70.2, 59.0], [70.3, 59.0], [70.4, 59.0], [70.5, 59.0], [70.6, 59.0], [70.7, 59.0], [70.8, 59.0], [70.9, 59.0], [71.0, 59.0], [71.1, 59.0], [71.2, 60.0], [71.3, 60.0], [71.4, 60.0], [71.5, 60.0], [71.6, 60.0], [71.7, 60.0], [71.8, 60.0], [71.9, 60.0], [72.0, 60.0], [72.1, 60.0], [72.2, 60.0], [72.3, 60.0], [72.4, 60.0], [72.5, 60.0], [72.6, 61.0], [72.7, 61.0], [72.8, 61.0], [72.9, 61.0], [73.0, 61.0], [73.1, 61.0], [73.2, 61.0], [73.3, 61.0], [73.4, 61.0], [73.5, 61.0], [73.6, 61.0], [73.7, 61.0], [73.8, 61.0], [73.9, 62.0], [74.0, 62.0], [74.1, 62.0], [74.2, 62.0], [74.3, 62.0], [74.4, 62.0], [74.5, 62.0], [74.6, 62.0], [74.7, 62.0], [74.8, 62.0], [74.9, 62.0], [75.0, 62.0], [75.1, 63.0], [75.2, 63.0], [75.3, 63.0], [75.4, 63.0], [75.5, 63.0], [75.6, 63.0], [75.7, 63.0], [75.8, 63.0], [75.9, 63.0], [76.0, 63.0], [76.1, 63.0], [76.2, 63.0], [76.3, 64.0], [76.4, 64.0], [76.5, 64.0], [76.6, 64.0], [76.7, 64.0], [76.8, 64.0], [76.9, 64.0], [77.0, 64.0], [77.1, 64.0], [77.2, 64.0], [77.3, 64.0], [77.4, 65.0], [77.5, 65.0], [77.6, 65.0], [77.7, 65.0], [77.8, 65.0], [77.9, 65.0], [78.0, 65.0], [78.1, 65.0], [78.2, 65.0], [78.3, 65.0], [78.4, 66.0], [78.5, 66.0], [78.6, 66.0], [78.7, 66.0], [78.8, 66.0], [78.9, 66.0], [79.0, 66.0], [79.1, 66.0], [79.2, 66.0], [79.3, 66.0], [79.4, 67.0], [79.5, 67.0], [79.6, 67.0], [79.7, 67.0], [79.8, 67.0], [79.9, 67.0], [80.0, 67.0], [80.1, 67.0], [80.2, 67.0], [80.3, 68.0], [80.4, 68.0], [80.5, 68.0], [80.6, 68.0], [80.7, 68.0], [80.8, 68.0], [80.9, 68.0], [81.0, 68.0], [81.1, 68.0], [81.2, 69.0], [81.3, 69.0], [81.4, 69.0], [81.5, 69.0], [81.6, 69.0], [81.7, 69.0], [81.8, 69.0], [81.9, 69.0], [82.0, 70.0], [82.1, 70.0], [82.2, 70.0], [82.3, 70.0], [82.4, 70.0], [82.5, 70.0], [82.6, 70.0], [82.7, 70.0], [82.8, 71.0], [82.9, 71.0], [83.0, 71.0], [83.1, 71.0], [83.2, 71.0], [83.3, 71.0], [83.4, 71.0], [83.5, 72.0], [83.6, 72.0], [83.7, 72.0], [83.8, 72.0], [83.9, 72.0], [84.0, 72.0], [84.1, 72.0], [84.2, 73.0], [84.3, 73.0], [84.4, 73.0], [84.5, 73.0], [84.6, 73.0], [84.7, 73.0], [84.8, 73.0], [84.9, 74.0], [85.0, 74.0], [85.1, 74.0], [85.2, 74.0], [85.3, 74.0], [85.4, 74.0], [85.5, 75.0], [85.6, 75.0], [85.7, 75.0], [85.8, 75.0], [85.9, 75.0], [86.0, 75.0], [86.1, 76.0], [86.2, 76.0], [86.3, 76.0], [86.4, 76.0], [86.5, 76.0], [86.6, 77.0], [86.7, 77.0], [86.8, 77.0], [86.9, 77.0], [87.0, 77.0], [87.1, 77.0], [87.2, 78.0], [87.3, 78.0], [87.4, 78.0], [87.5, 78.0], [87.6, 78.0], [87.7, 79.0], [87.8, 79.0], [87.9, 79.0], [88.0, 79.0], [88.1, 80.0], [88.2, 80.0], [88.3, 80.0], [88.4, 80.0], [88.5, 80.0], [88.6, 81.0], [88.7, 81.0], [88.8, 81.0], [88.9, 81.0], [89.0, 82.0], [89.1, 82.0], [89.2, 82.0], [89.3, 82.0], [89.4, 83.0], [89.5, 83.0], [89.6, 83.0], [89.7, 83.0], [89.8, 84.0], [89.9, 84.0], [90.0, 84.0], [90.1, 84.0], [90.2, 85.0], [90.3, 85.0], [90.4, 85.0], [90.5, 86.0], [90.6, 86.0], [90.7, 86.0], [90.8, 86.0], [90.9, 87.0], [91.0, 87.0], [91.1, 87.0], [91.2, 88.0], [91.3, 88.0], [91.4, 88.0], [91.5, 89.0], [91.6, 89.0], [91.7, 90.0], [91.8, 90.0], [91.9, 90.0], [92.0, 91.0], [92.1, 91.0], [92.2, 91.0], [92.3, 92.0], [92.4, 92.0], [92.5, 93.0], [92.6, 93.0], [92.7, 94.0], [92.8, 94.0], [92.9, 94.0], [93.0, 95.0], [93.1, 95.0], [93.2, 96.0], [93.3, 96.0], [93.4, 97.0], [93.5, 97.0], [93.6, 98.0], [93.7, 99.0], [93.8, 99.0], [93.9, 100.0], [94.0, 100.0], [94.1, 101.0], [94.2, 101.0], [94.3, 102.0], [94.4, 103.0], [94.5, 103.0], [94.6, 104.0], [94.7, 105.0], [94.8, 105.0], [94.9, 106.0], [95.0, 107.0], [95.1, 107.0], [95.2, 108.0], [95.3, 109.0], [95.4, 110.0], [95.5, 111.0], [95.6, 111.0], [95.7, 112.0], [95.8, 113.0], [95.9, 114.0], [96.0, 115.0], [96.1, 116.0], [96.2, 117.0], [96.3, 118.0], [96.4, 119.0], [96.5, 120.0], [96.6, 121.0], [96.7, 122.0], [96.8, 123.0], [96.9, 124.0], [97.0, 125.0], [97.1, 127.0], [97.2, 128.0], [97.3, 129.0], [97.4, 131.0], [97.5, 132.0], [97.6, 134.0], [97.7, 135.0], [97.8, 137.0], [97.9, 139.0], [98.0, 141.0], [98.1, 143.0], [98.2, 145.0], [98.3, 147.0], [98.4, 150.0], [98.5, 152.0], [98.6, 155.0], [98.7, 157.0], [98.8, 160.0], [98.9, 164.0], [99.0, 167.0], [99.1, 171.0], [99.2, 175.0], [99.3, 179.0], [99.4, 184.0], [99.5, 191.0], [99.6, 199.0], [99.7, 210.0], [99.8, 231.0], [99.9, 283.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5895461.0, "series": [{"data": [[0.0, 5895461.0], [600.0, 718.0], [700.0, 55.0], [800.0, 5.0], [900.0, 2.0], [1000.0, 14.0], [1100.0, 3.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 42.0], [100.0, 360236.0], [1600.0, 62.0], [1700.0, 69.0], [1800.0, 72.0], [1900.0, 79.0], [2000.0, 67.0], [2100.0, 88.0], [2300.0, 59.0], [2200.0, 47.0], [2400.0, 113.0], [2500.0, 10.0], [2600.0, 16.0], [2700.0, 10.0], [2800.0, 6.0], [2900.0, 5.0], [3000.0, 9.0], [3100.0, 12.0], [200.0, 19309.0], [300.0, 1711.0], [400.0, 359.0], [500.0, 1568.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 765.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6277103.0, "series": [{"data": [[0.0, 6277103.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2341.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 765.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 270.8993089832172, "minX": 1.62666396E12, "maxY": 1200.0, "series": [{"data": [[1.62666396E12, 270.8993089832172], [1.62666414E12, 1200.0], [1.62666408E12, 1200.0], [1.62666426E12, 1189.3277524248963], [1.6266642E12, 1200.0], [1.62666432E12, 538.0386859344933], [1.62666402E12, 1051.506749325941]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666432E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.2, "minX": 1.0, "maxY": 541.7005076142132, "series": [{"data": [[2.0, 1.3529411764705885], [3.0, 1.6363636363636365], [4.0, 1.5999999999999996], [5.0, 1.3125000000000002], [6.0, 1.6], [7.0, 1.6293103448275856], [8.0, 1.6211538461538464], [9.0, 1.5242718446601948], [10.0, 1.981308411214955], [11.0, 1.4545454545454546], [12.0, 3.375], [13.0, 2.6666666666666665], [14.0, 2.0], [15.0, 2.2], [16.0, 2.25], [17.0, 3.0], [19.0, 3.1666666666666665], [20.0, 3.428571428571429], [21.0, 2.4000000000000004], [22.0, 1.2], [23.0, 2.0], [24.0, 2.5], [25.0, 2.0], [26.0, 2.4285714285714293], [27.0, 2.4545454545454546], [28.0, 2.8634175691937447], [29.0, 13.0], [30.0, 12.571428571428571], [33.0, 8.894736842105264], [35.0, 3.4], [34.0, 3.181818181818182], [37.0, 1.894736842105263], [36.0, 2.2544570502431123], [39.0, 4.0], [38.0, 2.934782608695653], [41.0, 3.7857142857142856], [40.0, 3.7692307692307687], [43.0, 2.8], [42.0, 3.2], [45.0, 3.6100000000000003], [44.0, 3.7083333333333335], [47.0, 3.1876904326630093], [46.0, 2.6462526766595262], [49.0, 4.9], [48.0, 2.9851851851851845], [51.0, 2.228571428571429], [50.0, 2.9498806682577587], [53.0, 2.7808219178082196], [52.0, 5.835106382978723], [55.0, 4.075409836065568], [54.0, 3.0714285714285725], [57.0, 4.096794468887491], [56.0, 5.146341463414634], [59.0, 2.4740259740259747], [58.0, 2.491150442477876], [61.0, 2.0], [60.0, 2.600000000000001], [63.0, 3.5833333333333344], [62.0, 3.2], [67.0, 4.0], [66.0, 4.513513513513513], [65.0, 3.3478260869565224], [64.0, 3.5000000000000013], [71.0, 5.891891891891891], [70.0, 7.833333333333332], [68.0, 3.7511811023622097], [75.0, 9.5], [74.0, 9.117647058823529], [73.0, 5.006896551724138], [72.0, 3.8], [79.0, 4.666666666666667], [78.0, 5.466666666666666], [77.0, 7.833333333333333], [76.0, 11.200000000000001], [83.0, 4.117647058823529], [82.0, 3.8749999999999996], [81.0, 4.0], [80.0, 3.857142857142857], [87.0, 5.0], [86.0, 4.2615384615384615], [85.0, 3.6000000000000005], [84.0, 3.8636363636363633], [91.0, 4.632183908045978], [90.0, 6.10144927536232], [89.0, 5.689655172413794], [88.0, 4.36111111111111], [95.0, 3.8], [94.0, 4.084905660377359], [93.0, 4.290322580645161], [92.0, 4.1034482758620685], [99.0, 4.7846975088967945], [98.0, 4.0588235294117645], [97.0, 4.129032258064516], [96.0, 4.382352941176469], [103.0, 8.055555555555557], [102.0, 5.88], [101.0, 5.727272727272728], [100.0, 5.521739130434787], [107.0, 7.260273972602739], [106.0, 8.968253968253967], [105.0, 10.317991631799162], [104.0, 11.666666666666666], [111.0, 6.11111111111111], [110.0, 6.333333333333331], [109.0, 7.999999999999997], [108.0, 5.04559270516717], [115.0, 9.580645161290322], [114.0, 5.8935361216730096], [113.0, 5.1831325301204805], [112.0, 5.6], [119.0, 7.703125000000002], [118.0, 7.272727272727273], [117.0, 8.708333333333334], [116.0, 7.956521739130434], [123.0, 6.666666666666668], [122.0, 6.7368421052631575], [121.0, 4.2142857142857135], [120.0, 6.645161290322582], [127.0, 5.904299583911236], [126.0, 7.875], [125.0, 7.25], [124.0, 8.238095238095237], [135.0, 12.365853658536585], [134.0, 7.9275362318840585], [133.0, 5.888888888888889], [132.0, 7.972027972027967], [131.0, 5.390728476821191], [130.0, 5.543859649122807], [129.0, 5.658536585365854], [128.0, 5.9271523178807906], [141.0, 10.7980769230769], [142.0, 7.114864864864868], [143.0, 6.891891891891894], [140.0, 17.150000000000002], [139.0, 17.333333333333332], [138.0, 16.923076923076923], [137.0, 17.0], [136.0, 16.909090909090907], [144.0, 11.250996015936256], [145.0, 9.661870503597124], [147.0, 9.59810126582278], [146.0, 7.440000000000001], [148.0, 6.4230769230769225], [149.0, 9.028735632183912], [150.0, 13.372549019607854], [151.0, 5.75], [157.0, 18.96], [156.0, 10.38181818181818], [158.0, 55.31083202511776], [155.0, 11.87069571328181], [154.0, 8.04563758389261], [152.0, 33.83333333333333], [159.0, 8.132596685082868], [153.0, 6.4], [160.0, 9.863636363636362], [161.0, 11.518703241895253], [162.0, 7.035211267605633], [163.0, 8.105263157894738], [164.0, 7.394366197183097], [165.0, 9.040816326530615], [166.0, 7.645833333333334], [167.0, 7.728654970760236], [168.0, 13.915789473684207], [169.0, 32.320000000000014], [171.0, 28.774410774410782], [174.0, 19.260869565217387], [175.0, 8.18], [173.0, 17.576923076923077], [172.0, 20.33333333333333], [170.0, 19.666666666666668], [176.0, 5.666666666666666], [177.0, 9.730398899587339], [178.0, 8.764705882352942], [183.0, 9.833333333333334], [182.0, 11.23076923076923], [181.0, 11.604395604395604], [180.0, 11.757575757575758], [179.0, 11.446428571428564], [185.0, 10.451612903225804], [190.0, 3.0], [191.0, 13.010037641154327], [189.0, 10.026666666666667], [188.0, 14.783783783783782], [187.0, 11.375], [186.0, 12.0], [184.0, 11.0], [196.0, 13.816326530612244], [198.0, 9.057692307692308], [199.0, 16.956521739130434], [192.0, 11.090476190476192], [197.0, 8.705882352941181], [195.0, 8.906249999999996], [194.0, 11.704545454545453], [193.0, 12.785714285714286], [200.0, 45.75], [201.0, 14.916666666666673], [203.0, 46.6], [204.0, 12.205357142857144], [207.0, 11.587548638132297], [206.0, 11.115702479338845], [205.0, 10.999999999999998], [202.0, 17.194444444444443], [212.0, 58.25], [213.0, 19.905660377358487], [215.0, 21.666666666666664], [214.0, 11.183908045977011], [211.0, 13.701492537313433], [210.0, 15.0], [209.0, 13.0], [208.0, 12.927835051546392], [216.0, 25.20634920634922], [222.0, 10.800000000000002], [223.0, 10.50909090909091], [221.0, 11.162860576923096], [220.0, 11.159788515200518], [219.0, 10.46975546975547], [218.0, 10.787286063569677], [217.0, 9.31578947368421], [225.0, 5.333333333333334], [228.0, 11.272941176470596], [231.0, 10.536585365853657], [230.0, 9.944444444444445], [229.0, 9.947368421052632], [227.0, 12.516647531572907], [226.0, 10.343580470162744], [224.0, 10.608695652173916], [233.0, 11.22429906542056], [236.0, 11.076923076923078], [239.0, 15.079999999999995], [238.0, 13.777777777777777], [237.0, 13.340958605664499], [235.0, 12.672131147540998], [234.0, 13.333333333333329], [232.0, 10.497652582159622], [242.0, 11.863147605083089], [244.0, 11.563812600969303], [246.0, 16.377071823204425], [247.0, 22.978494623655923], [245.0, 12.919913419913422], [243.0, 11.812154696132602], [241.0, 12.200633579725451], [240.0, 17.504315659679392], [248.0, 20.47863247863248], [249.0, 87.739837398374], [254.0, 32.306791569086656], [255.0, 30.48662752772343], [253.0, 12.533333333333331], [252.0, 12.547717842323653], [251.0, 16.37037037037037], [250.0, 14.458333333333334], [257.0, 27.000000000000004], [262.0, 13.829495128432239], [263.0, 14.430944963655243], [261.0, 11.738461538461538], [260.0, 35.07291666666668], [258.0, 50.597938144329895], [268.0, 11.984374999999998], [259.0, 15.311827956989244], [270.0, 12.38888888888889], [269.0, 12.083333333333334], [264.0, 12.580645161290322], [271.0, 13.258064516129032], [256.0, 28.699999999999996], [266.0, 12.652173913043477], [267.0, 7.0200000000000005], [265.0, 18.764705882352942], [286.0, 16.0], [284.0, 15.017241379310338], [275.0, 21.75], [274.0, 15.336162988115454], [281.0, 15.217391304347826], [280.0, 14.68421052631579], [276.0, 15.855585831062672], [277.0, 18.93374741200829], [279.0, 15.333333333333334], [272.0, 11.919642857142854], [278.0, 13.205741626794262], [273.0, 13.917968749999998], [287.0, 15.592592592592593], [285.0, 14.291044776119403], [283.0, 12.91935483870968], [282.0, 15.360000000000001], [291.0, 24.80769230769231], [294.0, 11.124463519313304], [298.0, 12.952238805970149], [299.0, 15.919354838709666], [297.0, 12.294117647058824], [296.0, 13.169999999999998], [293.0, 14.111111111111114], [292.0, 14.957207207207205], [288.0, 16.096774193548384], [290.0, 21.083333333333336], [289.0, 19.321917808219165], [295.0, 9.651685393258427], [303.0, 22.142857142857142], [302.0, 15.599624060150376], [301.0, 14.309455587392547], [300.0, 16.07821901323706], [304.0, 15.913978494623654], [307.0, 17.426565571468696], [308.0, 18.565305025530748], [309.0, 30.67741935483871], [312.0, 19.828981723237586], [319.0, 17.295454545454533], [318.0, 26.477409638554203], [316.0, 24.874999999999996], [317.0, 14.69230769230769], [305.0, 12.500000000000007], [306.0, 23.229323308270683], [313.0, 12.580808080808085], [314.0, 12.142131979695433], [315.0, 33.13333333333333], [311.0, 26.98630136986301], [310.0, 24.950000000000003], [322.0, 55.41620111731857], [321.0, 23.48589341692791], [320.0, 19.69072164948454], [332.0, 17.361820199778034], [333.0, 13.560000000000004], [335.0, 17.782268578878774], [334.0, 16.20890410958905], [323.0, 22.903846153846157], [331.0, 21.443671049239583], [330.0, 14.378548895899057], [329.0, 33.649253731343286], [328.0, 18.095298602287176], [327.0, 22.033333333333335], [326.0, 18.677685950413224], [325.0, 43.3265306122449], [324.0, 15.574999999999998], [337.0, 13.015748031496061], [336.0, 14.970532319391625], [343.0, 12.336283185840708], [342.0, 25.668711656441715], [338.0, 11.32407407407408], [339.0, 10.573770491803279], [340.0, 14.665000000000003], [341.0, 87.18345323741008], [346.0, 45.52023121387284], [347.0, 19.799309451877427], [345.0, 32.87906976744188], [344.0, 15.28440366972477], [350.0, 13.0], [351.0, 4.227544910179641], [348.0, 14.477551020408157], [349.0, 15.54166666666667], [354.0, 33.19444444444446], [361.0, 33.69354838709678], [352.0, 10.79999999999999], [362.0, 21.04129263913823], [360.0, 33.21212121212121], [366.0, 54.693181818181806], [367.0, 39.18390804597702], [364.0, 25.147435897435894], [355.0, 22.017391304347825], [365.0, 13.108108108108112], [357.0, 45.48333333333332], [359.0, 24.7], [358.0, 17.0], [356.0, 42.0], [353.0, 31.750000000000004], [363.0, 47.702127659574465], [380.0, 40.79059829059824], [374.0, 27.989795918367346], [372.0, 21.674698795180714], [373.0, 11.11111111111111], [375.0, 21.638297872340424], [369.0, 17.673923679060678], [368.0, 20.78571428571429], [371.0, 18.448979591836732], [370.0, 17.652284263959377], [376.0, 15.600000000000005], [377.0, 19.324090121317152], [378.0, 35.8911097852028], [379.0, 14.391304347826095], [383.0, 34.24731182795698], [381.0, 35.486842105263165], [382.0, 22.10714285714285], [385.0, 50.41071428571426], [386.0, 22.456511292647765], [387.0, 14.0], [396.0, 17.5], [398.0, 17.666666666666668], [397.0, 27.666666666666668], [399.0, 20.851511879049692], [384.0, 72.8099173553719], [388.0, 29.792079207920793], [389.0, 33.41833105335158], [390.0, 46.871165644171796], [391.0, 17.25581395348837], [392.0, 66.17045454545453], [393.0, 40.72448979591837], [394.0, 20.424539877300607], [395.0, 25.155966503838087], [412.0, 23.502857142857142], [401.0, 21.041666666666664], [400.0, 20.416666666666668], [402.0, 22.230769230769226], [403.0, 21.666666666666668], [404.0, 19.8421052631579], [406.0, 19.857142857142854], [405.0, 14.043478260869566], [407.0, 22.533333333333335], [408.0, 44.49624060150372], [409.0, 19.67994643454963], [411.0, 26.691176470588232], [410.0, 15.313725490196083], [413.0, 21.607142857142854], [415.0, 26.558139534883725], [414.0, 15.538043478260859], [417.0, 25.291666666666664], [416.0, 22.871165644171747], [419.0, 20.428571428571427], [418.0, 26.535519125683063], [420.0, 19.583333333333336], [421.0, 24.47826086956522], [422.0, 20.36363636363637], [423.0, 20.84436401240947], [424.0, 23.63160192055869], [425.0, 32.372641509433954], [427.0, 22.911437908496726], [426.0, 23.294202898550726], [428.0, 21.376101708135067], [429.0, 21.190201729106644], [430.0, 35.29497716894974], [431.0, 7.656250000000001], [434.0, 69.46666666666663], [437.0, 33.85089399744572], [436.0, 17.491071428571423], [435.0, 62.50993377483446], [445.0, 38.54999999999999], [444.0, 34.02564102564104], [447.0, 62.63583815028901], [446.0, 19.449884582675253], [433.0, 43.990415335463304], [432.0, 19.87894156560089], [438.0, 22.720930232558135], [439.0, 18.89347079037801], [440.0, 22.333333333333332], [441.0, 21.555555555555557], [442.0, 47.41347753743757], [443.0, 30.950495049504948], [449.0, 16.09596928982724], [448.0, 53.021428571428565], [450.0, 22.066666666666663], [452.0, 17.59863945578234], [453.0, 9.553921568627443], [454.0, 29.259031198686294], [451.0, 11.57142857142857], [455.0, 29.109243697478984], [456.0, 52.794380587484035], [463.0, 22.9117268041237], [459.0, 28.134020618556693], [458.0, 18.55670103092784], [457.0, 19.08404009252116], [462.0, 23.80107276119396], [461.0, 29.920731707317078], [460.0, 60.92215568862277], [466.0, 49.33128834355827], [468.0, 22.84361036639863], [469.0, 30.333801087528666], [467.0, 61.80246913580245], [465.0, 24.741935483870964], [464.0, 20.55327342747111], [471.0, 132.44444444444449], [470.0, 30.265624999999996], [478.0, 69.96226415094338], [479.0, 35.88600475881468], [473.0, 28.26470588235294], [472.0, 18.550251256281406], [475.0, 29.956521739130427], [474.0, 24.477064220183482], [476.0, 26.713557594291522], [477.0, 33.324786324786295], [480.0, 38.4047619047619], [482.0, 70.4081632653061], [483.0, 23.735795454545453], [492.0, 25.626582278481013], [493.0, 14.499999999999998], [494.0, 5.058823529411764], [495.0, 48.204371380534326], [484.0, 43.201328058773704], [481.0, 24.012698412698427], [485.0, 23.59902200488998], [486.0, 22.532355478861074], [487.0, 52.28447903156084], [488.0, 63.0162866449511], [490.0, 54.01934523809526], [491.0, 40.60458423270621], [489.0, 22.220338983050844], [498.0, 27.956602031394283], [496.0, 45.81804486106472], [500.0, 26.82408747387042], [501.0, 42.78350515463915], [499.0, 25.692742285962638], [508.0, 35.93478260869565], [509.0, 28.320987654320987], [510.0, 8.931034482758621], [511.0, 34.1971673499814], [497.0, 28.83423913043479], [504.0, 42.097744360902254], [505.0, 21.381642512077278], [503.0, 72.91139240506331], [502.0, 34.185840707964594], [506.0, 19.65374402549124], [507.0, 74.05882352941177], [540.0, 25.903225806451612], [543.0, 25.130981067125678], [529.0, 24.347286821705488], [528.0, 22.562700964630203], [531.0, 40.25333333333335], [530.0, 44.19047619047619], [533.0, 29.64649859943974], [532.0, 23.25444702242847], [542.0, 32.52162849872773], [541.0, 22.12000000000001], [539.0, 26.666666666666664], [538.0, 29.35483870967742], [537.0, 32.180722891566255], [536.0, 58.99999999999999], [527.0, 24.3], [513.0, 88.42857142857143], [512.0, 35.333333333333336], [515.0, 26.330808080808055], [514.0, 23.604972375690615], [517.0, 26.81818181818182], [516.0, 27.045948352626883], [519.0, 23.078231292517], [518.0, 26.797385620915037], [526.0, 20.195266272189343], [525.0, 27.5], [524.0, 27.43243243243244], [523.0, 28.85258964143425], [522.0, 35.040404040404034], [521.0, 35.644117647058806], [520.0, 24.40845070422535], [535.0, 37.093749999999964], [534.0, 22.852875191876365], [569.0, 42.657142857142865], [574.0, 29.67901234567901], [575.0, 39.428571428571445], [561.0, 65.59374999999999], [560.0, 28.314814814814824], [563.0, 81.63636363636364], [562.0, 24.727272727272727], [573.0, 30.68292682926828], [572.0, 27.380281690140848], [571.0, 71.34615384615385], [570.0, 45.52173913043479], [559.0, 46.92592592592595], [547.0, 26.00775193798449], [546.0, 28.556618819776737], [545.0, 33.68794326241136], [544.0, 32.91346153846155], [551.0, 25.512195121951216], [550.0, 22.802521008403353], [549.0, 34.29577464788733], [568.0, 32.63636363636363], [548.0, 32.75], [558.0, 64.57894736842105], [557.0, 42.466666666666676], [556.0, 28.7], [555.0, 24.509615384615387], [554.0, 22.71348314606741], [553.0, 21.744705882352953], [552.0, 26.82653369598067], [567.0, 68.23809523809524], [566.0, 60.95652173913042], [565.0, 42.04347826086957], [564.0, 51.66666666666667], [600.0, 21.677419354838715], [596.0, 21.750000000000004], [606.0, 22.976744186046513], [607.0, 31.999999999999996], [592.0, 21.520833333333325], [605.0, 24.919999999999998], [602.0, 29.727272727272727], [601.0, 27.961538461538463], [604.0, 32.240963855421676], [591.0, 29.55345911949684], [576.0, 24.17777777777778], [578.0, 61.47058823529413], [577.0, 70.84615384615385], [580.0, 48.69230769230769], [579.0, 56.89473684210527], [583.0, 32.0875], [582.0, 27.051282051282048], [581.0, 48.523809523809526], [590.0, 30.28571428571429], [589.0, 27.83783783783784], [588.0, 27.722222222222225], [586.0, 27.05882352941176], [587.0, 29.8], [585.0, 39.5], [584.0, 122.74999999999999], [599.0, 10.0], [598.0, 25.92452830188679], [597.0, 25.080000000000002], [594.0, 23.735294117647058], [595.0, 21.0], [593.0, 21.599999999999998], [614.0, 24.714285714285715], [625.0, 32.205882352941174], [628.0, 32.958333333333336], [629.0, 33.16666666666667], [631.0, 39.16901408450703], [630.0, 37.35294117647059], [627.0, 27.09090909090909], [626.0, 33.0], [624.0, 50.277777777777764], [639.0, 63.40425531914895], [638.0, 42.25], [637.0, 39.3], [636.0, 32.46999999999998], [635.0, 40.0], [634.0, 35.73170731707315], [633.0, 36.909090909090914], [632.0, 35.75], [615.0, 41.0], [613.0, 21.333333333333332], [612.0, 24.857142857142854], [611.0, 19.833333333333332], [610.0, 25.313725490196084], [608.0, 23.18867924528302], [609.0, 26.818181818181813], [623.0, 29.061068702290072], [622.0, 152.75], [621.0, 48.99999999999999], [619.0, 47.177777777777784], [620.0, 29.157894736842106], [618.0, 25.499999999999996], [617.0, 27.437500000000004], [616.0, 50.5], [646.0, 60.34146341463417], [642.0, 146.9583333333333], [644.0, 31.545454545454547], [643.0, 37.95792079207923], [645.0, 18.500000000000004], [647.0, 27.97792062604802], [665.0, 56.0], [664.0, 293.7301980198021], [657.0, 67.0], [671.0, 52.166666666666664], [656.0, 82.55555555555556], [669.0, 31.055555555555568], [670.0, 27.264791464597455], [667.0, 28.192982456140356], [668.0, 30.753246753246742], [666.0, 19.623869801084993], [659.0, 28.46086956521738], [658.0, 66.0], [661.0, 15.493006993007], [662.0, 19.563664357197858], [663.0, 105.3692307692308], [660.0, 67.46428571428572], [641.0, 294.4657534246574], [640.0, 55.949999999999996], [654.0, 26.40319643940932], [655.0, 67.5343511450381], [652.0, 30.77868852459017], [653.0, 26.766169154228855], [650.0, 11.039473684210527], [651.0, 10.476190476190482], [648.0, 40.508771929824576], [649.0, 40.11538461538462], [678.0, 15.708171206225689], [674.0, 26.601398601398596], [673.0, 44.25757575757576], [675.0, 11.932584269662923], [676.0, 9.286082474226802], [672.0, 46.56338028169014], [677.0, 16.32], [679.0, 16.54545454545455], [696.0, 27.700623700623705], [695.0, 29.311111111111114], [694.0, 32.72784810126584], [693.0, 58.684848484848466], [692.0, 30.679507420271577], [697.0, 30.300959232613934], [691.0, 33.0707317073171], [690.0, 49.20765027322407], [689.0, 36.37597911227153], [688.0, 32.4640169332079], [699.0, 35.00176201104181], [700.0, 37.617647058823536], [701.0, 28.686046511627914], [702.0, 28.383720930232556], [703.0, 31.121222957268035], [698.0, 22.348209783156832], [680.0, 24.804232804232804], [681.0, 28.738710789383003], [687.0, 36.03468208092486], [686.0, 36.84848484848485], [685.0, 34.55555555555555], [684.0, 48.76923076923078], [683.0, 55.232558139534895], [682.0, 40.230240549828196], [709.0, 23.951871657754015], [715.0, 66.47440794499614], [705.0, 33.41435647866516], [704.0, 33.46377144607851], [706.0, 28.019867549668867], [708.0, 29.21139101861993], [707.0, 40.56724746612009], [718.0, 26.32288401253918], [719.0, 30.740890688259103], [711.0, 37.256557074251745], [710.0, 34.21591836734689], [728.0, 31.68258455325571], [729.0, 39.5744582757031], [730.0, 44.31801470588235], [731.0, 39.09654768870685], [732.0, 17.454545454545453], [733.0, 22.44785276073618], [734.0, 24.689655172413797], [735.0, 20.018763029881864], [720.0, 35.40407747196743], [721.0, 32.802631578947405], [722.0, 15.594713656387658], [723.0, 26.66991924629878], [724.0, 42.74137931034483], [725.0, 41.761904761904745], [726.0, 31.112499999999994], [727.0, 29.901069518716568], [712.0, 58.04761904761905], [713.0, 39.870503597122315], [714.0, 35.07591007431102], [716.0, 24.091772151898713], [717.0, 25.902140672782878], [741.0, 30.875], [747.0, 36.87466185752923], [742.0, 42.59526159921032], [743.0, 42.0764430577221], [761.0, 66.18661971830987], [760.0, 62.263473053892255], [763.0, 53.994117647058815], [762.0, 59.40206185567008], [752.0, 41.34045112781961], [753.0, 41.85], [767.0, 61.443478260869576], [755.0, 18.97674418604651], [754.0, 42.94202898550725], [757.0, 37.9235346957107], [756.0, 37.89090909090911], [759.0, 35.55493018724973], [758.0, 37.98222222222225], [765.0, 42.832432432432476], [766.0, 34.03759873617691], [764.0, 55.51851851851855], [744.0, 36.391610766748684], [745.0, 43.83003648934126], [746.0, 36.07071865443417], [748.0, 31.752304609218434], [749.0, 23.063463819691606], [750.0, 24.610687022900763], [751.0, 53.91210670314628], [740.0, 40.04545454545455], [739.0, 47.705967976710276], [738.0, 67.19999999999999], [737.0, 34.50513519178357], [736.0, 27.055384615384593], [771.0, 169.8689655172414], [768.0, 34.29001074113856], [782.0, 407.81981981981994], [783.0, 71.56578947368418], [780.0, 85.85714285714285], [781.0, 143.7861350249208], [778.0, 67.73333333333332], [779.0, 71.28235294117648], [769.0, 24.107266435986162], [770.0, 35.447872923133154], [772.0, 391.8197709463538], [773.0, 60.322866894197944], [774.0, 541.7005076142132], [775.0, 22.10709791089863], [784.0, 38.84924623115578], [799.0, 41.55167810831427], [797.0, 40.666666666666664], [798.0, 45.72380952380952], [794.0, 41.05882352941177], [796.0, 41.29629629629629], [792.0, 52.785714285714285], [793.0, 61.01851851851852], [785.0, 26.32258064516129], [786.0, 32.791044776119406], [787.0, 47.6132075471698], [788.0, 16.703703703703695], [789.0, 31.21334569045409], [790.0, 62.64705882352942], [791.0, 46.75000000000001], [776.0, 23.288461538461537], [777.0, 49.86725663716815], [801.0, 40.90243902439027], [811.0, 36.98226164079827], [800.0, 24.500000000000004], [814.0, 32.2], [815.0, 30.480000000000015], [802.0, 28.52683363148484], [803.0, 39.28048780487805], [804.0, 55.43283582089552], [805.0, 40.1], [809.0, 44.90828402366865], [808.0, 53.8925619834711], [810.0, 43.38009478672989], [807.0, 58.5360824742268], [824.0, 20.309523809523807], [825.0, 19.17156862745099], [826.0, 15.872238488155398], [827.0, 25.51804670912951], [828.0, 19.87709497206705], [831.0, 15.51977401129944], [830.0, 11.080000000000002], [829.0, 16.105263157894733], [816.0, 32.93018480492817], [817.0, 33.10285714285714], [818.0, 23.361702127659594], [819.0, 14.474194393502769], [820.0, 39.72019623875728], [821.0, 27.384615384615383], [822.0, 24.77021276595744], [823.0, 22.162393162393165], [806.0, 41.10000000000001], [812.0, 41.679054054054056], [813.0, 38.94020650331324], [839.0, 93.03076923076925], [835.0, 19.743421052631593], [834.0, 18.919999999999998], [833.0, 27.172413793103445], [832.0, 15.600000000000005], [846.0, 49.07449856733525], [847.0, 33.92723004694833], [844.0, 31.444444444444443], [845.0, 43.13725490196078], [836.0, 14.6271186440678], [837.0, 38.38174655285625], [838.0, 57.056451612903246], [848.0, 36.789628756629284], [862.0, 35.68098159509205], [861.0, 36.368378812198976], [860.0, 30.184126984126976], [863.0, 29.481319880010922], [858.0, 29.550438596491215], [859.0, 22.170974155069594], [856.0, 43.38633776091085], [857.0, 46.96039603960397], [849.0, 140.2175324675325], [850.0, 42.618120237087176], [851.0, 65.96551306873151], [852.0, 45.714611872146136], [853.0, 37.771844660194155], [855.0, 67.00923076923073], [854.0, 46.333333333333336], [840.0, 62.323275862068954], [841.0, 44.557692307692314], [842.0, 66.40404040404042], [843.0, 63.49180327868853], [870.0, 38.77358490566037], [866.0, 19.142857142857142], [864.0, 44.99115044247787], [865.0, 36.62499999999998], [878.0, 68.42348955392426], [879.0, 47.66826923076919], [867.0, 42.185426008968605], [868.0, 42.055214723926404], [869.0, 15.432284541723662], [881.0, 32.161290322580655], [880.0, 58.03947368421052], [890.0, 39.25178947368429], [891.0, 88.31250000000001], [892.0, 29.91712634620422], [893.0, 22.55681818181819], [895.0, 19.479729729729744], [894.0, 23.076923076923077], [888.0, 27.424581005586592], [871.0, 34.453333333333305], [889.0, 20.95536959553697], [882.0, 9.413793103448278], [883.0, 41.52678571428572], [884.0, 44.72881355932204], [885.0, 41.88427299703262], [886.0, 9.393700787401574], [887.0, 22.441860465116278], [874.0, 68.12830188679244], [873.0, 43.45129870129872], [872.0, 33.592592592592595], [875.0, 42.5963645418327], [876.0, 45.08793686583984], [877.0, 35.54761904761905], [902.0, 18.875000000000004], [897.0, 13.430622009569383], [896.0, 9.835073068893522], [910.0, 32.947069943289165], [911.0, 33.94771241830064], [908.0, 20.45535714285712], [909.0, 20.4], [906.0, 17.4162162162162], [907.0, 22.38807126258713], [898.0, 263.0965517241378], [899.0, 26.014084507042256], [900.0, 22.318021201413444], [901.0, 19.27777777777778], [903.0, 15.366666666666665], [921.0, 57.75], [920.0, 54.0], [923.0, 51.019079685746306], [927.0, 50.352941176470594], [926.0, 60.72727272727273], [925.0, 48.86363636363637], [924.0, 52.38888888888889], [912.0, 40.46875000000001], [913.0, 50.81168831168832], [914.0, 50.5], [917.0, 46.021479713603824], [916.0, 44.04545454545455], [915.0, 37.0], [918.0, 40.75584415584414], [919.0, 40.358974358974436], [904.0, 16.874999999999996], [905.0, 20.231759656652365], [935.0, 40.612591605596336], [931.0, 35.753472222222236], [933.0, 118.15165876777255], [934.0, 73.2642857142857], [932.0, 39.587525150905385], [930.0, 41.47457627118645], [944.0, 46.28516579406626], [959.0, 28.657894736842106], [956.0, 32.215604026845675], [955.0, 46.60714285714284], [954.0, 27.021097046413512], [957.0, 194.9598853868195], [958.0, 28.66974595842957], [952.0, 23.78771695594125], [953.0, 18.08949191685912], [945.0, 17.750000000000004], [946.0, 14.994974874371863], [947.0, 26.71929824561403], [948.0, 28.4], [949.0, 22.958904109589042], [950.0, 14.0], [951.0, 22.5134443021767], [929.0, 53.01840490797546], [928.0, 55.55208333333332], [943.0, 95.35593220338986], [941.0, 59.21052631578946], [942.0, 30.298245614035082], [939.0, 38.450354609929065], [938.0, 40.70103092783506], [937.0, 49.953191489361714], [936.0, 67.11165048543695], [940.0, 42.13709677419356], [966.0, 34.06], [961.0, 23.299999999999994], [960.0, 35.266666666666666], [975.0, 23.175438596491222], [974.0, 12.0], [972.0, 28.864892528147404], [973.0, 29.345982142857178], [962.0, 32.04578313253012], [963.0, 30.950666666666645], [965.0, 33.16666666666667], [964.0, 37.84677419354838], [967.0, 32.585585585585584], [984.0, 8.37142857142857], [985.0, 7.692307692307692], [986.0, 11.260869565217392], [987.0, 12.94736842105263], [988.0, 15.35294117647059], [989.0, 9.625000000000002], [990.0, 16.383445945945958], [991.0, 197.57142857142858], [976.0, 26.61946902654867], [977.0, 36.93649885583519], [979.0, 39.13769106499306], [980.0, 55.0687160940326], [981.0, 63.44067796610171], [982.0, 13.25581395348837], [983.0, 9.333333333333334], [978.0, 42.06060606060606], [968.0, 33.650000000000006], [969.0, 66.53846153846155], [971.0, 41.846753246753224], [998.0, 18.400000000000002], [994.0, 4.533333333333333], [993.0, 29.807692307692317], [992.0, 100.875], [1006.0, 31.01295336787562], [1007.0, 47.55555555555555], [1004.0, 30.916666666666668], [1005.0, 16.792161520190035], [1002.0, 22.862745098039216], [1003.0, 23.686956521739113], [995.0, 48.55725190839692], [996.0, 46.111111111111114], [997.0, 9.339080459770116], [999.0, 23.80701754385965], [1016.0, 67.74358974358975], [1017.0, 45.05594405594404], [1018.0, 24.744186046511626], [1019.0, 39.67284991568301], [1020.0, 13.784999999999998], [1021.0, 48.40425531914892], [1022.0, 40.10526315789474], [1023.0, 55.703389830508485], [1009.0, 82.94444444444444], [1008.0, 32.87730061349694], [1010.0, 28.142857142857146], [1011.0, 21.937499999999993], [1012.0, 27.128205128205124], [1013.0, 26.32352941176471], [1014.0, 27.4], [1015.0, 43.94736842105262], [1000.0, 13.889908256880735], [1001.0, 19.658536585365855], [1028.0, 32.3269076305221], [1026.0, 44.91977077363897], [1024.0, 49.93388429752066], [1054.0, 11.645768025078382], [1052.0, 9.057142857142855], [1050.0, 40.274999999999984], [1048.0, 34.876470588235314], [1046.0, 38.97011207970109], [1044.0, 126.18382352941185], [1042.0, 146.58441558441555], [1040.0, 40.31474103585657], [1030.0, 31.005597014925367], [1032.0, 29.374999999999986], [1034.0, 29.626829268292678], [1036.0, 47.60126582278479], [1038.0, 39.511627906976756], [1072.0, 77.53030303030303], [1076.0, 51.303030303030305], [1074.0, 118.07692307692308], [1082.0, 20.0], [1080.0, 19.125], [1056.0, 90.33333333333333], [1084.0, 35.3448275862069], [1058.0, 19.676517571884972], [1062.0, 28.90322580645162], [1060.0, 29.745454545454542], [1064.0, 76.8989898989899], [1066.0, 59.870000000000005], [1068.0, 64.16883116883119], [1070.0, 52.20454545454545], [1096.0, 26.421052631578945], [1118.0, 23.036144578313248], [1092.0, 54.1219512195122], [1116.0, 30.994382022471903], [1114.0, 35.333333333333336], [1112.0, 27.374999999999996], [1110.0, 6.970149253731343], [1108.0, 6.588235294117647], [1106.0, 22.411458333333343], [1104.0, 30.087628865979383], [1090.0, 49.282828282828284], [1088.0, 21.666666666666668], [1094.0, 46.48226950354612], [1098.0, 33.068062827225134], [1100.0, 48.79411764705883], [1102.0, 28.245791245791246], [1122.0, 18.77777777777778], [1120.0, 89.61764705882352], [1148.0, 22.68322981366459], [1150.0, 22.569767441860463], [1144.0, 16.21348314606741], [1146.0, 13.770161290322582], [1142.0, 16.772466539196937], [1140.0, 84.50000000000001], [1136.0, 25.137931034482765], [1138.0, 21.629629629629626], [1124.0, 63.313432835820876], [1126.0, 115.64999999999996], [1128.0, 35.76190476190475], [1130.0, 26.653925041954132], [1132.0, 152.33333333333331], [1134.0, 23.3375], [1156.0, 44.65714285714286], [1160.0, 57.222222222222214], [1152.0, 15.925021795989544], [1162.0, 67.81249999999999], [1158.0, 106.94117647058825], [1164.0, 7.894736842105264], [1166.0, 98.09677419354837], [1200.0, 55.66874291440264], [1184.0, 113.2], [1186.0, 59.703703703703695], [1188.0, 55.22999999999999], [1190.0, 41.02956521739129], [1194.0, 36.86734693877547], [1192.0, 75.14182692307696], [1196.0, 25.07262569832403], [1198.0, 19.38689217758985], [1154.0, 105.16666666666667], [1174.0, 69.66666666666666], [1172.0, 90.36842105263159], [1170.0, 66.83333333333333], [1168.0, 100.07692307692307], [1176.0, 99.66666666666666], [1178.0, 142.33333333333331], [1180.0, 174.5161290322581], [1182.0, 123.75], [1029.0, 36.47802197802198], [1055.0, 115.7809523809524], [1053.0, 5.222222222222222], [1049.0, 31.70704225352111], [1047.0, 29.27888446215139], [1045.0, 39.6584699453552], [1043.0, 139.85517241379313], [1051.0, 62.885714285714286], [1041.0, 35.12548910005599], [1027.0, 38.8968609865471], [1025.0, 49.10810810810809], [1031.0, 33.02923976608188], [1033.0, 34.628140703517595], [1035.0, 47.04336043360435], [1037.0, 39.87091222030981], [1039.0, 26.896719319562568], [1073.0, 100.39999999999999], [1077.0, 26.0], [1075.0, 126.0], [1081.0, 22.285714285714285], [1079.0, 26.0212765957447], [1085.0, 44.86560693641614], [1083.0, 26.5], [1057.0, 22.360175695461223], [1061.0, 32.28882833787469], [1059.0, 22.393700787401585], [1063.0, 95.48333333333333], [1065.0, 20.36708860759494], [1067.0, 40.01518438177876], [1069.0, 67.3131313131313], [1071.0, 34.52735739231665], [1091.0, 49.66048502139797], [1113.0, 21.806666666666676], [1111.0, 25.71428571428571], [1089.0, 42.64], [1119.0, 19.583333333333332], [1117.0, 25.646551724137936], [1115.0, 33.184210526315795], [1109.0, 14.716981132075475], [1107.0, 35.40624999999999], [1105.0, 37.4297520661157], [1093.0, 55.41904761904761], [1095.0, 27.67605633802816], [1097.0, 24.6], [1099.0, 29.857142857142858], [1101.0, 37.97709923664123], [1103.0, 29.669354838709666], [1137.0, 28.35714285714287], [1139.0, 192.50175932441906], [1141.0, 14.133333333333335], [1143.0, 10.606837606837601], [1145.0, 11.845614035087719], [1147.0, 17.50389610389612], [1149.0, 23.599147121535182], [1151.0, 15.461538461538458], [1121.0, 21.666666666666668], [1123.0, 25.058823529411754], [1125.0, 29.177570093457938], [1127.0, 32.44642857142857], [1129.0, 48.9375], [1133.0, 24.2], [1131.0, 16.0], [1135.0, 31.64285714285714], [1159.0, 92.99999999999999], [1153.0, 27.020390070922016], [1183.0, 71.66666666666667], [1179.0, 69.55555555555556], [1181.0, 110.60000000000001], [1161.0, 101.60273972602742], [1163.0, 8.145516074450077], [1157.0, 103.14545454545453], [1165.0, 48.55555555555556], [1167.0, 10.0], [1185.0, 59.98514851485147], [1187.0, 56.96799999999999], [1189.0, 56.932541824069084], [1191.0, 47.766337386018236], [1195.0, 38.77083333333331], [1193.0, 40.02469135802467], [1197.0, 32.55416666666667], [1199.0, 14.954666666666668], [1155.0, 67.1304347826087], [1171.0, 33.30183893468614], [1169.0, 70.21212121212123], [1173.0, 75.44444444444444], [1177.0, 59.15384615384615], [1.0, 1.3181818181818183]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[1119.4142150366106, 52.48050773469758]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22471.716666666667, "minX": 1.62666396E12, "maxY": 5342108.816666666, "series": [{"data": [[1.62666396E12, 22471.716666666667], [1.62666414E12, 2474551.3666666667], [1.62666408E12, 2490118.6333333333], [1.62666426E12, 2318874.1166666667], [1.6266642E12, 2389440.4166666665], [1.62666432E12, 1044136.1833333333], [1.62666402E12, 1895415.4666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62666396E12, 47544.083333333336], [1.62666414E12, 5309487.05], [1.62666408E12, 5342108.816666666], [1.62666426E12, 4975476.333333333], [1.6266642E12, 5126879.1], [1.62666432E12, 2240350.0], [1.62666402E12, 4049205.066666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666432E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.5534932562622, "minX": 1.62666396E12, "maxY": 58.15235658342872, "series": [{"data": [[1.62666396E12, 31.439289239881543], [1.62666414E12, 55.02477810921469], [1.62666408E12, 55.09802906114823], [1.62666426E12, 57.79703892002776], [1.6266642E12, 58.15235658342872], [1.62666432E12, 26.5534932562622], [1.62666402E12, 46.59632173414515]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666432E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.553204238921786, "minX": 1.62666396E12, "maxY": 58.15206778850156, "series": [{"data": [[1.62666396E12, 31.078883604056323], [1.62666414E12, 55.02442201078431], [1.62666408E12, 55.097607323055925], [1.62666426E12, 57.79654265933138], [1.6266642E12, 58.15206778850156], [1.62666432E12, 26.553204238921786], [1.62666402E12, 46.594764442369325]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666432E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.049539499036608564, "minX": 1.62666396E12, "maxY": 1.4375841335367492, "series": [{"data": [[1.62666396E12, 1.4375841335367492], [1.62666414E12, 0.1381450523862986], [1.62666408E12, 0.13307371933410403], [1.62666426E12, 0.14184987246447223], [1.6266642E12, 0.1277248180086772], [1.62666432E12, 0.049539499036608564], [1.62666402E12, 0.2960510392560709]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666432E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62666396E12, "maxY": 3189.0, "series": [{"data": [[1.62666396E12, 772.0], [1.62666414E12, 1089.0], [1.62666408E12, 1075.0], [1.62666426E12, 1143.0], [1.6266642E12, 1084.0], [1.62666432E12, 272.0], [1.62666402E12, 3189.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62666396E12, 76.0], [1.62666414E12, 100.0], [1.62666408E12, 97.0], [1.62666426E12, 65.0], [1.6266642E12, 108.0], [1.62666432E12, 5.0], [1.62666402E12, 66.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62666396E12, 326.0], [1.62666414E12, 192.9900000000016], [1.62666408E12, 182.0], [1.62666426E12, 133.0], [1.6266642E12, 154.0], [1.62666432E12, 13.0], [1.62666402E12, 103.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62666396E12, 160.0], [1.62666414E12, 126.0], [1.62666408E12, 121.0], [1.62666426E12, 78.0], [1.6266642E12, 129.0], [1.62666432E12, 7.0], [1.62666402E12, 75.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62666396E12, 1.0], [1.62666414E12, 1.0], [1.62666408E12, 1.0], [1.62666426E12, 1.0], [1.6266642E12, 1.0], [1.62666432E12, 1.0], [1.62666402E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62666396E12, 11.0], [1.62666414E12, 52.0], [1.62666408E12, 51.0], [1.62666426E12, 38.0], [1.6266642E12, 59.0], [1.62666432E12, 3.0], [1.62666402E12, 51.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 290.0, "maxY": 66.0, "series": [{"data": [[16787.0, 16.0], [16947.0, 24.0], [16995.0, 44.0], [17131.0, 66.0], [16723.0, 57.0], [18419.0, 26.0], [17803.0, 56.0], [17427.0, 16.0], [17459.0, 5.0], [18443.0, 54.0], [19267.0, 58.0], [19347.0, 19.0], [19723.0, 51.0], [20355.0, 54.0], [20011.0, 51.0], [19851.0, 29.0], [20755.0, 55.0], [20779.0, 52.0], [20811.0, 51.0], [20939.0, 49.0], [21435.0, 49.0], [20627.0, 52.0], [20747.0, 51.0], [21475.0, 47.0], [21715.0, 51.0], [21611.0, 45.0], [22299.0, 48.0], [22395.0, 49.0], [22307.0, 49.0], [22027.0, 47.0], [8273.0, 39.0], [14333.0, 23.0], [15733.0, 28.0], [17570.0, 21.0], [18010.0, 37.0], [18258.0, 52.0], [17626.0, 57.0], [18314.0, 20.0], [19442.0, 47.0], [19330.0, 55.0], [19402.0, 51.0], [18482.0, 54.0], [18594.0, 57.0], [20418.0, 57.0], [19658.0, 54.0], [19730.0, 54.0], [19938.0, 57.0], [19962.0, 35.0], [19770.0, 49.0], [20170.0, 43.0], [20210.0, 51.0], [20002.0, 57.0], [20266.0, 52.0], [20298.0, 49.0], [20306.0, 53.0], [20554.0, 51.0], [21410.0, 48.0], [21194.0, 49.0], [20778.0, 50.0], [20746.0, 53.0], [20538.0, 32.0], [22442.0, 46.0], [21666.0, 49.0], [21730.0, 50.0], [22026.0, 49.0], [290.0, 1.0], [16897.0, 27.0], [16945.0, 60.0], [17097.0, 32.0], [18113.0, 31.0], [17921.0, 54.0], [18201.0, 56.0], [17553.0, 59.0], [19073.0, 33.0], [19017.0, 37.0], [18897.0, 41.0], [18921.0, 58.0], [19193.0, 56.0], [18457.0, 10.0], [19889.0, 53.0], [20089.0, 52.0], [20369.0, 50.0], [20345.0, 53.0], [20353.0, 53.0], [19953.0, 50.0], [20065.0, 21.0], [21481.0, 50.0], [20913.0, 48.0], [21193.0, 46.0], [20897.0, 50.0], [20825.0, 29.0], [21249.0, 47.0], [20689.0, 52.0], [20553.0, 51.0], [21121.0, 50.0], [21001.0, 44.0], [21097.0, 18.0], [22185.0, 50.0], [21617.0, 49.0], [22217.0, 50.0], [22489.0, 18.0], [1531.0, 7.0], [4176.0, 10.0], [5436.0, 14.0], [5990.0, 20.0], [7224.0, 29.0], [7442.0, 14.0], [8236.0, 33.0], [9884.0, 24.0], [16020.0, 18.0], [15928.0, 61.0], [16248.0, 37.0], [17144.0, 31.0], [17280.0, 52.0], [17368.0, 56.0], [17448.0, 24.0], [18168.0, 35.0], [17728.0, 16.0], [19440.0, 57.0], [18512.0, 52.0], [18712.0, 39.0], [20240.0, 55.0], [19928.0, 55.0], [20424.0, 52.0], [19760.0, 47.0], [20128.0, 48.0], [20000.0, 51.0], [19728.0, 56.0], [19936.0, 53.0], [19688.0, 31.0], [20224.0, 18.0], [20192.0, 52.0], [19840.0, 51.0], [21296.0, 47.0], [21112.0, 53.0], [21176.0, 48.0], [20640.0, 50.0], [20576.0, 52.0], [20856.0, 46.0], [20848.0, 53.0], [20792.0, 46.0], [20752.0, 23.0], [20992.0, 52.0], [21464.0, 49.0], [21232.0, 50.0], [21648.0, 47.0], [17127.0, 37.0], [17007.0, 35.0], [16703.0, 26.0], [17279.0, 36.0], [17743.0, 59.0], [18007.0, 59.0], [17487.0, 60.0], [17439.0, 56.0], [19359.0, 35.0], [19167.0, 59.0], [18903.0, 56.0], [18679.0, 59.0], [18927.0, 48.0], [19415.0, 47.0], [18799.0, 51.0], [19119.0, 43.0], [18535.0, 18.0], [20383.0, 54.0], [20375.0, 48.0], [20463.0, 52.0], [20239.0, 52.0], [19615.0, 50.0], [19495.0, 54.0], [20111.0, 51.0], [20255.0, 51.0], [19847.0, 53.0], [20495.0, 52.0], [20855.0, 49.0], [20815.0, 55.0], [20983.0, 54.0], [20527.0, 51.0], [20551.0, 52.0], [21335.0, 49.0], [21415.0, 48.0], [21175.0, 51.0], [20679.0, 53.0], [20607.0, 48.0], [20655.0, 48.0], [21711.0, 48.0], [22103.0, 45.0], [21871.0, 50.0], [21519.0, 46.0], [21759.0, 46.0], [22263.0, 44.0], [22567.0, 45.0], [8383.0, 24.0], [10231.0, 38.0], [11519.0, 2.0], [15843.0, 27.0], [15535.0, 57.0], [15479.0, 60.0], [16227.0, 39.0], [16886.0, 57.0], [17390.0, 61.0], [16934.0, 52.0], [18382.0, 59.0], [18214.0, 52.0], [18310.0, 58.0], [18334.0, 55.0], [18550.0, 43.0], [19326.0, 55.0], [18902.0, 56.0], [18870.0, 57.0], [18710.0, 56.0], [19006.0, 53.0], [20438.0, 55.0], [19782.0, 50.0], [19934.0, 48.0], [19950.0, 57.0], [19614.0, 44.0], [19942.0, 53.0], [20198.0, 56.0], [20118.0, 52.0], [20462.0, 48.0], [20454.0, 52.0], [19646.0, 57.0], [20390.0, 42.0], [20326.0, 49.5], [20270.0, 49.0], [20670.0, 52.0], [20934.0, 47.0], [20622.0, 52.0], [20494.0, 50.0], [21054.0, 52.0], [21142.0, 45.0], [20638.0, 49.0], [20726.0, 35.0], [21870.0, 48.0], [22302.0, 47.0], [21646.0, 52.0], [16445.0, 40.0], [17181.0, 32.0], [17949.0, 30.0], [18381.0, 55.0], [17813.0, 54.0], [18093.0, 56.0], [17925.0, 58.0], [18701.0, 46.0], [18845.0, 50.0], [18917.0, 50.0], [19125.0, 35.0], [19293.0, 34.0], [20453.0, 51.0], [20221.0, 51.0], [19669.0, 50.0], [19781.0, 50.0], [19957.0, 38.0], [19581.0, 34.0], [19973.0, 49.0], [19733.0, 51.0], [20461.0, 46.0], [20165.0, 55.0], [19773.0, 50.0], [20341.0, 52.0], [20317.0, 52.0], [21421.0, 48.0], [20581.0, 51.0], [21133.0, 51.0], [21213.0, 52.0], [21237.0, 52.0], [20813.0, 49.0], [20869.0, 49.0], [20989.0, 52.0], [20973.0, 49.0], [21277.0, 50.0], [21333.0, 30.0], [20613.0, 50.0], [21125.0, 51.0], [21005.0, 51.0], [21013.0, 51.0], [21941.0, 49.0], [22085.0, 43.0], [22157.0, 47.0], [21893.0, 49.0], [21629.0, 51.0], [5363.0, 16.0], [6457.0, 24.0], [8145.0, 25.0], [9182.0, 25.0], [9222.0, 37.0], [16294.0, 26.0], [17100.0, 23.0], [16796.0, 51.0], [16772.0, 59.0], [17500.0, 58.0], [19316.0, 35.0], [18684.0, 53.0], [19268.0, 50.0], [18908.0, 52.0], [18700.0, 13.0], [19604.0, 52.0], [19956.0, 50.0], [19836.0, 50.0], [19860.0, 25.0], [19788.0, 52.0], [19716.0, 46.0], [19524.0, 49.0], [20236.0, 53.0], [20324.0, 43.0], [19660.0, 53.0], [19668.0, 52.0], [20164.0, 51.0], [20220.0, 53.0], [20044.0, 53.0], [20732.0, 51.0], [21252.0, 48.0], [20932.0, 50.0], [20716.0, 54.0], [21500.0, 48.0], [21164.0, 55.0], [20740.0, 48.0], [21428.0, 47.0], [20564.0, 32.0], [21628.0, 50.0], [21900.0, 45.0], [21748.0, 49.0], [21860.0, 47.0], [22676.0, 48.0], [22572.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22676.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 290.0, "maxY": 66.0, "series": [{"data": [[16787.0, 16.0], [16947.0, 24.0], [16995.0, 44.0], [17131.0, 66.0], [16723.0, 57.0], [18419.0, 26.0], [17803.0, 56.0], [17427.0, 16.0], [17459.0, 5.0], [18443.0, 54.0], [19267.0, 58.0], [19347.0, 19.0], [19723.0, 51.0], [20355.0, 54.0], [20011.0, 51.0], [19851.0, 29.0], [20755.0, 55.0], [20779.0, 52.0], [20811.0, 51.0], [20939.0, 49.0], [21435.0, 49.0], [20627.0, 52.0], [20747.0, 51.0], [21475.0, 47.0], [21715.0, 51.0], [21611.0, 45.0], [22299.0, 48.0], [22395.0, 49.0], [22307.0, 49.0], [22027.0, 47.0], [8273.0, 39.0], [14333.0, 23.0], [15733.0, 28.0], [17570.0, 21.0], [18010.0, 37.0], [18258.0, 52.0], [17626.0, 57.0], [18314.0, 20.0], [19442.0, 47.0], [19330.0, 55.0], [19402.0, 51.0], [18482.0, 54.0], [18594.0, 57.0], [20418.0, 57.0], [19658.0, 54.0], [19730.0, 54.0], [19938.0, 57.0], [19962.0, 35.0], [19770.0, 49.0], [20170.0, 43.0], [20210.0, 51.0], [20002.0, 57.0], [20266.0, 52.0], [20298.0, 49.0], [20306.0, 53.0], [20554.0, 51.0], [21410.0, 48.0], [21194.0, 49.0], [20778.0, 50.0], [20746.0, 53.0], [20538.0, 32.0], [22442.0, 46.0], [21666.0, 49.0], [21730.0, 50.0], [22026.0, 49.0], [290.0, 1.0], [16897.0, 27.0], [16945.0, 60.0], [17097.0, 32.0], [18113.0, 31.0], [17921.0, 54.0], [18201.0, 56.0], [17553.0, 59.0], [19073.0, 33.0], [19017.0, 37.0], [18897.0, 41.0], [18921.0, 58.0], [19193.0, 56.0], [18457.0, 10.0], [19889.0, 53.0], [20089.0, 52.0], [20369.0, 50.0], [20345.0, 53.0], [20353.0, 53.0], [19953.0, 50.0], [20065.0, 21.0], [21481.0, 50.0], [20913.0, 48.0], [21193.0, 46.0], [20897.0, 50.0], [20825.0, 29.0], [21249.0, 47.0], [20689.0, 52.0], [20553.0, 51.0], [21121.0, 50.0], [21001.0, 44.0], [21097.0, 18.0], [22185.0, 50.0], [21617.0, 49.0], [22217.0, 50.0], [22489.0, 18.0], [1531.0, 7.0], [4176.0, 10.0], [5436.0, 14.0], [5990.0, 20.0], [7224.0, 29.0], [7442.0, 14.0], [8236.0, 33.0], [9884.0, 24.0], [16020.0, 18.0], [15928.0, 61.0], [16248.0, 37.0], [17144.0, 31.0], [17280.0, 52.0], [17368.0, 56.0], [17448.0, 24.0], [18168.0, 35.0], [17728.0, 16.0], [19440.0, 57.0], [18512.0, 52.0], [18712.0, 39.0], [20240.0, 55.0], [19928.0, 55.0], [20424.0, 52.0], [19760.0, 47.0], [20128.0, 48.0], [20000.0, 51.0], [19728.0, 56.0], [19936.0, 53.0], [19688.0, 31.0], [20224.0, 18.0], [20192.0, 52.0], [19840.0, 51.0], [21296.0, 47.0], [21112.0, 53.0], [21176.0, 48.0], [20640.0, 50.0], [20576.0, 52.0], [20856.0, 46.0], [20848.0, 53.0], [20792.0, 46.0], [20752.0, 23.0], [20992.0, 52.0], [21464.0, 49.0], [21232.0, 50.0], [21648.0, 47.0], [17127.0, 37.0], [17007.0, 35.0], [16703.0, 26.0], [17279.0, 36.0], [17743.0, 59.0], [18007.0, 59.0], [17487.0, 60.0], [17439.0, 56.0], [19359.0, 35.0], [19167.0, 59.0], [18903.0, 56.0], [18679.0, 59.0], [18927.0, 48.0], [19415.0, 47.0], [18799.0, 51.0], [19119.0, 43.0], [18535.0, 18.0], [20383.0, 54.0], [20375.0, 48.0], [20463.0, 52.0], [20239.0, 52.0], [19615.0, 50.0], [19495.0, 54.0], [20111.0, 51.0], [20255.0, 51.0], [19847.0, 53.0], [20495.0, 52.0], [20855.0, 49.0], [20815.0, 55.0], [20983.0, 54.0], [20527.0, 51.0], [20551.0, 52.0], [21335.0, 49.0], [21415.0, 48.0], [21175.0, 51.0], [20679.0, 53.0], [20607.0, 48.0], [20655.0, 48.0], [21711.0, 48.0], [22103.0, 45.0], [21871.0, 50.0], [21519.0, 46.0], [21759.0, 46.0], [22263.0, 44.0], [22567.0, 45.0], [8383.0, 24.0], [10231.0, 38.0], [11519.0, 2.0], [15843.0, 27.0], [15535.0, 57.0], [15479.0, 60.0], [16227.0, 39.0], [16886.0, 57.0], [17390.0, 61.0], [16934.0, 52.0], [18382.0, 59.0], [18214.0, 52.0], [18310.0, 58.0], [18334.0, 55.0], [18550.0, 43.0], [19326.0, 55.0], [18902.0, 56.0], [18870.0, 57.0], [18710.0, 56.0], [19006.0, 53.0], [20438.0, 55.0], [19782.0, 50.0], [19934.0, 48.0], [19950.0, 57.0], [19614.0, 44.0], [19942.0, 53.0], [20198.0, 56.0], [20118.0, 52.0], [20462.0, 48.0], [20454.0, 52.0], [19646.0, 57.0], [20390.0, 42.0], [20326.0, 49.5], [20270.0, 49.0], [20670.0, 52.0], [20934.0, 47.0], [20622.0, 52.0], [20494.0, 50.0], [21054.0, 52.0], [21142.0, 45.0], [20638.0, 49.0], [20726.0, 35.0], [21870.0, 48.0], [22302.0, 47.0], [21646.0, 52.0], [16445.0, 40.0], [17181.0, 32.0], [17949.0, 30.0], [18381.0, 55.0], [17813.0, 54.0], [18093.0, 56.0], [17925.0, 58.0], [18701.0, 46.0], [18845.0, 50.0], [18917.0, 50.0], [19125.0, 35.0], [19293.0, 34.0], [20453.0, 51.0], [20221.0, 51.0], [19669.0, 50.0], [19781.0, 50.0], [19957.0, 38.0], [19581.0, 34.0], [19973.0, 49.0], [19733.0, 51.0], [20461.0, 46.0], [20165.0, 55.0], [19773.0, 50.0], [20341.0, 52.0], [20317.0, 52.0], [21421.0, 48.0], [20581.0, 51.0], [21133.0, 51.0], [21213.0, 52.0], [21237.0, 52.0], [20813.0, 49.0], [20869.0, 49.0], [20989.0, 52.0], [20973.0, 49.0], [21277.0, 50.0], [21333.0, 30.0], [20613.0, 50.0], [21125.0, 51.0], [21005.0, 51.0], [21013.0, 51.0], [21941.0, 49.0], [22085.0, 43.0], [22157.0, 47.0], [21893.0, 49.0], [21629.0, 51.0], [5363.0, 16.0], [6457.0, 24.0], [8145.0, 25.0], [9182.0, 25.0], [9222.0, 37.0], [16294.0, 25.5], [17100.0, 23.0], [16796.0, 51.0], [16772.0, 59.0], [17500.0, 58.0], [19316.0, 35.0], [18684.0, 53.0], [19268.0, 50.0], [18908.0, 52.0], [18700.0, 13.0], [19604.0, 52.0], [19956.0, 50.0], [19836.0, 50.0], [19860.0, 25.0], [19788.0, 52.0], [19716.0, 46.0], [19524.0, 49.0], [20236.0, 53.0], [20324.0, 43.0], [19660.0, 53.0], [19668.0, 52.0], [20164.0, 51.0], [20220.0, 53.0], [20044.0, 53.0], [20732.0, 51.0], [21252.0, 48.0], [20932.0, 50.0], [20716.0, 54.0], [21500.0, 48.0], [21164.0, 55.0], [20740.0, 48.0], [21428.0, 47.0], [20564.0, 32.0], [21628.0, 50.0], [21900.0, 45.0], [21748.0, 49.0], [21860.0, 47.0], [22676.0, 48.0], [22572.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22676.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 188.88333333333333, "minX": 1.62666396E12, "maxY": 20628.916666666668, "series": [{"data": [[1.62666396E12, 188.88333333333333], [1.62666414E12, 20499.916666666668], [1.62666408E12, 20628.916666666668], [1.62666426E12, 19204.3], [1.6266642E12, 19794.633333333335], [1.62666432E12, 8636.333333333334], [1.62666402E12, 15717.166666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666432E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 185.71666666666667, "minX": 1.62666396E12, "maxY": 20628.916666666668, "series": [{"data": [[1.62666396E12, 185.71666666666667], [1.62666414E12, 20499.95], [1.62666408E12, 20628.916666666668], [1.62666426E12, 19210.333333333332], [1.6266642E12, 19794.9], [1.62666432E12, 8650.0], [1.62666402E12, 15700.333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62666432E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 185.71666666666667, "minX": 1.62666396E12, "maxY": 20628.916666666668, "series": [{"data": [[1.62666396E12, 185.71666666666667], [1.62666414E12, 20499.95], [1.62666408E12, 20628.916666666668], [1.62666426E12, 19210.333333333332], [1.6266642E12, 19794.9], [1.62666432E12, 8650.0], [1.62666402E12, 15700.333333333334]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666432E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 185.71666666666667, "minX": 1.62666396E12, "maxY": 20628.916666666668, "series": [{"data": [[1.62666396E12, 185.71666666666667], [1.62666414E12, 20499.95], [1.62666408E12, 20628.916666666668], [1.62666426E12, 19210.333333333332], [1.6266642E12, 19794.9], [1.62666432E12, 8650.0], [1.62666402E12, 15700.333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62666432E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

