/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2794.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 5.0], [0.8, 6.0], [0.9, 7.0], [1.0, 8.0], [1.1, 9.0], [1.2, 10.0], [1.3, 12.0], [1.4, 13.0], [1.5, 15.0], [1.6, 16.0], [1.7, 18.0], [1.8, 19.0], [1.9, 20.0], [2.0, 21.0], [2.1, 22.0], [2.2, 23.0], [2.3, 23.0], [2.4, 24.0], [2.5, 25.0], [2.6, 26.0], [2.7, 26.0], [2.8, 27.0], [2.9, 28.0], [3.0, 29.0], [3.1, 29.0], [3.2, 30.0], [3.3, 30.0], [3.4, 30.0], [3.5, 31.0], [3.6, 31.0], [3.7, 31.0], [3.8, 32.0], [3.9, 32.0], [4.0, 32.0], [4.1, 32.0], [4.2, 33.0], [4.3, 33.0], [4.4, 33.0], [4.5, 33.0], [4.6, 33.0], [4.7, 34.0], [4.8, 34.0], [4.9, 34.0], [5.0, 34.0], [5.1, 34.0], [5.2, 34.0], [5.3, 35.0], [5.4, 35.0], [5.5, 35.0], [5.6, 35.0], [5.7, 35.0], [5.8, 35.0], [5.9, 35.0], [6.0, 36.0], [6.1, 36.0], [6.2, 36.0], [6.3, 36.0], [6.4, 36.0], [6.5, 36.0], [6.6, 36.0], [6.7, 36.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 41.0], [10.2, 41.0], [10.3, 41.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 42.0], [11.4, 42.0], [11.5, 42.0], [11.6, 42.0], [11.7, 42.0], [11.8, 42.0], [11.9, 42.0], [12.0, 42.0], [12.1, 42.0], [12.2, 42.0], [12.3, 42.0], [12.4, 42.0], [12.5, 42.0], [12.6, 43.0], [12.7, 43.0], [12.8, 43.0], [12.9, 43.0], [13.0, 43.0], [13.1, 43.0], [13.2, 43.0], [13.3, 43.0], [13.4, 43.0], [13.5, 43.0], [13.6, 43.0], [13.7, 43.0], [13.8, 43.0], [13.9, 43.0], [14.0, 43.0], [14.1, 43.0], [14.2, 44.0], [14.3, 44.0], [14.4, 44.0], [14.5, 44.0], [14.6, 44.0], [14.7, 44.0], [14.8, 44.0], [14.9, 44.0], [15.0, 44.0], [15.1, 44.0], [15.2, 44.0], [15.3, 44.0], [15.4, 44.0], [15.5, 44.0], [15.6, 44.0], [15.7, 44.0], [15.8, 44.0], [15.9, 44.0], [16.0, 44.0], [16.1, 44.0], [16.2, 45.0], [16.3, 45.0], [16.4, 45.0], [16.5, 45.0], [16.6, 45.0], [16.7, 45.0], [16.8, 45.0], [16.9, 45.0], [17.0, 45.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 45.0], [17.6, 45.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 45.0], [18.4, 45.0], [18.5, 45.0], [18.6, 45.0], [18.7, 46.0], [18.8, 46.0], [18.9, 46.0], [19.0, 46.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 46.0], [19.9, 46.0], [20.0, 46.0], [20.1, 46.0], [20.2, 46.0], [20.3, 46.0], [20.4, 46.0], [20.5, 46.0], [20.6, 46.0], [20.7, 46.0], [20.8, 46.0], [20.9, 46.0], [21.0, 46.0], [21.1, 46.0], [21.2, 46.0], [21.3, 46.0], [21.4, 46.0], [21.5, 47.0], [21.6, 47.0], [21.7, 47.0], [21.8, 47.0], [21.9, 47.0], [22.0, 47.0], [22.1, 47.0], [22.2, 47.0], [22.3, 47.0], [22.4, 47.0], [22.5, 47.0], [22.6, 47.0], [22.7, 47.0], [22.8, 47.0], [22.9, 47.0], [23.0, 47.0], [23.1, 47.0], [23.2, 47.0], [23.3, 47.0], [23.4, 47.0], [23.5, 47.0], [23.6, 47.0], [23.7, 47.0], [23.8, 47.0], [23.9, 47.0], [24.0, 47.0], [24.1, 47.0], [24.2, 47.0], [24.3, 47.0], [24.4, 47.0], [24.5, 47.0], [24.6, 47.0], [24.7, 47.0], [24.8, 48.0], [24.9, 48.0], [25.0, 48.0], [25.1, 48.0], [25.2, 48.0], [25.3, 48.0], [25.4, 48.0], [25.5, 48.0], [25.6, 48.0], [25.7, 48.0], [25.8, 48.0], [25.9, 48.0], [26.0, 48.0], [26.1, 48.0], [26.2, 48.0], [26.3, 48.0], [26.4, 48.0], [26.5, 48.0], [26.6, 48.0], [26.7, 48.0], [26.8, 48.0], [26.9, 48.0], [27.0, 48.0], [27.1, 48.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 49.0], [28.4, 49.0], [28.5, 49.0], [28.6, 49.0], [28.7, 49.0], [28.8, 49.0], [28.9, 49.0], [29.0, 49.0], [29.1, 49.0], [29.2, 49.0], [29.3, 49.0], [29.4, 49.0], [29.5, 49.0], [29.6, 49.0], [29.7, 49.0], [29.8, 49.0], [29.9, 49.0], [30.0, 49.0], [30.1, 49.0], [30.2, 49.0], [30.3, 49.0], [30.4, 49.0], [30.5, 49.0], [30.6, 49.0], [30.7, 49.0], [30.8, 49.0], [30.9, 49.0], [31.0, 49.0], [31.1, 49.0], [31.2, 49.0], [31.3, 49.0], [31.4, 49.0], [31.5, 49.0], [31.6, 49.0], [31.7, 49.0], [31.8, 49.0], [31.9, 49.0], [32.0, 49.0], [32.1, 49.0], [32.2, 49.0], [32.3, 50.0], [32.4, 50.0], [32.5, 50.0], [32.6, 50.0], [32.7, 50.0], [32.8, 50.0], [32.9, 50.0], [33.0, 50.0], [33.1, 50.0], [33.2, 50.0], [33.3, 50.0], [33.4, 50.0], [33.5, 50.0], [33.6, 50.0], [33.7, 50.0], [33.8, 50.0], [33.9, 50.0], [34.0, 50.0], [34.1, 50.0], [34.2, 50.0], [34.3, 50.0], [34.4, 50.0], [34.5, 50.0], [34.6, 50.0], [34.7, 50.0], [34.8, 50.0], [34.9, 50.0], [35.0, 50.0], [35.1, 50.0], [35.2, 50.0], [35.3, 50.0], [35.4, 50.0], [35.5, 50.0], [35.6, 50.0], [35.7, 50.0], [35.8, 50.0], [35.9, 50.0], [36.0, 50.0], [36.1, 50.0], [36.2, 50.0], [36.3, 50.0], [36.4, 51.0], [36.5, 51.0], [36.6, 51.0], [36.7, 51.0], [36.8, 51.0], [36.9, 51.0], [37.0, 51.0], [37.1, 51.0], [37.2, 51.0], [37.3, 51.0], [37.4, 51.0], [37.5, 51.0], [37.6, 51.0], [37.7, 51.0], [37.8, 51.0], [37.9, 51.0], [38.0, 51.0], [38.1, 51.0], [38.2, 51.0], [38.3, 51.0], [38.4, 51.0], [38.5, 51.0], [38.6, 51.0], [38.7, 51.0], [38.8, 51.0], [38.9, 51.0], [39.0, 51.0], [39.1, 51.0], [39.2, 51.0], [39.3, 51.0], [39.4, 51.0], [39.5, 51.0], [39.6, 51.0], [39.7, 51.0], [39.8, 51.0], [39.9, 51.0], [40.0, 51.0], [40.1, 51.0], [40.2, 51.0], [40.3, 51.0], [40.4, 51.0], [40.5, 51.0], [40.6, 51.0], [40.7, 52.0], [40.8, 52.0], [40.9, 52.0], [41.0, 52.0], [41.1, 52.0], [41.2, 52.0], [41.3, 52.0], [41.4, 52.0], [41.5, 52.0], [41.6, 52.0], [41.7, 52.0], [41.8, 52.0], [41.9, 52.0], [42.0, 52.0], [42.1, 52.0], [42.2, 52.0], [42.3, 52.0], [42.4, 52.0], [42.5, 52.0], [42.6, 52.0], [42.7, 52.0], [42.8, 52.0], [42.9, 52.0], [43.0, 52.0], [43.1, 52.0], [43.2, 52.0], [43.3, 52.0], [43.4, 52.0], [43.5, 52.0], [43.6, 52.0], [43.7, 52.0], [43.8, 52.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 52.0], [44.8, 52.0], [44.9, 53.0], [45.0, 53.0], [45.1, 53.0], [45.2, 53.0], [45.3, 53.0], [45.4, 53.0], [45.5, 53.0], [45.6, 53.0], [45.7, 53.0], [45.8, 53.0], [45.9, 53.0], [46.0, 53.0], [46.1, 53.0], [46.2, 53.0], [46.3, 53.0], [46.4, 53.0], [46.5, 53.0], [46.6, 53.0], [46.7, 53.0], [46.8, 53.0], [46.9, 53.0], [47.0, 53.0], [47.1, 53.0], [47.2, 53.0], [47.3, 53.0], [47.4, 53.0], [47.5, 53.0], [47.6, 53.0], [47.7, 53.0], [47.8, 53.0], [47.9, 53.0], [48.0, 53.0], [48.1, 53.0], [48.2, 53.0], [48.3, 53.0], [48.4, 53.0], [48.5, 53.0], [48.6, 53.0], [48.7, 53.0], [48.8, 53.0], [48.9, 53.0], [49.0, 53.0], [49.1, 54.0], [49.2, 54.0], [49.3, 54.0], [49.4, 54.0], [49.5, 54.0], [49.6, 54.0], [49.7, 54.0], [49.8, 54.0], [49.9, 54.0], [50.0, 54.0], [50.1, 54.0], [50.2, 54.0], [50.3, 54.0], [50.4, 54.0], [50.5, 54.0], [50.6, 54.0], [50.7, 54.0], [50.8, 54.0], [50.9, 54.0], [51.0, 54.0], [51.1, 54.0], [51.2, 54.0], [51.3, 54.0], [51.4, 54.0], [51.5, 54.0], [51.6, 54.0], [51.7, 54.0], [51.8, 54.0], [51.9, 54.0], [52.0, 54.0], [52.1, 54.0], [52.2, 54.0], [52.3, 54.0], [52.4, 54.0], [52.5, 54.0], [52.6, 54.0], [52.7, 54.0], [52.8, 54.0], [52.9, 54.0], [53.0, 54.0], [53.1, 54.0], [53.2, 55.0], [53.3, 55.0], [53.4, 55.0], [53.5, 55.0], [53.6, 55.0], [53.7, 55.0], [53.8, 55.0], [53.9, 55.0], [54.0, 55.0], [54.1, 55.0], [54.2, 55.0], [54.3, 55.0], [54.4, 55.0], [54.5, 55.0], [54.6, 55.0], [54.7, 55.0], [54.8, 55.0], [54.9, 55.0], [55.0, 55.0], [55.1, 55.0], [55.2, 55.0], [55.3, 55.0], [55.4, 55.0], [55.5, 55.0], [55.6, 55.0], [55.7, 55.0], [55.8, 55.0], [55.9, 55.0], [56.0, 55.0], [56.1, 55.0], [56.2, 55.0], [56.3, 55.0], [56.4, 55.0], [56.5, 55.0], [56.6, 55.0], [56.7, 55.0], [56.8, 55.0], [56.9, 55.0], [57.0, 55.0], [57.1, 55.0], [57.2, 56.0], [57.3, 56.0], [57.4, 56.0], [57.5, 56.0], [57.6, 56.0], [57.7, 56.0], [57.8, 56.0], [57.9, 56.0], [58.0, 56.0], [58.1, 56.0], [58.2, 56.0], [58.3, 56.0], [58.4, 56.0], [58.5, 56.0], [58.6, 56.0], [58.7, 56.0], [58.8, 56.0], [58.9, 56.0], [59.0, 56.0], [59.1, 56.0], [59.2, 56.0], [59.3, 56.0], [59.4, 56.0], [59.5, 56.0], [59.6, 56.0], [59.7, 56.0], [59.8, 56.0], [59.9, 56.0], [60.0, 56.0], [60.1, 56.0], [60.2, 56.0], [60.3, 56.0], [60.4, 56.0], [60.5, 56.0], [60.6, 56.0], [60.7, 57.0], [60.8, 57.0], [60.9, 57.0], [61.0, 57.0], [61.1, 57.0], [61.2, 57.0], [61.3, 57.0], [61.4, 57.0], [61.5, 57.0], [61.6, 57.0], [61.7, 57.0], [61.8, 57.0], [61.9, 57.0], [62.0, 57.0], [62.1, 57.0], [62.2, 57.0], [62.3, 57.0], [62.4, 57.0], [62.5, 57.0], [62.6, 57.0], [62.7, 57.0], [62.8, 57.0], [62.9, 57.0], [63.0, 57.0], [63.1, 57.0], [63.2, 57.0], [63.3, 57.0], [63.4, 57.0], [63.5, 57.0], [63.6, 57.0], [63.7, 57.0], [63.8, 57.0], [63.9, 57.0], [64.0, 58.0], [64.1, 58.0], [64.2, 58.0], [64.3, 58.0], [64.4, 58.0], [64.5, 58.0], [64.6, 58.0], [64.7, 58.0], [64.8, 58.0], [64.9, 58.0], [65.0, 58.0], [65.1, 58.0], [65.2, 58.0], [65.3, 58.0], [65.4, 58.0], [65.5, 58.0], [65.6, 58.0], [65.7, 58.0], [65.8, 58.0], [65.9, 58.0], [66.0, 58.0], [66.1, 58.0], [66.2, 58.0], [66.3, 58.0], [66.4, 58.0], [66.5, 58.0], [66.6, 58.0], [66.7, 58.0], [66.8, 58.0], [66.9, 58.0], [67.0, 59.0], [67.1, 59.0], [67.2, 59.0], [67.3, 59.0], [67.4, 59.0], [67.5, 59.0], [67.6, 59.0], [67.7, 59.0], [67.8, 59.0], [67.9, 59.0], [68.0, 59.0], [68.1, 59.0], [68.2, 59.0], [68.3, 59.0], [68.4, 59.0], [68.5, 59.0], [68.6, 59.0], [68.7, 59.0], [68.8, 59.0], [68.9, 59.0], [69.0, 59.0], [69.1, 59.0], [69.2, 59.0], [69.3, 59.0], [69.4, 59.0], [69.5, 59.0], [69.6, 59.0], [69.7, 59.0], [69.8, 60.0], [69.9, 60.0], [70.0, 60.0], [70.1, 60.0], [70.2, 60.0], [70.3, 60.0], [70.4, 60.0], [70.5, 60.0], [70.6, 60.0], [70.7, 60.0], [70.8, 60.0], [70.9, 60.0], [71.0, 60.0], [71.1, 60.0], [71.2, 60.0], [71.3, 60.0], [71.4, 60.0], [71.5, 60.0], [71.6, 60.0], [71.7, 60.0], [71.8, 60.0], [71.9, 60.0], [72.0, 60.0], [72.1, 60.0], [72.2, 61.0], [72.3, 61.0], [72.4, 61.0], [72.5, 61.0], [72.6, 61.0], [72.7, 61.0], [72.8, 61.0], [72.9, 61.0], [73.0, 61.0], [73.1, 61.0], [73.2, 61.0], [73.3, 61.0], [73.4, 61.0], [73.5, 61.0], [73.6, 61.0], [73.7, 61.0], [73.8, 61.0], [73.9, 61.0], [74.0, 61.0], [74.1, 61.0], [74.2, 61.0], [74.3, 61.0], [74.4, 62.0], [74.5, 62.0], [74.6, 62.0], [74.7, 62.0], [74.8, 62.0], [74.9, 62.0], [75.0, 62.0], [75.1, 62.0], [75.2, 62.0], [75.3, 62.0], [75.4, 62.0], [75.5, 62.0], [75.6, 62.0], [75.7, 62.0], [75.8, 62.0], [75.9, 62.0], [76.0, 62.0], [76.1, 62.0], [76.2, 62.0], [76.3, 63.0], [76.4, 63.0], [76.5, 63.0], [76.6, 63.0], [76.7, 63.0], [76.8, 63.0], [76.9, 63.0], [77.0, 63.0], [77.1, 63.0], [77.2, 63.0], [77.3, 63.0], [77.4, 63.0], [77.5, 63.0], [77.6, 63.0], [77.7, 63.0], [77.8, 63.0], [77.9, 63.0], [78.0, 63.0], [78.1, 64.0], [78.2, 64.0], [78.3, 64.0], [78.4, 64.0], [78.5, 64.0], [78.6, 64.0], [78.7, 64.0], [78.8, 64.0], [78.9, 64.0], [79.0, 64.0], [79.1, 64.0], [79.2, 64.0], [79.3, 64.0], [79.4, 64.0], [79.5, 64.0], [79.6, 65.0], [79.7, 65.0], [79.8, 65.0], [79.9, 65.0], [80.0, 65.0], [80.1, 65.0], [80.2, 65.0], [80.3, 65.0], [80.4, 65.0], [80.5, 65.0], [80.6, 65.0], [80.7, 65.0], [80.8, 65.0], [80.9, 65.0], [81.0, 66.0], [81.1, 66.0], [81.2, 66.0], [81.3, 66.0], [81.4, 66.0], [81.5, 66.0], [81.6, 66.0], [81.7, 66.0], [81.8, 66.0], [81.9, 66.0], [82.0, 66.0], [82.1, 67.0], [82.2, 67.0], [82.3, 67.0], [82.4, 67.0], [82.5, 67.0], [82.6, 67.0], [82.7, 67.0], [82.8, 67.0], [82.9, 67.0], [83.0, 67.0], [83.1, 67.0], [83.2, 68.0], [83.3, 68.0], [83.4, 68.0], [83.5, 68.0], [83.6, 68.0], [83.7, 68.0], [83.8, 68.0], [83.9, 68.0], [84.0, 68.0], [84.1, 69.0], [84.2, 69.0], [84.3, 69.0], [84.4, 69.0], [84.5, 69.0], [84.6, 69.0], [84.7, 69.0], [84.8, 69.0], [84.9, 70.0], [85.0, 70.0], [85.1, 70.0], [85.2, 70.0], [85.3, 70.0], [85.4, 70.0], [85.5, 70.0], [85.6, 70.0], [85.7, 71.0], [85.8, 71.0], [85.9, 71.0], [86.0, 71.0], [86.1, 71.0], [86.2, 71.0], [86.3, 72.0], [86.4, 72.0], [86.5, 72.0], [86.6, 72.0], [86.7, 72.0], [86.8, 73.0], [86.9, 73.0], [87.0, 73.0], [87.1, 73.0], [87.2, 73.0], [87.3, 74.0], [87.4, 74.0], [87.5, 74.0], [87.6, 74.0], [87.7, 74.0], [87.8, 75.0], [87.9, 75.0], [88.0, 75.0], [88.1, 75.0], [88.2, 76.0], [88.3, 76.0], [88.4, 76.0], [88.5, 77.0], [88.6, 77.0], [88.7, 77.0], [88.8, 78.0], [88.9, 78.0], [89.0, 78.0], [89.1, 79.0], [89.2, 79.0], [89.3, 79.0], [89.4, 80.0], [89.5, 80.0], [89.6, 81.0], [89.7, 81.0], [89.8, 82.0], [89.9, 83.0], [90.0, 83.0], [90.1, 84.0], [90.2, 85.0], [90.3, 85.0], [90.4, 86.0], [90.5, 87.0], [90.6, 88.0], [90.7, 89.0], [90.8, 90.0], [90.9, 92.0], [91.0, 94.0], [91.1, 96.0], [91.2, 97.0], [91.3, 100.0], [91.4, 102.0], [91.5, 104.0], [91.6, 107.0], [91.7, 111.0], [91.8, 115.0], [91.9, 120.0], [92.0, 124.0], [92.1, 127.0], [92.2, 132.0], [92.3, 137.0], [92.4, 142.0], [92.5, 146.0], [92.6, 152.0], [92.7, 158.0], [92.8, 162.0], [92.9, 166.0], [93.0, 170.0], [93.1, 174.0], [93.2, 177.0], [93.3, 180.0], [93.4, 185.0], [93.5, 190.0], [93.6, 197.0], [93.7, 204.0], [93.8, 212.0], [93.9, 219.0], [94.0, 226.0], [94.1, 235.0], [94.2, 244.0], [94.3, 253.0], [94.4, 266.0], [94.5, 286.0], [94.6, 335.0], [94.7, 378.0], [94.8, 395.0], [94.9, 406.0], [95.0, 414.0], [95.1, 421.0], [95.2, 427.0], [95.3, 432.0], [95.4, 437.0], [95.5, 442.0], [95.6, 446.0], [95.7, 450.0], [95.8, 454.0], [95.9, 458.0], [96.0, 462.0], [96.1, 466.0], [96.2, 470.0], [96.3, 473.0], [96.4, 477.0], [96.5, 481.0], [96.6, 485.0], [96.7, 488.0], [96.8, 492.0], [96.9, 496.0], [97.0, 500.0], [97.1, 503.0], [97.2, 508.0], [97.3, 512.0], [97.4, 516.0], [97.5, 520.0], [97.6, 525.0], [97.7, 530.0], [97.8, 534.0], [97.9, 539.0], [98.0, 543.0], [98.1, 548.0], [98.2, 553.0], [98.3, 559.0], [98.4, 564.0], [98.5, 570.0], [98.6, 576.0], [98.7, 582.0], [98.8, 588.0], [98.9, 594.0], [99.0, 601.0], [99.1, 608.0], [99.2, 617.0], [99.3, 626.0], [99.4, 638.0], [99.5, 652.0], [99.6, 669.0], [99.7, 690.0], [99.8, 715.0], [99.9, 754.0], [100.0, 2794.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1967794.0, "series": [{"data": [[0.0, 1967794.0], [2100.0, 1.0], [2300.0, 1.0], [600.0, 16430.0], [700.0, 4338.0], [2700.0, 1.0], [200.0, 19364.0], [800.0, 612.0], [900.0, 129.0], [1000.0, 97.0], [1100.0, 91.0], [300.0, 6424.0], [1200.0, 261.0], [1300.0, 20.0], [1400.0, 4.0], [100.0, 50579.0], [400.0, 46555.0], [1900.0, 1.0], [500.0, 42698.0], [2000.0, 1.0]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2091290.0, "series": [{"data": [[0.0, 2091290.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 64106.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 450.80628615978577, "minX": 1.62606222E12, "maxY": 600.0, "series": [{"data": [[1.62606234E12, 600.0], [1.62606222E12, 585.7026661222725], [1.62606252E12, 450.80628615978577], [1.6260624E12, 600.0], [1.62606228E12, 600.0], [1.62606246E12, 600.0]], "isOverall": false, "label": "role1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62606252E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 2.0, "maxY": 605.0, "series": [{"data": [[2.0, 1.75], [3.0, 1.3333333333333333], [4.0, 3.4], [5.0, 1.7647058823529411], [6.0, 2.0], [7.0, 2.5], [8.0, 3.0], [9.0, 2.185185185185185], [10.0, 1.6666666666666667], [11.0, 1.6874999999999998], [12.0, 1.8181818181818183], [13.0, 8.777777777777779], [14.0, 3.1818181818181808], [15.0, 1.941176470588235], [16.0, 2.0350877192982457], [17.0, 2.7000000000000006], [18.0, 3.7], [19.0, 3.2499999999999996], [20.0, 3.5], [21.0, 3.833333333333333], [22.0, 4.0], [23.0, 4.473684210526316], [24.0, 4.666666666666667], [25.0, 3.666666666666667], [26.0, 2.833333333333333], [27.0, 3.4021739130434763], [28.0, 2.75], [29.0, 2.5], [30.0, 2.625], [31.0, 2.7], [33.0, 5.916666666666666], [32.0, 5.782608695652175], [35.0, 5.666666666666667], [34.0, 11.583333333333334], [36.0, 17.5], [39.0, 35.625], [38.0, 14.0], [41.0, 46.25], [43.0, 3.0], [42.0, 4.645161290322581], [45.0, 4.000000000000001], [44.0, 3.0], [47.0, 4.482758620689655], [46.0, 7.15315315315315], [49.0, 10.5], [48.0, 4.471698113207548], [51.0, 28.0], [50.0, 17.571428571428573], [53.0, 27.0], [52.0, 25.166666666666668], [55.0, 29.0], [54.0, 27.0], [57.0, 20.42857142857143], [56.0, 28.75], [59.0, 3.32857142857143], [61.0, 28.88888888888889], [60.0, 4.674418604651165], [63.0, 9.390532544378695], [62.0, 35.5], [67.0, 12.5], [66.0, 6.026315789473684], [65.0, 9.341530054644805], [64.0, 9.058823529411764], [71.0, 28.5], [70.0, 21.375], [69.0, 10.333333333333332], [68.0, 13.549999999999999], [75.0, 32.0], [74.0, 10.382022471910116], [73.0, 10.716981132075473], [72.0, 29.6], [79.0, 7.920000000000002], [78.0, 13.54285714285714], [77.0, 19.4], [76.0, 9.141666666666667], [83.0, 6.598484848484852], [82.0, 48.84210526315788], [81.0, 40.157894736842096], [80.0, 35.333333333333336], [87.0, 50.357142857142854], [86.0, 61.0], [85.0, 19.571428571428573], [84.0, 10.448529411764705], [91.0, 54.0], [90.0, 8.947368421052639], [89.0, 13.825], [95.0, 8.848484848484851], [94.0, 58.333333333333336], [93.0, 54.0], [92.0, 52.0], [99.0, 11.229629629629635], [98.0, 53.0], [97.0, 51.625], [96.0, 24.149999999999995], [102.0, 15.94366197183099], [101.0, 59.5], [100.0, 57.27272727272727], [107.0, 133.0], [106.0, 18.614035087719305], [105.0, 4.027397260273974], [104.0, 96.83999999999999], [111.0, 29.875], [110.0, 2.741935483870968], [109.0, 23.790123456790123], [108.0, 21.218750000000004], [115.0, 73.3125], [114.0, 115.0], [112.0, 17.346153846153847], [119.0, 31.750000000000004], [118.0, 37.04], [117.0, 14.07540983606558], [116.0, 3.9615384615384617], [123.0, 2.7500000000000004], [122.0, 5.85], [121.0, 18.00833333333333], [120.0, 11.482758620689655], [126.0, 23.564102564102562], [124.0, 9.370370370370368], [135.0, 13.162601626016265], [134.0, 73.0], [133.0, 23.86390532544378], [132.0, 47.714285714285715], [131.0, 2.0], [130.0, 12.646616541353382], [129.0, 75.0], [128.0, 76.0], [143.0, 19.340000000000003], [142.0, 13.264705882352942], [141.0, 84.95652173913042], [140.0, 9.540983606557381], [139.0, 3.660377358490566], [138.0, 94.45454545454547], [137.0, 74.36842105263159], [136.0, 36.27272727272727], [151.0, 10.26623376623377], [150.0, 8.777777777777779], [149.0, 21.240223463687144], [148.0, 48.733333333333334], [147.0, 20.02173913043478], [146.0, 22.676425269645637], [145.0, 51.14285714285714], [144.0, 21.96855345911949], [159.0, 73.66666666666667], [158.0, 58.75], [157.0, 77.375], [155.0, 42.625], [154.0, 18.601941747572823], [153.0, 66.23529411764707], [152.0, 12.107142857142852], [167.0, 49.15384615384616], [166.0, 46.083333333333336], [165.0, 18.03125], [164.0, 29.333333333333332], [162.0, 2.0], [161.0, 39.04545454545455], [160.0, 62.85416666666666], [175.0, 98.28571428571429], [174.0, 141.0], [173.0, 62.21428571428571], [171.0, 2.2], [170.0, 54.523809523809526], [169.0, 63.13636363636363], [182.0, 3.0], [180.0, 1.5], [179.0, 14.430894308943088], [178.0, 132.0], [177.0, 141.4], [176.0, 134.0], [191.0, 20.0], [190.0, 38.133333333333326], [189.0, 12.666666666666666], [188.0, 14.5], [187.0, 37.47945205479453], [186.0, 93.38461538461539], [185.0, 54.6], [197.0, 14.4], [198.0, 10.80487804878049], [199.0, 22.125], [196.0, 38.88095238095238], [195.0, 154.66666666666666], [194.0, 155.0], [193.0, 79.10000000000001], [192.0, 46.250000000000014], [203.0, 61.04347826086956], [205.0, 81.84375], [206.0, 92.14285714285714], [200.0, 71.73000000000003], [207.0, 60.00000000000001], [201.0, 107.02040816326527], [202.0, 24.287356321839084], [211.0, 28.943527367506498], [212.0, 32.443548387096776], [213.0, 22.88749999999999], [214.0, 20.052631578947373], [215.0, 31.229629629629617], [209.0, 5.900826446280993], [210.0, 55.464285714285715], [208.0, 8.19047619047619], [216.0, 42.833333333333336], [217.0, 26.687499999999943], [218.0, 116.38749999999997], [219.0, 167.5714285714286], [220.0, 6.258064516129031], [221.0, 28.82178217821783], [222.0, 13.686295503211985], [223.0, 14.301336573511552], [224.0, 206.48717948717953], [225.0, 112.86842105263158], [226.0, 49.65700483091789], [227.0, 40.000000000000014], [228.0, 31.148849797023004], [231.0, 91.0], [230.0, 48.1894736842105], [229.0, 72.3157894736842], [239.0, 27.977744807121642], [238.0, 44.88636363636363], [237.0, 230.5], [236.0, 71.08108108108111], [234.0, 57.02272727272727], [233.0, 33.05111821086262], [232.0, 118.1891891891892], [235.0, 112.99999999999999], [241.0, 11.808510638297873], [242.0, 63.90131578947367], [244.0, 19.440860215053764], [245.0, 11.370370370370367], [246.0, 26.101123595505616], [240.0, 26.559999999999995], [247.0, 30.438271604938258], [243.0, 67.80000000000001], [255.0, 29.24844720496895], [254.0, 218.5], [253.0, 37.70879120879121], [252.0, 5.0], [251.0, 245.0], [250.0, 54.8934911242603], [249.0, 57.61702127659573], [248.0, 605.0], [270.0, 71.30487804878045], [271.0, 69.54166666666666], [269.0, 9.384615384615385], [268.0, 30.625], [267.0, 10.533333333333331], [266.0, 18.58181818181819], [265.0, 43.24151696606786], [264.0, 47.29299363057322], [263.0, 17.799999999999997], [257.0, 60.83333333333332], [256.0, 41.1748466257669], [259.0, 44.522491349480966], [258.0, 19.47872340425532], [262.0, 590.3333333333334], [261.0, 11.0], [260.0, 24.80555555555556], [286.0, 40.83333333333333], [287.0, 41.02312138728328], [285.0, 178.27272727272725], [284.0, 15.0], [283.0, 14.0], [282.0, 22.991596638655462], [281.0, 239.8095238095238], [280.0, 16.0], [279.0, 40.7037037037037], [273.0, 34.272814601344855], [272.0, 19.929319371727743], [275.0, 57.57142857142857], [274.0, 30.92086330935252], [278.0, 174.73684210526315], [277.0, 30.615384615384613], [276.0, 42.74637681159421], [302.0, 150.62499999999997], [303.0, 41.38613861386139], [301.0, 31.767918088737186], [300.0, 81.39999999999999], [299.0, 68.93333333333332], [298.0, 48.083333333333336], [297.0, 33.388535031847134], [296.0, 31.40000000000001], [295.0, 110.79310344827586], [290.0, 448.25], [288.0, 445.5], [294.0, 22.0], [293.0, 22.558333333333337], [292.0, 79.42857142857143], [318.0, 59.16020408163279], [307.0, 181.0], [311.0, 152.125], [304.0, 248.66666666666666], [306.0, 126.25], [305.0, 85.0], [312.0, 72.875], [313.0, 77.67045454545456], [314.0, 31.191489361702125], [317.0, 136.11965811965814], [319.0, 35.39024390243901], [310.0, 88.54166666666667], [309.0, 16.4], [308.0, 30.640287769784177], [321.0, 36.66666666666667], [320.0, 33.93388429752066], [322.0, 30.90000000000001], [323.0, 15.851851851851844], [324.0, 42.008860759493594], [325.0, 11.956302521008404], [326.0, 9.95833333333333], [327.0, 127.99999999999999], [328.0, 92.71122994652406], [334.0, 23.444444444444443], [335.0, 32.32386363636363], [332.0, 34.26566037735843], [333.0, 40.27272727272727], [329.0, 41.03779786359902], [331.0, 24.438596491228072], [330.0, 75.83333333333337], [337.0, 73.88235294117648], [343.0, 60.75], [342.0, 72.3142857142857], [341.0, 25.0], [340.0, 45.380530973451314], [344.0, 14.275193798449623], [348.0, 23.25], [349.0, 24.522001725625532], [351.0, 56.50000000000001], [350.0, 25.125000000000004], [347.0, 43.330578512396684], [346.0, 33.879310344827594], [345.0, 75.55555555555557], [339.0, 66.36842105263158], [338.0, 79.29268292682926], [336.0, 45.84459459459463], [354.0, 83.32000000000001], [356.0, 37.32544378698228], [357.0, 39.414754098360625], [355.0, 62.07207207207207], [353.0, 79.65000000000003], [352.0, 56.999999999999986], [359.0, 62.51535087719293], [358.0, 36.13804713804711], [363.0, 60.85185185185186], [367.0, 18.312017640573323], [361.0, 27.96825396825397], [360.0, 47.275862068965516], [362.0, 42.74585635359117], [364.0, 58.199999999999996], [365.0, 49.06349206349209], [366.0, 54.94746716697937], [371.0, 24.641509433962263], [368.0, 36.57377049180328], [369.0, 9.244897959183671], [370.0, 59.29411764705882], [372.0, 26.921066387872415], [374.0, 101.8785046728972], [373.0, 30.25], [375.0, 70.1179775280899], [381.0, 25.726171669299653], [380.0, 48.472049689440986], [379.0, 53.0], [378.0, 43.448275862068996], [376.0, 54.63366336633662], [377.0, 36.52173913043478], [383.0, 104.45652173913042], [382.0, 35.46212121212122], [386.0, 48.10638297872338], [387.0, 83.3673469387755], [388.0, 87.09635416666667], [385.0, 64.54999999999998], [384.0, 51.48500000000002], [389.0, 66.05714285714289], [391.0, 78.125], [399.0, 48.046511627906966], [393.0, 38.29385964912281], [392.0, 29.564814814814802], [395.0, 30.980000000000008], [394.0, 44.9375], [398.0, 32.96551724137932], [397.0, 25.0], [396.0, 32.17605633802815], [414.0, 43.735955056179755], [415.0, 46.46969696969697], [413.0, 32.74193548387097], [412.0, 44.60714285714286], [411.0, 18.5], [410.0, 46.85365853658538], [409.0, 51.4406779661017], [408.0, 34.59090909090909], [407.0, 66.22580645161291], [401.0, 34.083333333333336], [400.0, 32.300000000000004], [403.0, 34.0], [402.0, 32.5], [406.0, 78.39999999999999], [405.0, 40.31355932203391], [404.0, 30.480000000000004], [430.0, 24.611111111111118], [418.0, 36.1304347826087], [417.0, 37.16949152542373], [416.0, 30.142857142857142], [419.0, 25.491228070175453], [423.0, 31.71428571428571], [422.0, 20.476923076923075], [421.0, 21.539568345323737], [420.0, 24.683673469387752], [431.0, 24.692982456140353], [429.0, 17.000000000000004], [428.0, 22.710526315789487], [427.0, 28.4561403508772], [426.0, 34.54651162790696], [425.0, 30.018518518518515], [424.0, 16.933333333333334], [447.0, 30.82702702702703], [441.0, 119.33587786259544], [442.0, 107.05263157894736], [443.0, 125.80916030534354], [444.0, 33.66666666666667], [435.0, 18.649999999999995], [434.0, 18.571428571428573], [433.0, 19.928571428571427], [432.0, 26.230769230769223], [445.0, 61.67741935483873], [446.0, 74.08695652173915], [440.0, 20.0], [439.0, 19.375], [438.0, 20.36842105263158], [437.0, 25.333333333333332], [436.0, 23.846153846153843], [449.0, 53.88571428571429], [448.0, 39.04500000000003], [450.0, 41.498360655737685], [451.0, 20.941176470588236], [452.0, 43.13683527885858], [453.0, 27.666666666666668], [454.0, 28.076923076923077], [455.0, 63.375], [456.0, 36.6], [462.0, 46.39869281045752], [463.0, 56.16326530612243], [460.0, 49.52857142857142], [461.0, 52.45641025641028], [457.0, 25.2], [458.0, 29.18181818181818], [459.0, 38.047619047619044], [467.0, 39.39743589743592], [464.0, 38.04347826086957], [465.0, 25.874999999999993], [466.0, 35.67391304347826], [468.0, 38.81818181818181], [469.0, 19.0], [471.0, 19.0], [472.0, 48.48936170212766], [478.0, 207.0], [479.0, 61.64615384615382], [476.0, 55.316666666666656], [477.0, 58.344827586206904], [473.0, 52.652631578947364], [474.0, 50.84873949579831], [475.0, 39.91208791208792], [481.0, 45.32142857142854], [480.0, 45.63829787234042], [482.0, 45.530188679245335], [483.0, 22.28], [484.0, 39.16867469879517], [485.0, 62.14285714285714], [486.0, 27.65625], [487.0, 25.142857142857146], [489.0, 44.880597014925364], [494.0, 60.44247787610616], [495.0, 65.55737704918032], [492.0, 29.244444444444444], [493.0, 42.03703703703704], [490.0, 35.65957446808509], [491.0, 49.83625730994154], [497.0, 26.5], [496.0, 30.988095238095248], [498.0, 22.923076923076923], [499.0, 39.16853932584269], [500.0, 29.949152542372882], [501.0, 32.25925925925925], [502.0, 39.85245901639343], [503.0, 45.93548387096774], [504.0, 34.835164835164825], [510.0, 71.84615384615385], [511.0, 49.77659574468085], [508.0, 26.843749999999996], [509.0, 64.93220338983052], [505.0, 42.919540229885044], [506.0, 37.47651006711406], [507.0, 56.91666666666667], [515.0, 49.53990610328638], [512.0, 43.047619047619044], [526.0, 62.57142857142857], [527.0, 53.80769230769233], [524.0, 23.57142857142857], [525.0, 41.55769230769232], [522.0, 25.642857142857142], [523.0, 40.170731707317074], [513.0, 162.0], [514.0, 40.73170731707316], [516.0, 26.053333333333335], [517.0, 29.081967213114744], [518.0, 32.39007092198582], [519.0, 31.613402061855645], [528.0, 55.58000000000003], [543.0, 50.8], [541.0, 37.615384615384606], [542.0, 96.5], [538.0, 50.13636363636365], [539.0, 39.0], [540.0, 41.765624999999986], [536.0, 21.0], [537.0, 39.43805309734514], [529.0, 50.192307692307715], [530.0, 34.99999999999999], [531.0, 43.43636363636364], [532.0, 115.61386138613862], [533.0, 66.75961538461539], [534.0, 40.66666666666667], [535.0, 47.19999999999999], [520.0, 51.444444444444436], [521.0, 32.02000000000001], [547.0, 25.142857142857142], [544.0, 86.3076923076923], [558.0, 33.81818181818181], [559.0, 51.16666666666667], [556.0, 20.333333333333332], [557.0, 93.66666666666667], [554.0, 61.433734939759034], [555.0, 39.235294117647065], [545.0, 23.884615384615383], [546.0, 23.0], [548.0, 26.0], [549.0, 26.71428571428571], [550.0, 29.42105263157895], [551.0, 61.877697841726636], [560.0, 33.294117647058826], [575.0, 98.0], [572.0, 47.096774193548406], [573.0, 16.8], [574.0, 20.166666666666668], [570.0, 41.423529411764704], [571.0, 44.77669902912621], [568.0, 39.96666666666668], [569.0, 74.625], [561.0, 31.28571428571428], [562.0, 40.25396825396825], [563.0, 50.48000000000001], [564.0, 35.32142857142858], [565.0, 43.62790697674419], [566.0, 43.805555555555564], [567.0, 30.621621621621625], [552.0, 26.6], [553.0, 47.66666666666667], [578.0, 27.5], [577.0, 67.31818181818181], [591.0, 81.58620689655173], [576.0, 15.0], [589.0, 84.84210526315788], [590.0, 46.54237288135592], [579.0, 43.63636363636363], [580.0, 64.73913043478261], [582.0, 67.69999999999999], [581.0, 172.74305555555546], [583.0, 55.430379746835435], [592.0, 31.875], [600.0, 83.50096303051404], [593.0, 76.5576923076923], [594.0, 44.93859649122808], [595.0, 37.625], [597.0, 42.75], [596.0, 44.877551020408156], [598.0, 78.52054794520544], [599.0, 176.53846153846155], [584.0, 83.76923076923077], [585.0, 240.6875], [586.0, 56.10843373493976], [587.0, 63.70588235294119], [588.0, 77.72413793103449]], "isOverall": false, "label": "user2role", "isController": false}, {"data": [[592.3074369919609, 82.27681623976093]], "isOverall": false, "label": "user2role-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 147094.13333333333, "minX": 1.62606222E12, "maxY": 1847464.2666666666, "series": [{"data": [[1.62606234E12, 839141.8166666667], [1.62606222E12, 798351.25], [1.62606252E12, 147094.13333333333], [1.6260624E12, 861033.85], [1.62606228E12, 842131.25], [1.62606246E12, 848698.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62606234E12, 1797421.3666666667], [1.62606222E12, 1704199.05], [1.62606252E12, 315604.45], [1.6260624E12, 1847464.2666666666], [1.62606228E12, 1799932.7], [1.62606246E12, 1821007.4166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62606252E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 63.0270266573655, "minX": 1.62606222E12, "maxY": 86.24586673827305, "series": [{"data": [[1.62606234E12, 86.24586673827305], [1.62606222E12, 72.73268457187869], [1.62606252E12, 63.0270266573655], [1.6260624E12, 83.9913150958923], [1.62606228E12, 85.9054967999609], [1.62606246E12, 85.32499792582648]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62606252E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 63.02688988278347, "minX": 1.62606222E12, "maxY": 86.24562459242556, "series": [{"data": [[1.62606234E12, 86.24562459242556], [1.62606222E12, 72.72853592636507], [1.62606252E12, 63.02688988278347], [1.6260624E12, 83.99109078844074], [1.62606228E12, 85.90529373681308], [1.62606246E12, 85.3247632480364]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62606252E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.016652641310403084, "minX": 1.62606222E12, "maxY": 0.07186532780852543, "series": [{"data": [[1.62606234E12, 0.01820649046760469], [1.62606222E12, 0.07186532780852543], [1.62606252E12, 0.016973725602834167], [1.6260624E12, 0.016897827956185], [1.62606228E12, 0.01912854852850932], [1.62606246E12, 0.016652641310403084]], "isOverall": false, "label": "user2role", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62606252E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.62606222E12, "maxY": 2794.0, "series": [{"data": [[1.62606234E12, 972.0], [1.62606222E12, 2794.0], [1.62606252E12, 775.0], [1.6260624E12, 793.0], [1.62606228E12, 911.0], [1.62606246E12, 839.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62606234E12, 87.0], [1.62606222E12, 78.0], [1.62606252E12, 74.0], [1.6260624E12, 90.0], [1.62606228E12, 76.0], [1.62606246E12, 69.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62606234E12, 598.0], [1.62606222E12, 688.9900000000016], [1.62606252E12, 491.9900000000016], [1.6260624E12, 707.0], [1.62606228E12, 572.0], [1.62606246E12, 638.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62606234E12, 448.0], [1.62606222E12, 502.0], [1.62606252E12, 157.0], [1.6260624E12, 552.0], [1.62606228E12, 425.0], [1.62606246E12, 419.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62606234E12, 1.0], [1.62606222E12, 1.0], [1.62606252E12, 1.0], [1.6260624E12, 1.0], [1.62606228E12, 1.0], [1.62606246E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62606234E12, 57.0], [1.62606222E12, 59.0], [1.62606252E12, 5.0], [1.6260624E12, 66.0], [1.62606228E12, 54.0], [1.62606246E12, 52.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62606252E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 328.0, "maxY": 451.0, "series": [{"data": [[8597.0, 34.0], [8437.0, 45.0], [8405.0, 48.0], [9817.0, 41.0], [10081.0, 39.0], [328.0, 451.0], [1105.0, 3.0], [2213.0, 48.0], [2593.0, 42.0], [3507.0, 19.0], [5388.0, 61.0], [5868.0, 66.0], [5708.0, 60.0], [5660.0, 61.0], [5942.0, 65.0], [6088.0, 66.0], [5990.0, 68.0], [5922.0, 62.0], [5952.0, 56.0], [5896.0, 60.0], [5908.0, 62.0], [6052.0, 59.0], [6032.0, 57.0], [6106.0, 55.0], [6108.0, 56.0], [6336.0, 54.0], [6372.0, 54.0], [6254.0, 61.0], [6182.0, 57.0], [6160.0, 61.0], [6350.0, 58.0], [6338.0, 63.0], [6340.0, 62.0], [6176.0, 60.0], [6390.0, 56.0], [6324.0, 55.0], [6306.0, 54.0], [6398.0, 10.0], [6644.0, 56.0], [6530.0, 59.0], [6542.0, 62.0], [6550.0, 57.0], [6606.0, 61.0], [6634.0, 60.0], [6516.0, 55.0], [6410.0, 56.0], [6596.0, 54.0], [6458.0, 61.0], [6414.0, 56.0], [6716.0, 61.0], [6672.0, 54.0], [6842.0, 57.0], [6840.0, 56.0], [6838.0, 49.0], [6900.0, 57.0], [6788.0, 60.0], [6902.0, 53.0], [6814.0, 57.0], [6898.0, 52.0], [6868.0, 57.0], [6892.0, 57.0], [6740.0, 53.0], [6768.0, 58.0], [6726.0, 57.0], [6706.0, 55.0], [6860.0, 56.0], [6856.0, 58.0], [6702.0, 60.0], [6674.0, 55.0], [6938.0, 54.0], [6930.0, 55.0], [6964.0, 56.0], [7006.0, 51.0], [7008.0, 52.0], [6912.0, 59.0], [6972.0, 53.0], [6926.0, 54.0], [7162.0, 55.0], [7164.0, 55.0], [7104.0, 57.0], [7110.0, 56.0], [7120.0, 54.0], [7130.0, 56.0], [6968.0, 58.0], [7060.0, 54.0], [7048.0, 57.0], [7372.0, 52.0], [7410.0, 54.0], [7408.0, 54.0], [7382.0, 53.0], [7392.0, 23.0], [7334.0, 56.0], [7342.0, 55.0], [7346.0, 52.0], [7348.0, 51.0], [7286.0, 55.0], [7274.0, 52.0], [7218.0, 54.0], [7220.0, 53.0], [7196.0, 52.0], [7192.0, 53.0], [7174.0, 56.0], [7366.0, 54.0], [7360.0, 54.0], [7262.0, 55.0], [7266.0, 53.0], [7256.0, 56.0], [7232.0, 52.0], [7236.0, 57.0], [7244.0, 56.0], [7250.0, 52.0], [7616.0, 54.0], [7524.0, 53.0], [7514.0, 55.0], [7628.0, 51.0], [7626.0, 51.0], [7462.0, 50.0], [7458.0, 54.0], [7444.0, 55.0], [7566.0, 50.0], [7596.0, 53.0], [7656.0, 53.0], [7554.0, 52.0], [7718.0, 53.0], [7768.0, 52.0], [7726.0, 53.0], [7734.0, 52.0], [7888.0, 51.0], [7896.0, 50.0], [7916.0, 51.0], [7756.0, 52.0], [7772.0, 51.0], [7692.0, 49.0], [7694.0, 50.0], [7974.0, 40.0], [7968.0, 37.0], [8046.0, 51.0], [8022.0, 50.0], [8140.0, 49.0], [8036.0, 50.0], [8560.0, 47.0], [9080.0, 40.0], [9288.0, 25.0], [9384.0, 41.0], [9836.0, 40.0], [9960.0, 39.0], [10164.0, 39.0], [9972.0, 40.0], [8343.0, 48.0], [10375.0, 38.0], [11299.0, 34.0], [4155.0, 36.0], [4657.0, 55.0], [5251.0, 64.0], [5793.0, 57.0], [6009.0, 59.0], [5937.0, 68.0], [5905.0, 67.0], [6115.0, 56.0], [6195.0, 20.0], [6299.0, 64.0], [6375.0, 56.0], [6393.0, 53.0], [6219.0, 52.0], [6313.0, 64.0], [6283.0, 54.0], [6453.0, 32.0], [6445.0, 61.0], [6529.0, 56.0], [6557.0, 58.0], [6655.0, 57.0], [6613.0, 59.0], [6641.0, 52.0], [6515.0, 54.0], [6521.0, 52.0], [6469.0, 57.0], [6403.0, 54.0], [6435.0, 62.0], [6423.0, 55.0], [6441.0, 56.0], [6875.0, 57.0], [6699.0, 58.0], [6677.0, 59.0], [6675.0, 57.0], [6673.0, 58.0], [6889.0, 58.0], [6845.0, 52.0], [6909.0, 58.0], [6813.0, 56.0], [6825.0, 54.0], [6839.0, 55.0], [6899.0, 58.0], [6767.0, 55.0], [6769.0, 59.0], [6757.0, 50.0], [6745.0, 53.0], [6735.0, 56.0], [6723.0, 58.0], [6775.0, 51.0], [6671.0, 57.0], [6665.0, 52.0], [6685.0, 54.0], [6713.0, 54.0], [6701.0, 60.0], [6929.0, 52.0], [6915.0, 58.0], [6931.0, 53.0], [6935.0, 55.0], [6937.0, 53.0], [7025.0, 56.0], [6989.0, 55.0], [7005.0, 59.0], [7019.0, 55.0], [6927.0, 55.0], [6917.0, 3.0], [6965.0, 53.0], [7087.0, 57.0], [7075.0, 55.0], [6971.0, 57.0], [6967.0, 57.0], [6973.0, 57.0], [6975.0, 53.0], [7053.0, 55.0], [7121.0, 56.0], [7401.0, 52.0], [7383.0, 55.0], [7173.0, 56.0], [7203.0, 53.0], [7225.0, 55.0], [7227.0, 56.0], [7319.0, 16.0], [7335.0, 53.0], [7337.0, 50.0], [7301.0, 56.0], [7309.0, 51.0], [7397.0, 55.0], [7409.0, 53.0], [7357.0, 54.0], [7347.0, 54.0], [7279.0, 54.0], [7171.0, 54.0], [7373.0, 55.0], [7369.0, 54.0], [7263.0, 52.0], [7235.0, 55.0], [7237.0, 55.0], [7247.0, 54.0], [7241.0, 52.0], [7443.0, 54.0], [7515.0, 54.0], [7547.0, 54.0], [7429.0, 54.0], [7503.0, 52.0], [7573.0, 52.0], [7613.0, 52.0], [7611.0, 52.0], [7579.0, 52.0], [7585.0, 53.0], [7597.0, 53.0], [7489.0, 53.0], [7493.0, 4.0], [7497.0, 54.0], [7665.0, 53.0], [7627.0, 53.0], [7455.0, 49.0], [7877.0, 51.0], [7847.0, 51.0], [7733.0, 52.0], [7743.0, 51.0], [7815.0, 52.0], [7885.0, 51.0], [7825.0, 51.0], [7835.0, 51.0], [7711.0, 51.0], [7719.0, 52.0], [7745.0, 53.0], [7779.0, 52.0], [8025.0, 50.0], [8053.0, 48.0], [8045.0, 50.0], [7971.0, 50.0], [8354.0, 48.0], [8998.0, 44.0], [9842.0, 39.0], [10210.0, 38.0], [9894.0, 40.0], [9754.0, 40.0], [10714.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11299.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 328.0, "maxY": 451.0, "series": [{"data": [[8597.0, 34.0], [8437.0, 45.0], [8405.0, 48.0], [9817.0, 41.0], [10081.0, 39.0], [328.0, 451.0], [1105.0, 3.0], [2213.0, 48.0], [2593.0, 42.0], [3507.0, 19.0], [5388.0, 61.0], [5868.0, 66.0], [5708.0, 60.0], [5660.0, 61.0], [5942.0, 65.0], [6088.0, 66.0], [5990.0, 68.0], [5922.0, 62.0], [5952.0, 56.0], [5896.0, 60.0], [5908.0, 62.0], [6052.0, 59.0], [6032.0, 57.0], [6106.0, 55.0], [6108.0, 56.0], [6336.0, 54.0], [6372.0, 54.0], [6254.0, 61.0], [6182.0, 57.0], [6160.0, 61.0], [6350.0, 58.0], [6338.0, 63.0], [6340.0, 62.0], [6176.0, 60.0], [6390.0, 56.0], [6324.0, 55.0], [6306.0, 54.0], [6398.0, 10.0], [6644.0, 56.0], [6530.0, 59.0], [6542.0, 62.0], [6550.0, 57.0], [6606.0, 61.0], [6634.0, 60.0], [6516.0, 55.0], [6410.0, 56.0], [6596.0, 54.0], [6458.0, 61.0], [6414.0, 56.0], [6716.0, 61.0], [6672.0, 54.0], [6842.0, 57.0], [6840.0, 56.0], [6838.0, 49.0], [6900.0, 57.0], [6788.0, 60.0], [6902.0, 53.0], [6814.0, 57.0], [6898.0, 52.0], [6868.0, 57.0], [6892.0, 57.0], [6740.0, 53.0], [6768.0, 58.0], [6726.0, 57.0], [6706.0, 55.0], [6860.0, 56.0], [6856.0, 58.0], [6702.0, 60.0], [6674.0, 55.0], [6938.0, 54.0], [6930.0, 55.0], [6964.0, 56.0], [7006.0, 51.0], [7008.0, 52.0], [6912.0, 59.0], [6972.0, 53.0], [6926.0, 54.0], [7162.0, 55.0], [7164.0, 55.0], [7104.0, 57.0], [7110.0, 56.0], [7120.0, 54.0], [7130.0, 56.0], [6968.0, 58.0], [7060.0, 54.0], [7048.0, 57.0], [7372.0, 52.0], [7410.0, 54.0], [7408.0, 54.0], [7382.0, 53.0], [7392.0, 23.0], [7334.0, 56.0], [7342.0, 55.0], [7346.0, 52.0], [7348.0, 51.0], [7286.0, 55.0], [7274.0, 52.0], [7218.0, 54.0], [7220.0, 53.0], [7196.0, 52.0], [7192.0, 53.0], [7174.0, 56.0], [7366.0, 54.0], [7360.0, 54.0], [7262.0, 55.0], [7266.0, 53.0], [7256.0, 56.0], [7232.0, 52.0], [7236.0, 57.0], [7244.0, 56.0], [7250.0, 52.0], [7616.0, 54.0], [7524.0, 53.0], [7514.0, 55.0], [7628.0, 51.0], [7626.0, 51.0], [7462.0, 50.0], [7458.0, 54.0], [7444.0, 55.0], [7566.0, 50.0], [7596.0, 53.0], [7656.0, 53.0], [7554.0, 52.0], [7718.0, 53.0], [7768.0, 52.0], [7726.0, 53.0], [7734.0, 52.0], [7888.0, 51.0], [7896.0, 50.0], [7916.0, 51.0], [7756.0, 52.0], [7772.0, 51.0], [7692.0, 49.0], [7694.0, 50.0], [7974.0, 40.0], [7968.0, 37.0], [8046.0, 51.0], [8022.0, 50.0], [8140.0, 49.0], [8036.0, 50.0], [8560.0, 47.0], [9080.0, 40.0], [9288.0, 25.0], [9384.0, 41.0], [9836.0, 40.0], [9960.0, 39.0], [10164.0, 39.0], [9972.0, 40.0], [8343.0, 48.0], [10375.0, 38.0], [11299.0, 34.0], [4155.0, 36.0], [4657.0, 55.0], [5251.0, 64.0], [5793.0, 57.0], [6009.0, 59.0], [5937.0, 68.0], [5905.0, 67.0], [6115.0, 56.0], [6195.0, 20.0], [6299.0, 64.0], [6375.0, 56.0], [6393.0, 53.0], [6219.0, 52.0], [6313.0, 64.0], [6283.0, 54.0], [6453.0, 32.0], [6445.0, 61.0], [6529.0, 56.0], [6557.0, 58.0], [6655.0, 57.0], [6613.0, 59.0], [6641.0, 52.0], [6515.0, 54.0], [6521.0, 52.0], [6469.0, 57.0], [6403.0, 54.0], [6435.0, 62.0], [6423.0, 55.0], [6441.0, 56.0], [6875.0, 57.0], [6699.0, 58.0], [6677.0, 59.0], [6675.0, 57.0], [6673.0, 58.0], [6889.0, 58.0], [6845.0, 52.0], [6909.0, 58.0], [6813.0, 56.0], [6825.0, 54.0], [6839.0, 55.0], [6899.0, 58.0], [6767.0, 55.0], [6769.0, 59.0], [6757.0, 50.0], [6745.0, 53.0], [6735.0, 56.0], [6723.0, 58.0], [6775.0, 51.0], [6671.0, 57.0], [6665.0, 52.0], [6685.0, 54.0], [6713.0, 54.0], [6701.0, 60.0], [6929.0, 52.0], [6915.0, 58.0], [6931.0, 53.0], [6935.0, 55.0], [6937.0, 53.0], [7025.0, 56.0], [6989.0, 55.0], [7005.0, 59.0], [7019.0, 55.0], [6927.0, 55.0], [6917.0, 3.0], [6965.0, 53.0], [7087.0, 57.0], [7075.0, 55.0], [6971.0, 57.0], [6967.0, 57.0], [6973.0, 57.0], [6975.0, 53.0], [7053.0, 55.0], [7121.0, 56.0], [7401.0, 52.0], [7383.0, 55.0], [7173.0, 56.0], [7203.0, 53.0], [7225.0, 55.0], [7227.0, 56.0], [7319.0, 16.0], [7335.0, 53.0], [7337.0, 50.0], [7301.0, 56.0], [7309.0, 51.0], [7397.0, 55.0], [7409.0, 53.0], [7357.0, 54.0], [7347.0, 54.0], [7279.0, 54.0], [7171.0, 54.0], [7373.0, 55.0], [7369.0, 54.0], [7263.0, 52.0], [7235.0, 55.0], [7237.0, 55.0], [7247.0, 54.0], [7241.0, 52.0], [7443.0, 54.0], [7515.0, 54.0], [7547.0, 54.0], [7429.0, 54.0], [7503.0, 52.0], [7573.0, 52.0], [7613.0, 52.0], [7611.0, 52.0], [7579.0, 52.0], [7585.0, 53.0], [7597.0, 53.0], [7489.0, 53.0], [7493.0, 4.0], [7497.0, 54.0], [7665.0, 53.0], [7627.0, 53.0], [7455.0, 49.0], [7877.0, 51.0], [7847.0, 51.0], [7733.0, 52.0], [7743.0, 51.0], [7815.0, 52.0], [7885.0, 51.0], [7825.0, 51.0], [7835.0, 51.0], [7711.0, 51.0], [7719.0, 52.0], [7745.0, 53.0], [7779.0, 52.0], [8025.0, 50.0], [8053.0, 48.0], [8045.0, 50.0], [7971.0, 50.0], [8354.0, 48.0], [8998.0, 44.0], [9842.0, 39.0], [10210.0, 38.0], [9894.0, 40.0], [9754.0, 40.0], [10714.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11299.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1208.8166666666666, "minX": 1.62606222E12, "maxY": 7133.15, "series": [{"data": [[1.62606234E12, 6951.666666666667], [1.62606222E12, 6622.583333333333], [1.62606252E12, 1208.8166666666666], [1.6260624E12, 7133.15], [1.62606228E12, 6976.45], [1.62606246E12, 7030.683333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62606252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1218.55, "minX": 1.62606222E12, "maxY": 7133.066666666667, "series": [{"data": [[1.62606234E12, 6951.733333333334], [1.62606222E12, 6612.6], [1.62606252E12, 1218.55], [1.6260624E12, 7133.066666666667], [1.62606228E12, 6976.483333333334], [1.62606246E12, 7030.916666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62606252E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1218.55, "minX": 1.62606222E12, "maxY": 7133.066666666667, "series": [{"data": [[1.62606234E12, 6951.733333333334], [1.62606222E12, 6612.6], [1.62606252E12, 1218.55], [1.6260624E12, 7133.066666666667], [1.62606228E12, 6976.483333333334], [1.62606246E12, 7030.916666666667]], "isOverall": false, "label": "user2role-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62606252E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1218.55, "minX": 1.62606222E12, "maxY": 7133.066666666667, "series": [{"data": [[1.62606234E12, 6951.733333333334], [1.62606222E12, 6612.6], [1.62606252E12, 1218.55], [1.6260624E12, 7133.066666666667], [1.62606228E12, 6976.483333333334], [1.62606246E12, 7030.916666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62606252E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

