/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 125.0, "minX": 0.0, "maxY": 1040.0, "series": [{"data": [[0.0, 125.0], [0.1, 170.0], [0.2, 177.0], [0.3, 182.0], [0.4, 185.0], [0.5, 188.0], [0.6, 191.0], [0.7, 193.0], [0.8, 195.0], [0.9, 196.0], [1.0, 197.0], [1.1, 199.0], [1.2, 200.0], [1.3, 201.0], [1.4, 202.0], [1.5, 203.0], [1.6, 204.0], [1.7, 205.0], [1.8, 205.0], [1.9, 206.0], [2.0, 207.0], [2.1, 208.0], [2.2, 208.0], [2.3, 209.0], [2.4, 210.0], [2.5, 211.0], [2.6, 211.0], [2.7, 212.0], [2.8, 213.0], [2.9, 213.0], [3.0, 214.0], [3.1, 215.0], [3.2, 215.0], [3.3, 216.0], [3.4, 216.0], [3.5, 217.0], [3.6, 217.0], [3.7, 218.0], [3.8, 219.0], [3.9, 219.0], [4.0, 219.0], [4.1, 220.0], [4.2, 220.0], [4.3, 221.0], [4.4, 221.0], [4.5, 222.0], [4.6, 222.0], [4.7, 223.0], [4.8, 223.0], [4.9, 223.0], [5.0, 224.0], [5.1, 224.0], [5.2, 224.0], [5.3, 225.0], [5.4, 225.0], [5.5, 226.0], [5.6, 226.0], [5.7, 226.0], [5.8, 227.0], [5.9, 227.0], [6.0, 227.0], [6.1, 228.0], [6.2, 228.0], [6.3, 228.0], [6.4, 229.0], [6.5, 229.0], [6.6, 229.0], [6.7, 230.0], [6.8, 230.0], [6.9, 230.0], [7.0, 230.0], [7.1, 231.0], [7.2, 231.0], [7.3, 231.0], [7.4, 232.0], [7.5, 232.0], [7.6, 232.0], [7.7, 232.0], [7.8, 233.0], [7.9, 233.0], [8.0, 233.0], [8.1, 233.0], [8.2, 234.0], [8.3, 234.0], [8.4, 234.0], [8.5, 234.0], [8.6, 235.0], [8.7, 235.0], [8.8, 235.0], [8.9, 235.0], [9.0, 236.0], [9.1, 236.0], [9.2, 236.0], [9.3, 236.0], [9.4, 237.0], [9.5, 237.0], [9.6, 237.0], [9.7, 237.0], [9.8, 238.0], [9.9, 238.0], [10.0, 238.0], [10.1, 238.0], [10.2, 239.0], [10.3, 239.0], [10.4, 239.0], [10.5, 239.0], [10.6, 239.0], [10.7, 240.0], [10.8, 240.0], [10.9, 240.0], [11.0, 240.0], [11.1, 241.0], [11.2, 241.0], [11.3, 241.0], [11.4, 241.0], [11.5, 241.0], [11.6, 242.0], [11.7, 242.0], [11.8, 242.0], [11.9, 242.0], [12.0, 242.0], [12.1, 243.0], [12.2, 243.0], [12.3, 243.0], [12.4, 243.0], [12.5, 243.0], [12.6, 243.0], [12.7, 244.0], [12.8, 244.0], [12.9, 244.0], [13.0, 244.0], [13.1, 244.0], [13.2, 244.0], [13.3, 245.0], [13.4, 245.0], [13.5, 245.0], [13.6, 245.0], [13.7, 245.0], [13.8, 245.0], [13.9, 246.0], [14.0, 246.0], [14.1, 246.0], [14.2, 246.0], [14.3, 246.0], [14.4, 246.0], [14.5, 247.0], [14.6, 247.0], [14.7, 247.0], [14.8, 247.0], [14.9, 247.0], [15.0, 247.0], [15.1, 247.0], [15.2, 248.0], [15.3, 248.0], [15.4, 248.0], [15.5, 248.0], [15.6, 248.0], [15.7, 248.0], [15.8, 248.0], [15.9, 249.0], [16.0, 249.0], [16.1, 249.0], [16.2, 249.0], [16.3, 249.0], [16.4, 249.0], [16.5, 249.0], [16.6, 249.0], [16.7, 250.0], [16.8, 250.0], [16.9, 250.0], [17.0, 250.0], [17.1, 250.0], [17.2, 250.0], [17.3, 250.0], [17.4, 250.0], [17.5, 251.0], [17.6, 251.0], [17.7, 251.0], [17.8, 251.0], [17.9, 251.0], [18.0, 251.0], [18.1, 251.0], [18.2, 251.0], [18.3, 252.0], [18.4, 252.0], [18.5, 252.0], [18.6, 252.0], [18.7, 252.0], [18.8, 252.0], [18.9, 252.0], [19.0, 252.0], [19.1, 252.0], [19.2, 253.0], [19.3, 253.0], [19.4, 253.0], [19.5, 253.0], [19.6, 253.0], [19.7, 253.0], [19.8, 253.0], [19.9, 253.0], [20.0, 253.0], [20.1, 254.0], [20.2, 254.0], [20.3, 254.0], [20.4, 254.0], [20.5, 254.0], [20.6, 254.0], [20.7, 254.0], [20.8, 254.0], [20.9, 254.0], [21.0, 254.0], [21.1, 255.0], [21.2, 255.0], [21.3, 255.0], [21.4, 255.0], [21.5, 255.0], [21.6, 255.0], [21.7, 255.0], [21.8, 255.0], [21.9, 255.0], [22.0, 255.0], [22.1, 256.0], [22.2, 256.0], [22.3, 256.0], [22.4, 256.0], [22.5, 256.0], [22.6, 256.0], [22.7, 256.0], [22.8, 256.0], [22.9, 256.0], [23.0, 256.0], [23.1, 256.0], [23.2, 257.0], [23.3, 257.0], [23.4, 257.0], [23.5, 257.0], [23.6, 257.0], [23.7, 257.0], [23.8, 257.0], [23.9, 257.0], [24.0, 257.0], [24.1, 257.0], [24.2, 257.0], [24.3, 258.0], [24.4, 258.0], [24.5, 258.0], [24.6, 258.0], [24.7, 258.0], [24.8, 258.0], [24.9, 258.0], [25.0, 258.0], [25.1, 258.0], [25.2, 258.0], [25.3, 258.0], [25.4, 258.0], [25.5, 259.0], [25.6, 259.0], [25.7, 259.0], [25.8, 259.0], [25.9, 259.0], [26.0, 259.0], [26.1, 259.0], [26.2, 259.0], [26.3, 259.0], [26.4, 259.0], [26.5, 259.0], [26.6, 259.0], [26.7, 260.0], [26.8, 260.0], [26.9, 260.0], [27.0, 260.0], [27.1, 260.0], [27.2, 260.0], [27.3, 260.0], [27.4, 260.0], [27.5, 260.0], [27.6, 260.0], [27.7, 260.0], [27.8, 260.0], [27.9, 260.0], [28.0, 261.0], [28.1, 261.0], [28.2, 261.0], [28.3, 261.0], [28.4, 261.0], [28.5, 261.0], [28.6, 261.0], [28.7, 261.0], [28.8, 261.0], [28.9, 261.0], [29.0, 261.0], [29.1, 261.0], [29.2, 261.0], [29.3, 262.0], [29.4, 262.0], [29.5, 262.0], [29.6, 262.0], [29.7, 262.0], [29.8, 262.0], [29.9, 262.0], [30.0, 262.0], [30.1, 262.0], [30.2, 262.0], [30.3, 262.0], [30.4, 262.0], [30.5, 262.0], [30.6, 263.0], [30.7, 263.0], [30.8, 263.0], [30.9, 263.0], [31.0, 263.0], [31.1, 263.0], [31.2, 263.0], [31.3, 263.0], [31.4, 263.0], [31.5, 263.0], [31.6, 263.0], [31.7, 263.0], [31.8, 263.0], [31.9, 263.0], [32.0, 264.0], [32.1, 264.0], [32.2, 264.0], [32.3, 264.0], [32.4, 264.0], [32.5, 264.0], [32.6, 264.0], [32.7, 264.0], [32.8, 264.0], [32.9, 264.0], [33.0, 264.0], [33.1, 264.0], [33.2, 264.0], [33.3, 264.0], [33.4, 265.0], [33.5, 265.0], [33.6, 265.0], [33.7, 265.0], [33.8, 265.0], [33.9, 265.0], [34.0, 265.0], [34.1, 265.0], [34.2, 265.0], [34.3, 265.0], [34.4, 265.0], [34.5, 265.0], [34.6, 265.0], [34.7, 265.0], [34.8, 266.0], [34.9, 266.0], [35.0, 266.0], [35.1, 266.0], [35.2, 266.0], [35.3, 266.0], [35.4, 266.0], [35.5, 266.0], [35.6, 266.0], [35.7, 266.0], [35.8, 266.0], [35.9, 266.0], [36.0, 266.0], [36.1, 266.0], [36.2, 266.0], [36.3, 267.0], [36.4, 267.0], [36.5, 267.0], [36.6, 267.0], [36.7, 267.0], [36.8, 267.0], [36.9, 267.0], [37.0, 267.0], [37.1, 267.0], [37.2, 267.0], [37.3, 267.0], [37.4, 267.0], [37.5, 267.0], [37.6, 267.0], [37.7, 267.0], [37.8, 268.0], [37.9, 268.0], [38.0, 268.0], [38.1, 268.0], [38.2, 268.0], [38.3, 268.0], [38.4, 268.0], [38.5, 268.0], [38.6, 268.0], [38.7, 268.0], [38.8, 268.0], [38.9, 268.0], [39.0, 268.0], [39.1, 268.0], [39.2, 268.0], [39.3, 269.0], [39.4, 269.0], [39.5, 269.0], [39.6, 269.0], [39.7, 269.0], [39.8, 269.0], [39.9, 269.0], [40.0, 269.0], [40.1, 269.0], [40.2, 269.0], [40.3, 269.0], [40.4, 269.0], [40.5, 269.0], [40.6, 269.0], [40.7, 269.0], [40.8, 269.0], [40.9, 269.0], [41.0, 270.0], [41.1, 270.0], [41.2, 270.0], [41.3, 270.0], [41.4, 270.0], [41.5, 270.0], [41.6, 270.0], [41.7, 270.0], [41.8, 270.0], [41.9, 270.0], [42.0, 270.0], [42.1, 270.0], [42.2, 270.0], [42.3, 270.0], [42.4, 270.0], [42.5, 271.0], [42.6, 271.0], [42.7, 271.0], [42.8, 271.0], [42.9, 271.0], [43.0, 271.0], [43.1, 271.0], [43.2, 271.0], [43.3, 271.0], [43.4, 271.0], [43.5, 271.0], [43.6, 271.0], [43.7, 271.0], [43.8, 271.0], [43.9, 271.0], [44.0, 271.0], [44.1, 272.0], [44.2, 272.0], [44.3, 272.0], [44.4, 272.0], [44.5, 272.0], [44.6, 272.0], [44.7, 272.0], [44.8, 272.0], [44.9, 272.0], [45.0, 272.0], [45.1, 272.0], [45.2, 272.0], [45.3, 272.0], [45.4, 272.0], [45.5, 272.0], [45.6, 272.0], [45.7, 272.0], [45.8, 273.0], [45.9, 273.0], [46.0, 273.0], [46.1, 273.0], [46.2, 273.0], [46.3, 273.0], [46.4, 273.0], [46.5, 273.0], [46.6, 273.0], [46.7, 273.0], [46.8, 273.0], [46.9, 273.0], [47.0, 273.0], [47.1, 273.0], [47.2, 273.0], [47.3, 273.0], [47.4, 274.0], [47.5, 274.0], [47.6, 274.0], [47.7, 274.0], [47.8, 274.0], [47.9, 274.0], [48.0, 274.0], [48.1, 274.0], [48.2, 274.0], [48.3, 274.0], [48.4, 274.0], [48.5, 274.0], [48.6, 274.0], [48.7, 274.0], [48.8, 274.0], [48.9, 274.0], [49.0, 275.0], [49.1, 275.0], [49.2, 275.0], [49.3, 275.0], [49.4, 275.0], [49.5, 275.0], [49.6, 275.0], [49.7, 275.0], [49.8, 275.0], [49.9, 275.0], [50.0, 275.0], [50.1, 275.0], [50.2, 275.0], [50.3, 275.0], [50.4, 275.0], [50.5, 275.0], [50.6, 276.0], [50.7, 276.0], [50.8, 276.0], [50.9, 276.0], [51.0, 276.0], [51.1, 276.0], [51.2, 276.0], [51.3, 276.0], [51.4, 276.0], [51.5, 276.0], [51.6, 276.0], [51.7, 276.0], [51.8, 276.0], [51.9, 276.0], [52.0, 276.0], [52.1, 277.0], [52.2, 277.0], [52.3, 277.0], [52.4, 277.0], [52.5, 277.0], [52.6, 277.0], [52.7, 277.0], [52.8, 277.0], [52.9, 277.0], [53.0, 277.0], [53.1, 277.0], [53.2, 277.0], [53.3, 277.0], [53.4, 277.0], [53.5, 277.0], [53.6, 277.0], [53.7, 278.0], [53.8, 278.0], [53.9, 278.0], [54.0, 278.0], [54.1, 278.0], [54.2, 278.0], [54.3, 278.0], [54.4, 278.0], [54.5, 278.0], [54.6, 278.0], [54.7, 278.0], [54.8, 278.0], [54.9, 278.0], [55.0, 278.0], [55.1, 278.0], [55.2, 279.0], [55.3, 279.0], [55.4, 279.0], [55.5, 279.0], [55.6, 279.0], [55.7, 279.0], [55.8, 279.0], [55.9, 279.0], [56.0, 279.0], [56.1, 279.0], [56.2, 279.0], [56.3, 279.0], [56.4, 279.0], [56.5, 279.0], [56.6, 279.0], [56.7, 279.0], [56.8, 280.0], [56.9, 280.0], [57.0, 280.0], [57.1, 280.0], [57.2, 280.0], [57.3, 280.0], [57.4, 280.0], [57.5, 280.0], [57.6, 280.0], [57.7, 280.0], [57.8, 280.0], [57.9, 280.0], [58.0, 280.0], [58.1, 280.0], [58.2, 280.0], [58.3, 281.0], [58.4, 281.0], [58.5, 281.0], [58.6, 281.0], [58.7, 281.0], [58.8, 281.0], [58.9, 281.0], [59.0, 281.0], [59.1, 281.0], [59.2, 281.0], [59.3, 281.0], [59.4, 281.0], [59.5, 281.0], [59.6, 281.0], [59.7, 281.0], [59.8, 282.0], [59.9, 282.0], [60.0, 282.0], [60.1, 282.0], [60.2, 282.0], [60.3, 282.0], [60.4, 282.0], [60.5, 282.0], [60.6, 282.0], [60.7, 282.0], [60.8, 282.0], [60.9, 282.0], [61.0, 282.0], [61.1, 282.0], [61.2, 283.0], [61.3, 283.0], [61.4, 283.0], [61.5, 283.0], [61.6, 283.0], [61.7, 283.0], [61.8, 283.0], [61.9, 283.0], [62.0, 283.0], [62.1, 283.0], [62.2, 283.0], [62.3, 283.0], [62.4, 283.0], [62.5, 283.0], [62.6, 284.0], [62.7, 284.0], [62.8, 284.0], [62.9, 284.0], [63.0, 284.0], [63.1, 284.0], [63.2, 284.0], [63.3, 284.0], [63.4, 284.0], [63.5, 284.0], [63.6, 284.0], [63.7, 284.0], [63.8, 284.0], [63.9, 284.0], [64.0, 285.0], [64.1, 285.0], [64.2, 285.0], [64.3, 285.0], [64.4, 285.0], [64.5, 285.0], [64.6, 285.0], [64.7, 285.0], [64.8, 285.0], [64.9, 285.0], [65.0, 285.0], [65.1, 285.0], [65.2, 285.0], [65.3, 285.0], [65.4, 286.0], [65.5, 286.0], [65.6, 286.0], [65.7, 286.0], [65.8, 286.0], [65.9, 286.0], [66.0, 286.0], [66.1, 286.0], [66.2, 286.0], [66.3, 286.0], [66.4, 286.0], [66.5, 286.0], [66.6, 286.0], [66.7, 287.0], [66.8, 287.0], [66.9, 287.0], [67.0, 287.0], [67.1, 287.0], [67.2, 287.0], [67.3, 287.0], [67.4, 287.0], [67.5, 287.0], [67.6, 287.0], [67.7, 287.0], [67.8, 287.0], [67.9, 287.0], [68.0, 288.0], [68.1, 288.0], [68.2, 288.0], [68.3, 288.0], [68.4, 288.0], [68.5, 288.0], [68.6, 288.0], [68.7, 288.0], [68.8, 288.0], [68.9, 288.0], [69.0, 288.0], [69.1, 288.0], [69.2, 288.0], [69.3, 289.0], [69.4, 289.0], [69.5, 289.0], [69.6, 289.0], [69.7, 289.0], [69.8, 289.0], [69.9, 289.0], [70.0, 289.0], [70.1, 289.0], [70.2, 289.0], [70.3, 289.0], [70.4, 290.0], [70.5, 290.0], [70.6, 290.0], [70.7, 290.0], [70.8, 290.0], [70.9, 290.0], [71.0, 290.0], [71.1, 290.0], [71.2, 290.0], [71.3, 290.0], [71.4, 290.0], [71.5, 290.0], [71.6, 291.0], [71.7, 291.0], [71.8, 291.0], [71.9, 291.0], [72.0, 291.0], [72.1, 291.0], [72.2, 291.0], [72.3, 291.0], [72.4, 291.0], [72.5, 291.0], [72.6, 291.0], [72.7, 292.0], [72.8, 292.0], [72.9, 292.0], [73.0, 292.0], [73.1, 292.0], [73.2, 292.0], [73.3, 292.0], [73.4, 292.0], [73.5, 292.0], [73.6, 292.0], [73.7, 293.0], [73.8, 293.0], [73.9, 293.0], [74.0, 293.0], [74.1, 293.0], [74.2, 293.0], [74.3, 293.0], [74.4, 293.0], [74.5, 293.0], [74.6, 293.0], [74.7, 293.0], [74.8, 294.0], [74.9, 294.0], [75.0, 294.0], [75.1, 294.0], [75.2, 294.0], [75.3, 294.0], [75.4, 294.0], [75.5, 294.0], [75.6, 294.0], [75.7, 294.0], [75.8, 295.0], [75.9, 295.0], [76.0, 295.0], [76.1, 295.0], [76.2, 295.0], [76.3, 295.0], [76.4, 295.0], [76.5, 295.0], [76.6, 295.0], [76.7, 296.0], [76.8, 296.0], [76.9, 296.0], [77.0, 296.0], [77.1, 296.0], [77.2, 296.0], [77.3, 296.0], [77.4, 296.0], [77.5, 296.0], [77.6, 296.0], [77.7, 297.0], [77.8, 297.0], [77.9, 297.0], [78.0, 297.0], [78.1, 297.0], [78.2, 297.0], [78.3, 297.0], [78.4, 297.0], [78.5, 297.0], [78.6, 298.0], [78.7, 298.0], [78.8, 298.0], [78.9, 298.0], [79.0, 298.0], [79.1, 298.0], [79.2, 298.0], [79.3, 298.0], [79.4, 299.0], [79.5, 299.0], [79.6, 299.0], [79.7, 299.0], [79.8, 299.0], [79.9, 299.0], [80.0, 299.0], [80.1, 299.0], [80.2, 299.0], [80.3, 300.0], [80.4, 300.0], [80.5, 300.0], [80.6, 300.0], [80.7, 300.0], [80.8, 300.0], [80.9, 300.0], [81.0, 300.0], [81.1, 301.0], [81.2, 301.0], [81.3, 301.0], [81.4, 301.0], [81.5, 301.0], [81.6, 301.0], [81.7, 301.0], [81.8, 302.0], [81.9, 302.0], [82.0, 302.0], [82.1, 302.0], [82.2, 302.0], [82.3, 302.0], [82.4, 302.0], [82.5, 303.0], [82.6, 303.0], [82.7, 303.0], [82.8, 303.0], [82.9, 303.0], [83.0, 303.0], [83.1, 303.0], [83.2, 304.0], [83.3, 304.0], [83.4, 304.0], [83.5, 304.0], [83.6, 304.0], [83.7, 304.0], [83.8, 305.0], [83.9, 305.0], [84.0, 305.0], [84.1, 305.0], [84.2, 305.0], [84.3, 305.0], [84.4, 305.0], [84.5, 306.0], [84.6, 306.0], [84.7, 306.0], [84.8, 306.0], [84.9, 306.0], [85.0, 306.0], [85.1, 307.0], [85.2, 307.0], [85.3, 307.0], [85.4, 307.0], [85.5, 307.0], [85.6, 307.0], [85.7, 308.0], [85.8, 308.0], [85.9, 308.0], [86.0, 308.0], [86.1, 308.0], [86.2, 309.0], [86.3, 309.0], [86.4, 309.0], [86.5, 309.0], [86.6, 309.0], [86.7, 310.0], [86.8, 310.0], [86.9, 310.0], [87.0, 310.0], [87.1, 310.0], [87.2, 311.0], [87.3, 311.0], [87.4, 311.0], [87.5, 311.0], [87.6, 311.0], [87.7, 312.0], [87.8, 312.0], [87.9, 312.0], [88.0, 312.0], [88.1, 312.0], [88.2, 313.0], [88.3, 313.0], [88.4, 313.0], [88.5, 313.0], [88.6, 314.0], [88.7, 314.0], [88.8, 314.0], [88.9, 314.0], [89.0, 315.0], [89.1, 315.0], [89.2, 315.0], [89.3, 315.0], [89.4, 316.0], [89.5, 316.0], [89.6, 316.0], [89.7, 317.0], [89.8, 317.0], [89.9, 317.0], [90.0, 317.0], [90.1, 318.0], [90.2, 318.0], [90.3, 318.0], [90.4, 318.0], [90.5, 319.0], [90.6, 319.0], [90.7, 319.0], [90.8, 320.0], [90.9, 320.0], [91.0, 320.0], [91.1, 321.0], [91.2, 321.0], [91.3, 321.0], [91.4, 321.0], [91.5, 322.0], [91.6, 322.0], [91.7, 322.0], [91.8, 323.0], [91.9, 323.0], [92.0, 323.0], [92.1, 324.0], [92.2, 324.0], [92.3, 324.0], [92.4, 325.0], [92.5, 325.0], [92.6, 325.0], [92.7, 326.0], [92.8, 326.0], [92.9, 327.0], [93.0, 327.0], [93.1, 327.0], [93.2, 328.0], [93.3, 328.0], [93.4, 329.0], [93.5, 329.0], [93.6, 329.0], [93.7, 330.0], [93.8, 330.0], [93.9, 331.0], [94.0, 331.0], [94.1, 332.0], [94.2, 332.0], [94.3, 332.0], [94.4, 333.0], [94.5, 333.0], [94.6, 334.0], [94.7, 334.0], [94.8, 335.0], [94.9, 335.0], [95.0, 336.0], [95.1, 336.0], [95.2, 337.0], [95.3, 337.0], [95.4, 338.0], [95.5, 338.0], [95.6, 339.0], [95.7, 339.0], [95.8, 340.0], [95.9, 340.0], [96.0, 341.0], [96.1, 342.0], [96.2, 342.0], [96.3, 343.0], [96.4, 343.0], [96.5, 344.0], [96.6, 345.0], [96.7, 345.0], [96.8, 346.0], [96.9, 347.0], [97.0, 347.0], [97.1, 348.0], [97.2, 349.0], [97.3, 350.0], [97.4, 351.0], [97.5, 351.0], [97.6, 352.0], [97.7, 353.0], [97.8, 354.0], [97.9, 355.0], [98.0, 357.0], [98.1, 358.0], [98.2, 359.0], [98.3, 361.0], [98.4, 363.0], [98.5, 365.0], [98.6, 367.0], [98.7, 370.0], [98.8, 372.0], [98.9, 375.0], [99.0, 379.0], [99.1, 384.0], [99.2, 390.0], [99.3, 399.0], [99.4, 407.0], [99.5, 420.0], [99.6, 435.0], [99.7, 458.0], [99.8, 512.0], [99.9, 578.0], [100.0, 1040.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[0.0, 202.0], [0.1, 267.0], [0.2, 271.0], [0.3, 273.0], [0.4, 275.0], [0.5, 277.0], [0.6, 278.0], [0.7, 279.0], [0.8, 280.0], [0.9, 281.0], [1.0, 281.0], [1.1, 282.0], [1.2, 283.0], [1.3, 283.0], [1.4, 284.0], [1.5, 284.0], [1.6, 285.0], [1.7, 286.0], [1.8, 286.0], [1.9, 287.0], [2.0, 287.0], [2.1, 287.0], [2.2, 288.0], [2.3, 288.0], [2.4, 289.0], [2.5, 289.0], [2.6, 289.0], [2.7, 290.0], [2.8, 290.0], [2.9, 290.0], [3.0, 291.0], [3.1, 291.0], [3.2, 291.0], [3.3, 292.0], [3.4, 292.0], [3.5, 292.0], [3.6, 293.0], [3.7, 293.0], [3.8, 293.0], [3.9, 293.0], [4.0, 294.0], [4.1, 294.0], [4.2, 294.0], [4.3, 294.0], [4.4, 295.0], [4.5, 295.0], [4.6, 295.0], [4.7, 295.0], [4.8, 296.0], [4.9, 296.0], [5.0, 296.0], [5.1, 296.0], [5.2, 297.0], [5.3, 297.0], [5.4, 297.0], [5.5, 297.0], [5.6, 297.0], [5.7, 298.0], [5.8, 298.0], [5.9, 298.0], [6.0, 298.0], [6.1, 299.0], [6.2, 299.0], [6.3, 299.0], [6.4, 299.0], [6.5, 299.0], [6.6, 299.0], [6.7, 300.0], [6.8, 300.0], [6.9, 300.0], [7.0, 300.0], [7.1, 300.0], [7.2, 301.0], [7.3, 301.0], [7.4, 301.0], [7.5, 301.0], [7.6, 301.0], [7.7, 301.0], [7.8, 302.0], [7.9, 302.0], [8.0, 302.0], [8.1, 302.0], [8.2, 302.0], [8.3, 302.0], [8.4, 303.0], [8.5, 303.0], [8.6, 303.0], [8.7, 303.0], [8.8, 303.0], [8.9, 303.0], [9.0, 303.0], [9.1, 304.0], [9.2, 304.0], [9.3, 304.0], [9.4, 304.0], [9.5, 304.0], [9.6, 304.0], [9.7, 304.0], [9.8, 305.0], [9.9, 305.0], [10.0, 305.0], [10.1, 305.0], [10.2, 305.0], [10.3, 305.0], [10.4, 305.0], [10.5, 306.0], [10.6, 306.0], [10.7, 306.0], [10.8, 306.0], [10.9, 306.0], [11.0, 306.0], [11.1, 306.0], [11.2, 307.0], [11.3, 307.0], [11.4, 307.0], [11.5, 307.0], [11.6, 307.0], [11.7, 307.0], [11.8, 307.0], [11.9, 307.0], [12.0, 308.0], [12.1, 308.0], [12.2, 308.0], [12.3, 308.0], [12.4, 308.0], [12.5, 308.0], [12.6, 308.0], [12.7, 308.0], [12.8, 309.0], [12.9, 309.0], [13.0, 309.0], [13.1, 309.0], [13.2, 309.0], [13.3, 309.0], [13.4, 309.0], [13.5, 309.0], [13.6, 309.0], [13.7, 310.0], [13.8, 310.0], [13.9, 310.0], [14.0, 310.0], [14.1, 310.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 311.0], [14.7, 311.0], [14.8, 311.0], [14.9, 311.0], [15.0, 311.0], [15.1, 311.0], [15.2, 311.0], [15.3, 311.0], [15.4, 311.0], [15.5, 312.0], [15.6, 312.0], [15.7, 312.0], [15.8, 312.0], [15.9, 312.0], [16.0, 312.0], [16.1, 312.0], [16.2, 312.0], [16.3, 312.0], [16.4, 312.0], [16.5, 313.0], [16.6, 313.0], [16.7, 313.0], [16.8, 313.0], [16.9, 313.0], [17.0, 313.0], [17.1, 313.0], [17.2, 313.0], [17.3, 313.0], [17.4, 313.0], [17.5, 314.0], [17.6, 314.0], [17.7, 314.0], [17.8, 314.0], [17.9, 314.0], [18.0, 314.0], [18.1, 314.0], [18.2, 314.0], [18.3, 314.0], [18.4, 314.0], [18.5, 315.0], [18.6, 315.0], [18.7, 315.0], [18.8, 315.0], [18.9, 315.0], [19.0, 315.0], [19.1, 315.0], [19.2, 315.0], [19.3, 315.0], [19.4, 315.0], [19.5, 315.0], [19.6, 316.0], [19.7, 316.0], [19.8, 316.0], [19.9, 316.0], [20.0, 316.0], [20.1, 316.0], [20.2, 316.0], [20.3, 316.0], [20.4, 316.0], [20.5, 316.0], [20.6, 316.0], [20.7, 317.0], [20.8, 317.0], [20.9, 317.0], [21.0, 317.0], [21.1, 317.0], [21.2, 317.0], [21.3, 317.0], [21.4, 317.0], [21.5, 317.0], [21.6, 317.0], [21.7, 317.0], [21.8, 317.0], [21.9, 318.0], [22.0, 318.0], [22.1, 318.0], [22.2, 318.0], [22.3, 318.0], [22.4, 318.0], [22.5, 318.0], [22.6, 318.0], [22.7, 318.0], [22.8, 318.0], [22.9, 318.0], [23.0, 318.0], [23.1, 319.0], [23.2, 319.0], [23.3, 319.0], [23.4, 319.0], [23.5, 319.0], [23.6, 319.0], [23.7, 319.0], [23.8, 319.0], [23.9, 319.0], [24.0, 319.0], [24.1, 319.0], [24.2, 319.0], [24.3, 320.0], [24.4, 320.0], [24.5, 320.0], [24.6, 320.0], [24.7, 320.0], [24.8, 320.0], [24.9, 320.0], [25.0, 320.0], [25.1, 320.0], [25.2, 320.0], [25.3, 320.0], [25.4, 320.0], [25.5, 320.0], [25.6, 321.0], [25.7, 321.0], [25.8, 321.0], [25.9, 321.0], [26.0, 321.0], [26.1, 321.0], [26.2, 321.0], [26.3, 321.0], [26.4, 321.0], [26.5, 321.0], [26.6, 321.0], [26.7, 321.0], [26.8, 321.0], [26.9, 322.0], [27.0, 322.0], [27.1, 322.0], [27.2, 322.0], [27.3, 322.0], [27.4, 322.0], [27.5, 322.0], [27.6, 322.0], [27.7, 322.0], [27.8, 322.0], [27.9, 322.0], [28.0, 322.0], [28.1, 322.0], [28.2, 323.0], [28.3, 323.0], [28.4, 323.0], [28.5, 323.0], [28.6, 323.0], [28.7, 323.0], [28.8, 323.0], [28.9, 323.0], [29.0, 323.0], [29.1, 323.0], [29.2, 323.0], [29.3, 323.0], [29.4, 323.0], [29.5, 323.0], [29.6, 324.0], [29.7, 324.0], [29.8, 324.0], [29.9, 324.0], [30.0, 324.0], [30.1, 324.0], [30.2, 324.0], [30.3, 324.0], [30.4, 324.0], [30.5, 324.0], [30.6, 324.0], [30.7, 324.0], [30.8, 324.0], [30.9, 325.0], [31.0, 325.0], [31.1, 325.0], [31.2, 325.0], [31.3, 325.0], [31.4, 325.0], [31.5, 325.0], [31.6, 325.0], [31.7, 325.0], [31.8, 325.0], [31.9, 325.0], [32.0, 325.0], [32.1, 325.0], [32.2, 325.0], [32.3, 326.0], [32.4, 326.0], [32.5, 326.0], [32.6, 326.0], [32.7, 326.0], [32.8, 326.0], [32.9, 326.0], [33.0, 326.0], [33.1, 326.0], [33.2, 326.0], [33.3, 326.0], [33.4, 326.0], [33.5, 326.0], [33.6, 326.0], [33.7, 327.0], [33.8, 327.0], [33.9, 327.0], [34.0, 327.0], [34.1, 327.0], [34.2, 327.0], [34.3, 327.0], [34.4, 327.0], [34.5, 327.0], [34.6, 327.0], [34.7, 327.0], [34.8, 327.0], [34.9, 327.0], [35.0, 327.0], [35.1, 328.0], [35.2, 328.0], [35.3, 328.0], [35.4, 328.0], [35.5, 328.0], [35.6, 328.0], [35.7, 328.0], [35.8, 328.0], [35.9, 328.0], [36.0, 328.0], [36.1, 328.0], [36.2, 328.0], [36.3, 328.0], [36.4, 328.0], [36.5, 329.0], [36.6, 329.0], [36.7, 329.0], [36.8, 329.0], [36.9, 329.0], [37.0, 329.0], [37.1, 329.0], [37.2, 329.0], [37.3, 329.0], [37.4, 329.0], [37.5, 329.0], [37.6, 329.0], [37.7, 329.0], [37.8, 330.0], [37.9, 330.0], [38.0, 330.0], [38.1, 330.0], [38.2, 330.0], [38.3, 330.0], [38.4, 330.0], [38.5, 330.0], [38.6, 330.0], [38.7, 330.0], [38.8, 330.0], [38.9, 330.0], [39.0, 330.0], [39.1, 330.0], [39.2, 331.0], [39.3, 331.0], [39.4, 331.0], [39.5, 331.0], [39.6, 331.0], [39.7, 331.0], [39.8, 331.0], [39.9, 331.0], [40.0, 331.0], [40.1, 331.0], [40.2, 331.0], [40.3, 331.0], [40.4, 331.0], [40.5, 331.0], [40.6, 332.0], [40.7, 332.0], [40.8, 332.0], [40.9, 332.0], [41.0, 332.0], [41.1, 332.0], [41.2, 332.0], [41.3, 332.0], [41.4, 332.0], [41.5, 332.0], [41.6, 332.0], [41.7, 332.0], [41.8, 332.0], [41.9, 332.0], [42.0, 333.0], [42.1, 333.0], [42.2, 333.0], [42.3, 333.0], [42.4, 333.0], [42.5, 333.0], [42.6, 333.0], [42.7, 333.0], [42.8, 333.0], [42.9, 333.0], [43.0, 333.0], [43.1, 333.0], [43.2, 333.0], [43.3, 333.0], [43.4, 334.0], [43.5, 334.0], [43.6, 334.0], [43.7, 334.0], [43.8, 334.0], [43.9, 334.0], [44.0, 334.0], [44.1, 334.0], [44.2, 334.0], [44.3, 334.0], [44.4, 334.0], [44.5, 334.0], [44.6, 334.0], [44.7, 334.0], [44.8, 335.0], [44.9, 335.0], [45.0, 335.0], [45.1, 335.0], [45.2, 335.0], [45.3, 335.0], [45.4, 335.0], [45.5, 335.0], [45.6, 335.0], [45.7, 335.0], [45.8, 335.0], [45.9, 335.0], [46.0, 335.0], [46.1, 335.0], [46.2, 336.0], [46.3, 336.0], [46.4, 336.0], [46.5, 336.0], [46.6, 336.0], [46.7, 336.0], [46.8, 336.0], [46.9, 336.0], [47.0, 336.0], [47.1, 336.0], [47.2, 336.0], [47.3, 336.0], [47.4, 336.0], [47.5, 336.0], [47.6, 337.0], [47.7, 337.0], [47.8, 337.0], [47.9, 337.0], [48.0, 337.0], [48.1, 337.0], [48.2, 337.0], [48.3, 337.0], [48.4, 337.0], [48.5, 337.0], [48.6, 337.0], [48.7, 337.0], [48.8, 337.0], [48.9, 338.0], [49.0, 338.0], [49.1, 338.0], [49.2, 338.0], [49.3, 338.0], [49.4, 338.0], [49.5, 338.0], [49.6, 338.0], [49.7, 338.0], [49.8, 338.0], [49.9, 338.0], [50.0, 338.0], [50.1, 338.0], [50.2, 338.0], [50.3, 339.0], [50.4, 339.0], [50.5, 339.0], [50.6, 339.0], [50.7, 339.0], [50.8, 339.0], [50.9, 339.0], [51.0, 339.0], [51.1, 339.0], [51.2, 339.0], [51.3, 339.0], [51.4, 339.0], [51.5, 340.0], [51.6, 340.0], [51.7, 340.0], [51.8, 340.0], [51.9, 340.0], [52.0, 340.0], [52.1, 340.0], [52.2, 340.0], [52.3, 340.0], [52.4, 340.0], [52.5, 340.0], [52.6, 340.0], [52.7, 340.0], [52.8, 341.0], [52.9, 341.0], [53.0, 341.0], [53.1, 341.0], [53.2, 341.0], [53.3, 341.0], [53.4, 341.0], [53.5, 341.0], [53.6, 341.0], [53.7, 341.0], [53.8, 341.0], [53.9, 341.0], [54.0, 341.0], [54.1, 342.0], [54.2, 342.0], [54.3, 342.0], [54.4, 342.0], [54.5, 342.0], [54.6, 342.0], [54.7, 342.0], [54.8, 342.0], [54.9, 342.0], [55.0, 342.0], [55.1, 342.0], [55.2, 342.0], [55.3, 343.0], [55.4, 343.0], [55.5, 343.0], [55.6, 343.0], [55.7, 343.0], [55.8, 343.0], [55.9, 343.0], [56.0, 343.0], [56.1, 343.0], [56.2, 343.0], [56.3, 343.0], [56.4, 344.0], [56.5, 344.0], [56.6, 344.0], [56.7, 344.0], [56.8, 344.0], [56.9, 344.0], [57.0, 344.0], [57.1, 344.0], [57.2, 344.0], [57.3, 344.0], [57.4, 344.0], [57.5, 344.0], [57.6, 345.0], [57.7, 345.0], [57.8, 345.0], [57.9, 345.0], [58.0, 345.0], [58.1, 345.0], [58.2, 345.0], [58.3, 345.0], [58.4, 345.0], [58.5, 345.0], [58.6, 345.0], [58.7, 346.0], [58.8, 346.0], [58.9, 346.0], [59.0, 346.0], [59.1, 346.0], [59.2, 346.0], [59.3, 346.0], [59.4, 346.0], [59.5, 346.0], [59.6, 346.0], [59.7, 346.0], [59.8, 347.0], [59.9, 347.0], [60.0, 347.0], [60.1, 347.0], [60.2, 347.0], [60.3, 347.0], [60.4, 347.0], [60.5, 347.0], [60.6, 347.0], [60.7, 347.0], [60.8, 348.0], [60.9, 348.0], [61.0, 348.0], [61.1, 348.0], [61.2, 348.0], [61.3, 348.0], [61.4, 348.0], [61.5, 348.0], [61.6, 348.0], [61.7, 348.0], [61.8, 348.0], [61.9, 349.0], [62.0, 349.0], [62.1, 349.0], [62.2, 349.0], [62.3, 349.0], [62.4, 349.0], [62.5, 349.0], [62.6, 349.0], [62.7, 349.0], [62.8, 350.0], [62.9, 350.0], [63.0, 350.0], [63.1, 350.0], [63.2, 350.0], [63.3, 350.0], [63.4, 350.0], [63.5, 350.0], [63.6, 350.0], [63.7, 350.0], [63.8, 351.0], [63.9, 351.0], [64.0, 351.0], [64.1, 351.0], [64.2, 351.0], [64.3, 351.0], [64.4, 351.0], [64.5, 351.0], [64.6, 351.0], [64.7, 352.0], [64.8, 352.0], [64.9, 352.0], [65.0, 352.0], [65.1, 352.0], [65.2, 352.0], [65.3, 352.0], [65.4, 352.0], [65.5, 352.0], [65.6, 353.0], [65.7, 353.0], [65.8, 353.0], [65.9, 353.0], [66.0, 353.0], [66.1, 353.0], [66.2, 353.0], [66.3, 353.0], [66.4, 353.0], [66.5, 354.0], [66.6, 354.0], [66.7, 354.0], [66.8, 354.0], [66.9, 354.0], [67.0, 354.0], [67.1, 354.0], [67.2, 354.0], [67.3, 355.0], [67.4, 355.0], [67.5, 355.0], [67.6, 355.0], [67.7, 355.0], [67.8, 355.0], [67.9, 355.0], [68.0, 355.0], [68.1, 356.0], [68.2, 356.0], [68.3, 356.0], [68.4, 356.0], [68.5, 356.0], [68.6, 356.0], [68.7, 356.0], [68.8, 356.0], [68.9, 357.0], [69.0, 357.0], [69.1, 357.0], [69.2, 357.0], [69.3, 357.0], [69.4, 357.0], [69.5, 357.0], [69.6, 357.0], [69.7, 358.0], [69.8, 358.0], [69.9, 358.0], [70.0, 358.0], [70.1, 358.0], [70.2, 358.0], [70.3, 358.0], [70.4, 359.0], [70.5, 359.0], [70.6, 359.0], [70.7, 359.0], [70.8, 359.0], [70.9, 359.0], [71.0, 359.0], [71.1, 359.0], [71.2, 360.0], [71.3, 360.0], [71.4, 360.0], [71.5, 360.0], [71.6, 360.0], [71.7, 360.0], [71.8, 360.0], [71.9, 361.0], [72.0, 361.0], [72.1, 361.0], [72.2, 361.0], [72.3, 361.0], [72.4, 361.0], [72.5, 361.0], [72.6, 362.0], [72.7, 362.0], [72.8, 362.0], [72.9, 362.0], [73.0, 362.0], [73.1, 362.0], [73.2, 363.0], [73.3, 363.0], [73.4, 363.0], [73.5, 363.0], [73.6, 363.0], [73.7, 363.0], [73.8, 363.0], [73.9, 364.0], [74.0, 364.0], [74.1, 364.0], [74.2, 364.0], [74.3, 364.0], [74.4, 364.0], [74.5, 365.0], [74.6, 365.0], [74.7, 365.0], [74.8, 365.0], [74.9, 365.0], [75.0, 365.0], [75.1, 366.0], [75.2, 366.0], [75.3, 366.0], [75.4, 366.0], [75.5, 366.0], [75.6, 366.0], [75.7, 367.0], [75.8, 367.0], [75.9, 367.0], [76.0, 367.0], [76.1, 367.0], [76.2, 367.0], [76.3, 368.0], [76.4, 368.0], [76.5, 368.0], [76.6, 368.0], [76.7, 368.0], [76.8, 369.0], [76.9, 369.0], [77.0, 369.0], [77.1, 369.0], [77.2, 369.0], [77.3, 369.0], [77.4, 370.0], [77.5, 370.0], [77.6, 370.0], [77.7, 370.0], [77.8, 370.0], [77.9, 371.0], [78.0, 371.0], [78.1, 371.0], [78.2, 371.0], [78.3, 371.0], [78.4, 371.0], [78.5, 372.0], [78.6, 372.0], [78.7, 372.0], [78.8, 372.0], [78.9, 372.0], [79.0, 373.0], [79.1, 373.0], [79.2, 373.0], [79.3, 373.0], [79.4, 374.0], [79.5, 374.0], [79.6, 374.0], [79.7, 374.0], [79.8, 374.0], [79.9, 375.0], [80.0, 375.0], [80.1, 375.0], [80.2, 375.0], [80.3, 376.0], [80.4, 376.0], [80.5, 376.0], [80.6, 376.0], [80.7, 377.0], [80.8, 377.0], [80.9, 377.0], [81.0, 377.0], [81.1, 378.0], [81.2, 378.0], [81.3, 378.0], [81.4, 378.0], [81.5, 379.0], [81.6, 379.0], [81.7, 379.0], [81.8, 379.0], [81.9, 380.0], [82.0, 380.0], [82.1, 380.0], [82.2, 380.0], [82.3, 381.0], [82.4, 381.0], [82.5, 381.0], [82.6, 382.0], [82.7, 382.0], [82.8, 382.0], [82.9, 382.0], [83.0, 383.0], [83.1, 383.0], [83.2, 383.0], [83.3, 384.0], [83.4, 384.0], [83.5, 384.0], [83.6, 384.0], [83.7, 385.0], [83.8, 385.0], [83.9, 385.0], [84.0, 386.0], [84.1, 386.0], [84.2, 386.0], [84.3, 387.0], [84.4, 387.0], [84.5, 387.0], [84.6, 388.0], [84.7, 388.0], [84.8, 388.0], [84.9, 388.0], [85.0, 389.0], [85.1, 389.0], [85.2, 389.0], [85.3, 390.0], [85.4, 390.0], [85.5, 390.0], [85.6, 391.0], [85.7, 391.0], [85.8, 391.0], [85.9, 392.0], [86.0, 392.0], [86.1, 392.0], [86.2, 393.0], [86.3, 393.0], [86.4, 394.0], [86.5, 394.0], [86.6, 394.0], [86.7, 395.0], [86.8, 395.0], [86.9, 395.0], [87.0, 396.0], [87.1, 396.0], [87.2, 397.0], [87.3, 397.0], [87.4, 397.0], [87.5, 398.0], [87.6, 398.0], [87.7, 399.0], [87.8, 399.0], [87.9, 399.0], [88.0, 400.0], [88.1, 400.0], [88.2, 401.0], [88.3, 401.0], [88.4, 401.0], [88.5, 402.0], [88.6, 402.0], [88.7, 403.0], [88.8, 403.0], [88.9, 404.0], [89.0, 404.0], [89.1, 405.0], [89.2, 405.0], [89.3, 405.0], [89.4, 406.0], [89.5, 406.0], [89.6, 407.0], [89.7, 407.0], [89.8, 408.0], [89.9, 408.0], [90.0, 409.0], [90.1, 410.0], [90.2, 410.0], [90.3, 411.0], [90.4, 411.0], [90.5, 412.0], [90.6, 412.0], [90.7, 413.0], [90.8, 413.0], [90.9, 414.0], [91.0, 414.0], [91.1, 415.0], [91.2, 415.0], [91.3, 416.0], [91.4, 416.0], [91.5, 417.0], [91.6, 418.0], [91.7, 418.0], [91.8, 419.0], [91.9, 419.0], [92.0, 420.0], [92.1, 420.0], [92.2, 421.0], [92.3, 421.0], [92.4, 422.0], [92.5, 423.0], [92.6, 423.0], [92.7, 424.0], [92.8, 424.0], [92.9, 425.0], [93.0, 426.0], [93.1, 426.0], [93.2, 427.0], [93.3, 427.0], [93.4, 428.0], [93.5, 429.0], [93.6, 429.0], [93.7, 430.0], [93.8, 431.0], [93.9, 431.0], [94.0, 432.0], [94.1, 433.0], [94.2, 434.0], [94.3, 434.0], [94.4, 435.0], [94.5, 436.0], [94.6, 437.0], [94.7, 438.0], [94.8, 439.0], [94.9, 440.0], [95.0, 440.0], [95.1, 441.0], [95.2, 442.0], [95.3, 443.0], [95.4, 444.0], [95.5, 445.0], [95.6, 445.0], [95.7, 446.0], [95.8, 447.0], [95.9, 448.0], [96.0, 449.0], [96.1, 450.0], [96.2, 451.0], [96.3, 452.0], [96.4, 453.0], [96.5, 454.0], [96.6, 455.0], [96.7, 456.0], [96.8, 457.0], [96.9, 458.0], [97.0, 459.0], [97.1, 459.0], [97.2, 460.0], [97.3, 461.0], [97.4, 462.0], [97.5, 463.0], [97.6, 464.0], [97.7, 465.0], [97.8, 466.0], [97.9, 467.0], [98.0, 469.0], [98.1, 470.0], [98.2, 471.0], [98.3, 472.0], [98.4, 474.0], [98.5, 475.0], [98.6, 477.0], [98.7, 479.0], [98.8, 482.0], [98.9, 484.0], [99.0, 486.0], [99.1, 489.0], [99.2, 492.0], [99.3, 496.0], [99.4, 500.0], [99.5, 506.0], [99.6, 512.0], [99.7, 517.0], [99.8, 522.0], [99.9, 527.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 100.0, "maxY": 512292.0, "series": [{"data": [[300.0, 123713.0], [600.0, 101.0], [700.0, 113.0], [100.0, 7580.0], [200.0, 512292.0], [400.0, 2958.0], [800.0, 72.0], [900.0, 261.0], [500.0, 927.0], [1000.0, 16.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[300.0, 420024.0], [600.0, 11.0], [200.0, 34234.0], [400.0, 59155.0], [500.0, 3158.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4546.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1160069.0, "series": [{"data": [[0.0, 1160069.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4546.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 297.72840443297406, "minX": 1.62140238E12, "maxY": 300.0, "series": [{"data": [[1.62140292E12, 300.0], [1.62140244E12, 300.0], [1.62140262E12, 300.0], [1.62140256E12, 300.0], [1.62140274E12, 300.0], [1.62140238E12, 299.3685255422557], [1.62140268E12, 300.0], [1.62140286E12, 300.0], [1.6214025E12, 300.0], [1.6214028E12, 300.0], [1.62140298E12, 297.72840443297406]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}, {"data": [[1.62140292E12, 300.0], [1.62140244E12, 300.0], [1.62140262E12, 300.0], [1.62140256E12, 300.0], [1.62140274E12, 300.0], [1.62140238E12, 299.8775155425908], [1.62140268E12, 300.0], [1.62140286E12, 300.0], [1.6214025E12, 300.0], [1.6214028E12, 300.0], [1.62140298E12, 297.9168042384927]], "isOverall": false, "label": "Thread Group rcdn-3", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62140298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 179.0, "minX": 1.0, "maxY": 710.0, "series": [{"data": [[2.0, 203.0], [3.0, 205.0], [4.0, 240.0], [5.0, 240.0], [6.0, 241.0], [7.0, 236.0], [8.0, 246.0], [9.0, 247.0], [10.0, 246.0], [11.0, 245.0], [12.0, 246.0], [13.0, 247.0], [14.0, 248.0], [16.0, 247.0], [17.0, 246.0], [18.0, 246.0], [19.0, 245.0], [20.0, 245.0], [21.0, 245.0], [22.0, 245.0], [23.0, 245.0], [24.0, 245.0], [25.0, 244.0], [26.0, 245.0], [27.0, 244.0], [28.0, 242.0], [29.0, 243.0], [30.0, 243.0], [31.0, 243.0], [33.0, 247.0], [32.0, 243.0], [35.0, 242.0], [34.0, 242.0], [37.0, 244.0], [36.0, 242.0], [39.0, 244.0], [38.0, 241.0], [41.0, 242.0], [40.0, 241.0], [43.0, 241.0], [42.0, 241.0], [45.0, 240.0], [44.0, 241.0], [47.0, 239.0], [46.0, 239.0], [49.0, 239.0], [48.0, 240.0], [51.0, 238.0], [50.0, 240.0], [53.0, 238.0], [52.0, 239.0], [55.0, 237.0], [54.0, 238.0], [57.0, 239.0], [56.0, 238.0], [59.0, 238.0], [58.0, 239.0], [61.0, 237.0], [60.0, 240.0], [63.0, 237.0], [62.0, 238.0], [67.0, 236.0], [66.0, 236.0], [65.0, 237.0], [64.0, 237.0], [71.0, 235.0], [70.0, 235.0], [69.0, 235.0], [68.0, 235.0], [75.0, 234.0], [74.0, 233.0], [73.0, 234.0], [72.0, 233.0], [79.0, 232.0], [78.0, 232.0], [77.0, 234.0], [76.0, 234.0], [83.0, 232.0], [82.0, 232.0], [81.0, 232.0], [80.0, 233.0], [87.0, 232.0], [86.0, 234.0], [85.0, 231.0], [84.0, 231.0], [91.0, 235.0], [90.0, 230.0], [89.0, 235.0], [88.0, 232.0], [95.0, 235.0], [94.0, 228.0], [93.0, 234.0], [92.0, 240.0], [99.0, 235.0], [98.0, 232.0], [97.0, 225.0], [96.0, 232.0], [103.0, 232.0], [102.0, 235.0], [101.0, 232.0], [100.0, 236.0], [106.0, 227.0], [105.0, 222.0], [104.0, 233.0], [111.0, 221.0], [110.0, 226.0], [109.0, 223.0], [108.0, 223.0], [115.0, 223.0], [114.0, 216.0], [113.0, 226.0], [112.0, 222.0], [119.0, 228.0], [118.0, 222.5], [116.0, 228.0], [123.0, 222.0], [122.0, 226.0], [121.0, 227.0], [120.0, 214.0], [127.0, 218.0], [126.0, 220.0], [124.0, 227.0], [135.0, 218.0], [134.0, 218.0], [133.0, 218.0], [132.0, 220.0], [131.0, 220.0], [130.0, 220.0], [129.0, 222.0], [128.0, 215.0], [143.0, 216.0], [142.0, 215.0], [141.0, 216.0], [140.0, 216.0], [138.0, 217.0], [137.0, 217.0], [136.0, 216.0], [151.0, 217.0], [150.0, 217.0], [149.0, 217.0], [148.0, 216.0], [147.0, 220.0], [146.0, 216.0], [145.0, 214.0], [144.0, 215.0], [158.0, 216.0], [157.0, 217.0], [156.0, 217.0], [155.0, 218.0], [154.0, 218.0], [153.0, 217.0], [152.0, 217.0], [167.0, 217.0], [166.0, 216.0], [165.0, 214.0], [164.0, 215.0], [163.0, 216.0], [162.0, 216.0], [161.0, 217.0], [160.0, 216.5], [175.0, 214.0], [174.0, 214.0], [173.0, 213.0], [172.0, 215.0], [171.0, 215.0], [170.0, 215.0], [169.0, 216.0], [168.0, 216.0], [180.0, 213.5], [178.0, 215.0], [177.0, 213.0], [176.0, 213.0], [191.0, 308.0], [189.0, 309.0], [184.0, 313.0], [196.0, 305.0], [194.0, 308.0], [202.0, 179.0], [217.0, 201.0], [224.0, 226.0], [230.0, 228.0], [237.0, 252.0], [240.0, 233.0], [256.0, 263.0], [260.0, 275.0], [271.0, 273.0], [270.0, 273.0], [265.0, 273.0], [261.0, 273.0], [287.0, 329.0], [286.0, 606.5], [283.0, 496.0], [282.0, 267.0], [281.0, 269.0], [273.0, 274.0], [300.0, 395.3333333333333], [298.0, 339.0], [303.0, 582.0], [302.0, 596.0], [299.0, 444.0], [295.0, 277.0], [291.0, 267.0], [290.0, 281.0], [288.0, 434.5], [317.0, 572.0], [319.0, 263.0], [316.0, 316.0], [307.0, 267.0], [306.0, 442.0], [315.0, 573.0], [314.0, 296.0], [312.0, 575.0], [310.0, 576.0], [309.0, 437.5], [308.0, 586.0], [325.0, 476.5], [330.0, 393.0], [335.0, 561.0], [332.0, 464.6666666666667], [329.0, 263.0], [328.0, 491.25], [321.0, 495.5], [320.0, 571.0], [351.0, 275.0], [349.0, 458.0], [342.0, 461.3333333333333], [341.0, 559.0], [340.0, 271.0], [337.0, 270.0], [364.0, 274.0], [366.0, 418.5], [367.0, 536.0], [365.0, 538.5], [362.0, 539.5], [360.0, 544.0], [359.0, 424.5], [354.0, 364.6666666666667], [353.0, 413.0], [357.0, 275.0], [356.0, 268.0], [381.0, 422.6], [378.0, 423.0], [379.0, 527.0], [376.0, 400.5], [374.0, 530.0], [371.0, 278.0], [370.0, 532.0], [369.0, 276.0], [368.0, 456.3333333333333], [398.0, 496.0], [392.0, 441.0], [394.0, 470.5], [396.0, 373.0], [399.0, 460.0], [393.0, 508.3333333333333], [391.0, 508.0], [388.0, 527.6666666666666], [385.0, 275.0], [413.0, 271.0], [412.0, 468.0], [411.0, 486.5], [408.0, 354.0], [403.0, 494.5], [400.0, 424.5], [428.0, 416.5], [421.0, 465.66666666666663], [431.0, 448.0], [426.0, 457.5], [425.0, 459.0], [423.0, 380.5], [419.0, 458.0], [418.0, 484.5], [416.0, 475.6666666666667], [447.0, 439.6666666666667], [446.0, 442.0], [445.0, 443.0], [442.0, 440.0], [441.0, 434.0], [440.0, 442.0], [438.0, 435.0], [437.0, 448.0], [462.0, 388.0], [461.0, 392.3333333333333], [457.0, 401.0], [456.0, 400.0], [449.0, 427.3333333333333], [448.0, 415.0], [471.0, 541.0], [479.0, 407.5], [474.0, 411.25], [472.0, 416.6], [469.0, 403.75], [467.0, 421.0], [466.0, 394.5], [465.0, 412.5], [480.0, 561.5], [492.0, 383.8], [491.0, 372.0], [489.0, 366.0], [484.0, 271.0], [483.0, 272.0], [482.0, 428.0], [481.0, 271.0], [510.0, 282.0], [508.0, 359.0], [507.0, 347.0], [506.0, 271.0], [498.0, 312.5], [497.0, 387.3333333333333], [496.0, 271.3333333333333], [540.0, 321.0], [543.0, 303.6666666666667], [538.0, 336.0], [536.0, 423.0], [534.0, 352.0], [532.0, 320.3333333333333], [528.0, 329.6666666666667], [527.0, 268.0], [514.0, 295.25], [513.0, 319.0], [516.0, 271.5], [515.0, 273.0], [526.0, 305.0], [525.0, 310.0], [523.0, 304.5], [521.0, 334.5], [559.0, 689.0], [556.0, 685.0], [554.0, 303.5], [552.0, 273.0], [557.0, 692.0], [558.0, 487.0], [561.0, 710.0], [564.0, 297.0], [565.0, 494.0], [566.0, 425.0], [567.0, 418.3333333333333], [574.0, 281.25], [573.0, 299.0], [551.0, 314.5], [547.0, 311.2], [546.0, 337.0], [545.0, 359.0], [600.0, 277.56361089316584], [581.0, 518.5], [582.0, 437.0], [583.0, 356.25], [584.0, 433.4], [585.0, 353.0], [586.0, 409.7142857142857], [591.0, 349.6666666666667], [576.0, 269.0], [579.0, 301.0], [577.0, 259.0], [590.0, 345.1111111111111], [589.0, 348.0], [588.0, 351.0], [587.0, 353.5], [599.0, 330.82352941176475], [598.0, 342.0], [597.0, 343.5], [596.0, 344.5], [595.0, 345.0], [592.0, 345.0], [1.0, 199.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[599.7675180122019, 277.620922082671]], "isOverall": false, "label": "AuthzRequest-rcdn-3-Aggregated", "isController": false}, {"data": [[183.0, 328.0], [182.0, 331.0], [181.0, 334.0], [190.0, 320.0], [188.0, 320.0], [187.0, 316.0], [186.0, 320.0], [185.0, 319.0], [199.0, 320.0], [198.0, 333.0], [197.0, 325.0], [196.0, 321.0], [195.0, 321.0], [194.0, 322.0], [193.0, 322.0], [192.0, 323.0], [207.0, 329.0], [206.0, 326.0], [205.0, 327.0], [204.0, 326.0], [203.0, 323.0], [202.0, 323.0], [201.0, 322.0], [200.0, 321.0], [215.0, 343.0], [213.0, 338.0], [212.0, 336.0], [211.0, 334.0], [209.0, 329.0], [208.0, 327.0], [222.0, 353.0], [221.0, 350.0], [220.0, 346.0], [218.0, 344.5], [216.0, 344.0], [228.0, 311.5], [230.0, 358.5], [227.0, 356.0], [226.0, 356.0], [225.0, 356.0], [224.0, 354.5], [232.0, 323.3333333333333], [234.0, 289.6666666666667], [237.0, 265.0], [238.0, 330.0], [239.0, 366.0], [236.0, 364.0], [235.0, 364.0], [233.0, 359.0], [240.0, 299.0], [244.0, 282.0], [246.0, 269.0], [247.0, 370.5], [245.0, 372.5], [243.0, 369.0], [242.0, 369.0], [241.0, 368.0], [248.0, 315.6666666666667], [249.0, 308.5], [251.0, 318.6666666666667], [252.0, 308.75], [253.0, 323.6], [255.0, 304.0], [254.0, 375.0], [258.0, 319.0], [256.0, 278.0], [257.0, 380.0], [259.0, 279.0], [269.0, 341.5], [270.0, 323.6666666666667], [271.0, 315.5], [260.0, 312.6666666666667], [261.0, 380.0], [262.0, 335.5], [263.0, 322.25], [264.0, 345.5], [265.0, 276.0], [266.0, 343.6666666666667], [267.0, 352.25], [273.0, 350.0], [272.0, 308.0], [274.0, 361.5], [275.0, 360.5], [276.0, 348.75], [277.0, 367.5], [278.0, 347.0], [279.0, 392.0], [280.0, 341.5], [286.0, 453.0], [282.0, 334.25], [283.0, 342.0], [290.0, 323.3333333333333], [288.0, 399.0], [291.0, 287.0], [292.0, 283.0], [294.0, 336.0], [295.0, 277.0], [296.0, 275.3333333333333], [298.0, 272.0], [300.0, 307.3333333333333], [301.0, 263.0], [302.0, 262.0], [303.0, 246.0], [307.0, 254.0], [304.0, 376.0], [305.0, 247.0], [306.0, 254.0], [310.0, 288.0], [309.0, 507.0], [308.0, 464.0], [315.0, 249.0], [314.0, 405.0], [313.0, 398.0], [312.0, 392.0], [316.0, 424.5], [317.0, 323.0], [318.0, 235.0], [319.0, 500.5], [333.0, 228.0], [321.0, 415.0], [322.0, 240.0], [326.0, 215.0], [325.0, 599.5], [327.0, 218.0], [331.0, 224.0], [335.0, 504.25], [328.0, 595.0], [332.0, 590.0], [330.0, 594.0], [351.0, 401.0], [339.0, 409.5], [343.0, 222.0], [337.0, 399.0], [342.0, 582.0], [344.0, 252.0], [345.0, 309.5], [346.0, 250.0], [347.0, 246.0], [348.0, 218.0], [349.0, 580.3333333333334], [364.0, 222.0], [352.0, 254.0], [354.0, 473.6666666666667], [357.0, 273.0], [356.0, 399.0], [358.0, 396.5], [359.0, 382.25], [361.0, 326.3333333333333], [360.0, 577.0], [362.0, 571.0], [366.0, 564.0], [365.0, 484.0], [369.0, 312.0], [381.0, 559.0], [379.0, 482.0], [374.0, 562.0], [371.0, 399.0], [398.0, 400.0], [397.0, 548.0], [394.0, 550.0], [393.0, 552.0], [391.0, 401.0], [388.0, 552.0], [385.0, 478.0], [414.0, 540.0], [411.0, 542.0], [408.0, 496.6666666666667], [405.0, 546.0], [403.0, 475.0], [429.0, 296.0], [417.0, 296.0], [418.0, 418.0], [428.0, 532.0], [419.0, 537.0], [422.0, 296.0], [423.0, 402.0], [416.0, 403.0], [424.0, 297.0], [425.0, 415.5], [426.0, 295.5], [430.0, 297.0], [431.0, 486.3333333333333], [444.0, 349.0], [434.0, 300.0], [435.0, 301.0], [436.0, 299.25], [438.0, 409.5], [433.0, 526.0], [437.0, 481.6666666666667], [440.0, 298.5], [441.0, 408.0], [442.0, 297.0], [443.0, 298.0], [447.0, 303.0], [445.0, 515.0], [460.0, 402.0], [448.0, 305.0], [449.0, 429.75], [451.0, 505.0], [450.0, 506.0], [461.0, 311.0], [462.0, 312.0], [452.0, 308.0], [453.0, 365.6], [455.0, 309.0], [456.0, 307.75], [457.0, 405.0], [458.0, 309.5], [459.0, 352.0], [465.0, 349.6], [464.0, 312.0], [466.0, 358.25], [467.0, 395.0], [476.0, 314.5], [477.0, 320.0], [478.0, 329.8], [479.0, 407.5], [468.0, 316.0], [469.0, 314.0], [470.0, 315.5], [471.0, 313.0], [472.0, 386.6], [473.0, 310.0], [474.0, 394.0], [492.0, 405.0], [482.0, 405.5], [480.0, 321.0], [487.0, 487.0], [483.0, 320.0], [484.0, 356.5], [486.0, 322.0], [488.0, 323.0], [490.0, 326.0], [491.0, 421.2], [493.0, 350.83333333333337], [495.0, 393.0], [503.0, 332.0], [498.0, 400.0], [497.0, 471.0], [500.0, 331.5], [501.0, 339.0], [502.0, 336.0], [506.0, 336.0], [507.0, 337.0], [508.0, 388.2], [510.0, 337.6666666666667], [511.0, 402.6666666666667], [519.0, 388.25], [515.0, 337.0], [512.0, 380.0], [524.0, 339.0], [526.0, 344.0], [513.0, 368.0], [514.0, 337.5], [516.0, 398.77777777777777], [517.0, 336.0], [518.0, 355.75], [529.0, 342.5], [543.0, 379.0], [528.0, 463.5], [541.0, 362.5], [542.0, 383.6], [538.0, 360.5], [540.0, 412.6666666666667], [536.0, 346.5], [537.0, 432.0], [530.0, 344.0], [531.0, 345.0], [532.0, 344.0], [534.0, 381.6], [535.0, 346.25], [520.0, 335.0], [521.0, 412.0], [523.0, 336.0], [545.0, 383.75], [544.0, 367.0], [546.0, 382.0], [548.0, 415.0], [547.0, 454.0], [549.0, 382.5], [557.0, 349.0], [554.0, 417.0], [553.0, 447.5], [558.0, 350.0], [559.0, 352.0], [560.0, 354.6666666666667], [574.0, 410.0], [568.0, 382.75], [551.0, 449.3333333333333], [570.0, 425.0], [571.0, 375.6666666666667], [561.0, 355.5], [563.0, 375.75], [564.0, 389.3333333333333], [565.0, 362.0], [566.0, 398.75], [567.0, 392.75], [577.0, 406.8], [576.0, 401.5], [591.0, 378.5], [589.0, 379.6], [590.0, 374.8888888888889], [587.0, 378.0], [588.0, 378.8571428571429], [578.0, 394.0], [579.0, 402.0], [581.0, 401.3333333333333], [582.0, 407.7142857142857], [583.0, 382.25], [600.0, 348.2781280169332], [592.0, 379.66666666666663], [593.0, 378.5], [594.0, 375.2], [595.0, 367.5], [596.0, 366.125], [597.0, 360.25], [598.0, 367.0], [599.0, 375.11764705882354], [584.0, 375.1428571428571], [585.0, 367.5], [586.0, 372.6]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[599.7474941054891, 348.30620888842225]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 120627.73333333334, "minX": 1.62140238E12, "maxY": 1.6130680933333334E7, "series": [{"data": [[1.62140292E12, 1.5446080533333333E7], [1.62140244E12, 1.5338081966666667E7], [1.62140262E12, 1.5248986566666666E7], [1.62140256E12, 1.55526357E7], [1.62140274E12, 1.6130680933333334E7], [1.62140238E12, 8959212.566666666], [1.62140268E12, 1.5987327833333334E7], [1.62140286E12, 1.48856527E7], [1.6214025E12, 1.5707769433333334E7], [1.6214028E12, 1.4831105E7], [1.62140298E12, 6063162.266666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62140292E12, 307299.4666666667], [1.62140244E12, 305148.0333333333], [1.62140262E12, 303378.43333333335], [1.62140256E12, 309419.3], [1.62140274E12, 320919.06666666665], [1.62140238E12, 178242.43333333332], [1.62140268E12, 318067.1666666667], [1.62140286E12, 296147.3], [1.6214025E12, 312505.56666666665], [1.6214028E12, 295065.0], [1.62140298E12, 120627.73333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62140298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 248.41225891896508, "minX": 1.62140238E12, "maxY": 378.23036164844575, "series": [{"data": [[1.62140292E12, 284.98751327111137], [1.62140244E12, 284.44442864141354], [1.62140262E12, 278.5630021829001], [1.62140256E12, 280.4221830821232], [1.62140274E12, 258.15850946293074], [1.62140238E12, 317.6928017914497], [1.62140268E12, 248.41225891896508], [1.62140286E12, 288.7762965814847], [1.6214025E12, 281.61024958923764], [1.6214028E12, 279.0318809117703], [1.62140298E12, 275.1273467193915]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62140292E12, 335.80516523913667], [1.62140244E12, 342.39944866920183], [1.62140262E12, 355.4679140158873], [1.62140256E12, 337.32952159567964], [1.62140274E12, 344.9818112122692], [1.62140238E12, 320.66540239421505], [1.62140268E12, 372.7587320648448], [1.62140286E12, 359.1955749740646], [1.6214025E12, 328.5232252410133], [1.6214028E12, 378.23036164844575], [1.62140298E12, 360.62213450736425]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62140298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 248.38777143172248, "minX": 1.62140238E12, "maxY": 378.2044154751888, "series": [{"data": [[1.62140292E12, 284.96119289460796], [1.62140244E12, 284.42124559490577], [1.62140262E12, 278.5419627513828], [1.62140256E12, 280.39794566454515], [1.62140274E12, 258.133786750462], [1.62140238E12, 317.6572085211713], [1.62140268E12, 248.38777143172248], [1.62140286E12, 288.7535813401374], [1.6214025E12, 281.5838197324171], [1.6214028E12, 279.00752054582296], [1.62140298E12, 275.10266057511245]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62140292E12, 335.77805146578504], [1.62140244E12, 342.37576045627543], [1.62140262E12, 355.44513375745754], [1.62140256E12, 337.3032206058786], [1.62140274E12, 344.95426928605866], [1.62140238E12, 320.63070404171805], [1.62140268E12, 372.73208555042515], [1.62140286E12, 359.16870161998463], [1.6214025E12, 328.497991527903], [1.6214028E12, 378.2044154751888], [1.62140298E12, 360.5957694448663]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62140298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.00849892267177401, "minX": 1.62140238E12, "maxY": 0.0934870214531239, "series": [{"data": [[1.62140292E12, 0.009951352464861233], [1.62140244E12, 0.010350985318984247], [1.62140262E12, 0.010248788568420562], [1.62140256E12, 0.010536652274888226], [1.62140274E12, 0.009627939678303497], [1.62140238E12, 0.03182179793158306], [1.62140268E12, 0.014113070110090184], [1.62140286E12, 0.010411152285159661], [1.6214025E12, 0.01078162898051804], [1.6214028E12, 0.010001550628004409], [1.62140298E12, 0.014205090797404748]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62140292E12, 0.015338968818227664], [1.62140244E12, 0.009182509505703516], [1.62140262E12, 0.016457897024538627], [1.62140256E12, 0.016178014397120556], [1.62140274E12, 0.016808816482989816], [1.62140238E12, 0.0934870214531239], [1.62140268E12, 0.009192736909666882], [1.62140286E12, 0.00849892267177401], [1.6214025E12, 0.017108530528776048], [1.6214028E12, 0.018734230445752644], [1.62140298E12, 0.021304589848691945]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62140298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 125.0, "minX": 1.62140238E12, "maxY": 1040.0, "series": [{"data": [[1.62140292E12, 441.0], [1.62140244E12, 487.0], [1.62140262E12, 514.0], [1.62140256E12, 526.0], [1.62140274E12, 482.0], [1.62140238E12, 1040.0], [1.62140268E12, 564.0], [1.62140286E12, 541.0], [1.6214025E12, 472.0], [1.6214028E12, 546.0], [1.62140298E12, 620.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62140292E12, 354.0], [1.62140244E12, 347.0], [1.62140262E12, 425.90000000000146], [1.62140256E12, 339.0], [1.62140274E12, 336.0], [1.62140238E12, 349.90000000000146], [1.62140268E12, 340.0], [1.62140286E12, 358.0], [1.6214025E12, 371.0], [1.6214028E12, 412.0], [1.62140298E12, 405.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62140292E12, 385.0], [1.62140244E12, 385.0], [1.62140262E12, 487.0], [1.62140256E12, 360.0], [1.62140274E12, 357.0], [1.62140238E12, 380.0], [1.62140268E12, 369.0], [1.62140286E12, 399.0], [1.6214025E12, 421.0], [1.6214028E12, 447.0], [1.62140298E12, 484.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62140292E12, 368.0], [1.62140244E12, 360.0], [1.62140262E12, 470.0], [1.62140256E12, 348.0], [1.62140274E12, 341.0], [1.62140238E12, 360.0], [1.62140268E12, 349.0], [1.62140286E12, 372.0], [1.6214025E12, 387.0], [1.6214028E12, 426.0], [1.62140298E12, 446.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62140292E12, 177.0], [1.62140244E12, 159.0], [1.62140262E12, 167.0], [1.62140256E12, 203.0], [1.62140274E12, 145.0], [1.62140238E12, 173.0], [1.62140268E12, 125.0], [1.62140286E12, 197.0], [1.6214025E12, 177.0], [1.6214028E12, 158.0], [1.62140298E12, 165.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62140292E12, 306.0], [1.62140244E12, 302.0], [1.62140262E12, 283.0], [1.62140256E12, 302.0], [1.62140274E12, 297.0], [1.62140238E12, 303.0], [1.62140268E12, 285.0], [1.62140286E12, 310.0], [1.6214025E12, 309.0], [1.6214028E12, 307.0], [1.62140298E12, 288.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62140298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 218.5, "minX": 164.0, "maxY": 492.0, "series": [{"data": [[164.0, 278.5], [897.0, 409.0], [1187.0, 492.0], [1399.0, 359.0], [1508.0, 346.0], [1540.0, 331.0], [1572.0, 319.0], [1659.0, 355.0], [1632.0, 330.0], [1641.0, 371.0], [1600.0, 347.0], [1653.0, 303.0], [1605.0, 335.0], [1647.0, 318.0], [1665.0, 334.0], [1717.0, 344.0], [1723.0, 309.0], [1696.0, 296.0], [1715.0, 309.0], [1725.0, 283.0], [1721.0, 334.0], [1782.0, 331.0], [1731.0, 348.0], [1755.0, 334.0], [1728.0, 300.0], [1758.0, 330.0], [1791.0, 352.0], [1742.0, 320.0], [1734.0, 329.0], [1776.0, 284.0], [1777.0, 298.0], [1780.0, 344.0], [1781.0, 338.0], [1779.0, 340.0], [1749.0, 301.0], [1754.0, 294.0], [1748.0, 340.0], [1746.0, 342.0], [1745.0, 331.0], [1767.0, 321.0], [1772.0, 339.0], [1768.0, 309.0], [1775.0, 296.0], [1785.0, 332.0], [1783.0, 289.0], [1784.0, 326.0], [1788.0, 270.0], [1790.0, 335.0], [1786.0, 332.0], [1760.0, 284.0], [1765.0, 275.0], [1843.0, 298.0], [1853.0, 311.0], [1848.0, 324.0], [1851.0, 295.0], [1849.0, 300.0], [1852.0, 323.0], [1846.0, 328.5], [1847.0, 258.0], [1844.0, 302.0], [1845.0, 331.0], [1806.0, 338.0], [1804.0, 320.0], [1841.0, 319.0], [1842.0, 341.0], [1803.0, 280.0], [1802.0, 326.0], [1797.0, 341.0], [1800.0, 321.0], [1796.0, 329.0], [1812.0, 332.0], [1808.0, 320.0], [1809.0, 295.0], [1810.0, 289.0], [1811.0, 278.0], [1821.0, 296.0], [1817.0, 304.0], [1815.0, 327.0], [1816.0, 307.0], [1820.0, 268.0], [1818.0, 338.0], [1823.0, 334.0], [1822.0, 313.0], [1836.0, 297.0], [1832.0, 319.0], [1829.0, 328.0], [1835.0, 322.0], [1828.0, 301.0], [1839.0, 333.0], [1838.0, 318.0], [1854.0, 323.0], [1825.0, 267.0], [1826.0, 298.0], [1827.0, 284.0], [1905.0, 303.0], [1861.0, 312.0], [1917.0, 308.0], [1918.0, 314.0], [1890.0, 269.0], [1888.0, 318.0], [1915.0, 304.0], [1892.0, 322.0], [1891.0, 243.0], [1899.0, 310.0], [1898.0, 321.0], [1900.0, 300.0], [1896.0, 289.0], [1895.0, 312.0], [1894.0, 314.0], [1903.0, 312.0], [1902.0, 311.0], [1901.0, 317.0], [1893.0, 313.0], [1880.0, 310.0], [1874.0, 311.0], [1878.0, 314.5], [1876.0, 331.0], [1873.0, 335.0], [1872.0, 314.5], [1914.0, 303.5], [1887.0, 306.0], [1858.0, 332.0], [1857.0, 285.0], [1856.0, 294.0], [1885.0, 320.0], [1886.0, 286.0], [1906.0, 316.0], [1909.0, 315.0], [1910.0, 285.0], [1913.0, 312.0], [1912.0, 269.0], [1911.0, 318.0], [1908.0, 288.0], [1882.0, 322.0], [1881.0, 308.0], [1883.0, 282.0], [1884.0, 309.0], [1871.0, 331.0], [1867.0, 311.0], [1870.0, 328.0], [1904.0, 313.0], [1865.0, 331.0], [1863.0, 297.0], [1864.0, 325.0], [1925.0, 308.0], [1931.0, 313.0], [1930.0, 305.0], [1927.0, 289.0], [1929.0, 293.0], [1971.0, 298.0], [1972.0, 299.0], [1973.0, 311.0], [1974.0, 305.0], [1977.0, 297.0], [1976.0, 276.0], [1975.0, 308.0], [1978.0, 294.0], [1979.0, 296.0], [1983.0, 300.0], [1981.0, 310.0], [1980.0, 305.0], [1953.0, 287.0], [1954.0, 300.0], [1952.0, 303.0], [1933.0, 293.0], [1970.0, 302.0], [1968.0, 243.0], [1934.0, 302.0], [1945.0, 308.0], [1939.0, 300.0], [1940.0, 314.0], [1941.0, 292.0], [1938.0, 299.0], [1937.0, 302.0], [1964.0, 297.0], [1960.0, 305.0], [1963.0, 298.0], [1962.0, 291.0], [1961.0, 302.0], [1959.0, 304.0], [1956.0, 309.0], [1958.0, 289.0], [1966.0, 300.0], [1967.0, 299.0], [1955.0, 306.0], [1951.0, 313.0], [1950.0, 308.0], [1948.0, 301.0], [1949.0, 313.0], [1947.0, 307.0], [1946.0, 272.0], [1922.0, 308.0], [1920.0, 321.0], [1923.0, 285.0], [1924.0, 306.5], [1942.0, 305.0], [1944.0, 293.0], [1943.0, 318.0], [2034.0, 286.0], [2023.0, 296.0], [1988.0, 292.0], [1995.0, 280.0], [1994.0, 294.0], [1992.0, 300.0], [1989.0, 298.0], [1991.0, 301.0], [1990.0, 312.0], [2033.0, 287.0], [2032.0, 273.0], [1999.0, 300.0], [1998.0, 300.0], [1997.0, 296.0], [1996.0, 306.0], [2012.0, 289.0], [2011.0, 294.0], [2014.0, 297.0], [2015.0, 296.0], [2013.0, 292.0], [1984.0, 298.0], [1985.0, 299.0], [1987.0, 299.0], [1986.0, 301.0], [2030.0, 297.0], [2031.0, 280.0], [2010.0, 298.0], [2005.0, 298.0], [2002.0, 302.0], [2001.0, 309.0], [2003.0, 285.0], [2004.0, 292.0], [2007.0, 296.0], [2009.0, 295.0], [2006.0, 285.5], [2029.0, 298.0], [2028.0, 289.0], [2026.0, 288.0], [2025.0, 298.0], [2024.0, 288.0], [2027.0, 287.0], [2044.0, 293.0], [2045.0, 306.0], [2046.0, 277.0], [2041.0, 291.0], [2042.0, 285.0], [2043.0, 291.0], [2037.0, 294.0], [2035.0, 246.0], [2036.0, 296.0], [2038.0, 249.0], [2039.0, 299.0], [2047.0, 289.0], [2022.0, 289.0], [2017.0, 281.0], [2016.0, 296.0], [2020.0, 300.0], [2021.0, 299.0], [2058.0, 301.0], [2051.0, 288.0], [2073.0, 288.0], [2071.0, 296.0], [2072.0, 289.0], [2075.0, 274.0], [2158.0, 272.0], [2159.0, 226.0], [2115.0, 267.0], [2113.0, 289.0], [2173.0, 287.0], [2165.0, 252.0], [2161.0, 269.0], [2117.0, 258.0], [2121.0, 267.0], [2119.0, 268.0], [2122.0, 248.0], [2154.0, 270.0], [2145.0, 279.0], [2146.0, 263.0], [2151.0, 295.0], [2076.0, 291.0], [2077.0, 258.0], [2057.0, 292.0], [2056.0, 288.0], [2054.0, 284.0], [2052.0, 297.0], [2053.0, 284.0], [2070.0, 287.0], [2066.0, 289.0], [2068.0, 280.0], [2069.0, 287.0], [2061.0, 276.0], [2062.0, 273.0], [2063.0, 290.0], [2065.0, 280.0], [2105.0, 282.0], [2098.0, 277.0], [2106.0, 241.0], [2097.0, 272.0], [2085.0, 287.0], [2096.0, 270.0], [2094.0, 298.0], [2090.0, 300.0], [2093.0, 258.0], [2082.0, 296.0], [2107.0, 282.0], [2048.0, 278.0], [2108.0, 275.5], [2138.0, 289.0], [2139.0, 271.0], [2134.0, 267.0], [2128.0, 296.0], [2130.0, 274.0], [2129.0, 291.0], [2126.0, 282.0], [2125.0, 290.0], [2289.0, 242.0], [2176.0, 255.0], [2250.0, 218.5], [2227.0, 251.0], [2296.0, 237.0], [2302.0, 234.0], [2217.0, 246.0], [2224.0, 262.0], [2272.0, 226.0], [2185.0, 243.0], [2371.0, 248.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2371.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 218.0, "minX": 164.0, "maxY": 492.0, "series": [{"data": [[164.0, 278.5], [897.0, 409.0], [1187.0, 492.0], [1399.0, 359.0], [1508.0, 346.0], [1540.0, 331.0], [1572.0, 319.0], [1659.0, 355.0], [1632.0, 330.0], [1641.0, 371.0], [1600.0, 347.0], [1653.0, 303.0], [1605.0, 335.0], [1647.0, 318.0], [1665.0, 334.0], [1717.0, 344.0], [1723.0, 309.0], [1696.0, 296.0], [1715.0, 309.0], [1725.0, 283.0], [1721.0, 334.0], [1782.0, 331.0], [1731.0, 348.0], [1755.0, 334.0], [1728.0, 300.0], [1758.0, 330.0], [1791.0, 352.0], [1742.0, 320.0], [1734.0, 329.0], [1776.0, 284.0], [1777.0, 298.0], [1780.0, 344.0], [1781.0, 338.0], [1779.0, 340.0], [1749.0, 301.0], [1754.0, 294.0], [1748.0, 340.0], [1746.0, 342.0], [1745.0, 331.0], [1767.0, 321.0], [1772.0, 339.0], [1768.0, 309.0], [1775.0, 296.0], [1785.0, 332.0], [1783.0, 289.0], [1784.0, 326.0], [1788.0, 270.0], [1790.0, 335.0], [1786.0, 332.0], [1760.0, 284.0], [1765.0, 275.0], [1843.0, 298.0], [1853.0, 311.0], [1848.0, 324.0], [1851.0, 295.0], [1849.0, 300.0], [1852.0, 323.0], [1846.0, 328.0], [1847.0, 258.0], [1844.0, 302.0], [1845.0, 331.0], [1806.0, 338.0], [1804.0, 320.0], [1841.0, 319.0], [1842.0, 341.0], [1803.0, 280.0], [1802.0, 326.0], [1797.0, 341.0], [1800.0, 321.0], [1796.0, 329.0], [1812.0, 332.0], [1808.0, 320.0], [1809.0, 295.0], [1810.0, 289.0], [1811.0, 278.0], [1821.0, 296.0], [1817.0, 304.0], [1815.0, 327.0], [1816.0, 307.0], [1820.0, 268.0], [1818.0, 338.0], [1823.0, 334.0], [1822.0, 313.0], [1836.0, 297.0], [1832.0, 319.0], [1829.0, 328.0], [1835.0, 322.0], [1828.0, 301.0], [1839.0, 333.0], [1838.0, 318.0], [1854.0, 323.0], [1825.0, 267.0], [1826.0, 298.0], [1827.0, 284.0], [1905.0, 303.0], [1861.0, 312.0], [1917.0, 308.0], [1918.0, 314.0], [1890.0, 269.0], [1888.0, 318.0], [1915.0, 304.0], [1892.0, 322.0], [1891.0, 243.0], [1899.0, 310.0], [1898.0, 321.0], [1900.0, 300.0], [1896.0, 289.0], [1895.0, 312.0], [1894.0, 314.0], [1903.0, 312.0], [1902.0, 311.0], [1901.0, 317.0], [1893.0, 313.0], [1880.0, 310.0], [1874.0, 310.5], [1878.0, 314.5], [1876.0, 331.0], [1873.0, 335.0], [1872.0, 314.0], [1914.0, 303.5], [1887.0, 306.0], [1858.0, 332.0], [1857.0, 285.0], [1856.0, 294.0], [1885.0, 320.0], [1886.0, 286.0], [1906.0, 316.0], [1909.0, 315.0], [1910.0, 285.0], [1913.0, 312.0], [1912.0, 269.0], [1911.0, 318.0], [1908.0, 288.0], [1882.0, 322.0], [1881.0, 308.0], [1883.0, 282.0], [1884.0, 309.0], [1871.0, 330.0], [1867.0, 311.0], [1870.0, 328.0], [1904.0, 313.0], [1865.0, 331.0], [1863.0, 297.0], [1864.0, 325.0], [1925.0, 308.0], [1931.0, 313.0], [1930.0, 305.0], [1927.0, 289.0], [1929.0, 293.0], [1971.0, 298.0], [1972.0, 298.5], [1973.0, 311.0], [1974.0, 305.0], [1977.0, 297.0], [1976.0, 276.0], [1975.0, 308.0], [1978.0, 294.0], [1979.0, 296.0], [1983.0, 300.0], [1981.0, 310.0], [1980.0, 305.0], [1953.0, 287.0], [1954.0, 300.0], [1952.0, 303.0], [1933.0, 293.0], [1970.0, 302.0], [1968.0, 243.0], [1934.0, 302.0], [1945.0, 308.0], [1939.0, 300.0], [1940.0, 314.0], [1941.0, 292.0], [1938.0, 299.0], [1937.0, 302.0], [1964.0, 297.0], [1960.0, 305.0], [1963.0, 298.0], [1962.0, 291.0], [1961.0, 302.0], [1959.0, 304.0], [1956.0, 309.0], [1958.0, 289.0], [1966.0, 300.0], [1967.0, 299.0], [1955.0, 306.0], [1951.0, 313.0], [1950.0, 308.0], [1948.0, 301.0], [1949.0, 313.0], [1947.0, 307.0], [1946.0, 272.0], [1922.0, 308.0], [1920.0, 321.0], [1923.0, 285.0], [1924.0, 306.5], [1942.0, 305.0], [1944.0, 293.0], [1943.0, 318.0], [2034.0, 286.0], [2023.0, 296.0], [1988.0, 292.0], [1995.0, 280.0], [1994.0, 294.0], [1992.0, 300.0], [1989.0, 298.0], [1991.0, 301.0], [1990.0, 312.0], [2033.0, 287.0], [2032.0, 273.0], [1999.0, 300.0], [1998.0, 300.0], [1997.0, 296.0], [1996.0, 306.0], [2012.0, 289.0], [2011.0, 294.0], [2014.0, 297.0], [2015.0, 296.0], [2013.0, 291.0], [1984.0, 298.0], [1985.0, 299.0], [1987.0, 299.0], [1986.0, 301.0], [2030.0, 297.0], [2031.0, 280.0], [2010.0, 298.0], [2005.0, 298.0], [2002.0, 302.0], [2001.0, 309.0], [2003.0, 284.0], [2004.0, 292.0], [2007.0, 296.0], [2009.0, 295.0], [2006.0, 285.0], [2029.0, 298.0], [2028.0, 289.0], [2026.0, 288.0], [2025.0, 298.0], [2024.0, 288.0], [2027.0, 287.0], [2044.0, 293.0], [2045.0, 306.0], [2046.0, 277.0], [2041.0, 291.0], [2042.0, 285.0], [2043.0, 291.0], [2037.0, 294.0], [2035.0, 246.0], [2036.0, 296.0], [2038.0, 249.0], [2039.0, 299.0], [2047.0, 289.0], [2022.0, 289.0], [2017.0, 281.0], [2016.0, 296.0], [2020.0, 300.0], [2021.0, 299.0], [2058.0, 301.0], [2051.0, 288.0], [2073.0, 288.0], [2071.0, 296.0], [2072.0, 289.0], [2075.0, 274.0], [2158.0, 272.0], [2159.0, 226.0], [2115.0, 267.0], [2113.0, 289.0], [2173.0, 287.0], [2165.0, 252.0], [2161.0, 269.0], [2117.0, 258.0], [2121.0, 267.0], [2119.0, 268.0], [2122.0, 248.0], [2154.0, 270.0], [2145.0, 279.0], [2146.0, 263.0], [2151.0, 295.0], [2076.0, 291.0], [2077.0, 258.0], [2057.0, 292.0], [2056.0, 288.0], [2054.0, 284.0], [2052.0, 297.0], [2053.0, 284.0], [2070.0, 287.0], [2066.0, 289.0], [2068.0, 280.0], [2069.0, 287.0], [2061.0, 276.0], [2062.0, 273.0], [2063.0, 290.0], [2065.0, 280.0], [2105.0, 282.0], [2098.0, 277.0], [2106.0, 241.0], [2097.0, 272.0], [2085.0, 287.0], [2096.0, 270.0], [2094.0, 298.0], [2090.0, 300.0], [2093.0, 258.0], [2082.0, 296.0], [2107.0, 281.0], [2048.0, 278.0], [2108.0, 275.5], [2138.0, 289.0], [2139.0, 271.0], [2134.0, 267.0], [2128.0, 296.0], [2130.0, 273.5], [2129.0, 291.0], [2126.0, 282.0], [2125.0, 290.0], [2289.0, 242.0], [2176.0, 255.0], [2250.0, 218.0], [2227.0, 251.0], [2296.0, 237.0], [2302.0, 234.0], [2217.0, 246.0], [2224.0, 262.0], [2272.0, 226.0], [2185.0, 243.0], [2371.0, 248.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2371.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 753.4666666666667, "minX": 1.62140238E12, "maxY": 2031.15, "series": [{"data": [[1.62140292E12, 1944.9333333333334], [1.62140244E12, 1931.3333333333333], [1.62140262E12, 1920.1166666666666], [1.62140256E12, 1958.35], [1.62140274E12, 2031.15], [1.62140238E12, 1138.0833333333333], [1.62140268E12, 2013.0666666666666], [1.62140286E12, 1874.35], [1.6214025E12, 1977.9], [1.6214028E12, 1867.5], [1.62140298E12, 753.4666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62140298E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 763.4666666666667, "minX": 1.62140238E12, "maxY": 2031.1333333333334, "series": [{"data": [[1.62140292E12, 1944.9333333333334], [1.62140244E12, 1931.3166666666666], [1.62140262E12, 1920.1166666666666], [1.62140256E12, 1958.35], [1.62140274E12, 2031.1333333333334], [1.62140238E12, 1128.1166666666666], [1.62140268E12, 2013.0833333333333], [1.62140286E12, 1874.35], [1.6214025E12, 1977.8833333333334], [1.6214028E12, 1867.5], [1.62140298E12, 763.4666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62140298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 329.35, "minX": 1.62140238E12, "maxY": 1208.1, "series": [{"data": [[1.62140292E12, 1051.7833333333333], [1.62140244E12, 1054.65], [1.62140262E12, 1076.55], [1.62140256E12, 1069.2833333333333], [1.62140274E12, 1161.55], [1.62140238E12, 565.65], [1.62140268E12, 1208.1], [1.62140286E12, 1038.95], [1.6214025E12, 1065.0833333333333], [1.6214028E12, 1074.8333333333333], [1.62140298E12, 434.1166666666667]], "isOverall": false, "label": "AuthzRequest-rcdn-3-success", "isController": false}, {"data": [[1.62140292E12, 893.15], [1.62140244E12, 876.6666666666666], [1.62140262E12, 843.5666666666667], [1.62140256E12, 889.0666666666667], [1.62140274E12, 869.5833333333334], [1.62140238E12, 562.4666666666667], [1.62140268E12, 804.9833333333333], [1.62140286E12, 835.4], [1.6214025E12, 912.8], [1.6214028E12, 792.6666666666666], [1.62140298E12, 329.35]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62140298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 763.4666666666667, "minX": 1.62140238E12, "maxY": 2031.1333333333334, "series": [{"data": [[1.62140292E12, 1944.9333333333334], [1.62140244E12, 1931.3166666666666], [1.62140262E12, 1920.1166666666666], [1.62140256E12, 1958.35], [1.62140274E12, 2031.1333333333334], [1.62140238E12, 1128.1166666666666], [1.62140268E12, 2013.0833333333333], [1.62140286E12, 1874.35], [1.6214025E12, 1977.8833333333334], [1.6214028E12, 1867.5], [1.62140298E12, 763.4666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62140298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

