/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 549.0, "minX": 0.0, "maxY": 8061.0, "series": [{"data": [[0.0, 549.0], [0.1, 934.0], [0.2, 957.0], [0.3, 963.0], [0.4, 968.0], [0.5, 974.0], [0.6, 979.0], [0.7, 984.0], [0.8, 988.0], [0.9, 991.0], [1.0, 996.0], [1.1, 999.0], [1.2, 1002.0], [1.3, 1005.0], [1.4, 1008.0], [1.5, 1011.0], [1.6, 1013.0], [1.7, 1016.0], [1.8, 1018.0], [1.9, 1020.0], [2.0, 1022.0], [2.1, 1024.0], [2.2, 1025.0], [2.3, 1026.0], [2.4, 1028.0], [2.5, 1029.0], [2.6, 1030.0], [2.7, 1031.0], [2.8, 1032.0], [2.9, 1033.0], [3.0, 1034.0], [3.1, 1035.0], [3.2, 1036.0], [3.3, 1037.0], [3.4, 1038.0], [3.5, 1039.0], [3.6, 1040.0], [3.7, 1041.0], [3.8, 1042.0], [3.9, 1042.0], [4.0, 1043.0], [4.1, 1044.0], [4.2, 1044.0], [4.3, 1045.0], [4.4, 1046.0], [4.5, 1047.0], [4.6, 1047.0], [4.7, 1048.0], [4.8, 1049.0], [4.9, 1050.0], [5.0, 1050.0], [5.1, 1051.0], [5.2, 1052.0], [5.3, 1053.0], [5.4, 1053.0], [5.5, 1054.0], [5.6, 1054.0], [5.7, 1055.0], [5.8, 1056.0], [5.9, 1056.0], [6.0, 1057.0], [6.1, 1058.0], [6.2, 1058.0], [6.3, 1059.0], [6.4, 1059.0], [6.5, 1060.0], [6.6, 1061.0], [6.7, 1061.0], [6.8, 1062.0], [6.9, 1062.0], [7.0, 1063.0], [7.1, 1063.0], [7.2, 1064.0], [7.3, 1064.0], [7.4, 1065.0], [7.5, 1065.0], [7.6, 1066.0], [7.7, 1066.0], [7.8, 1067.0], [7.9, 1067.0], [8.0, 1068.0], [8.1, 1068.0], [8.2, 1068.0], [8.3, 1069.0], [8.4, 1069.0], [8.5, 1070.0], [8.6, 1070.0], [8.7, 1071.0], [8.8, 1071.0], [8.9, 1072.0], [9.0, 1072.0], [9.1, 1073.0], [9.2, 1073.0], [9.3, 1073.0], [9.4, 1074.0], [9.5, 1074.0], [9.6, 1075.0], [9.7, 1075.0], [9.8, 1075.0], [9.9, 1076.0], [10.0, 1076.0], [10.1, 1077.0], [10.2, 1077.0], [10.3, 1077.0], [10.4, 1078.0], [10.5, 1078.0], [10.6, 1078.0], [10.7, 1079.0], [10.8, 1079.0], [10.9, 1080.0], [11.0, 1080.0], [11.1, 1080.0], [11.2, 1081.0], [11.3, 1081.0], [11.4, 1081.0], [11.5, 1082.0], [11.6, 1082.0], [11.7, 1083.0], [11.8, 1083.0], [11.9, 1083.0], [12.0, 1084.0], [12.1, 1084.0], [12.2, 1084.0], [12.3, 1085.0], [12.4, 1085.0], [12.5, 1085.0], [12.6, 1086.0], [12.7, 1086.0], [12.8, 1086.0], [12.9, 1087.0], [13.0, 1087.0], [13.1, 1087.0], [13.2, 1088.0], [13.3, 1088.0], [13.4, 1088.0], [13.5, 1089.0], [13.6, 1089.0], [13.7, 1089.0], [13.8, 1090.0], [13.9, 1090.0], [14.0, 1090.0], [14.1, 1091.0], [14.2, 1091.0], [14.3, 1091.0], [14.4, 1092.0], [14.5, 1092.0], [14.6, 1092.0], [14.7, 1093.0], [14.8, 1093.0], [14.9, 1093.0], [15.0, 1094.0], [15.1, 1094.0], [15.2, 1095.0], [15.3, 1095.0], [15.4, 1095.0], [15.5, 1096.0], [15.6, 1096.0], [15.7, 1096.0], [15.8, 1097.0], [15.9, 1097.0], [16.0, 1097.0], [16.1, 1098.0], [16.2, 1098.0], [16.3, 1098.0], [16.4, 1099.0], [16.5, 1099.0], [16.6, 1099.0], [16.7, 1099.0], [16.8, 1100.0], [16.9, 1100.0], [17.0, 1100.0], [17.1, 1101.0], [17.2, 1101.0], [17.3, 1101.0], [17.4, 1102.0], [17.5, 1102.0], [17.6, 1102.0], [17.7, 1103.0], [17.8, 1103.0], [17.9, 1103.0], [18.0, 1104.0], [18.1, 1104.0], [18.2, 1104.0], [18.3, 1105.0], [18.4, 1105.0], [18.5, 1105.0], [18.6, 1106.0], [18.7, 1106.0], [18.8, 1106.0], [18.9, 1106.0], [19.0, 1107.0], [19.1, 1107.0], [19.2, 1107.0], [19.3, 1108.0], [19.4, 1108.0], [19.5, 1108.0], [19.6, 1109.0], [19.7, 1109.0], [19.8, 1109.0], [19.9, 1110.0], [20.0, 1110.0], [20.1, 1110.0], [20.2, 1110.0], [20.3, 1111.0], [20.4, 1111.0], [20.5, 1111.0], [20.6, 1112.0], [20.7, 1112.0], [20.8, 1112.0], [20.9, 1112.0], [21.0, 1113.0], [21.1, 1113.0], [21.2, 1113.0], [21.3, 1114.0], [21.4, 1114.0], [21.5, 1114.0], [21.6, 1114.0], [21.7, 1115.0], [21.8, 1115.0], [21.9, 1115.0], [22.0, 1116.0], [22.1, 1116.0], [22.2, 1116.0], [22.3, 1116.0], [22.4, 1117.0], [22.5, 1117.0], [22.6, 1117.0], [22.7, 1118.0], [22.8, 1118.0], [22.9, 1118.0], [23.0, 1118.0], [23.1, 1119.0], [23.2, 1119.0], [23.3, 1119.0], [23.4, 1120.0], [23.5, 1120.0], [23.6, 1120.0], [23.7, 1120.0], [23.8, 1121.0], [23.9, 1121.0], [24.0, 1121.0], [24.1, 1122.0], [24.2, 1122.0], [24.3, 1122.0], [24.4, 1122.0], [24.5, 1123.0], [24.6, 1123.0], [24.7, 1123.0], [24.8, 1124.0], [24.9, 1124.0], [25.0, 1124.0], [25.1, 1125.0], [25.2, 1125.0], [25.3, 1125.0], [25.4, 1126.0], [25.5, 1126.0], [25.6, 1126.0], [25.7, 1126.0], [25.8, 1127.0], [25.9, 1127.0], [26.0, 1127.0], [26.1, 1128.0], [26.2, 1128.0], [26.3, 1128.0], [26.4, 1129.0], [26.5, 1129.0], [26.6, 1129.0], [26.7, 1130.0], [26.8, 1130.0], [26.9, 1130.0], [27.0, 1130.0], [27.1, 1131.0], [27.2, 1131.0], [27.3, 1131.0], [27.4, 1132.0], [27.5, 1132.0], [27.6, 1132.0], [27.7, 1132.0], [27.8, 1133.0], [27.9, 1133.0], [28.0, 1133.0], [28.1, 1134.0], [28.2, 1134.0], [28.3, 1134.0], [28.4, 1134.0], [28.5, 1135.0], [28.6, 1135.0], [28.7, 1135.0], [28.8, 1135.0], [28.9, 1136.0], [29.0, 1136.0], [29.1, 1136.0], [29.2, 1136.0], [29.3, 1137.0], [29.4, 1137.0], [29.5, 1137.0], [29.6, 1137.0], [29.7, 1138.0], [29.8, 1138.0], [29.9, 1138.0], [30.0, 1138.0], [30.1, 1138.0], [30.2, 1139.0], [30.3, 1139.0], [30.4, 1139.0], [30.5, 1139.0], [30.6, 1140.0], [30.7, 1140.0], [30.8, 1140.0], [30.9, 1140.0], [31.0, 1140.0], [31.1, 1141.0], [31.2, 1141.0], [31.3, 1141.0], [31.4, 1141.0], [31.5, 1142.0], [31.6, 1142.0], [31.7, 1142.0], [31.8, 1142.0], [31.9, 1142.0], [32.0, 1143.0], [32.1, 1143.0], [32.2, 1143.0], [32.3, 1143.0], [32.4, 1143.0], [32.5, 1144.0], [32.6, 1144.0], [32.7, 1144.0], [32.8, 1144.0], [32.9, 1145.0], [33.0, 1145.0], [33.1, 1145.0], [33.2, 1145.0], [33.3, 1146.0], [33.4, 1146.0], [33.5, 1146.0], [33.6, 1146.0], [33.7, 1147.0], [33.8, 1147.0], [33.9, 1147.0], [34.0, 1147.0], [34.1, 1147.0], [34.2, 1148.0], [34.3, 1148.0], [34.4, 1148.0], [34.5, 1148.0], [34.6, 1149.0], [34.7, 1149.0], [34.8, 1149.0], [34.9, 1149.0], [35.0, 1149.0], [35.1, 1150.0], [35.2, 1150.0], [35.3, 1150.0], [35.4, 1150.0], [35.5, 1151.0], [35.6, 1151.0], [35.7, 1151.0], [35.8, 1151.0], [35.9, 1151.0], [36.0, 1152.0], [36.1, 1152.0], [36.2, 1152.0], [36.3, 1152.0], [36.4, 1153.0], [36.5, 1153.0], [36.6, 1153.0], [36.7, 1153.0], [36.8, 1153.0], [36.9, 1154.0], [37.0, 1154.0], [37.1, 1154.0], [37.2, 1154.0], [37.3, 1155.0], [37.4, 1155.0], [37.5, 1155.0], [37.6, 1155.0], [37.7, 1156.0], [37.8, 1156.0], [37.9, 1156.0], [38.0, 1156.0], [38.1, 1156.0], [38.2, 1157.0], [38.3, 1157.0], [38.4, 1157.0], [38.5, 1157.0], [38.6, 1157.0], [38.7, 1158.0], [38.8, 1158.0], [38.9, 1158.0], [39.0, 1158.0], [39.1, 1158.0], [39.2, 1159.0], [39.3, 1159.0], [39.4, 1159.0], [39.5, 1159.0], [39.6, 1159.0], [39.7, 1160.0], [39.8, 1160.0], [39.9, 1160.0], [40.0, 1160.0], [40.1, 1160.0], [40.2, 1161.0], [40.3, 1161.0], [40.4, 1161.0], [40.5, 1161.0], [40.6, 1161.0], [40.7, 1162.0], [40.8, 1162.0], [40.9, 1162.0], [41.0, 1162.0], [41.1, 1162.0], [41.2, 1163.0], [41.3, 1163.0], [41.4, 1163.0], [41.5, 1163.0], [41.6, 1163.0], [41.7, 1164.0], [41.8, 1164.0], [41.9, 1164.0], [42.0, 1164.0], [42.1, 1164.0], [42.2, 1165.0], [42.3, 1165.0], [42.4, 1165.0], [42.5, 1165.0], [42.6, 1165.0], [42.7, 1166.0], [42.8, 1166.0], [42.9, 1166.0], [43.0, 1166.0], [43.1, 1166.0], [43.2, 1167.0], [43.3, 1167.0], [43.4, 1167.0], [43.5, 1167.0], [43.6, 1167.0], [43.7, 1168.0], [43.8, 1168.0], [43.9, 1168.0], [44.0, 1168.0], [44.1, 1168.0], [44.2, 1168.0], [44.3, 1169.0], [44.4, 1169.0], [44.5, 1169.0], [44.6, 1169.0], [44.7, 1169.0], [44.8, 1170.0], [44.9, 1170.0], [45.0, 1170.0], [45.1, 1170.0], [45.2, 1170.0], [45.3, 1171.0], [45.4, 1171.0], [45.5, 1171.0], [45.6, 1171.0], [45.7, 1172.0], [45.8, 1172.0], [45.9, 1172.0], [46.0, 1172.0], [46.1, 1172.0], [46.2, 1173.0], [46.3, 1173.0], [46.4, 1173.0], [46.5, 1173.0], [46.6, 1173.0], [46.7, 1173.0], [46.8, 1174.0], [46.9, 1174.0], [47.0, 1174.0], [47.1, 1174.0], [47.2, 1175.0], [47.3, 1175.0], [47.4, 1175.0], [47.5, 1175.0], [47.6, 1175.0], [47.7, 1176.0], [47.8, 1176.0], [47.9, 1176.0], [48.0, 1176.0], [48.1, 1176.0], [48.2, 1177.0], [48.3, 1177.0], [48.4, 1177.0], [48.5, 1177.0], [48.6, 1177.0], [48.7, 1178.0], [48.8, 1178.0], [48.9, 1178.0], [49.0, 1178.0], [49.1, 1179.0], [49.2, 1179.0], [49.3, 1179.0], [49.4, 1179.0], [49.5, 1179.0], [49.6, 1180.0], [49.7, 1180.0], [49.8, 1180.0], [49.9, 1180.0], [50.0, 1180.0], [50.1, 1181.0], [50.2, 1181.0], [50.3, 1181.0], [50.4, 1181.0], [50.5, 1182.0], [50.6, 1182.0], [50.7, 1182.0], [50.8, 1182.0], [50.9, 1182.0], [51.0, 1183.0], [51.1, 1183.0], [51.2, 1183.0], [51.3, 1183.0], [51.4, 1183.0], [51.5, 1184.0], [51.6, 1184.0], [51.7, 1184.0], [51.8, 1184.0], [51.9, 1184.0], [52.0, 1185.0], [52.1, 1185.0], [52.2, 1185.0], [52.3, 1185.0], [52.4, 1185.0], [52.5, 1186.0], [52.6, 1186.0], [52.7, 1186.0], [52.8, 1186.0], [52.9, 1186.0], [53.0, 1187.0], [53.1, 1187.0], [53.2, 1187.0], [53.3, 1187.0], [53.4, 1187.0], [53.5, 1188.0], [53.6, 1188.0], [53.7, 1188.0], [53.8, 1188.0], [53.9, 1188.0], [54.0, 1189.0], [54.1, 1189.0], [54.2, 1189.0], [54.3, 1189.0], [54.4, 1189.0], [54.5, 1190.0], [54.6, 1190.0], [54.7, 1190.0], [54.8, 1190.0], [54.9, 1190.0], [55.0, 1191.0], [55.1, 1191.0], [55.2, 1191.0], [55.3, 1191.0], [55.4, 1191.0], [55.5, 1192.0], [55.6, 1192.0], [55.7, 1192.0], [55.8, 1192.0], [55.9, 1192.0], [56.0, 1193.0], [56.1, 1193.0], [56.2, 1193.0], [56.3, 1193.0], [56.4, 1193.0], [56.5, 1194.0], [56.6, 1194.0], [56.7, 1194.0], [56.8, 1194.0], [56.9, 1194.0], [57.0, 1195.0], [57.1, 1195.0], [57.2, 1195.0], [57.3, 1195.0], [57.4, 1195.0], [57.5, 1196.0], [57.6, 1196.0], [57.7, 1196.0], [57.8, 1196.0], [57.9, 1196.0], [58.0, 1197.0], [58.1, 1197.0], [58.2, 1197.0], [58.3, 1197.0], [58.4, 1197.0], [58.5, 1198.0], [58.6, 1198.0], [58.7, 1198.0], [58.8, 1198.0], [58.9, 1199.0], [59.0, 1199.0], [59.1, 1199.0], [59.2, 1199.0], [59.3, 1199.0], [59.4, 1200.0], [59.5, 1200.0], [59.6, 1200.0], [59.7, 1200.0], [59.8, 1201.0], [59.9, 1201.0], [60.0, 1201.0], [60.1, 1201.0], [60.2, 1201.0], [60.3, 1202.0], [60.4, 1202.0], [60.5, 1202.0], [60.6, 1202.0], [60.7, 1203.0], [60.8, 1203.0], [60.9, 1203.0], [61.0, 1203.0], [61.1, 1203.0], [61.2, 1204.0], [61.3, 1204.0], [61.4, 1204.0], [61.5, 1204.0], [61.6, 1204.0], [61.7, 1205.0], [61.8, 1205.0], [61.9, 1205.0], [62.0, 1205.0], [62.1, 1206.0], [62.2, 1206.0], [62.3, 1206.0], [62.4, 1206.0], [62.5, 1206.0], [62.6, 1207.0], [62.7, 1207.0], [62.8, 1207.0], [62.9, 1207.0], [63.0, 1208.0], [63.1, 1208.0], [63.2, 1208.0], [63.3, 1208.0], [63.4, 1209.0], [63.5, 1209.0], [63.6, 1209.0], [63.7, 1209.0], [63.8, 1209.0], [63.9, 1210.0], [64.0, 1210.0], [64.1, 1210.0], [64.2, 1210.0], [64.3, 1211.0], [64.4, 1211.0], [64.5, 1211.0], [64.6, 1211.0], [64.7, 1212.0], [64.8, 1212.0], [64.9, 1212.0], [65.0, 1212.0], [65.1, 1213.0], [65.2, 1213.0], [65.3, 1213.0], [65.4, 1213.0], [65.5, 1214.0], [65.6, 1214.0], [65.7, 1214.0], [65.8, 1214.0], [65.9, 1215.0], [66.0, 1215.0], [66.1, 1215.0], [66.2, 1215.0], [66.3, 1216.0], [66.4, 1216.0], [66.5, 1216.0], [66.6, 1216.0], [66.7, 1217.0], [66.8, 1217.0], [66.9, 1217.0], [67.0, 1217.0], [67.1, 1218.0], [67.2, 1218.0], [67.3, 1218.0], [67.4, 1218.0], [67.5, 1219.0], [67.6, 1219.0], [67.7, 1219.0], [67.8, 1219.0], [67.9, 1220.0], [68.0, 1220.0], [68.1, 1220.0], [68.2, 1220.0], [68.3, 1221.0], [68.4, 1221.0], [68.5, 1221.0], [68.6, 1221.0], [68.7, 1221.0], [68.8, 1222.0], [68.9, 1222.0], [69.0, 1222.0], [69.1, 1222.0], [69.2, 1223.0], [69.3, 1223.0], [69.4, 1223.0], [69.5, 1223.0], [69.6, 1224.0], [69.7, 1224.0], [69.8, 1224.0], [69.9, 1224.0], [70.0, 1225.0], [70.1, 1225.0], [70.2, 1225.0], [70.3, 1225.0], [70.4, 1226.0], [70.5, 1226.0], [70.6, 1226.0], [70.7, 1226.0], [70.8, 1226.0], [70.9, 1227.0], [71.0, 1227.0], [71.1, 1227.0], [71.2, 1227.0], [71.3, 1228.0], [71.4, 1228.0], [71.5, 1228.0], [71.6, 1228.0], [71.7, 1229.0], [71.8, 1229.0], [71.9, 1229.0], [72.0, 1229.0], [72.1, 1230.0], [72.2, 1230.0], [72.3, 1230.0], [72.4, 1230.0], [72.5, 1231.0], [72.6, 1231.0], [72.7, 1231.0], [72.8, 1232.0], [72.9, 1232.0], [73.0, 1232.0], [73.1, 1232.0], [73.2, 1233.0], [73.3, 1233.0], [73.4, 1233.0], [73.5, 1234.0], [73.6, 1234.0], [73.7, 1234.0], [73.8, 1234.0], [73.9, 1235.0], [74.0, 1235.0], [74.1, 1235.0], [74.2, 1236.0], [74.3, 1236.0], [74.4, 1236.0], [74.5, 1236.0], [74.6, 1237.0], [74.7, 1237.0], [74.8, 1237.0], [74.9, 1238.0], [75.0, 1238.0], [75.1, 1238.0], [75.2, 1238.0], [75.3, 1239.0], [75.4, 1239.0], [75.5, 1239.0], [75.6, 1239.0], [75.7, 1240.0], [75.8, 1240.0], [75.9, 1240.0], [76.0, 1241.0], [76.1, 1241.0], [76.2, 1241.0], [76.3, 1242.0], [76.4, 1242.0], [76.5, 1242.0], [76.6, 1242.0], [76.7, 1243.0], [76.8, 1243.0], [76.9, 1243.0], [77.0, 1244.0], [77.1, 1244.0], [77.2, 1244.0], [77.3, 1244.0], [77.4, 1245.0], [77.5, 1245.0], [77.6, 1245.0], [77.7, 1246.0], [77.8, 1246.0], [77.9, 1246.0], [78.0, 1247.0], [78.1, 1247.0], [78.2, 1247.0], [78.3, 1248.0], [78.4, 1248.0], [78.5, 1248.0], [78.6, 1249.0], [78.7, 1249.0], [78.8, 1249.0], [78.9, 1249.0], [79.0, 1250.0], [79.1, 1250.0], [79.2, 1250.0], [79.3, 1251.0], [79.4, 1251.0], [79.5, 1251.0], [79.6, 1252.0], [79.7, 1252.0], [79.8, 1252.0], [79.9, 1253.0], [80.0, 1253.0], [80.1, 1253.0], [80.2, 1254.0], [80.3, 1254.0], [80.4, 1254.0], [80.5, 1255.0], [80.6, 1255.0], [80.7, 1255.0], [80.8, 1256.0], [80.9, 1256.0], [81.0, 1256.0], [81.1, 1257.0], [81.2, 1257.0], [81.3, 1257.0], [81.4, 1258.0], [81.5, 1258.0], [81.6, 1258.0], [81.7, 1258.0], [81.8, 1259.0], [81.9, 1259.0], [82.0, 1259.0], [82.1, 1260.0], [82.2, 1260.0], [82.3, 1260.0], [82.4, 1261.0], [82.5, 1261.0], [82.6, 1261.0], [82.7, 1262.0], [82.8, 1262.0], [82.9, 1262.0], [83.0, 1263.0], [83.1, 1263.0], [83.2, 1264.0], [83.3, 1264.0], [83.4, 1264.0], [83.5, 1265.0], [83.6, 1265.0], [83.7, 1265.0], [83.8, 1266.0], [83.9, 1266.0], [84.0, 1266.0], [84.1, 1267.0], [84.2, 1267.0], [84.3, 1268.0], [84.4, 1268.0], [84.5, 1268.0], [84.6, 1269.0], [84.7, 1269.0], [84.8, 1270.0], [84.9, 1270.0], [85.0, 1270.0], [85.1, 1271.0], [85.2, 1271.0], [85.3, 1271.0], [85.4, 1272.0], [85.5, 1272.0], [85.6, 1273.0], [85.7, 1273.0], [85.8, 1273.0], [85.9, 1274.0], [86.0, 1274.0], [86.1, 1274.0], [86.2, 1275.0], [86.3, 1275.0], [86.4, 1275.0], [86.5, 1276.0], [86.6, 1276.0], [86.7, 1277.0], [86.8, 1277.0], [86.9, 1277.0], [87.0, 1278.0], [87.1, 1278.0], [87.2, 1278.0], [87.3, 1279.0], [87.4, 1279.0], [87.5, 1280.0], [87.6, 1280.0], [87.7, 1280.0], [87.8, 1281.0], [87.9, 1281.0], [88.0, 1281.0], [88.1, 1282.0], [88.2, 1282.0], [88.3, 1283.0], [88.4, 1283.0], [88.5, 1283.0], [88.6, 1284.0], [88.7, 1284.0], [88.8, 1284.0], [88.9, 1285.0], [89.0, 1285.0], [89.1, 1286.0], [89.2, 1286.0], [89.3, 1287.0], [89.4, 1287.0], [89.5, 1288.0], [89.6, 1288.0], [89.7, 1288.0], [89.8, 1289.0], [89.9, 1289.0], [90.0, 1290.0], [90.1, 1290.0], [90.2, 1291.0], [90.3, 1291.0], [90.4, 1292.0], [90.5, 1292.0], [90.6, 1293.0], [90.7, 1293.0], [90.8, 1293.0], [90.9, 1294.0], [91.0, 1294.0], [91.1, 1295.0], [91.2, 1295.0], [91.3, 1296.0], [91.4, 1296.0], [91.5, 1297.0], [91.6, 1297.0], [91.7, 1298.0], [91.8, 1298.0], [91.9, 1299.0], [92.0, 1300.0], [92.1, 1300.0], [92.2, 1301.0], [92.3, 1302.0], [92.4, 1302.0], [92.5, 1303.0], [92.6, 1304.0], [92.7, 1304.0], [92.8, 1305.0], [92.9, 1306.0], [93.0, 1306.0], [93.1, 1307.0], [93.2, 1308.0], [93.3, 1308.0], [93.4, 1309.0], [93.5, 1310.0], [93.6, 1310.0], [93.7, 1311.0], [93.8, 1312.0], [93.9, 1313.0], [94.0, 1314.0], [94.1, 1315.0], [94.2, 1316.0], [94.3, 1317.0], [94.4, 1318.0], [94.5, 1319.0], [94.6, 1321.0], [94.7, 1322.0], [94.8, 1324.0], [94.9, 1325.0], [95.0, 1327.0], [95.1, 1329.0], [95.2, 1331.0], [95.3, 1332.0], [95.4, 1334.0], [95.5, 1335.0], [95.6, 1337.0], [95.7, 1338.0], [95.8, 1340.0], [95.9, 1342.0], [96.0, 1344.0], [96.1, 1346.0], [96.2, 1347.0], [96.3, 1349.0], [96.4, 1350.0], [96.5, 1352.0], [96.6, 1353.0], [96.7, 1355.0], [96.8, 1357.0], [96.9, 1361.0], [97.0, 1364.0], [97.1, 1368.0], [97.2, 1371.0], [97.3, 1375.0], [97.4, 1379.0], [97.5, 1382.0], [97.6, 1386.0], [97.7, 1395.0], [97.8, 1408.0], [97.9, 1419.0], [98.0, 1433.0], [98.1, 1467.0], [98.2, 1503.0], [98.3, 1565.0], [98.4, 1611.0], [98.5, 1668.0], [98.6, 1718.0], [98.7, 1753.0], [98.8, 1781.0], [98.9, 1828.0], [99.0, 1894.0], [99.1, 1916.0], [99.2, 1949.0], [99.3, 2079.0], [99.4, 2212.0], [99.5, 2284.0], [99.6, 2371.0], [99.7, 2784.0], [99.8, 4182.0], [99.9, 5769.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 255361.0, "series": [{"data": [[600.0, 11.0], [700.0, 52.0], [800.0, 54.0], [900.0, 6540.0], [1000.0, 93523.0], [1100.0, 255361.0], [1200.0, 195816.0], [1300.0, 34411.0], [1400.0, 2784.0], [1500.0, 843.0], [1600.0, 1348.0], [1700.0, 1784.0], [1800.0, 1090.0], [1900.0, 1237.0], [2000.0, 356.0], [2100.0, 456.0], [2300.0, 159.0], [2200.0, 1152.0], [2400.0, 285.0], [2500.0, 248.0], [2600.0, 42.0], [2700.0, 20.0], [2800.0, 5.0], [2900.0, 98.0], [3000.0, 321.0], [3100.0, 147.0], [3200.0, 13.0], [3300.0, 9.0], [4000.0, 1.0], [4300.0, 10.0], [4200.0, 11.0], [4100.0, 2.0], [4400.0, 23.0], [4500.0, 38.0], [4600.0, 38.0], [4700.0, 53.0], [4800.0, 61.0], [4900.0, 54.0], [5000.0, 65.0], [5100.0, 58.0], [5200.0, 55.0], [5300.0, 42.0], [5400.0, 33.0], [5500.0, 17.0], [5600.0, 20.0], [5700.0, 25.0], [5800.0, 12.0], [6100.0, 2.0], [5900.0, 5.0], [6000.0, 2.0], [6300.0, 69.0], [6200.0, 34.0], [6400.0, 68.0], [6500.0, 28.0], [6600.0, 12.0], [6700.0, 32.0], [6800.0, 20.0], [6900.0, 52.0], [7000.0, 54.0], [7100.0, 76.0], [7200.0, 55.0], [7300.0, 39.0], [7400.0, 17.0], [7500.0, 5.0], [7800.0, 7.0], [7700.0, 4.0], [8000.0, 1.0], [500.0, 8.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10804.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 588569.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 588569.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10804.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1175.6626341398405, "minX": 1.62718872E12, "maxY": 1200.0, "series": [{"data": [[1.62718902E12, 1200.0], [1.62718884E12, 1200.0], [1.62718932E12, 1175.6626341398405], [1.62718914E12, 1200.0], [1.62718896E12, 1200.0], [1.62718878E12, 1200.0], [1.62718926E12, 1200.0], [1.62718908E12, 1200.0], [1.6271889E12, 1200.0], [1.62718872E12, 1200.0], [1.6271892E12, 1200.0]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62718932E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 764.0, "minX": 1.0, "maxY": 1605.5, "series": [{"data": [[3.0, 786.0], [4.0, 789.0], [5.0, 790.0], [6.0, 790.0], [7.0, 788.0], [8.0, 789.0], [9.0, 792.0], [10.0, 791.0], [11.0, 791.0], [12.0, 790.0], [13.0, 790.0], [14.0, 789.0], [15.0, 792.0], [16.0, 793.0], [17.0, 792.0], [18.0, 794.0], [19.0, 795.0], [20.0, 794.0], [21.0, 794.0], [22.0, 796.0], [23.0, 803.0], [24.0, 795.0], [26.0, 795.5], [27.0, 794.0], [28.0, 795.0], [29.0, 793.0], [30.0, 794.0], [31.0, 792.0], [33.0, 796.0], [32.0, 797.0], [35.0, 797.0], [34.0, 803.0], [37.0, 798.0], [36.0, 799.0], [39.0, 798.0], [38.0, 797.0], [41.0, 798.0], [40.0, 797.0], [43.0, 799.0], [42.0, 798.0], [45.0, 800.0], [44.0, 800.0], [47.0, 800.0], [46.0, 801.0], [49.0, 799.0], [48.0, 801.0], [51.0, 804.0], [50.0, 803.0], [53.0, 803.0], [52.0, 803.0], [55.0, 803.0], [54.0, 804.0], [57.0, 799.0], [59.0, 799.0], [58.0, 800.0], [61.0, 798.0], [60.0, 798.0], [63.0, 802.0], [62.0, 800.0], [67.0, 801.0], [66.0, 800.0], [65.0, 800.0], [64.0, 801.0], [71.0, 1124.0], [70.0, 1131.0], [69.0, 803.0], [68.0, 800.0], [75.0, 1122.0], [74.0, 1120.0], [73.0, 1127.0], [72.0, 1120.0], [79.0, 1125.0], [78.0, 1125.0], [77.0, 1125.0], [76.0, 1124.0], [83.0, 1124.0], [82.0, 1123.0], [81.0, 1123.0], [80.0, 1124.0], [87.0, 1135.0], [86.0, 1123.0], [85.0, 1123.0], [84.0, 1125.0], [91.0, 1127.0], [90.0, 1121.0], [89.0, 1126.0], [88.0, 1122.0], [95.0, 1129.0], [94.0, 1123.0], [93.0, 1123.0], [92.0, 1125.0], [99.0, 1128.0], [98.0, 1129.0], [97.0, 1132.0], [96.0, 1129.0], [103.0, 1129.0], [102.0, 1129.0], [101.0, 1128.0], [100.0, 1127.0], [107.0, 1141.0], [106.0, 1128.0], [105.0, 1130.0], [104.0, 1147.0], [111.0, 1128.0], [110.0, 1133.0], [109.0, 1127.0], [108.0, 1128.0], [115.0, 1130.0], [114.0, 1132.0], [113.0, 1131.0], [112.0, 1134.0], [119.0, 1134.0], [118.0, 1134.0], [117.0, 1136.0], [116.0, 1135.0], [123.0, 1136.0], [122.0, 1135.0], [121.0, 1135.0], [120.0, 1136.0], [127.0, 1141.0], [126.0, 1138.0], [125.0, 1147.0], [124.0, 1135.0], [135.0, 1145.0], [134.0, 1143.0], [133.0, 1142.0], [132.0, 1138.0], [131.0, 1147.0], [130.0, 1139.0], [129.0, 1138.0], [128.0, 1133.0], [143.0, 1154.0], [142.0, 1152.0], [141.0, 1147.0], [140.0, 1147.0], [139.0, 1153.0], [138.0, 1146.0], [137.0, 1143.0], [136.0, 1144.0], [151.0, 1161.0], [150.0, 1160.0], [149.0, 1160.0], [148.0, 1156.0], [147.0, 1156.0], [146.0, 1156.0], [145.0, 1156.0], [144.0, 1154.0], [159.0, 1168.0], [158.0, 1167.0], [157.0, 1167.0], [156.0, 1168.0], [155.0, 1168.0], [154.0, 1168.0], [153.0, 1165.0], [152.0, 1164.0], [167.0, 1180.0], [166.0, 1181.0], [165.0, 1179.0], [164.0, 1174.0], [163.0, 1172.0], [162.0, 1173.0], [161.0, 1173.0], [160.0, 1171.0], [175.0, 1180.0], [174.0, 1181.0], [173.0, 1182.0], [172.0, 1183.0], [171.0, 1184.0], [170.0, 1181.0], [169.0, 1182.0], [168.0, 1181.0], [183.0, 1182.0], [182.0, 1182.0], [181.0, 1183.0], [180.0, 1181.0], [179.0, 1180.0], [178.0, 1181.0], [177.0, 1179.0], [176.0, 1183.0], [190.0, 1196.0], [189.0, 1196.0], [188.0, 1191.5], [186.0, 1182.0], [185.0, 1182.0], [184.0, 1182.0], [199.0, 1210.0], [198.0, 1206.0], [197.0, 1201.0], [196.0, 1204.0], [195.0, 1201.0], [194.0, 1201.0], [193.0, 1201.0], [192.0, 1198.5], [207.0, 1210.0], [206.0, 1210.0], [205.0, 1210.0], [204.0, 1210.0], [203.0, 1211.0], [202.0, 1210.0], [201.0, 1209.0], [200.0, 1207.0], [215.0, 1212.0], [214.0, 1213.0], [213.0, 1215.0], [212.0, 1214.0], [211.0, 1213.0], [210.0, 1213.0], [209.0, 1212.0], [208.0, 1214.0], [223.0, 1216.0], [222.0, 1215.0], [221.0, 1213.0], [220.0, 1213.0], [219.0, 1212.0], [218.0, 1213.0], [216.0, 1213.0], [231.0, 1219.0], [230.0, 1219.5], [228.0, 1220.0], [227.0, 1219.0], [226.0, 1220.0], [225.0, 1218.0], [224.0, 1216.0], [239.0, 1224.0], [238.0, 1224.0], [237.0, 1223.0], [236.0, 1223.0], [235.0, 1219.0], [234.0, 1219.0], [233.0, 1220.0], [232.0, 1219.0], [247.0, 1232.0], [246.0, 1233.0], [245.0, 1231.0], [244.0, 1229.0], [243.0, 1229.0], [242.0, 1233.0], [240.0, 1226.0], [255.0, 1236.0], [254.0, 1235.0], [253.0, 1234.0], [252.0, 1231.0], [251.0, 1231.0], [250.0, 1231.0], [249.0, 1231.0], [248.0, 1232.0], [270.0, 1246.0], [271.0, 1246.0], [269.0, 1245.0], [268.0, 1245.0], [267.0, 1244.0], [266.0, 1246.0], [265.0, 1243.0], [264.0, 1242.0], [263.0, 1241.0], [258.0, 1250.5], [256.0, 1243.0], [262.0, 1247.5], [260.0, 1245.0], [286.0, 1240.0], [287.0, 1243.0], [285.0, 1239.0], [284.0, 1240.0], [283.0, 1240.0], [282.0, 1246.0], [281.0, 1244.0], [280.0, 1243.0], [279.0, 1247.0], [273.0, 1244.0], [272.0, 1246.0], [275.0, 1245.0], [274.0, 1243.0], [278.0, 1248.0], [277.0, 1243.0], [276.0, 1243.0], [302.0, 1241.0], [303.0, 1241.0], [301.0, 1242.0], [300.0, 1238.0], [299.0, 1239.0], [298.0, 1238.0], [297.0, 1239.0], [296.0, 1240.0], [295.0, 1240.0], [289.0, 1241.0], [288.0, 1241.0], [291.0, 1240.0], [290.0, 1242.0], [294.0, 1240.0], [293.0, 1242.0], [292.0, 1244.0], [318.0, 1255.0], [319.0, 1257.0], [317.0, 1238.0], [316.0, 1255.0], [315.0, 1238.0], [314.0, 1238.0], [313.0, 1239.0], [312.0, 1240.0], [311.0, 1237.0], [304.0, 1238.0], [307.0, 1238.5], [305.0, 1239.0], [310.0, 1237.0], [309.0, 1237.0], [308.0, 1238.0], [333.0, 1254.5], [335.0, 1264.0], [332.0, 1257.0], [323.0, 1255.0], [322.0, 1232.0], [321.0, 1254.0], [320.0, 1237.0], [331.0, 1254.0], [329.0, 1263.0], [328.0, 1272.0], [326.0, 1252.0], [325.0, 1275.0], [324.0, 1256.0], [349.0, 1265.0], [351.0, 1269.5], [348.0, 1265.0], [338.0, 1255.0], [337.0, 1257.5], [347.0, 1265.0], [346.0, 1263.0], [345.0, 1262.0], [344.0, 1262.0], [343.0, 1264.0], [342.0, 1254.0], [340.0, 1256.5], [366.0, 1277.0], [367.0, 1260.0], [365.0, 1267.5], [354.0, 1266.0], [353.0, 1267.0], [363.0, 1273.5], [361.0, 1267.0], [360.0, 1264.0], [359.0, 1263.5], [358.0, 1264.0], [357.0, 1264.0], [356.0, 1264.0], [380.0, 1270.0], [382.0, 1261.0], [383.0, 1272.0], [381.0, 1270.0], [378.0, 1264.0], [377.0, 1264.5], [375.0, 1262.0], [369.0, 1261.0], [368.0, 1268.0], [371.0, 1261.0], [370.0, 1263.0], [374.0, 1267.0], [373.0, 1263.0], [372.0, 1263.0], [387.0, 1269.0], [399.0, 1268.0], [396.0, 1270.0], [394.0, 1269.5], [392.0, 1270.0], [391.0, 1272.0], [390.0, 1270.0], [389.0, 1270.0], [388.0, 1270.0], [386.0, 1267.0], [385.0, 1268.0], [384.0, 1268.0], [414.0, 1259.0], [415.0, 1258.0], [413.0, 1258.0], [412.0, 1257.0], [411.0, 1257.0], [410.0, 1260.0], [409.0, 1272.0], [408.0, 1266.0], [407.0, 1267.0], [401.0, 1267.0], [400.0, 1270.0], [403.0, 1269.0], [402.0, 1268.0], [406.0, 1266.0], [405.0, 1268.0], [430.0, 1264.0], [431.0, 1265.0], [429.0, 1264.0], [428.0, 1263.0], [427.0, 1262.0], [425.0, 1261.0], [424.0, 1261.0], [423.0, 1262.0], [419.0, 1259.0], [417.0, 1259.5], [421.0, 1261.0], [420.0, 1261.0], [446.0, 1276.0], [447.0, 1279.0], [445.0, 1287.0], [444.0, 1275.0], [443.0, 1268.5], [441.0, 1289.0], [440.0, 1270.0], [439.0, 1299.0], [432.0, 1265.0], [435.0, 1265.0], [433.0, 1264.0], [438.0, 1265.0], [437.0, 1294.0], [436.0, 1266.0], [462.0, 1267.0], [463.0, 1264.0], [461.0, 1263.0], [460.0, 1279.0], [459.0, 1263.0], [458.0, 1270.5], [456.0, 1264.0], [454.0, 1262.0], [448.0, 1283.0], [450.0, 1259.0], [449.0, 1288.0], [453.0, 1261.0], [452.0, 1260.5], [478.0, 1270.0], [479.0, 1271.0], [476.0, 1270.0], [467.0, 1265.0], [466.0, 1267.0], [465.0, 1263.0], [464.0, 1262.0], [475.0, 1269.0], [474.0, 1267.0], [473.0, 1268.0], [472.0, 1266.0], [471.0, 1265.0], [470.0, 1265.0], [469.0, 1264.0], [468.0, 1264.0], [493.0, 1268.0], [495.0, 1270.5], [492.0, 1270.0], [483.0, 1268.0], [482.0, 1277.0], [480.0, 1277.0], [491.0, 1268.0], [490.0, 1270.0], [489.0, 1269.0], [488.0, 1269.0], [487.0, 1269.0], [486.0, 1270.0], [485.0, 1269.0], [484.0, 1278.0], [510.0, 1275.0], [511.0, 1277.0], [509.0, 1273.0], [508.0, 1273.0], [507.0, 1270.0], [506.0, 1276.0], [505.0, 1272.0], [504.0, 1272.0], [503.0, 1273.0], [496.0, 1274.0], [499.0, 1267.0], [498.0, 1272.5], [502.0, 1272.0], [500.0, 1269.0], [540.0, 1273.0], [543.0, 1274.0], [528.0, 1277.0], [531.0, 1274.0], [529.0, 1276.0], [533.0, 1272.0], [532.0, 1273.0], [542.0, 1275.0], [541.0, 1275.0], [539.0, 1274.0], [538.0, 1272.0], [537.0, 1278.0], [536.0, 1272.0], [527.0, 1277.5], [513.0, 1274.0], [512.0, 1274.0], [517.0, 1274.0], [514.0, 1274.0], [519.0, 1276.0], [518.0, 1274.6666666666667], [525.0, 1274.0], [524.0, 1275.0], [523.0, 1272.0], [522.0, 1275.0], [521.0, 1273.0], [520.0, 1277.0], [535.0, 1271.0], [534.0, 1271.0], [569.0, 1278.0], [573.0, 1279.0], [574.0, 1278.0], [561.0, 1279.0], [560.0, 1275.0], [563.0, 1279.0], [562.0, 1280.0], [565.0, 1277.0], [564.0, 1285.0], [572.0, 1278.0], [571.0, 1278.0], [570.0, 1279.0], [568.0, 1280.0], [551.0, 1275.0], [550.0, 1276.0], [549.0, 1275.0], [548.0, 1275.0], [547.0, 1275.0], [546.0, 1274.0], [545.0, 1275.0], [544.0, 1275.0], [559.0, 1275.0], [558.0, 1276.0], [557.0, 1275.0], [556.0, 1276.0], [555.0, 1275.0], [553.0, 1277.5], [567.0, 1277.0], [566.0, 1278.0], [606.0, 1269.0], [607.0, 1269.0], [593.0, 1280.0], [596.0, 1279.0], [595.0, 1276.5], [604.0, 1272.0], [603.0, 1274.0], [602.0, 1274.0], [601.0, 1271.0], [600.0, 1274.0], [582.0, 1278.3333333333333], [579.0, 1276.0], [577.0, 1278.0], [576.0, 1278.5], [590.0, 1277.0], [589.0, 1278.0], [588.0, 1276.0], [587.0, 1276.0], [586.0, 1277.0], [585.0, 1279.3333333333333], [598.0, 1275.0], [597.0, 1275.0], [635.0, 1278.0], [628.0, 1272.0], [637.0, 1276.0], [624.0, 1270.0], [634.0, 1274.0], [633.0, 1272.5], [623.0, 1272.0], [609.0, 1271.0], [608.0, 1273.0], [611.0, 1271.0], [610.0, 1272.0], [613.0, 1278.0], [612.0, 1272.0], [615.0, 1271.0], [614.0, 1271.0], [621.0, 1271.0], [620.0, 1271.0], [619.0, 1270.0], [618.0, 1271.0], [617.0, 1271.0], [616.0, 1273.0], [631.0, 1273.0], [630.0, 1273.0], [629.0, 1273.0], [627.0, 1273.0], [626.0, 1271.5], [666.0, 1288.0], [670.0, 1290.0], [671.0, 1286.0], [656.0, 1287.0], [659.0, 1287.0], [657.0, 1288.0], [661.0, 1286.0], [660.0, 1287.0], [669.0, 1288.0], [668.0, 1289.0], [667.0, 1289.0], [665.0, 1292.0], [647.0, 1275.5], [645.0, 1276.0], [644.0, 1277.0], [643.0, 1292.0], [642.0, 1272.0], [641.0, 1276.0], [640.0, 1277.0], [654.0, 1288.0], [653.0, 1288.0], [652.0, 1288.0], [651.0, 1290.0], [650.0, 1289.0], [649.0, 1281.5], [663.0, 1288.0], [662.0, 1286.0], [700.0, 1277.0], [703.0, 1275.0], [688.0, 1277.0], [691.0, 1278.0], [690.0, 1278.0], [693.0, 1278.0], [692.0, 1278.0], [702.0, 1276.0], [701.0, 1277.0], [699.0, 1278.0], [698.0, 1275.0], [697.0, 1276.0], [696.0, 1277.0], [687.0, 1275.0], [673.0, 1287.0], [672.0, 1286.0], [679.0, 1284.6], [676.0, 1285.0], [686.0, 1278.0], [685.0, 1279.0], [684.0, 1280.0], [683.0, 1280.0], [682.0, 1280.0], [681.0, 1281.0], [680.0, 1281.0], [695.0, 1277.0], [694.0, 1277.0], [728.0, 1272.5], [733.0, 1272.0], [735.0, 1269.0], [721.0, 1274.0], [720.0, 1272.5], [732.0, 1270.5], [730.0, 1271.0], [729.0, 1271.0], [718.0, 1275.0], [705.0, 1272.0], [704.0, 1274.0], [707.0, 1272.0], [706.0, 1272.0], [709.0, 1271.0], [708.0, 1271.0], [711.0, 1273.0], [710.0, 1271.0], [717.0, 1272.5], [715.0, 1272.5], [713.0, 1272.0], [712.0, 1271.0], [726.0, 1272.0], [725.0, 1278.0], [724.0, 1274.5], [722.0, 1278.0], [760.0, 1266.0], [764.0, 1265.0], [767.0, 1262.0], [755.0, 1269.3333333333333], [752.0, 1267.0], [757.0, 1267.0], [756.0, 1271.0], [766.0, 1264.0], [765.0, 1265.0], [763.0, 1265.0], [762.0, 1265.0], [761.0, 1266.0], [751.0, 1271.0], [737.0, 1271.0], [736.0, 1277.5], [741.0, 1267.0], [739.0, 1270.0], [743.0, 1273.0], [742.0, 1266.0], [750.0, 1269.0], [749.0, 1269.0], [748.0, 1272.5], [746.0, 1269.0], [745.0, 1271.0], [744.0, 1271.0], [759.0, 1266.0], [758.0, 1271.0], [793.0, 1272.0], [786.0, 1265.0], [797.0, 1269.0], [798.0, 1268.0], [785.0, 1266.5], [796.0, 1268.25], [792.0, 1269.0], [775.0, 1264.0], [774.0, 1264.0], [773.0, 1266.5], [771.0, 1265.0], [770.0, 1264.0], [769.0, 1265.0], [783.0, 1267.0], [782.0, 1263.0], [781.0, 1265.0], [780.0, 1263.0], [779.0, 1263.0], [778.0, 1264.0], [777.0, 1264.0], [776.0, 1267.0], [791.0, 1268.5], [788.0, 1270.0], [787.0, 1265.0], [825.0, 1271.0], [830.0, 1265.0], [831.0, 1266.0], [817.0, 1266.0], [816.0, 1266.0], [819.0, 1264.0], [818.0, 1269.0], [821.0, 1263.0], [820.0, 1266.0], [829.0, 1264.0], [828.0, 1266.0], [826.0, 1264.0], [824.0, 1269.0], [807.0, 1270.0], [805.0, 1267.0], [804.0, 1268.0], [803.0, 1271.0], [802.0, 1269.0], [801.0, 1266.0], [800.0, 1272.0], [815.0, 1266.0], [814.0, 1266.0], [813.0, 1268.0], [812.0, 1268.0], [811.0, 1269.0], [810.0, 1269.0], [809.0, 1268.0], [808.0, 1270.0], [823.0, 1270.0], [822.0, 1270.0], [861.0, 1597.0], [852.0, 1272.0], [862.0, 1598.3333333333333], [848.0, 1273.0], [851.0, 1270.0], [850.0, 1269.6666666666667], [860.0, 1598.0], [859.0, 1603.0], [856.0, 1605.5], [839.0, 1264.0], [838.0, 1265.0], [837.0, 1265.0], [836.0, 1265.0], [835.0, 1266.0], [834.0, 1265.5], [832.0, 1266.0], [847.0, 1275.0], [846.0, 1273.0], [845.0, 1274.0], [844.0, 1272.0], [843.0, 1270.0], [842.0, 1266.0], [841.0, 1265.0], [840.0, 1265.0], [855.0, 1311.0], [854.0, 1269.0], [853.0, 1268.0], [894.0, 1565.0], [895.0, 1565.2], [893.0, 1566.0], [889.0, 1568.0], [888.0, 1571.3333333333335], [864.0, 1593.5], [875.0, 1592.0], [874.0, 1589.0], [873.0, 1595.0], [887.0, 1580.0], [886.0, 1575.0], [884.0, 1578.1666666666665], [881.0, 1584.1666666666667], [927.0, 1538.1666666666667], [921.0, 1547.5], [897.0, 1433.0], [919.0, 1544.5], [916.0, 1554.1666666666667], [915.0, 1550.0], [913.0, 1555.8333333333335], [910.0, 1430.5], [909.0, 1555.0], [908.0, 1557.0], [907.0, 1473.0], [906.0, 1304.0], [935.0, 1415.0], [955.0, 1302.0], [957.0, 1471.6], [954.0, 1516.25], [947.0, 1301.0], [945.0, 1520.0], [943.0, 1522.5555555555557], [937.0, 1529.0], [933.0, 1527.5], [932.0, 1304.0], [931.0, 1531.0], [930.0, 1532.0], [928.0, 1303.0], [986.0, 1300.0], [990.0, 1483.0], [991.0, 1300.0], [987.0, 1450.4], [984.0, 1489.3333333333333], [966.0, 1504.4], [964.0, 1508.3333333333333], [963.0, 1302.0], [961.0, 1511.0], [982.0, 1394.5], [978.0, 1490.0], [972.0, 1492.0], [971.0, 1497.5], [969.0, 1500.0], [968.0, 1502.0], [997.0, 1476.0], [1021.0, 1457.6], [1023.0, 1297.0], [1020.0, 1457.0], [996.0, 1299.0], [994.0, 1479.0], [993.0, 1479.0], [1015.0, 1298.0], [1008.0, 1460.0], [1007.0, 1299.0], [1005.0, 1465.8], [1001.0, 1299.0], [1000.0, 1450.5000000000002], [1082.0, 1398.0], [1058.0, 1428.2], [1060.0, 1424.0], [1068.0, 1417.3333333333333], [1064.0, 1421.0], [1078.0, 1401.0], [1074.0, 1412.0], [1072.0, 1294.0], [1026.0, 1424.0], [1030.0, 1296.0], [1034.0, 1296.0], [1032.0, 1422.1666666666667], [1036.0, 1395.0], [1054.0, 1412.0], [1042.0, 1296.0], [1070.0, 1294.0], [1120.0, 1366.0], [1124.0, 1363.0], [1128.0, 1346.2], [1148.0, 1302.5], [1122.0, 1290.0], [1146.0, 1324.4], [1142.0, 1326.0], [1118.0, 1367.5], [1088.0, 1342.5], [1090.0, 1393.0], [1092.0, 1290.0], [1098.0, 1382.6666666666667], [1102.0, 1379.0], [1100.0, 1379.6666666666667], [1110.0, 1294.0], [1106.0, 1289.0], [1104.0, 1331.5], [1134.0, 1333.5714285714287], [1126.0, 1355.4285714285716], [1156.0, 1284.0], [1192.0, 1236.0], [1196.0, 1235.3636363636363], [1200.0, 1201.4117538854662], [1182.0, 1284.1000000000001], [1158.0, 1320.0], [1164.0, 1309.75], [1172.0, 1292.0], [1170.0, 1301.75], [1168.0, 1305.5], [1184.0, 1228.6666666666667], [1186.0, 1229.6666666666667], [1188.0, 1228.0], [1198.0, 1224.2941176470586], [1194.0, 1234.0], [1079.0, 1291.0], [1087.0, 1395.0], [1057.0, 1295.0], [1061.0, 1422.0], [1083.0, 1371.0], [1075.0, 1406.3333333333333], [1055.0, 1295.0], [1027.0, 1452.1666666666667], [1031.0, 1453.0], [1039.0, 1440.75], [1051.0, 1437.0], [1049.0, 1435.2], [1045.0, 1296.0], [1041.0, 1294.0], [1069.0, 1414.6666666666667], [1123.0, 1362.4], [1125.0, 1356.5], [1139.0, 1335.8333333333333], [1089.0, 1393.0], [1093.0, 1392.0], [1095.0, 1372.5], [1115.0, 1368.0], [1105.0, 1374.0], [1131.0, 1343.0], [1129.0, 1346.3333333333333], [1127.0, 1320.5], [1159.0, 1322.0], [1157.0, 1324.0], [1163.0, 1311.0], [1165.0, 1307.5], [1173.0, 1289.0], [1171.0, 1302.0], [1169.0, 1304.0], [1185.0, 1227.0], [1187.0, 1227.7], [1199.0, 1219.4285714285716], [1197.0, 1229.0], [1195.0, 1237.4166666666663], [1193.0, 1233.2], [1191.0, 1239.0], [1189.0, 1231.2], [1.0, 764.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[1198.7816134527254, 1201.5792536534009]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 50560.0, "minX": 1.62718872E12, "maxY": 8253855.866666666, "series": [{"data": [[1.62718902E12, 8253855.866666666], [1.62718884E12, 7940279.233333333], [1.62718932E12, 3971794.2], [1.62718914E12, 8208586.466666667], [1.62718896E12, 8162390.5], [1.62718878E12, 7862580.0], [1.62718926E12, 8045113.633333334], [1.62718908E12, 8252664.566666666], [1.6271889E12, 8078470.033333333], [1.62718872E12, 2541440.0], [1.6271892E12, 8019831.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62718902E12, 164204.13333333333], [1.62718884E12, 157965.76666666666], [1.62718932E12, 79015.8], [1.62718914E12, 163303.53333333333], [1.62718896E12, 162384.5], [1.62718878E12, 156420.0], [1.62718926E12, 160051.36666666667], [1.62718908E12, 164180.43333333332], [1.6271889E12, 160714.96666666667], [1.62718872E12, 50560.0], [1.6271892E12, 159548.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62718932E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1154.362964269659, "minX": 1.62718872E12, "maxY": 1936.4390104166646, "series": [{"data": [[1.62718902E12, 1154.362964269659], [1.62718884E12, 1202.152783103006], [1.62718932E12, 1166.326201426391], [1.62718914E12, 1158.3547586029067], [1.62718896E12, 1167.1332360334065], [1.62718878E12, 1210.7531481481553], [1.62718926E12, 1185.438111847862], [1.62718908E12, 1155.1494859415627], [1.6271889E12, 1180.0480411594096], [1.62718872E12, 1936.4390104166646], [1.6271892E12, 1190.1560209942616]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62718932E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1154.346494322941, "minX": 1.62718872E12, "maxY": 1936.0898958333494, "series": [{"data": [[1.62718902E12, 1154.346494322941], [1.62718884E12, 1202.1343124343482], [1.62718932E12, 1166.3110044657694], [1.62718914E12, 1158.336391782507], [1.62718896E12, 1167.1139382145518], [1.62718878E12, 1210.7252188552216], [1.62718926E12, 1185.4190098553788], [1.62718908E12, 1155.1316182013547], [1.6271889E12, 1180.0293948976741], [1.62718872E12, 1936.0898958333494], [1.6271892E12, 1190.1370238331178]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62718932E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62718872E12, "maxY": 62.76562499999968, "series": [{"data": [[1.62718902E12, 0.022018731156584967], [1.62718884E12, 0.023371730541617005], [1.62718932E12, 0.0], [1.62718914E12, 0.023478569355306445], [1.62718896E12, 0.02550879753506848], [1.62718878E12, 0.023265993265993327], [1.62718926E12, 0.023313973576399676], [1.62718908E12, 0.021620928031821914], [1.6271889E12, 0.02728121774180333], [1.62718872E12, 62.76562499999968], [1.6271892E12, 0.02335445962896925]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62718932E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 549.0, "minX": 1.62718872E12, "maxY": 8061.0, "series": [{"data": [[1.62718902E12, 1373.0], [1.62718884E12, 1421.0], [1.62718932E12, 1606.0], [1.62718914E12, 1405.0], [1.62718896E12, 1402.0], [1.62718878E12, 1412.0], [1.62718926E12, 1398.0], [1.62718908E12, 1449.0], [1.6271889E12, 1438.0], [1.62718872E12, 8061.0], [1.6271892E12, 1385.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62718902E12, 1244.0], [1.62718884E12, 1332.0], [1.62718932E12, 1236.0], [1.62718914E12, 1264.0], [1.62718896E12, 1281.0], [1.62718878E12, 1341.0], [1.62718926E12, 1248.0], [1.62718908E12, 1266.0], [1.6271889E12, 1243.0], [1.62718872E12, 2574.0], [1.6271892E12, 1244.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62718902E12, 1306.0], [1.62718884E12, 1375.0], [1.62718932E12, 1431.0], [1.62718914E12, 1354.0], [1.62718896E12, 1353.0], [1.62718878E12, 1393.0], [1.62718926E12, 1284.0], [1.62718908E12, 1310.0], [1.6271889E12, 1306.9900000000016], [1.62718872E12, 7110.0], [1.6271892E12, 1295.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62718902E12, 1275.0], [1.62718884E12, 1352.0], [1.62718932E12, 1264.0], [1.62718914E12, 1293.0], [1.62718896E12, 1301.0], [1.62718878E12, 1359.0], [1.62718926E12, 1266.0], [1.62718908E12, 1291.0], [1.6271889E12, 1268.0], [1.62718872E12, 4914.800000000003], [1.6271892E12, 1275.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62718902E12, 570.0], [1.62718884E12, 566.0], [1.62718932E12, 591.0], [1.62718914E12, 583.0], [1.62718896E12, 980.0], [1.62718878E12, 738.0], [1.62718926E12, 1044.0], [1.62718908E12, 618.0], [1.6271889E12, 559.0], [1.62718872E12, 697.0], [1.6271892E12, 549.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62718902E12, 1151.0], [1.62718884E12, 1247.0], [1.62718932E12, 1150.0], [1.62718914E12, 1174.0], [1.62718896E12, 1165.0], [1.62718878E12, 1217.0], [1.62718926E12, 1179.0], [1.62718908E12, 1139.0], [1.6271889E12, 1149.0], [1.62718872E12, 1611.0], [1.6271892E12, 1168.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62718932E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 965.0, "minX": 169.0, "maxY": 7065.0, "series": [{"data": [[169.0, 1125.0], [177.0, 6404.0], [423.0, 7065.0], [459.0, 2271.0], [451.0, 2264.0], [472.0, 2482.0], [523.0, 1976.0], [600.0, 4290.5], [634.0, 2210.0], [628.0, 1563.0], [620.0, 1892.0], [667.0, 1492.0], [686.0, 1779.0], [676.0, 1730.0], [687.0, 1792.0], [690.0, 1677.0], [734.0, 2173.0], [742.0, 1372.0], [748.0, 1240.0], [793.0, 1371.0], [794.0, 1277.0], [806.0, 1275.5], [811.0, 1418.0], [828.0, 1201.5], [800.0, 1164.0], [830.0, 1245.0], [823.0, 1236.0], [816.0, 1249.0], [815.0, 1275.0], [819.0, 1257.0], [833.0, 1303.0], [845.0, 1179.0], [857.0, 1258.0], [854.0, 1283.0], [838.0, 1237.0], [856.0, 1153.0], [841.0, 1239.0], [861.0, 1179.0], [862.0, 1181.0], [853.0, 1309.0], [846.0, 1194.0], [832.0, 1129.0], [870.0, 1276.0], [879.0, 1913.0], [877.0, 1206.0], [874.0, 1263.0], [864.0, 1216.0], [865.0, 1293.0], [866.0, 1299.0], [867.0, 1299.0], [868.0, 1210.0], [893.0, 1258.0], [886.0, 1165.0], [885.0, 1286.0], [883.0, 1271.0], [891.0, 1300.0], [892.0, 1227.0], [895.0, 1365.0], [882.0, 1262.0], [871.0, 1282.0], [898.0, 1221.0], [910.0, 1153.0], [906.0, 1206.0], [907.0, 1160.0], [927.0, 1188.0], [924.0, 1250.0], [926.0, 1230.0], [911.0, 1210.5], [923.0, 1128.0], [914.0, 1217.0], [913.0, 1256.0], [918.0, 1283.0], [917.0, 1273.0], [905.0, 1272.0], [899.0, 1200.0], [903.0, 1277.0], [921.0, 1213.0], [922.0, 1243.0], [920.0, 1227.0], [953.0, 1254.0], [928.0, 1216.0], [938.0, 1310.0], [941.0, 1233.0], [936.0, 1262.0], [943.0, 1211.0], [944.0, 1157.0], [949.0, 1204.0], [951.0, 1257.0], [950.0, 1251.0], [948.0, 1180.0], [947.0, 1232.0], [946.0, 1203.0], [945.0, 1290.0], [930.0, 1289.0], [931.0, 1228.0], [932.0, 1214.0], [955.0, 1229.0], [954.0, 1193.0], [933.0, 1215.0], [934.0, 1166.0], [952.0, 1162.0], [958.0, 1305.0], [956.0, 1328.5], [967.0, 1195.0], [990.0, 1193.0], [965.0, 1135.0], [963.0, 1117.0], [964.0, 1207.0], [966.0, 1186.0], [983.0, 1160.0], [982.0, 1202.0], [980.0, 1219.0], [981.0, 1244.0], [971.0, 1148.0], [968.0, 1202.0], [969.0, 1219.0], [972.0, 1217.0], [988.0, 1163.0], [989.0, 1217.0], [986.0, 1194.0], [984.0, 1206.0], [985.0, 1201.0], [962.0, 1157.0], [973.0, 1201.0], [960.0, 1161.0], [961.0, 1336.0], [974.0, 1195.0], [975.0, 1248.0], [979.0, 1239.0], [977.0, 1154.0], [978.0, 1236.0], [991.0, 1142.0], [976.0, 1143.0], [998.0, 1134.5], [1021.0, 1232.0], [1009.0, 1235.0], [1023.0, 1220.0], [1022.0, 1188.0], [1012.0, 1201.0], [1010.0, 1203.0], [1014.0, 1236.0], [1015.0, 1195.0], [1005.0, 1251.0], [1006.0, 1151.0], [1003.0, 1136.0], [1007.0, 1183.0], [1020.0, 1146.0], [1016.0, 1171.0], [1017.0, 1193.0], [999.0, 1159.0], [1018.0, 1223.0], [996.0, 1194.0], [997.0, 1175.0], [993.0, 1170.0], [992.0, 1274.0], [995.0, 1152.0], [1001.0, 1153.0], [1000.0, 1185.0], [1002.0, 1205.5], [1077.0, 1250.0], [1037.0, 1206.5], [1038.0, 1269.0], [1074.0, 1172.0], [1075.0, 1219.0], [1072.0, 1179.0], [1073.0, 1112.0], [1039.0, 1160.0], [1028.0, 1278.0], [1026.0, 1190.5], [1027.0, 1175.5], [1029.0, 1214.0], [1034.0, 1205.0], [1032.0, 1159.0], [1031.0, 1095.0], [1030.0, 1168.0], [1035.0, 1171.0], [1050.0, 1186.0], [1046.0, 1166.0], [1049.0, 1188.0], [1048.0, 1244.0], [1047.0, 1165.0], [1040.0, 1175.5], [1042.0, 1138.5], [1044.0, 1189.0], [1043.0, 1148.0], [1041.0, 1176.0], [1045.0, 1161.0], [1025.0, 1174.0], [1065.0, 1187.0], [1054.0, 1175.0], [1055.0, 1216.0], [1051.0, 1202.0], [1052.0, 1136.0], [1053.0, 1198.0], [1071.0, 1295.0], [1070.0, 1115.0], [1066.0, 1153.0], [1067.0, 1111.0], [1069.0, 1160.0], [1068.0, 1185.0], [1056.0, 1246.5], [1057.0, 1179.0], [1086.0, 1169.0], [1087.0, 1160.0], [1059.0, 1206.0], [1060.0, 1171.0], [1061.0, 1158.0], [1062.0, 1163.0], [1058.0, 1121.0], [1085.0, 1153.0], [1083.0, 1271.0], [1084.0, 1075.0], [1080.0, 1078.0], [1081.0, 1078.0], [1082.0, 1275.0], [1078.0, 1118.0], [1079.0, 1157.0], [1141.0, 1197.0], [1091.0, 1378.0], [1090.0, 1155.5], [1088.0, 1065.0], [1089.0, 1082.0], [1097.0, 1048.0], [1098.0, 1135.0], [1094.0, 1092.0], [1095.0, 1049.0], [1096.0, 1150.0], [1093.0, 1167.0], [1092.0, 1168.0], [1127.0, 1168.5], [1128.0, 1129.0], [1130.0, 1211.0], [1129.0, 1118.0], [1135.0, 1241.0], [1133.0, 1144.0], [1132.0, 1079.0], [1131.0, 1086.0], [1099.0, 1134.0], [1126.0, 1090.0], [1140.0, 1089.0], [1139.0, 1087.0], [1144.0, 1161.0], [1145.0, 1163.0], [1124.0, 1105.0], [1125.0, 1102.0], [1123.0, 1109.0], [1122.0, 1108.0], [1120.0, 1031.0], [1121.0, 1123.0], [1151.0, 1103.5], [1148.0, 1077.5], [1149.0, 1104.0], [1147.0, 1057.0], [1150.0, 1029.0], [1101.0, 1153.0], [1103.0, 1155.0], [1136.0, 1063.0], [1137.0, 1114.5], [1118.0, 1120.0], [1117.0, 1147.0], [1116.0, 1208.0], [1113.0, 1123.0], [1114.0, 1233.0], [1115.0, 1083.0], [1112.0, 1167.5], [1109.0, 1172.0], [1108.0, 1086.0], [1110.0, 1101.0], [1111.0, 1091.0], [1107.0, 1099.0], [1104.0, 1091.0], [1105.0, 1126.0], [1119.0, 1223.0], [1164.0, 1173.0], [1161.0, 1229.0], [1190.0, 1162.0], [1192.0, 1066.5], [1194.0, 1028.0], [1163.0, 1088.0], [1200.0, 1141.0], [1171.0, 1215.0], [1168.0, 1033.0], [1169.0, 1020.0], [1175.0, 1096.0], [1172.0, 1003.0], [1182.0, 1206.0], [1158.0, 1220.0], [1157.0, 1051.0], [1156.0, 1104.0], [1154.0, 1259.0], [1155.0, 1221.0], [1166.0, 1142.0], [1167.0, 1078.0], [1187.0, 1107.0], [1208.0, 1038.0], [1185.0, 996.0], [1268.0, 1008.0], [1216.0, 1100.0], [1254.0, 965.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1268.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 965.0, "minX": 169.0, "maxY": 7065.0, "series": [{"data": [[169.0, 1125.0], [177.0, 6404.0], [423.0, 7065.0], [459.0, 2271.0], [451.0, 2264.0], [472.0, 2482.0], [523.0, 1976.0], [600.0, 4208.0], [634.0, 2210.0], [628.0, 1563.0], [620.0, 1892.0], [667.0, 1492.0], [686.0, 1779.0], [676.0, 1730.0], [687.0, 1792.0], [690.0, 1677.0], [734.0, 2173.0], [742.0, 1372.0], [748.0, 1240.0], [793.0, 1371.0], [794.0, 1277.0], [806.0, 1275.5], [811.0, 1418.0], [828.0, 1201.5], [800.0, 1164.0], [830.0, 1245.0], [823.0, 1236.0], [816.0, 1249.0], [815.0, 1275.0], [819.0, 1257.0], [833.0, 1303.0], [845.0, 1179.0], [857.0, 1258.0], [854.0, 1283.0], [838.0, 1237.0], [856.0, 1153.0], [841.0, 1239.0], [861.0, 1179.0], [862.0, 1181.0], [853.0, 1309.0], [846.0, 1194.0], [832.0, 1129.0], [870.0, 1276.0], [879.0, 1913.0], [877.0, 1206.0], [874.0, 1263.0], [864.0, 1216.0], [865.0, 1293.0], [866.0, 1299.0], [867.0, 1299.0], [868.0, 1210.0], [893.0, 1258.0], [886.0, 1165.0], [885.0, 1286.0], [883.0, 1271.0], [891.0, 1300.0], [892.0, 1227.0], [895.0, 1365.0], [882.0, 1262.0], [871.0, 1282.0], [898.0, 1221.0], [910.0, 1153.0], [906.0, 1206.0], [907.0, 1160.0], [927.0, 1188.0], [924.0, 1250.0], [926.0, 1230.0], [911.0, 1210.5], [923.0, 1128.0], [914.0, 1217.0], [913.0, 1256.0], [918.0, 1283.0], [917.0, 1273.0], [905.0, 1272.0], [899.0, 1200.0], [903.0, 1277.0], [921.0, 1213.0], [922.0, 1243.0], [920.0, 1227.0], [953.0, 1254.0], [928.0, 1216.0], [938.0, 1310.0], [941.0, 1233.0], [936.0, 1262.0], [943.0, 1211.0], [944.0, 1157.0], [949.0, 1204.0], [951.0, 1257.0], [950.0, 1251.0], [948.0, 1180.0], [947.0, 1231.5], [946.0, 1203.0], [945.0, 1290.0], [930.0, 1289.0], [931.0, 1228.0], [932.0, 1214.0], [955.0, 1229.0], [954.0, 1193.0], [933.0, 1215.0], [934.0, 1166.0], [952.0, 1162.0], [958.0, 1305.0], [956.0, 1328.5], [967.0, 1195.0], [990.0, 1193.0], [965.0, 1135.0], [963.0, 1117.0], [964.0, 1207.0], [966.0, 1186.0], [983.0, 1160.0], [982.0, 1202.0], [980.0, 1219.0], [981.0, 1244.0], [971.0, 1148.0], [968.0, 1202.0], [969.0, 1219.0], [972.0, 1217.0], [988.0, 1163.0], [989.0, 1217.0], [986.0, 1194.0], [984.0, 1206.0], [985.0, 1201.0], [962.0, 1157.0], [973.0, 1201.0], [960.0, 1161.0], [961.0, 1336.0], [974.0, 1195.0], [975.0, 1248.0], [979.0, 1239.0], [977.0, 1154.0], [978.0, 1236.0], [991.0, 1142.0], [976.0, 1143.0], [998.0, 1134.0], [1021.0, 1232.0], [1009.0, 1235.0], [1023.0, 1220.0], [1022.0, 1188.0], [1012.0, 1201.0], [1010.0, 1203.0], [1014.0, 1236.0], [1015.0, 1195.0], [1005.0, 1251.0], [1006.0, 1151.0], [1003.0, 1136.0], [1007.0, 1183.0], [1020.0, 1146.0], [1016.0, 1171.0], [1017.0, 1193.0], [999.0, 1159.0], [1018.0, 1223.0], [996.0, 1194.0], [997.0, 1175.0], [993.0, 1170.0], [992.0, 1274.0], [995.0, 1152.0], [1001.0, 1153.0], [1000.0, 1185.0], [1002.0, 1205.5], [1077.0, 1250.0], [1037.0, 1206.5], [1038.0, 1269.0], [1074.0, 1172.0], [1075.0, 1219.0], [1072.0, 1179.0], [1073.0, 1112.0], [1039.0, 1160.0], [1028.0, 1278.0], [1026.0, 1190.5], [1027.0, 1175.5], [1029.0, 1214.0], [1034.0, 1205.0], [1032.0, 1159.0], [1031.0, 1095.0], [1030.0, 1168.0], [1035.0, 1171.0], [1050.0, 1186.0], [1046.0, 1166.0], [1049.0, 1188.0], [1048.0, 1244.0], [1047.0, 1165.0], [1040.0, 1175.5], [1042.0, 1138.0], [1044.0, 1189.0], [1043.0, 1148.0], [1041.0, 1176.0], [1045.0, 1161.0], [1025.0, 1174.0], [1065.0, 1187.0], [1054.0, 1175.0], [1055.0, 1216.0], [1051.0, 1202.0], [1052.0, 1136.0], [1053.0, 1198.0], [1071.0, 1295.0], [1070.0, 1115.0], [1066.0, 1153.0], [1067.0, 1111.0], [1069.0, 1160.0], [1068.0, 1185.0], [1056.0, 1246.5], [1057.0, 1179.0], [1086.0, 1169.0], [1087.0, 1160.0], [1059.0, 1206.0], [1060.0, 1171.0], [1061.0, 1158.0], [1062.0, 1163.0], [1058.0, 1121.0], [1085.0, 1153.0], [1083.0, 1271.0], [1084.0, 1075.0], [1080.0, 1078.0], [1081.0, 1078.0], [1082.0, 1275.0], [1078.0, 1118.0], [1079.0, 1157.0], [1141.0, 1197.0], [1091.0, 1378.0], [1090.0, 1155.5], [1088.0, 1065.0], [1089.0, 1082.0], [1097.0, 1048.0], [1098.0, 1135.0], [1094.0, 1092.0], [1095.0, 1049.0], [1096.0, 1150.0], [1093.0, 1167.0], [1092.0, 1168.0], [1127.0, 1168.5], [1128.0, 1129.0], [1130.0, 1210.5], [1129.0, 1118.0], [1135.0, 1241.0], [1133.0, 1144.0], [1132.0, 1079.0], [1131.0, 1086.0], [1099.0, 1134.0], [1126.0, 1089.0], [1140.0, 1089.0], [1139.0, 1087.0], [1144.0, 1161.0], [1145.0, 1163.0], [1124.0, 1105.0], [1125.0, 1102.0], [1123.0, 1109.0], [1122.0, 1108.0], [1120.0, 1031.0], [1121.0, 1123.0], [1151.0, 1103.0], [1148.0, 1077.5], [1149.0, 1103.0], [1147.0, 1057.0], [1150.0, 1029.0], [1101.0, 1153.0], [1103.0, 1155.0], [1136.0, 1063.0], [1137.0, 1114.5], [1118.0, 1120.0], [1117.0, 1147.0], [1116.0, 1208.0], [1113.0, 1123.0], [1114.0, 1233.0], [1115.0, 1083.0], [1112.0, 1167.0], [1109.0, 1172.0], [1108.0, 1086.0], [1110.0, 1101.0], [1111.0, 1091.0], [1107.0, 1099.0], [1104.0, 1091.0], [1105.0, 1126.0], [1119.0, 1223.0], [1164.0, 1173.0], [1161.0, 1229.0], [1190.0, 1161.5], [1192.0, 1066.5], [1194.0, 1028.0], [1163.0, 1087.0], [1200.0, 1141.0], [1171.0, 1215.0], [1168.0, 1033.0], [1169.0, 1020.0], [1175.0, 1096.0], [1172.0, 1003.0], [1182.0, 1206.0], [1158.0, 1220.0], [1157.0, 1051.0], [1156.0, 1104.0], [1154.0, 1259.0], [1155.0, 1221.0], [1166.0, 1142.0], [1167.0, 1078.0], [1187.0, 1107.0], [1208.0, 1038.0], [1185.0, 996.0], [1268.0, 1008.0], [1216.0, 1100.0], [1254.0, 965.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1268.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 340.0, "minX": 1.62718872E12, "maxY": 1039.2833333333333, "series": [{"data": [[1.62718902E12, 1039.2833333333333], [1.62718884E12, 999.7833333333333], [1.62718932E12, 480.1166666666667], [1.62718914E12, 1033.5666666666666], [1.62718896E12, 1027.7333333333333], [1.62718878E12, 990.0], [1.62718926E12, 1012.9666666666667], [1.62718908E12, 1039.1166666666666], [1.6271889E12, 1017.1833333333333], [1.62718872E12, 340.0], [1.6271892E12, 1009.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62718932E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 320.0, "minX": 1.62718872E12, "maxY": 1039.2666666666667, "series": [{"data": [[1.62718902E12, 1039.2666666666667], [1.62718884E12, 999.7833333333333], [1.62718932E12, 500.1], [1.62718914E12, 1033.5666666666666], [1.62718896E12, 1027.75], [1.62718878E12, 990.0], [1.62718926E12, 1012.9833333333333], [1.62718908E12, 1039.1166666666666], [1.6271889E12, 1017.1833333333333], [1.62718872E12, 320.0], [1.6271892E12, 1009.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62718932E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 320.0, "minX": 1.62718872E12, "maxY": 1039.2666666666667, "series": [{"data": [[1.62718902E12, 1039.2666666666667], [1.62718884E12, 999.7833333333333], [1.62718932E12, 500.1], [1.62718914E12, 1033.5666666666666], [1.62718896E12, 1027.75], [1.62718878E12, 990.0], [1.62718926E12, 1012.9833333333333], [1.62718908E12, 1039.1166666666666], [1.6271889E12, 1017.1833333333333], [1.62718872E12, 320.0], [1.6271892E12, 1009.8]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62718932E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 320.0, "minX": 1.62718872E12, "maxY": 1039.2666666666667, "series": [{"data": [[1.62718902E12, 1039.2666666666667], [1.62718884E12, 999.7833333333333], [1.62718932E12, 500.1], [1.62718914E12, 1033.5666666666666], [1.62718896E12, 1027.75], [1.62718878E12, 990.0], [1.62718926E12, 1012.9833333333333], [1.62718908E12, 1039.1166666666666], [1.6271889E12, 1017.1833333333333], [1.62718872E12, 320.0], [1.6271892E12, 1009.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62718932E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

