/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 3527.0, "series": [{"data": [[0.0, 102.0], [0.1, 308.0], [0.2, 324.0], [0.3, 335.0], [0.4, 347.0], [0.5, 356.0], [0.6, 362.0], [0.7, 366.0], [0.8, 369.0], [0.9, 372.0], [1.0, 374.0], [1.1, 376.0], [1.2, 378.0], [1.3, 380.0], [1.4, 381.0], [1.5, 383.0], [1.6, 384.0], [1.7, 385.0], [1.8, 386.0], [1.9, 387.0], [2.0, 388.0], [2.1, 389.0], [2.2, 390.0], [2.3, 390.0], [2.4, 391.0], [2.5, 392.0], [2.6, 393.0], [2.7, 393.0], [2.8, 394.0], [2.9, 395.0], [3.0, 395.0], [3.1, 396.0], [3.2, 396.0], [3.3, 397.0], [3.4, 398.0], [3.5, 398.0], [3.6, 399.0], [3.7, 399.0], [3.8, 400.0], [3.9, 400.0], [4.0, 400.0], [4.1, 401.0], [4.2, 401.0], [4.3, 402.0], [4.4, 402.0], [4.5, 403.0], [4.6, 403.0], [4.7, 404.0], [4.8, 404.0], [4.9, 405.0], [5.0, 405.0], [5.1, 405.0], [5.2, 406.0], [5.3, 406.0], [5.4, 407.0], [5.5, 407.0], [5.6, 407.0], [5.7, 408.0], [5.8, 408.0], [5.9, 408.0], [6.0, 409.0], [6.1, 409.0], [6.2, 409.0], [6.3, 410.0], [6.4, 410.0], [6.5, 410.0], [6.6, 411.0], [6.7, 411.0], [6.8, 411.0], [6.9, 412.0], [7.0, 412.0], [7.1, 412.0], [7.2, 413.0], [7.3, 413.0], [7.4, 413.0], [7.5, 414.0], [7.6, 414.0], [7.7, 414.0], [7.8, 415.0], [7.9, 415.0], [8.0, 415.0], [8.1, 415.0], [8.2, 416.0], [8.3, 416.0], [8.4, 416.0], [8.5, 416.0], [8.6, 417.0], [8.7, 417.0], [8.8, 417.0], [8.9, 418.0], [9.0, 418.0], [9.1, 418.0], [9.2, 418.0], [9.3, 419.0], [9.4, 419.0], [9.5, 419.0], [9.6, 419.0], [9.7, 420.0], [9.8, 420.0], [9.9, 420.0], [10.0, 420.0], [10.1, 421.0], [10.2, 421.0], [10.3, 421.0], [10.4, 421.0], [10.5, 422.0], [10.6, 422.0], [10.7, 422.0], [10.8, 422.0], [10.9, 423.0], [11.0, 423.0], [11.1, 423.0], [11.2, 423.0], [11.3, 423.0], [11.4, 424.0], [11.5, 424.0], [11.6, 424.0], [11.7, 424.0], [11.8, 425.0], [11.9, 425.0], [12.0, 425.0], [12.1, 425.0], [12.2, 425.0], [12.3, 426.0], [12.4, 426.0], [12.5, 426.0], [12.6, 426.0], [12.7, 426.0], [12.8, 427.0], [12.9, 427.0], [13.0, 427.0], [13.1, 427.0], [13.2, 427.0], [13.3, 428.0], [13.4, 428.0], [13.5, 428.0], [13.6, 428.0], [13.7, 429.0], [13.8, 429.0], [13.9, 429.0], [14.0, 429.0], [14.1, 429.0], [14.2, 430.0], [14.3, 430.0], [14.4, 430.0], [14.5, 430.0], [14.6, 430.0], [14.7, 430.0], [14.8, 431.0], [14.9, 431.0], [15.0, 431.0], [15.1, 431.0], [15.2, 431.0], [15.3, 432.0], [15.4, 432.0], [15.5, 432.0], [15.6, 432.0], [15.7, 432.0], [15.8, 433.0], [15.9, 433.0], [16.0, 433.0], [16.1, 433.0], [16.2, 433.0], [16.3, 433.0], [16.4, 434.0], [16.5, 434.0], [16.6, 434.0], [16.7, 434.0], [16.8, 434.0], [16.9, 434.0], [17.0, 435.0], [17.1, 435.0], [17.2, 435.0], [17.3, 435.0], [17.4, 435.0], [17.5, 435.0], [17.6, 436.0], [17.7, 436.0], [17.8, 436.0], [17.9, 436.0], [18.0, 436.0], [18.1, 436.0], [18.2, 437.0], [18.3, 437.0], [18.4, 437.0], [18.5, 437.0], [18.6, 437.0], [18.7, 437.0], [18.8, 438.0], [18.9, 438.0], [19.0, 438.0], [19.1, 438.0], [19.2, 438.0], [19.3, 438.0], [19.4, 439.0], [19.5, 439.0], [19.6, 439.0], [19.7, 439.0], [19.8, 439.0], [19.9, 439.0], [20.0, 439.0], [20.1, 440.0], [20.2, 440.0], [20.3, 440.0], [20.4, 440.0], [20.5, 440.0], [20.6, 440.0], [20.7, 441.0], [20.8, 441.0], [20.9, 441.0], [21.0, 441.0], [21.1, 441.0], [21.2, 441.0], [21.3, 441.0], [21.4, 442.0], [21.5, 442.0], [21.6, 442.0], [21.7, 442.0], [21.8, 442.0], [21.9, 442.0], [22.0, 442.0], [22.1, 443.0], [22.2, 443.0], [22.3, 443.0], [22.4, 443.0], [22.5, 443.0], [22.6, 443.0], [22.7, 444.0], [22.8, 444.0], [22.9, 444.0], [23.0, 444.0], [23.1, 444.0], [23.2, 444.0], [23.3, 444.0], [23.4, 445.0], [23.5, 445.0], [23.6, 445.0], [23.7, 445.0], [23.8, 445.0], [23.9, 445.0], [24.0, 445.0], [24.1, 446.0], [24.2, 446.0], [24.3, 446.0], [24.4, 446.0], [24.5, 446.0], [24.6, 446.0], [24.7, 446.0], [24.8, 447.0], [24.9, 447.0], [25.0, 447.0], [25.1, 447.0], [25.2, 447.0], [25.3, 447.0], [25.4, 447.0], [25.5, 448.0], [25.6, 448.0], [25.7, 448.0], [25.8, 448.0], [25.9, 448.0], [26.0, 448.0], [26.1, 448.0], [26.2, 449.0], [26.3, 449.0], [26.4, 449.0], [26.5, 449.0], [26.6, 449.0], [26.7, 449.0], [26.8, 449.0], [26.9, 450.0], [27.0, 450.0], [27.1, 450.0], [27.2, 450.0], [27.3, 450.0], [27.4, 450.0], [27.5, 450.0], [27.6, 451.0], [27.7, 451.0], [27.8, 451.0], [27.9, 451.0], [28.0, 451.0], [28.1, 451.0], [28.2, 451.0], [28.3, 452.0], [28.4, 452.0], [28.5, 452.0], [28.6, 452.0], [28.7, 452.0], [28.8, 452.0], [28.9, 452.0], [29.0, 453.0], [29.1, 453.0], [29.2, 453.0], [29.3, 453.0], [29.4, 453.0], [29.5, 453.0], [29.6, 453.0], [29.7, 453.0], [29.8, 454.0], [29.9, 454.0], [30.0, 454.0], [30.1, 454.0], [30.2, 454.0], [30.3, 454.0], [30.4, 454.0], [30.5, 455.0], [30.6, 455.0], [30.7, 455.0], [30.8, 455.0], [30.9, 455.0], [31.0, 455.0], [31.1, 455.0], [31.2, 456.0], [31.3, 456.0], [31.4, 456.0], [31.5, 456.0], [31.6, 456.0], [31.7, 456.0], [31.8, 456.0], [31.9, 456.0], [32.0, 457.0], [32.1, 457.0], [32.2, 457.0], [32.3, 457.0], [32.4, 457.0], [32.5, 457.0], [32.6, 457.0], [32.7, 458.0], [32.8, 458.0], [32.9, 458.0], [33.0, 458.0], [33.1, 458.0], [33.2, 458.0], [33.3, 458.0], [33.4, 458.0], [33.5, 459.0], [33.6, 459.0], [33.7, 459.0], [33.8, 459.0], [33.9, 459.0], [34.0, 459.0], [34.1, 459.0], [34.2, 460.0], [34.3, 460.0], [34.4, 460.0], [34.5, 460.0], [34.6, 460.0], [34.7, 460.0], [34.8, 460.0], [34.9, 460.0], [35.0, 461.0], [35.1, 461.0], [35.2, 461.0], [35.3, 461.0], [35.4, 461.0], [35.5, 461.0], [35.6, 461.0], [35.7, 461.0], [35.8, 462.0], [35.9, 462.0], [36.0, 462.0], [36.1, 462.0], [36.2, 462.0], [36.3, 462.0], [36.4, 462.0], [36.5, 463.0], [36.6, 463.0], [36.7, 463.0], [36.8, 463.0], [36.9, 463.0], [37.0, 463.0], [37.1, 463.0], [37.2, 463.0], [37.3, 464.0], [37.4, 464.0], [37.5, 464.0], [37.6, 464.0], [37.7, 464.0], [37.8, 464.0], [37.9, 464.0], [38.0, 464.0], [38.1, 465.0], [38.2, 465.0], [38.3, 465.0], [38.4, 465.0], [38.5, 465.0], [38.6, 465.0], [38.7, 465.0], [38.8, 465.0], [38.9, 466.0], [39.0, 466.0], [39.1, 466.0], [39.2, 466.0], [39.3, 466.0], [39.4, 466.0], [39.5, 466.0], [39.6, 466.0], [39.7, 467.0], [39.8, 467.0], [39.9, 467.0], [40.0, 467.0], [40.1, 467.0], [40.2, 467.0], [40.3, 467.0], [40.4, 468.0], [40.5, 468.0], [40.6, 468.0], [40.7, 468.0], [40.8, 468.0], [40.9, 468.0], [41.0, 468.0], [41.1, 468.0], [41.2, 469.0], [41.3, 469.0], [41.4, 469.0], [41.5, 469.0], [41.6, 469.0], [41.7, 469.0], [41.8, 469.0], [41.9, 469.0], [42.0, 470.0], [42.1, 470.0], [42.2, 470.0], [42.3, 470.0], [42.4, 470.0], [42.5, 470.0], [42.6, 470.0], [42.7, 471.0], [42.8, 471.0], [42.9, 471.0], [43.0, 471.0], [43.1, 471.0], [43.2, 471.0], [43.3, 471.0], [43.4, 471.0], [43.5, 472.0], [43.6, 472.0], [43.7, 472.0], [43.8, 472.0], [43.9, 472.0], [44.0, 472.0], [44.1, 472.0], [44.2, 473.0], [44.3, 473.0], [44.4, 473.0], [44.5, 473.0], [44.6, 473.0], [44.7, 473.0], [44.8, 473.0], [44.9, 473.0], [45.0, 474.0], [45.1, 474.0], [45.2, 474.0], [45.3, 474.0], [45.4, 474.0], [45.5, 474.0], [45.6, 474.0], [45.7, 474.0], [45.8, 475.0], [45.9, 475.0], [46.0, 475.0], [46.1, 475.0], [46.2, 475.0], [46.3, 475.0], [46.4, 475.0], [46.5, 476.0], [46.6, 476.0], [46.7, 476.0], [46.8, 476.0], [46.9, 476.0], [47.0, 476.0], [47.1, 476.0], [47.2, 476.0], [47.3, 477.0], [47.4, 477.0], [47.5, 477.0], [47.6, 477.0], [47.7, 477.0], [47.8, 477.0], [47.9, 477.0], [48.0, 477.0], [48.1, 478.0], [48.2, 478.0], [48.3, 478.0], [48.4, 478.0], [48.5, 478.0], [48.6, 478.0], [48.7, 478.0], [48.8, 479.0], [48.9, 479.0], [49.0, 479.0], [49.1, 479.0], [49.2, 479.0], [49.3, 479.0], [49.4, 479.0], [49.5, 479.0], [49.6, 480.0], [49.7, 480.0], [49.8, 480.0], [49.9, 480.0], [50.0, 480.0], [50.1, 480.0], [50.2, 480.0], [50.3, 481.0], [50.4, 481.0], [50.5, 481.0], [50.6, 481.0], [50.7, 481.0], [50.8, 481.0], [50.9, 481.0], [51.0, 481.0], [51.1, 482.0], [51.2, 482.0], [51.3, 482.0], [51.4, 482.0], [51.5, 482.0], [51.6, 482.0], [51.7, 482.0], [51.8, 483.0], [51.9, 483.0], [52.0, 483.0], [52.1, 483.0], [52.2, 483.0], [52.3, 483.0], [52.4, 483.0], [52.5, 483.0], [52.6, 484.0], [52.7, 484.0], [52.8, 484.0], [52.9, 484.0], [53.0, 484.0], [53.1, 484.0], [53.2, 484.0], [53.3, 484.0], [53.4, 485.0], [53.5, 485.0], [53.6, 485.0], [53.7, 485.0], [53.8, 485.0], [53.9, 485.0], [54.0, 485.0], [54.1, 485.0], [54.2, 486.0], [54.3, 486.0], [54.4, 486.0], [54.5, 486.0], [54.6, 486.0], [54.7, 486.0], [54.8, 486.0], [54.9, 487.0], [55.0, 487.0], [55.1, 487.0], [55.2, 487.0], [55.3, 487.0], [55.4, 487.0], [55.5, 487.0], [55.6, 487.0], [55.7, 488.0], [55.8, 488.0], [55.9, 488.0], [56.0, 488.0], [56.1, 488.0], [56.2, 488.0], [56.3, 488.0], [56.4, 489.0], [56.5, 489.0], [56.6, 489.0], [56.7, 489.0], [56.8, 489.0], [56.9, 489.0], [57.0, 489.0], [57.1, 490.0], [57.2, 490.0], [57.3, 490.0], [57.4, 490.0], [57.5, 490.0], [57.6, 490.0], [57.7, 490.0], [57.8, 490.0], [57.9, 491.0], [58.0, 491.0], [58.1, 491.0], [58.2, 491.0], [58.3, 491.0], [58.4, 491.0], [58.5, 491.0], [58.6, 492.0], [58.7, 492.0], [58.8, 492.0], [58.9, 492.0], [59.0, 492.0], [59.1, 492.0], [59.2, 492.0], [59.3, 493.0], [59.4, 493.0], [59.5, 493.0], [59.6, 493.0], [59.7, 493.0], [59.8, 493.0], [59.9, 493.0], [60.0, 493.0], [60.1, 494.0], [60.2, 494.0], [60.3, 494.0], [60.4, 494.0], [60.5, 494.0], [60.6, 494.0], [60.7, 494.0], [60.8, 495.0], [60.9, 495.0], [61.0, 495.0], [61.1, 495.0], [61.2, 495.0], [61.3, 495.0], [61.4, 495.0], [61.5, 496.0], [61.6, 496.0], [61.7, 496.0], [61.8, 496.0], [61.9, 496.0], [62.0, 496.0], [62.1, 496.0], [62.2, 496.0], [62.3, 497.0], [62.4, 497.0], [62.5, 497.0], [62.6, 497.0], [62.7, 497.0], [62.8, 497.0], [62.9, 497.0], [63.0, 498.0], [63.1, 498.0], [63.2, 498.0], [63.3, 498.0], [63.4, 498.0], [63.5, 498.0], [63.6, 498.0], [63.7, 499.0], [63.8, 499.0], [63.9, 499.0], [64.0, 499.0], [64.1, 499.0], [64.2, 499.0], [64.3, 499.0], [64.4, 500.0], [64.5, 500.0], [64.6, 500.0], [64.7, 500.0], [64.8, 500.0], [64.9, 500.0], [65.0, 500.0], [65.1, 501.0], [65.2, 501.0], [65.3, 501.0], [65.4, 501.0], [65.5, 501.0], [65.6, 501.0], [65.7, 501.0], [65.8, 502.0], [65.9, 502.0], [66.0, 502.0], [66.1, 502.0], [66.2, 502.0], [66.3, 502.0], [66.4, 502.0], [66.5, 503.0], [66.6, 503.0], [66.7, 503.0], [66.8, 503.0], [66.9, 503.0], [67.0, 503.0], [67.1, 503.0], [67.2, 504.0], [67.3, 504.0], [67.4, 504.0], [67.5, 504.0], [67.6, 504.0], [67.7, 504.0], [67.8, 504.0], [67.9, 505.0], [68.0, 505.0], [68.1, 505.0], [68.2, 505.0], [68.3, 505.0], [68.4, 505.0], [68.5, 505.0], [68.6, 506.0], [68.7, 506.0], [68.8, 506.0], [68.9, 506.0], [69.0, 506.0], [69.1, 506.0], [69.2, 506.0], [69.3, 507.0], [69.4, 507.0], [69.5, 507.0], [69.6, 507.0], [69.7, 507.0], [69.8, 507.0], [69.9, 508.0], [70.0, 508.0], [70.1, 508.0], [70.2, 508.0], [70.3, 508.0], [70.4, 508.0], [70.5, 508.0], [70.6, 509.0], [70.7, 509.0], [70.8, 509.0], [70.9, 509.0], [71.0, 509.0], [71.1, 509.0], [71.2, 509.0], [71.3, 510.0], [71.4, 510.0], [71.5, 510.0], [71.6, 510.0], [71.7, 510.0], [71.8, 510.0], [71.9, 511.0], [72.0, 511.0], [72.1, 511.0], [72.2, 511.0], [72.3, 511.0], [72.4, 511.0], [72.5, 512.0], [72.6, 512.0], [72.7, 512.0], [72.8, 512.0], [72.9, 512.0], [73.0, 512.0], [73.1, 513.0], [73.2, 513.0], [73.3, 513.0], [73.4, 513.0], [73.5, 513.0], [73.6, 513.0], [73.7, 514.0], [73.8, 514.0], [73.9, 514.0], [74.0, 514.0], [74.1, 514.0], [74.2, 514.0], [74.3, 515.0], [74.4, 515.0], [74.5, 515.0], [74.6, 515.0], [74.7, 515.0], [74.8, 515.0], [74.9, 516.0], [75.0, 516.0], [75.1, 516.0], [75.2, 516.0], [75.3, 516.0], [75.4, 516.0], [75.5, 517.0], [75.6, 517.0], [75.7, 517.0], [75.8, 517.0], [75.9, 517.0], [76.0, 517.0], [76.1, 518.0], [76.2, 518.0], [76.3, 518.0], [76.4, 518.0], [76.5, 518.0], [76.6, 518.0], [76.7, 519.0], [76.8, 519.0], [76.9, 519.0], [77.0, 519.0], [77.1, 519.0], [77.2, 519.0], [77.3, 520.0], [77.4, 520.0], [77.5, 520.0], [77.6, 520.0], [77.7, 520.0], [77.8, 521.0], [77.9, 521.0], [78.0, 521.0], [78.1, 521.0], [78.2, 521.0], [78.3, 521.0], [78.4, 522.0], [78.5, 522.0], [78.6, 522.0], [78.7, 522.0], [78.8, 522.0], [78.9, 523.0], [79.0, 523.0], [79.1, 523.0], [79.2, 523.0], [79.3, 523.0], [79.4, 523.0], [79.5, 524.0], [79.6, 524.0], [79.7, 524.0], [79.8, 524.0], [79.9, 524.0], [80.0, 525.0], [80.1, 525.0], [80.2, 525.0], [80.3, 525.0], [80.4, 525.0], [80.5, 526.0], [80.6, 526.0], [80.7, 526.0], [80.8, 526.0], [80.9, 526.0], [81.0, 527.0], [81.1, 527.0], [81.2, 527.0], [81.3, 527.0], [81.4, 527.0], [81.5, 528.0], [81.6, 528.0], [81.7, 528.0], [81.8, 528.0], [81.9, 528.0], [82.0, 529.0], [82.1, 529.0], [82.2, 529.0], [82.3, 529.0], [82.4, 529.0], [82.5, 530.0], [82.6, 530.0], [82.7, 530.0], [82.8, 530.0], [82.9, 531.0], [83.0, 531.0], [83.1, 531.0], [83.2, 531.0], [83.3, 531.0], [83.4, 532.0], [83.5, 532.0], [83.6, 532.0], [83.7, 532.0], [83.8, 532.0], [83.9, 533.0], [84.0, 533.0], [84.1, 533.0], [84.2, 533.0], [84.3, 534.0], [84.4, 534.0], [84.5, 534.0], [84.6, 534.0], [84.7, 535.0], [84.8, 535.0], [84.9, 535.0], [85.0, 535.0], [85.1, 536.0], [85.2, 536.0], [85.3, 536.0], [85.4, 536.0], [85.5, 536.0], [85.6, 537.0], [85.7, 537.0], [85.8, 537.0], [85.9, 537.0], [86.0, 538.0], [86.1, 538.0], [86.2, 538.0], [86.3, 538.0], [86.4, 539.0], [86.5, 539.0], [86.6, 539.0], [86.7, 539.0], [86.8, 540.0], [86.9, 540.0], [87.0, 540.0], [87.1, 540.0], [87.2, 541.0], [87.3, 541.0], [87.4, 541.0], [87.5, 541.0], [87.6, 542.0], [87.7, 542.0], [87.8, 542.0], [87.9, 543.0], [88.0, 543.0], [88.1, 543.0], [88.2, 543.0], [88.3, 544.0], [88.4, 544.0], [88.5, 544.0], [88.6, 544.0], [88.7, 545.0], [88.8, 545.0], [88.9, 545.0], [89.0, 546.0], [89.1, 546.0], [89.2, 546.0], [89.3, 546.0], [89.4, 547.0], [89.5, 547.0], [89.6, 547.0], [89.7, 548.0], [89.8, 548.0], [89.9, 548.0], [90.0, 549.0], [90.1, 549.0], [90.2, 549.0], [90.3, 550.0], [90.4, 550.0], [90.5, 550.0], [90.6, 551.0], [90.7, 551.0], [90.8, 551.0], [90.9, 552.0], [91.0, 552.0], [91.1, 552.0], [91.2, 553.0], [91.3, 553.0], [91.4, 554.0], [91.5, 554.0], [91.6, 554.0], [91.7, 555.0], [91.8, 555.0], [91.9, 555.0], [92.0, 556.0], [92.1, 556.0], [92.2, 557.0], [92.3, 557.0], [92.4, 557.0], [92.5, 558.0], [92.6, 558.0], [92.7, 559.0], [92.8, 559.0], [92.9, 560.0], [93.0, 560.0], [93.1, 560.0], [93.2, 561.0], [93.3, 561.0], [93.4, 562.0], [93.5, 562.0], [93.6, 563.0], [93.7, 563.0], [93.8, 564.0], [93.9, 564.0], [94.0, 565.0], [94.1, 565.0], [94.2, 566.0], [94.3, 566.0], [94.4, 567.0], [94.5, 568.0], [94.6, 568.0], [94.7, 569.0], [94.8, 569.0], [94.9, 570.0], [95.0, 570.0], [95.1, 571.0], [95.2, 572.0], [95.3, 572.0], [95.4, 573.0], [95.5, 574.0], [95.6, 574.0], [95.7, 575.0], [95.8, 576.0], [95.9, 576.0], [96.0, 577.0], [96.1, 578.0], [96.2, 579.0], [96.3, 580.0], [96.4, 580.0], [96.5, 581.0], [96.6, 582.0], [96.7, 583.0], [96.8, 584.0], [96.9, 585.0], [97.0, 586.0], [97.1, 588.0], [97.2, 589.0], [97.3, 590.0], [97.4, 592.0], [97.5, 593.0], [97.6, 594.0], [97.7, 596.0], [97.8, 598.0], [97.9, 600.0], [98.0, 602.0], [98.1, 604.0], [98.2, 606.0], [98.3, 609.0], [98.4, 612.0], [98.5, 615.0], [98.6, 619.0], [98.7, 624.0], [98.8, 631.0], [98.9, 639.0], [99.0, 653.0], [99.1, 674.0], [99.2, 698.0], [99.3, 727.0], [99.4, 749.0], [99.5, 775.0], [99.6, 821.0], [99.7, 876.0], [99.8, 917.0], [99.9, 1071.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 449394.0, "series": [{"data": [[600.0, 9744.0], [700.0, 2627.0], [2700.0, 1.0], [800.0, 1557.0], [200.0, 378.0], [3500.0, 1.0], [900.0, 543.0], [1000.0, 482.0], [1100.0, 17.0], [1200.0, 43.0], [300.0, 27671.0], [1300.0, 128.0], [1400.0, 272.0], [1500.0, 166.0], [100.0, 49.0], [1600.0, 53.0], [400.0, 449394.0], [1700.0, 14.0], [1800.0, 1.0], [500.0, 248778.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 234.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 482784.0, "series": [{"data": [[0.0, 482784.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 258901.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 234.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 591.1403415154742, "minX": 1.62028188E12, "maxY": 600.0, "series": [{"data": [[1.62028194E12, 600.0], [1.62028242E12, 600.0], [1.62028224E12, 600.0], [1.6202823E12, 600.0], [1.62028212E12, 600.0], [1.62028218E12, 600.0], [1.620282E12, 600.0], [1.62028248E12, 591.1403415154742], [1.62028206E12, 600.0], [1.62028188E12, 599.9895771527953], [1.62028236E12, 600.0]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62028248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 213.0, "minX": 1.0, "maxY": 602.0, "series": [{"data": [[4.0, 271.6666666666667], [6.0, 213.0], [7.0, 296.0], [8.0, 248.5], [11.0, 291.0], [12.0, 290.0], [13.0, 293.0], [14.0, 292.0], [15.0, 300.0], [16.0, 304.0], [17.0, 302.0], [18.0, 297.0], [19.0, 285.0], [20.0, 295.0], [21.0, 293.0], [23.0, 298.5], [25.0, 291.0], [26.0, 295.0], [27.0, 295.5], [28.0, 300.0], [29.0, 300.0], [30.0, 300.0], [31.0, 300.0], [33.0, 302.0], [32.0, 302.0], [34.0, 292.0], [37.0, 295.0], [39.0, 293.0], [38.0, 340.0], [41.0, 484.0], [40.0, 294.0], [43.0, 475.5], [45.0, 458.5], [49.0, 468.0], [48.0, 473.5], [51.0, 457.5], [53.0, 453.0], [55.0, 488.0], [54.0, 438.0], [57.0, 445.5], [56.0, 441.0], [62.0, 441.0], [67.0, 451.0], [66.0, 452.0], [64.0, 435.0], [71.0, 446.5], [69.0, 425.5], [75.0, 426.0], [74.0, 427.0], [72.0, 446.0], [79.0, 423.0], [77.0, 424.5], [76.0, 426.0], [83.0, 433.0], [82.0, 435.0], [87.0, 441.5], [85.0, 433.5], [89.0, 443.0], [94.0, 446.5], [93.0, 442.5], [99.0, 447.6666666666667], [96.0, 452.3333333333333], [103.0, 450.0], [102.0, 456.0], [101.0, 463.0], [107.0, 459.6666666666667], [104.0, 474.0], [111.0, 467.0], [110.0, 462.0], [109.0, 458.0], [108.0, 452.0], [115.0, 464.5], [113.0, 464.0], [112.0, 463.0], [119.0, 462.0], [118.0, 465.0], [117.0, 463.0], [116.0, 466.0], [122.0, 465.0], [126.0, 463.0], [125.0, 466.0], [124.0, 464.5], [135.0, 442.0], [134.0, 444.0], [133.0, 452.0], [132.0, 461.0], [131.0, 457.0], [130.0, 470.0], [129.0, 464.0], [128.0, 462.0], [143.0, 440.0], [142.0, 440.0], [141.0, 441.0], [140.0, 443.0], [139.0, 438.0], [138.0, 466.0], [137.0, 445.0], [136.0, 446.0], [150.0, 450.5], [148.0, 446.0], [147.0, 449.0], [145.0, 441.0], [144.0, 442.0], [152.0, 334.6666666666667], [159.0, 443.0], [158.0, 449.0], [157.0, 447.0], [156.0, 443.0], [155.0, 444.0], [154.0, 443.0], [165.0, 458.0], [163.0, 449.0], [161.0, 448.0], [175.0, 448.0], [174.0, 448.0], [173.0, 450.0], [172.0, 450.0], [169.0, 454.2], [182.0, 446.5], [180.0, 444.5], [178.0, 448.0], [177.0, 446.0], [176.0, 449.0], [191.0, 447.0], [190.0, 444.0], [188.0, 449.0], [186.0, 446.0], [185.0, 445.0], [184.0, 446.0], [199.0, 443.0], [198.0, 442.0], [196.0, 445.0], [195.0, 443.0], [194.0, 444.0], [193.0, 447.0], [192.0, 447.0], [207.0, 464.0], [206.0, 438.5], [204.0, 441.0], [203.0, 440.0], [202.0, 441.0], [201.0, 441.0], [215.0, 459.0], [214.0, 460.0], [213.0, 463.0], [211.0, 464.0], [209.0, 463.5], [223.0, 426.0], [222.0, 427.0], [221.0, 426.0], [220.0, 432.0], [219.0, 428.0], [218.0, 458.0], [217.0, 458.0], [216.0, 458.0], [230.0, 421.0], [229.0, 429.0], [228.0, 436.0], [227.0, 426.0], [225.0, 425.5], [237.0, 423.0], [235.0, 418.5], [233.0, 428.0], [247.0, 422.0], [246.0, 422.0], [245.0, 418.0], [244.0, 430.3333333333333], [243.0, 424.0], [242.0, 434.0], [241.0, 430.0], [254.0, 441.0], [253.0, 427.0], [252.0, 427.0], [249.0, 426.0], [269.0, 431.0], [268.0, 433.0], [267.0, 438.2857142857143], [264.0, 440.0], [263.0, 443.5], [260.0, 426.0], [259.0, 437.5], [286.0, 433.0], [287.0, 435.0], [285.0, 434.0], [284.0, 427.0], [283.0, 435.5], [281.0, 432.0], [280.0, 440.5], [279.0, 442.5], [275.0, 441.0], [272.0, 447.6666666666667], [278.0, 445.0], [276.0, 445.0], [302.0, 431.0], [303.0, 448.0], [301.0, 431.0], [291.0, 432.0], [289.0, 432.0], [288.0, 433.0], [299.0, 431.0], [298.0, 433.0], [297.0, 431.0], [296.0, 432.0], [295.0, 432.0], [294.0, 431.5], [292.0, 433.0], [318.0, 446.5], [319.0, 448.0], [317.0, 446.6666666666667], [306.0, 442.0], [305.0, 445.0], [304.0, 445.0], [315.0, 447.0], [314.0, 447.0], [313.0, 448.0], [312.0, 447.0], [311.0, 448.0], [310.0, 426.0], [309.0, 448.0], [308.0, 434.5], [323.0, 454.0], [335.0, 447.0], [334.0, 447.3333333333333], [331.0, 450.0], [330.0, 447.0], [329.0, 447.5], [327.0, 446.0], [326.0, 445.0], [325.0, 446.0], [322.0, 447.5], [320.0, 447.0], [338.0, 425.0], [349.0, 420.0], [351.0, 425.75], [348.0, 419.0], [347.0, 420.0], [344.0, 445.0], [342.0, 422.0], [341.0, 423.0], [340.0, 424.0], [337.0, 424.0], [336.0, 439.0], [366.0, 433.0], [367.0, 421.0], [365.0, 422.0], [364.0, 423.0], [363.0, 422.5], [362.0, 420.0], [361.0, 416.0], [360.0, 418.0], [359.0, 441.25], [355.0, 431.6666666666667], [358.0, 440.0], [381.0, 421.0], [380.0, 421.0], [378.0, 421.0], [377.0, 423.0], [376.0, 422.0], [371.0, 425.0], [370.0, 430.0], [369.0, 420.5], [387.0, 588.0], [399.0, 581.9999999999999], [396.0, 585.0], [395.0, 428.0], [394.0, 427.0], [393.0, 421.0], [391.0, 508.0], [390.0, 593.0], [386.0, 509.5], [385.0, 602.0], [412.0, 435.5], [408.0, 427.0], [407.0, 425.0], [406.0, 536.5], [404.0, 575.0], [403.0, 576.5], [401.0, 426.0], [428.0, 429.0], [427.0, 430.0], [425.0, 442.0], [424.0, 437.0], [423.0, 444.0], [422.0, 439.0], [416.0, 445.0], [447.0, 533.6666666666666], [445.0, 557.0], [443.0, 553.0], [442.0, 490.0], [441.0, 530.6], [439.0, 564.8], [438.0, 575.0], [461.0, 422.0], [462.0, 420.0], [460.0, 543.0], [451.0, 549.0], [450.0, 558.0], [459.0, 494.0], [458.0, 533.5], [457.0, 515.2], [456.0, 544.4], [454.0, 542.0], [453.0, 545.0], [452.0, 546.0], [470.0, 534.5], [469.0, 535.0], [468.0, 535.5], [467.0, 419.0], [495.0, 516.0], [494.0, 515.0], [493.0, 527.6666666666666], [491.0, 548.0], [489.0, 535.5], [508.0, 504.0], [511.0, 502.0], [510.0, 503.0], [509.0, 476.0], [503.0, 477.3333333333333], [496.0, 514.0], [502.0, 417.0], [500.0, 418.0], [499.0, 509.6666666666667], [497.0, 497.3333333333333], [536.0, 476.0], [540.0, 458.3333333333333], [521.0, 590.0], [525.0, 484.6666666666667], [524.0, 482.0], [543.0, 461.5], [538.0, 473.0], [531.0, 478.0], [530.0, 481.25], [527.0, 482.25], [515.0, 498.75], [514.0, 485.9166666666667], [517.0, 463.5], [516.0, 477.0], [519.0, 450.6666666666667], [518.0, 492.0], [526.0, 482.0], [572.0, 434.5], [575.0, 421.0], [570.0, 431.3333333333333], [569.0, 440.0], [567.0, 437.0], [565.0, 433.6666666666667], [562.0, 428.5], [560.0, 418.0], [557.0, 441.5], [544.0, 456.0], [548.0, 442.0], [547.0, 462.0], [550.0, 456.3333333333333], [549.0, 439.5], [556.0, 446.0], [555.0, 445.5], [553.0, 427.0], [552.0, 457.6666666666667], [592.0, 408.0], [596.0, 414.375], [600.0, 485.06727480507976], [583.0, 419.57142857142856], [582.0, 429.0], [581.0, 417.0], [580.0, 418.0], [579.0, 421.85714285714283], [599.0, 429.25], [598.0, 424.0], [597.0, 423.4], [595.0, 426.9999999999999], [594.0, 419.3333333333333], [593.0, 409.7142857142857], [591.0, 418.61538461538464], [590.0, 410.2], [589.0, 410.5], [588.0, 414.73333333333335], [587.0, 416.0], [586.0, 412.0], [584.0, 412.28571428571433], [1.0, 294.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[599.7531212976088, 485.0267091151385]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 54283.53333333333, "minX": 1.62028188E12, "maxY": 385099.73333333334, "series": [{"data": [[1.62028194E12, 385099.73333333334], [1.62028242E12, 367269.6666666667], [1.62028224E12, 375210.8], [1.6202823E12, 371365.2], [1.62028212E12, 382896.93333333335], [1.62028218E12, 380630.93333333335], [1.620282E12, 380485.2], [1.62028248E12, 104434.6], [1.62028206E12, 373614.8], [1.62028188E12, 256180.8], [1.62028236E12, 378387.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62028194E12, 200451.96666666667], [1.62028242E12, 191180.0], [1.62028224E12, 195161.6], [1.6202823E12, 193162.9], [1.62028212E12, 199156.36666666667], [1.62028218E12, 198129.36666666667], [1.620282E12, 197902.9], [1.62028248E12, 54283.53333333333], [1.62028206E12, 194332.1], [1.62028188E12, 133146.6], [1.62028236E12, 196812.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62028248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 472.7490442847558, "minX": 1.62028188E12, "maxY": 515.6138602112251, "series": [{"data": [[1.62028194E12, 472.7490442847558], [1.62028242E12, 495.99659779614734], [1.62028224E12, 485.931198726255], [1.6202823E12, 490.6115905279908], [1.62028212E12, 475.7081939467689], [1.62028218E12, 478.47580377198113], [1.620282E12, 477.9970194137256], [1.62028248E12, 477.8953623750834], [1.62028206E12, 488.81893572909723], [1.62028188E12, 515.6138602112251], [1.62028236E12, 481.11993738209105]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62028248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 472.69845377753586, "minX": 1.62028188E12, "maxY": 515.5710810490189, "series": [{"data": [[1.62028194E12, 472.69845377753586], [1.62028242E12, 495.9453994490335], [1.62028224E12, 485.87574212003244], [1.6202823E12, 490.55291535451846], [1.62028212E12, 475.6610294992654], [1.62028218E12, 478.42455375536423], [1.620282E12, 477.95542426783123], [1.62028248E12, 477.83496652760147], [1.62028206E12, 488.7750992587816], [1.62028188E12, 515.5710810490189], [1.62028236E12, 481.06977615435244]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62028248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03138493091537174, "minX": 1.62028188E12, "maxY": 0.35696222855536897, "series": [{"data": [[1.62028194E12, 0.26061139501583025], [1.62028242E12, 0.29290633608815286], [1.62028224E12, 0.03138493091537174], [1.6202823E12, 0.03455891374585936], [1.62028212E12, 0.22000819791349857], [1.62028218E12, 0.3312909528303178], [1.620282E12, 0.0797972136840846], [1.62028248E12, 0.10924614339769077], [1.62028206E12, 0.14545306719785414], [1.62028188E12, 0.16120802183458177], [1.62028236E12, 0.35696222855536897]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62028248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 102.0, "minX": 1.62028188E12, "maxY": 3527.0, "series": [{"data": [[1.62028194E12, 1550.0], [1.62028242E12, 3527.0], [1.62028224E12, 1089.0], [1.6202823E12, 800.0], [1.62028212E12, 1599.0], [1.62028218E12, 1557.0], [1.620282E12, 1508.0], [1.62028248E12, 1553.0], [1.62028206E12, 1517.0], [1.62028188E12, 1849.0], [1.62028236E12, 1558.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62028194E12, 525.0], [1.62028242E12, 534.0], [1.62028224E12, 525.0], [1.6202823E12, 516.0], [1.62028212E12, 567.0], [1.62028218E12, 517.0], [1.620282E12, 509.0], [1.62028248E12, 517.0], [1.62028206E12, 521.0], [1.62028188E12, 539.0], [1.62028236E12, 553.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62028194E12, 555.0], [1.62028242E12, 605.0], [1.62028224E12, 570.0], [1.6202823E12, 558.0], [1.62028212E12, 604.0], [1.62028218E12, 550.0], [1.620282E12, 560.0], [1.62028248E12, 541.0], [1.62028206E12, 543.0], [1.62028188E12, 582.0], [1.62028236E12, 606.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62028194E12, 535.0], [1.62028242E12, 553.0], [1.62028224E12, 541.0], [1.6202823E12, 534.0], [1.62028212E12, 581.0], [1.62028218E12, 530.0], [1.620282E12, 527.0], [1.62028248E12, 525.0], [1.62028206E12, 528.0], [1.62028188E12, 560.0], [1.62028236E12, 566.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62028194E12, 177.0], [1.62028242E12, 162.0], [1.62028224E12, 145.0], [1.6202823E12, 140.0], [1.62028212E12, 141.0], [1.62028218E12, 155.0], [1.620282E12, 138.0], [1.62028248E12, 146.0], [1.62028206E12, 135.0], [1.62028188E12, 102.0], [1.62028236E12, 145.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62028194E12, 481.0], [1.62028242E12, 484.0], [1.62028224E12, 462.0], [1.6202823E12, 455.0], [1.62028212E12, 439.0], [1.62028218E12, 465.0], [1.620282E12, 456.0], [1.62028248E12, 475.0], [1.62028206E12, 479.0], [1.62028188E12, 461.0], [1.62028236E12, 497.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62028248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 337.0, "minX": 2.0, "maxY": 1464.0, "series": [{"data": [[2.0, 346.0], [412.0, 1464.0], [596.0, 930.5], [620.0, 445.0], [657.0, 745.0], [710.0, 931.0], [724.0, 832.0], [811.0, 863.0], [938.0, 648.0], [932.0, 466.0], [1002.0, 673.0], [1001.0, 590.0], [1013.0, 556.0], [1009.0, 719.0], [1006.0, 576.5], [992.0, 578.0], [994.0, 631.0], [1015.0, 570.0], [1061.0, 552.0], [1070.0, 577.0], [1059.0, 535.0], [1082.0, 550.0], [1083.0, 545.0], [1081.0, 532.0], [1058.0, 563.0], [1078.0, 561.0], [1073.0, 554.0], [1039.0, 587.0], [1036.0, 566.0], [1072.0, 545.0], [1075.0, 546.0], [1064.0, 541.0], [1067.0, 540.0], [1071.0, 542.0], [1042.0, 575.0], [1045.0, 567.0], [1040.0, 575.0], [1047.0, 590.0], [1050.0, 596.0], [1046.0, 556.0], [1051.0, 564.0], [1033.0, 573.0], [1055.0, 539.0], [1026.0, 568.0], [1062.0, 539.0], [1063.0, 557.0], [1096.0, 545.0], [1147.0, 515.0], [1106.0, 555.0], [1114.0, 540.5], [1109.0, 537.0], [1107.0, 537.0], [1115.0, 506.0], [1116.0, 523.0], [1092.0, 555.0], [1095.0, 558.0], [1094.0, 558.0], [1119.0, 539.0], [1118.0, 532.0], [1117.0, 531.0], [1089.0, 556.0], [1090.0, 538.0], [1104.0, 544.0], [1105.0, 566.0], [1124.0, 531.0], [1149.0, 556.0], [1148.0, 534.0], [1150.0, 519.0], [1122.0, 529.0], [1151.0, 526.0], [1100.0, 547.0], [1102.0, 568.0], [1099.0, 537.0], [1098.0, 549.0], [1097.0, 536.0], [1131.0, 526.0], [1129.0, 516.0], [1130.0, 547.0], [1135.0, 535.0], [1134.0, 525.0], [1133.0, 529.0], [1126.0, 511.0], [1127.0, 539.0], [1125.0, 506.0], [1128.0, 531.5], [1137.0, 532.0], [1141.0, 527.0], [1140.0, 548.0], [1139.0, 522.0], [1138.0, 514.0], [1145.0, 551.0], [1146.0, 535.0], [1207.0, 498.0], [1174.0, 505.0], [1173.0, 504.0], [1172.0, 506.0], [1169.0, 502.0], [1170.0, 507.0], [1168.0, 496.0], [1159.0, 483.0], [1158.0, 501.0], [1157.0, 526.0], [1154.0, 521.0], [1153.0, 518.0], [1155.0, 522.0], [1161.0, 506.0], [1160.0, 508.0], [1183.0, 512.0], [1152.0, 517.0], [1177.0, 519.0], [1178.0, 519.0], [1179.0, 507.0], [1176.0, 501.0], [1175.0, 509.0], [1182.0, 494.0], [1199.0, 497.0], [1198.0, 497.0], [1195.0, 507.0], [1196.0, 509.0], [1194.0, 499.0], [1192.0, 495.0], [1191.0, 527.0], [1212.0, 493.0], [1214.0, 482.0], [1215.0, 485.0], [1213.0, 500.0], [1186.0, 499.0], [1185.0, 518.0], [1189.0, 505.0], [1188.0, 510.0], [1190.0, 491.0], [1187.0, 514.0], [1184.0, 511.0], [1197.0, 511.0], [1209.0, 488.0], [1210.0, 485.5], [1211.0, 484.0], [1163.0, 524.0], [1165.0, 514.0], [1164.0, 511.0], [1202.0, 500.0], [1203.0, 507.0], [1206.0, 486.5], [1204.0, 486.0], [1201.0, 502.0], [1167.0, 516.0], [1200.0, 505.0], [1166.0, 508.0], [1162.0, 516.0], [1265.0, 461.0], [1218.0, 495.0], [1219.0, 479.0], [1217.0, 490.0], [1216.0, 475.0], [1264.0, 491.0], [1231.0, 488.0], [1230.0, 500.0], [1228.0, 482.0], [1226.0, 480.0], [1222.0, 497.0], [1223.0, 478.0], [1224.0, 474.0], [1225.0, 486.0], [1229.0, 485.0], [1220.0, 495.0], [1263.0, 462.0], [1261.0, 474.0], [1262.0, 455.0], [1237.0, 482.0], [1238.0, 476.5], [1240.0, 488.0], [1239.0, 468.0], [1235.0, 491.0], [1233.0, 499.0], [1232.0, 483.0], [1252.0, 485.0], [1251.0, 477.0], [1249.0, 484.0], [1248.0, 486.0], [1250.0, 478.0], [1255.0, 485.0], [1257.0, 475.0], [1256.0, 453.0], [1253.0, 481.0], [1254.0, 469.0], [1258.0, 473.0], [1278.0, 467.0], [1273.0, 475.0], [1267.0, 472.0], [1266.0, 465.0], [1272.0, 491.0], [1271.0, 463.0], [1270.0, 488.0], [1269.0, 473.0], [1268.0, 464.0], [1275.0, 472.0], [1276.0, 453.0], [1277.0, 476.0], [1274.0, 469.0], [1247.0, 479.0], [1246.0, 488.0], [1242.0, 483.0], [1243.0, 467.0], [1244.0, 425.5], [1245.0, 480.0], [1241.0, 480.0], [1290.0, 471.0], [1339.0, 459.0], [1337.0, 455.0], [1338.0, 460.0], [1335.0, 423.0], [1332.0, 455.0], [1331.0, 444.0], [1330.0, 446.0], [1292.0, 461.0], [1294.0, 453.0], [1295.0, 454.0], [1291.0, 459.0], [1287.0, 459.0], [1288.0, 473.0], [1289.0, 471.0], [1286.0, 468.0], [1329.0, 466.0], [1319.0, 451.0], [1317.0, 450.0], [1313.0, 457.0], [1316.0, 445.0], [1315.0, 452.0], [1314.0, 472.0], [1321.0, 453.0], [1324.0, 442.0], [1325.0, 447.0], [1327.0, 449.0], [1326.0, 452.0], [1312.0, 442.0], [1304.0, 466.0], [1306.0, 465.0], [1305.0, 458.0], [1307.0, 455.0], [1303.0, 467.0], [1302.0, 454.0], [1299.0, 476.0], [1298.0, 455.0], [1301.0, 463.0], [1285.0, 470.0], [1281.0, 465.0], [1310.0, 484.0], [1280.0, 475.0], [1308.0, 444.0], [1284.0, 482.0], [1282.0, 457.0], [1342.0, 448.0], [1343.0, 453.0], [1340.0, 457.0], [1393.0, 430.0], [1347.0, 443.0], [1390.0, 441.0], [1391.0, 426.0], [1378.0, 440.0], [1380.0, 429.0], [1381.0, 444.0], [1377.0, 428.0], [1403.0, 434.0], [1404.0, 425.0], [1402.0, 427.0], [1396.0, 431.0], [1397.0, 456.0], [1398.0, 415.0], [1399.0, 425.0], [1400.0, 425.0], [1401.0, 422.0], [1406.0, 423.0], [1387.0, 424.0], [1371.0, 440.0], [1369.0, 421.0], [1373.0, 434.0], [1346.0, 444.0], [1345.0, 434.0], [1375.0, 442.0], [1344.0, 453.0], [1357.0, 450.0], [1354.0, 433.0], [1355.0, 451.0], [1358.0, 444.0], [1359.0, 446.0], [1352.0, 444.0], [1350.0, 443.0], [1348.0, 442.0], [1349.0, 443.0], [1383.0, 423.0], [1385.0, 434.0], [1384.0, 432.0], [1368.0, 441.0], [1361.0, 440.0], [1364.0, 448.0], [1363.0, 452.0], [1362.0, 470.0], [1367.0, 437.0], [1366.0, 451.0], [1365.0, 442.0], [1420.0, 423.0], [1435.0, 424.0], [1436.0, 414.0], [1463.0, 416.0], [1464.0, 417.0], [1471.0, 403.0], [1447.0, 401.0], [1448.0, 406.0], [1439.0, 426.0], [1410.0, 440.0], [1408.0, 427.0], [1441.0, 430.0], [1438.0, 425.0], [1450.0, 414.0], [1454.0, 403.5], [1451.0, 421.0], [1421.0, 421.0], [1422.0, 415.0], [1423.0, 418.0], [1456.0, 412.5], [1459.0, 416.0], [1460.0, 413.0], [1483.0, 409.0], [1497.0, 408.0], [1494.0, 411.0], [1489.0, 412.0], [1495.0, 411.0], [1529.0, 394.0], [1521.0, 391.0], [1509.0, 426.0], [1479.0, 396.0], [1476.0, 421.0], [1519.0, 401.0], [1508.0, 398.5], [1554.0, 379.0], [1593.0, 415.0], [1561.0, 406.0], [1630.0, 374.0], [1636.0, 356.0], [1698.0, 337.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1698.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 337.0, "minX": 2.0, "maxY": 1464.0, "series": [{"data": [[2.0, 344.5], [412.0, 1464.0], [596.0, 930.0], [620.0, 445.0], [657.0, 745.0], [710.0, 931.0], [724.0, 832.0], [811.0, 863.0], [938.0, 647.5], [932.0, 466.0], [1002.0, 673.0], [1001.0, 590.0], [1013.0, 556.0], [1009.0, 719.0], [1006.0, 576.5], [992.0, 578.0], [994.0, 631.0], [1015.0, 570.0], [1061.0, 552.0], [1070.0, 577.0], [1059.0, 535.0], [1082.0, 550.0], [1083.0, 545.0], [1081.0, 532.0], [1058.0, 563.0], [1078.0, 561.0], [1073.0, 553.0], [1039.0, 587.0], [1036.0, 566.0], [1072.0, 545.0], [1075.0, 546.0], [1064.0, 541.0], [1067.0, 540.0], [1071.0, 542.0], [1042.0, 575.0], [1045.0, 567.0], [1040.0, 575.0], [1047.0, 590.0], [1050.0, 596.0], [1046.0, 556.0], [1051.0, 564.0], [1033.0, 572.5], [1055.0, 539.0], [1026.0, 568.0], [1062.0, 539.0], [1063.0, 557.0], [1096.0, 545.0], [1147.0, 515.0], [1106.0, 555.0], [1114.0, 540.0], [1109.0, 537.0], [1107.0, 537.0], [1115.0, 506.0], [1116.0, 523.0], [1092.0, 554.0], [1095.0, 558.0], [1094.0, 558.0], [1119.0, 539.0], [1118.0, 532.0], [1117.0, 531.0], [1089.0, 556.0], [1090.0, 538.0], [1104.0, 544.0], [1105.0, 566.0], [1124.0, 531.0], [1149.0, 556.0], [1148.0, 534.0], [1150.0, 519.0], [1122.0, 529.0], [1151.0, 526.0], [1100.0, 547.0], [1102.0, 568.0], [1099.0, 537.0], [1098.0, 549.0], [1097.0, 536.0], [1131.0, 526.0], [1129.0, 516.0], [1130.0, 547.0], [1135.0, 535.0], [1134.0, 525.0], [1133.0, 529.0], [1126.0, 511.0], [1127.0, 539.0], [1125.0, 506.0], [1128.0, 531.5], [1137.0, 532.0], [1141.0, 527.0], [1140.0, 548.0], [1139.0, 522.0], [1138.0, 514.0], [1145.0, 551.0], [1146.0, 535.0], [1207.0, 498.0], [1174.0, 505.0], [1173.0, 504.0], [1172.0, 506.0], [1169.0, 502.0], [1170.0, 507.0], [1168.0, 496.0], [1159.0, 483.0], [1158.0, 501.0], [1157.0, 526.0], [1154.0, 521.0], [1153.0, 518.0], [1155.0, 522.0], [1161.0, 506.0], [1160.0, 508.0], [1183.0, 512.0], [1152.0, 517.0], [1177.0, 519.0], [1178.0, 519.0], [1179.0, 507.0], [1176.0, 501.0], [1175.0, 509.0], [1182.0, 494.0], [1199.0, 497.0], [1198.0, 497.0], [1195.0, 507.0], [1196.0, 509.0], [1194.0, 499.0], [1192.0, 495.0], [1191.0, 527.0], [1212.0, 493.0], [1214.0, 482.0], [1215.0, 485.0], [1213.0, 500.0], [1186.0, 499.0], [1185.0, 518.0], [1189.0, 505.0], [1188.0, 510.0], [1190.0, 491.0], [1187.0, 514.0], [1184.0, 511.0], [1197.0, 511.0], [1209.0, 488.0], [1210.0, 485.5], [1211.0, 484.0], [1163.0, 524.0], [1165.0, 514.0], [1164.0, 511.0], [1202.0, 500.0], [1203.0, 507.0], [1206.0, 486.5], [1204.0, 486.0], [1201.0, 502.0], [1167.0, 516.0], [1200.0, 505.0], [1166.0, 508.0], [1162.0, 516.0], [1265.0, 461.0], [1218.0, 495.0], [1219.0, 479.0], [1217.0, 490.0], [1216.0, 475.0], [1264.0, 491.0], [1231.0, 488.0], [1230.0, 500.0], [1228.0, 482.0], [1226.0, 480.0], [1222.0, 497.0], [1223.0, 478.0], [1224.0, 474.0], [1225.0, 486.0], [1229.0, 485.0], [1220.0, 495.0], [1263.0, 462.0], [1261.0, 474.0], [1262.0, 455.0], [1237.0, 482.0], [1238.0, 476.0], [1240.0, 487.5], [1239.0, 468.0], [1235.0, 491.0], [1233.0, 499.0], [1232.0, 483.0], [1252.0, 485.0], [1251.0, 477.0], [1249.0, 484.0], [1248.0, 486.0], [1250.0, 478.0], [1255.0, 485.0], [1257.0, 475.0], [1256.0, 453.0], [1253.0, 481.0], [1254.0, 469.0], [1258.0, 473.0], [1278.0, 467.0], [1273.0, 474.0], [1267.0, 472.0], [1266.0, 464.0], [1272.0, 491.0], [1271.0, 463.0], [1270.0, 488.0], [1269.0, 473.0], [1268.0, 464.0], [1275.0, 472.0], [1276.0, 453.0], [1277.0, 476.0], [1274.0, 469.0], [1247.0, 479.0], [1246.0, 488.0], [1242.0, 483.0], [1243.0, 467.0], [1244.0, 425.5], [1245.0, 480.0], [1241.0, 480.0], [1290.0, 471.0], [1339.0, 459.0], [1337.0, 455.0], [1338.0, 460.0], [1335.0, 423.0], [1332.0, 455.0], [1331.0, 444.0], [1330.0, 446.0], [1292.0, 461.0], [1294.0, 453.0], [1295.0, 454.0], [1291.0, 459.0], [1287.0, 459.0], [1288.0, 473.0], [1289.0, 471.0], [1286.0, 468.0], [1329.0, 466.0], [1319.0, 451.0], [1317.0, 449.5], [1313.0, 457.0], [1316.0, 445.0], [1315.0, 452.0], [1314.0, 472.0], [1321.0, 453.0], [1324.0, 442.0], [1325.0, 447.0], [1327.0, 449.0], [1326.0, 452.0], [1312.0, 442.0], [1304.0, 466.0], [1306.0, 465.0], [1305.0, 458.0], [1307.0, 455.0], [1303.0, 467.0], [1302.0, 454.0], [1299.0, 476.0], [1298.0, 455.0], [1301.0, 463.0], [1285.0, 470.0], [1281.0, 465.0], [1310.0, 484.0], [1280.0, 475.0], [1308.0, 444.0], [1284.0, 481.5], [1282.0, 457.0], [1342.0, 448.0], [1343.0, 453.0], [1340.0, 457.0], [1393.0, 430.0], [1347.0, 443.0], [1390.0, 441.0], [1391.0, 426.0], [1378.0, 440.0], [1380.0, 428.0], [1381.0, 444.0], [1377.0, 428.0], [1403.0, 434.0], [1404.0, 425.0], [1402.0, 427.0], [1396.0, 431.0], [1397.0, 456.0], [1398.0, 415.0], [1399.0, 425.0], [1400.0, 425.0], [1401.0, 422.0], [1406.0, 423.0], [1387.0, 424.0], [1371.0, 440.0], [1369.0, 421.0], [1373.0, 434.0], [1346.0, 443.0], [1345.0, 434.0], [1375.0, 441.0], [1344.0, 453.0], [1357.0, 450.0], [1354.0, 433.0], [1355.0, 451.0], [1358.0, 444.0], [1359.0, 445.0], [1352.0, 444.0], [1350.0, 443.0], [1348.0, 442.0], [1349.0, 443.0], [1383.0, 423.0], [1385.0, 434.0], [1384.0, 432.0], [1368.0, 441.0], [1361.0, 440.0], [1364.0, 448.0], [1363.0, 452.0], [1362.0, 470.0], [1367.0, 437.0], [1366.0, 451.0], [1365.0, 442.0], [1420.0, 423.0], [1435.0, 424.0], [1436.0, 414.0], [1463.0, 416.0], [1464.0, 417.0], [1471.0, 403.0], [1447.0, 401.0], [1448.0, 406.0], [1439.0, 426.0], [1410.0, 440.0], [1408.0, 427.0], [1441.0, 430.0], [1438.0, 425.0], [1450.0, 414.0], [1454.0, 403.5], [1451.0, 421.0], [1421.0, 421.0], [1422.0, 415.0], [1423.0, 417.0], [1456.0, 412.5], [1459.0, 416.0], [1460.0, 413.0], [1483.0, 409.0], [1497.0, 408.0], [1494.0, 411.0], [1489.0, 412.0], [1495.0, 411.0], [1529.0, 394.0], [1521.0, 391.0], [1509.0, 426.0], [1479.0, 396.0], [1476.0, 421.0], [1519.0, 401.0], [1508.0, 398.0], [1554.0, 379.0], [1593.0, 415.0], [1561.0, 404.0], [1630.0, 374.0], [1636.0, 356.0], [1698.0, 337.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1698.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 333.56666666666666, "minX": 1.62028188E12, "maxY": 1268.6333333333334, "series": [{"data": [[1.62028194E12, 1268.6333333333334], [1.62028242E12, 1210.0], [1.62028224E12, 1235.2], [1.6202823E12, 1222.55], [1.62028212E12, 1260.4833333333333], [1.62028218E12, 1253.9833333333333], [1.620282E12, 1252.6], [1.62028248E12, 333.56666666666666], [1.62028206E12, 1229.95], [1.62028188E12, 852.7], [1.62028236E12, 1245.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62028248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 343.56666666666666, "minX": 1.62028188E12, "maxY": 1268.6833333333334, "series": [{"data": [[1.62028194E12, 1268.6833333333334], [1.62028242E12, 1210.0], [1.62028224E12, 1235.2], [1.6202823E12, 1222.55], [1.62028212E12, 1260.4833333333333], [1.62028218E12, 1253.9833333333333], [1.620282E12, 1252.55], [1.62028248E12, 343.56666666666666], [1.62028206E12, 1229.95], [1.62028188E12, 842.7], [1.62028236E12, 1245.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62028248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 343.56666666666666, "minX": 1.62028188E12, "maxY": 1268.6833333333334, "series": [{"data": [[1.62028194E12, 1268.6833333333334], [1.62028242E12, 1210.0], [1.62028224E12, 1235.2], [1.6202823E12, 1222.55], [1.62028212E12, 1260.4833333333333], [1.62028218E12, 1253.9833333333333], [1.620282E12, 1252.55], [1.62028248E12, 343.56666666666666], [1.62028206E12, 1229.95], [1.62028188E12, 842.7], [1.62028236E12, 1245.65]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62028248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 343.56666666666666, "minX": 1.62028188E12, "maxY": 1268.6833333333334, "series": [{"data": [[1.62028194E12, 1268.6833333333334], [1.62028242E12, 1210.0], [1.62028224E12, 1235.2], [1.6202823E12, 1222.55], [1.62028212E12, 1260.4833333333333], [1.62028218E12, 1253.9833333333333], [1.620282E12, 1252.55], [1.62028248E12, 343.56666666666666], [1.62028206E12, 1229.95], [1.62028188E12, 842.7], [1.62028236E12, 1245.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62028248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

