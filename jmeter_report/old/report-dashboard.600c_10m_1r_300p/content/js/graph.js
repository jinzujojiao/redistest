/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 5126.0, "series": [{"data": [[0.0, 40.0], [0.1, 496.0], [0.2, 622.0], [0.3, 652.0], [0.4, 669.0], [0.5, 681.0], [0.6, 692.0], [0.7, 700.0], [0.8, 708.0], [0.9, 716.0], [1.0, 722.0], [1.1, 728.0], [1.2, 733.0], [1.3, 738.0], [1.4, 743.0], [1.5, 747.0], [1.6, 750.0], [1.7, 754.0], [1.8, 758.0], [1.9, 761.0], [2.0, 765.0], [2.1, 768.0], [2.2, 771.0], [2.3, 774.0], [2.4, 777.0], [2.5, 780.0], [2.6, 783.0], [2.7, 785.0], [2.8, 788.0], [2.9, 790.0], [3.0, 792.0], [3.1, 795.0], [3.2, 797.0], [3.3, 799.0], [3.4, 802.0], [3.5, 804.0], [3.6, 806.0], [3.7, 808.0], [3.8, 810.0], [3.9, 812.0], [4.0, 814.0], [4.1, 815.0], [4.2, 817.0], [4.3, 819.0], [4.4, 821.0], [4.5, 823.0], [4.6, 825.0], [4.7, 826.0], [4.8, 828.0], [4.9, 830.0], [5.0, 831.0], [5.1, 833.0], [5.2, 834.0], [5.3, 836.0], [5.4, 838.0], [5.5, 839.0], [5.6, 841.0], [5.7, 842.0], [5.8, 844.0], [5.9, 845.0], [6.0, 847.0], [6.1, 848.0], [6.2, 850.0], [6.3, 851.0], [6.4, 853.0], [6.5, 855.0], [6.6, 856.0], [6.7, 857.0], [6.8, 859.0], [6.9, 860.0], [7.0, 861.0], [7.1, 863.0], [7.2, 864.0], [7.3, 865.0], [7.4, 867.0], [7.5, 868.0], [7.6, 869.0], [7.7, 870.0], [7.8, 872.0], [7.9, 873.0], [8.0, 874.0], [8.1, 875.0], [8.2, 877.0], [8.3, 878.0], [8.4, 879.0], [8.5, 880.0], [8.6, 881.0], [8.7, 883.0], [8.8, 884.0], [8.9, 885.0], [9.0, 886.0], [9.1, 887.0], [9.2, 889.0], [9.3, 890.0], [9.4, 891.0], [9.5, 892.0], [9.6, 893.0], [9.7, 894.0], [9.8, 895.0], [9.9, 896.0], [10.0, 897.0], [10.1, 898.0], [10.2, 899.0], [10.3, 901.0], [10.4, 902.0], [10.5, 903.0], [10.6, 904.0], [10.7, 905.0], [10.8, 906.0], [10.9, 907.0], [11.0, 908.0], [11.1, 909.0], [11.2, 910.0], [11.3, 911.0], [11.4, 912.0], [11.5, 913.0], [11.6, 914.0], [11.7, 915.0], [11.8, 916.0], [11.9, 917.0], [12.0, 918.0], [12.1, 919.0], [12.2, 920.0], [12.3, 921.0], [12.4, 922.0], [12.5, 923.0], [12.6, 924.0], [12.7, 925.0], [12.8, 926.0], [12.9, 927.0], [13.0, 928.0], [13.1, 930.0], [13.2, 930.0], [13.3, 931.0], [13.4, 932.0], [13.5, 933.0], [13.6, 934.0], [13.7, 935.0], [13.8, 936.0], [13.9, 937.0], [14.0, 938.0], [14.1, 939.0], [14.2, 940.0], [14.3, 941.0], [14.4, 942.0], [14.5, 943.0], [14.6, 944.0], [14.7, 945.0], [14.8, 945.0], [14.9, 946.0], [15.0, 947.0], [15.1, 948.0], [15.2, 949.0], [15.3, 950.0], [15.4, 951.0], [15.5, 952.0], [15.6, 953.0], [15.7, 954.0], [15.8, 954.0], [15.9, 955.0], [16.0, 956.0], [16.1, 957.0], [16.2, 958.0], [16.3, 959.0], [16.4, 960.0], [16.5, 961.0], [16.6, 962.0], [16.7, 962.0], [16.8, 963.0], [16.9, 964.0], [17.0, 965.0], [17.1, 966.0], [17.2, 967.0], [17.3, 968.0], [17.4, 968.0], [17.5, 969.0], [17.6, 970.0], [17.7, 971.0], [17.8, 972.0], [17.9, 973.0], [18.0, 973.0], [18.1, 974.0], [18.2, 975.0], [18.3, 976.0], [18.4, 977.0], [18.5, 978.0], [18.6, 979.0], [18.7, 979.0], [18.8, 980.0], [18.9, 981.0], [19.0, 982.0], [19.1, 982.0], [19.2, 983.0], [19.3, 984.0], [19.4, 985.0], [19.5, 986.0], [19.6, 987.0], [19.7, 987.0], [19.8, 988.0], [19.9, 989.0], [20.0, 990.0], [20.1, 991.0], [20.2, 991.0], [20.3, 992.0], [20.4, 993.0], [20.5, 994.0], [20.6, 995.0], [20.7, 995.0], [20.8, 996.0], [20.9, 997.0], [21.0, 998.0], [21.1, 998.0], [21.2, 999.0], [21.3, 1000.0], [21.4, 1001.0], [21.5, 1001.0], [21.6, 1002.0], [21.7, 1003.0], [21.8, 1004.0], [21.9, 1004.0], [22.0, 1005.0], [22.1, 1006.0], [22.2, 1007.0], [22.3, 1007.0], [22.4, 1008.0], [22.5, 1009.0], [22.6, 1010.0], [22.7, 1010.0], [22.8, 1011.0], [22.9, 1012.0], [23.0, 1013.0], [23.1, 1013.0], [23.2, 1014.0], [23.3, 1015.0], [23.4, 1016.0], [23.5, 1017.0], [23.6, 1017.0], [23.7, 1018.0], [23.8, 1019.0], [23.9, 1020.0], [24.0, 1020.0], [24.1, 1021.0], [24.2, 1022.0], [24.3, 1023.0], [24.4, 1023.0], [24.5, 1024.0], [24.6, 1025.0], [24.7, 1026.0], [24.8, 1026.0], [24.9, 1027.0], [25.0, 1028.0], [25.1, 1028.0], [25.2, 1029.0], [25.3, 1030.0], [25.4, 1031.0], [25.5, 1031.0], [25.6, 1032.0], [25.7, 1033.0], [25.8, 1034.0], [25.9, 1034.0], [26.0, 1035.0], [26.1, 1036.0], [26.2, 1037.0], [26.3, 1037.0], [26.4, 1038.0], [26.5, 1039.0], [26.6, 1040.0], [26.7, 1040.0], [26.8, 1041.0], [26.9, 1042.0], [27.0, 1043.0], [27.1, 1044.0], [27.2, 1044.0], [27.3, 1045.0], [27.4, 1046.0], [27.5, 1046.0], [27.6, 1047.0], [27.7, 1048.0], [27.8, 1049.0], [27.9, 1049.0], [28.0, 1050.0], [28.1, 1051.0], [28.2, 1052.0], [28.3, 1052.0], [28.4, 1053.0], [28.5, 1054.0], [28.6, 1055.0], [28.7, 1055.0], [28.8, 1056.0], [28.9, 1057.0], [29.0, 1057.0], [29.1, 1058.0], [29.2, 1059.0], [29.3, 1059.0], [29.4, 1060.0], [29.5, 1061.0], [29.6, 1062.0], [29.7, 1063.0], [29.8, 1063.0], [29.9, 1064.0], [30.0, 1065.0], [30.1, 1066.0], [30.2, 1066.0], [30.3, 1067.0], [30.4, 1068.0], [30.5, 1069.0], [30.6, 1069.0], [30.7, 1070.0], [30.8, 1071.0], [30.9, 1072.0], [31.0, 1072.0], [31.1, 1073.0], [31.2, 1074.0], [31.3, 1075.0], [31.4, 1075.0], [31.5, 1076.0], [31.6, 1077.0], [31.7, 1078.0], [31.8, 1078.0], [31.9, 1079.0], [32.0, 1080.0], [32.1, 1080.0], [32.2, 1081.0], [32.3, 1082.0], [32.4, 1083.0], [32.5, 1083.0], [32.6, 1084.0], [32.7, 1085.0], [32.8, 1086.0], [32.9, 1086.0], [33.0, 1087.0], [33.1, 1088.0], [33.2, 1089.0], [33.3, 1090.0], [33.4, 1090.0], [33.5, 1091.0], [33.6, 1092.0], [33.7, 1092.0], [33.8, 1093.0], [33.9, 1094.0], [34.0, 1095.0], [34.1, 1095.0], [34.2, 1096.0], [34.3, 1097.0], [34.4, 1098.0], [34.5, 1098.0], [34.6, 1099.0], [34.7, 1100.0], [34.8, 1100.0], [34.9, 1101.0], [35.0, 1102.0], [35.1, 1103.0], [35.2, 1103.0], [35.3, 1104.0], [35.4, 1105.0], [35.5, 1106.0], [35.6, 1106.0], [35.7, 1107.0], [35.8, 1108.0], [35.9, 1109.0], [36.0, 1109.0], [36.1, 1110.0], [36.2, 1111.0], [36.3, 1111.0], [36.4, 1112.0], [36.5, 1113.0], [36.6, 1114.0], [36.7, 1114.0], [36.8, 1115.0], [36.9, 1116.0], [37.0, 1117.0], [37.1, 1117.0], [37.2, 1118.0], [37.3, 1119.0], [37.4, 1119.0], [37.5, 1120.0], [37.6, 1121.0], [37.7, 1122.0], [37.8, 1122.0], [37.9, 1123.0], [38.0, 1124.0], [38.1, 1124.0], [38.2, 1125.0], [38.3, 1126.0], [38.4, 1127.0], [38.5, 1127.0], [38.6, 1128.0], [38.7, 1129.0], [38.8, 1130.0], [38.9, 1130.0], [39.0, 1131.0], [39.1, 1132.0], [39.2, 1133.0], [39.3, 1133.0], [39.4, 1134.0], [39.5, 1135.0], [39.6, 1136.0], [39.7, 1137.0], [39.8, 1137.0], [39.9, 1138.0], [40.0, 1139.0], [40.1, 1140.0], [40.2, 1140.0], [40.3, 1141.0], [40.4, 1142.0], [40.5, 1142.0], [40.6, 1143.0], [40.7, 1144.0], [40.8, 1144.0], [40.9, 1145.0], [41.0, 1146.0], [41.1, 1147.0], [41.2, 1147.0], [41.3, 1148.0], [41.4, 1149.0], [41.5, 1150.0], [41.6, 1150.0], [41.7, 1151.0], [41.8, 1152.0], [41.9, 1153.0], [42.0, 1153.0], [42.1, 1154.0], [42.2, 1155.0], [42.3, 1156.0], [42.4, 1156.0], [42.5, 1157.0], [42.6, 1158.0], [42.7, 1158.0], [42.8, 1159.0], [42.9, 1160.0], [43.0, 1161.0], [43.1, 1162.0], [43.2, 1162.0], [43.3, 1163.0], [43.4, 1164.0], [43.5, 1165.0], [43.6, 1165.0], [43.7, 1166.0], [43.8, 1167.0], [43.9, 1168.0], [44.0, 1168.0], [44.1, 1169.0], [44.2, 1170.0], [44.3, 1170.0], [44.4, 1171.0], [44.5, 1172.0], [44.6, 1173.0], [44.7, 1173.0], [44.8, 1174.0], [44.9, 1175.0], [45.0, 1176.0], [45.1, 1176.0], [45.2, 1177.0], [45.3, 1178.0], [45.4, 1179.0], [45.5, 1179.0], [45.6, 1180.0], [45.7, 1181.0], [45.8, 1182.0], [45.9, 1182.0], [46.0, 1183.0], [46.1, 1184.0], [46.2, 1185.0], [46.3, 1186.0], [46.4, 1186.0], [46.5, 1187.0], [46.6, 1188.0], [46.7, 1188.0], [46.8, 1189.0], [46.9, 1190.0], [47.0, 1190.0], [47.1, 1191.0], [47.2, 1192.0], [47.3, 1192.0], [47.4, 1193.0], [47.5, 1194.0], [47.6, 1195.0], [47.7, 1195.0], [47.8, 1196.0], [47.9, 1197.0], [48.0, 1198.0], [48.1, 1198.0], [48.2, 1199.0], [48.3, 1200.0], [48.4, 1201.0], [48.5, 1201.0], [48.6, 1202.0], [48.7, 1203.0], [48.8, 1204.0], [48.9, 1204.0], [49.0, 1205.0], [49.1, 1206.0], [49.2, 1207.0], [49.3, 1207.0], [49.4, 1208.0], [49.5, 1209.0], [49.6, 1209.0], [49.7, 1210.0], [49.8, 1211.0], [49.9, 1212.0], [50.0, 1212.0], [50.1, 1213.0], [50.2, 1214.0], [50.3, 1214.0], [50.4, 1215.0], [50.5, 1216.0], [50.6, 1217.0], [50.7, 1217.0], [50.8, 1218.0], [50.9, 1219.0], [51.0, 1219.0], [51.1, 1220.0], [51.2, 1221.0], [51.3, 1222.0], [51.4, 1222.0], [51.5, 1223.0], [51.6, 1224.0], [51.7, 1224.0], [51.8, 1225.0], [51.9, 1226.0], [52.0, 1226.0], [52.1, 1227.0], [52.2, 1228.0], [52.3, 1228.0], [52.4, 1229.0], [52.5, 1230.0], [52.6, 1231.0], [52.7, 1231.0], [52.8, 1232.0], [52.9, 1233.0], [53.0, 1233.0], [53.1, 1234.0], [53.2, 1235.0], [53.3, 1235.0], [53.4, 1236.0], [53.5, 1237.0], [53.6, 1237.0], [53.7, 1238.0], [53.8, 1239.0], [53.9, 1239.0], [54.0, 1240.0], [54.1, 1241.0], [54.2, 1241.0], [54.3, 1242.0], [54.4, 1243.0], [54.5, 1243.0], [54.6, 1244.0], [54.7, 1245.0], [54.8, 1245.0], [54.9, 1246.0], [55.0, 1247.0], [55.1, 1247.0], [55.2, 1248.0], [55.3, 1248.0], [55.4, 1249.0], [55.5, 1250.0], [55.6, 1250.0], [55.7, 1251.0], [55.8, 1252.0], [55.9, 1252.0], [56.0, 1253.0], [56.1, 1254.0], [56.2, 1254.0], [56.3, 1255.0], [56.4, 1256.0], [56.5, 1256.0], [56.6, 1257.0], [56.7, 1258.0], [56.8, 1258.0], [56.9, 1259.0], [57.0, 1260.0], [57.1, 1260.0], [57.2, 1261.0], [57.3, 1262.0], [57.4, 1262.0], [57.5, 1263.0], [57.6, 1263.0], [57.7, 1264.0], [57.8, 1265.0], [57.9, 1265.0], [58.0, 1266.0], [58.1, 1267.0], [58.2, 1267.0], [58.3, 1268.0], [58.4, 1269.0], [58.5, 1269.0], [58.6, 1270.0], [58.7, 1270.0], [58.8, 1271.0], [58.9, 1272.0], [59.0, 1272.0], [59.1, 1273.0], [59.2, 1274.0], [59.3, 1274.0], [59.4, 1275.0], [59.5, 1276.0], [59.6, 1276.0], [59.7, 1277.0], [59.8, 1278.0], [59.9, 1278.0], [60.0, 1279.0], [60.1, 1280.0], [60.2, 1280.0], [60.3, 1281.0], [60.4, 1281.0], [60.5, 1282.0], [60.6, 1283.0], [60.7, 1283.0], [60.8, 1284.0], [60.9, 1285.0], [61.0, 1285.0], [61.1, 1286.0], [61.2, 1287.0], [61.3, 1287.0], [61.4, 1288.0], [61.5, 1289.0], [61.6, 1289.0], [61.7, 1290.0], [61.8, 1291.0], [61.9, 1291.0], [62.0, 1292.0], [62.1, 1292.0], [62.2, 1293.0], [62.3, 1294.0], [62.4, 1294.0], [62.5, 1295.0], [62.6, 1296.0], [62.7, 1296.0], [62.8, 1297.0], [62.9, 1297.0], [63.0, 1298.0], [63.1, 1299.0], [63.2, 1299.0], [63.3, 1300.0], [63.4, 1300.0], [63.5, 1301.0], [63.6, 1302.0], [63.7, 1302.0], [63.8, 1303.0], [63.9, 1303.0], [64.0, 1304.0], [64.1, 1305.0], [64.2, 1305.0], [64.3, 1306.0], [64.4, 1306.0], [64.5, 1307.0], [64.6, 1308.0], [64.7, 1308.0], [64.8, 1309.0], [64.9, 1310.0], [65.0, 1310.0], [65.1, 1311.0], [65.2, 1312.0], [65.3, 1312.0], [65.4, 1313.0], [65.5, 1313.0], [65.6, 1314.0], [65.7, 1315.0], [65.8, 1315.0], [65.9, 1316.0], [66.0, 1316.0], [66.1, 1317.0], [66.2, 1318.0], [66.3, 1318.0], [66.4, 1319.0], [66.5, 1320.0], [66.6, 1320.0], [66.7, 1321.0], [66.8, 1321.0], [66.9, 1322.0], [67.0, 1323.0], [67.1, 1323.0], [67.2, 1324.0], [67.3, 1324.0], [67.4, 1325.0], [67.5, 1326.0], [67.6, 1326.0], [67.7, 1327.0], [67.8, 1328.0], [67.9, 1328.0], [68.0, 1329.0], [68.1, 1329.0], [68.2, 1330.0], [68.3, 1330.0], [68.4, 1331.0], [68.5, 1332.0], [68.6, 1332.0], [68.7, 1333.0], [68.8, 1334.0], [68.9, 1334.0], [69.0, 1335.0], [69.1, 1335.0], [69.2, 1336.0], [69.3, 1337.0], [69.4, 1337.0], [69.5, 1338.0], [69.6, 1339.0], [69.7, 1339.0], [69.8, 1340.0], [69.9, 1340.0], [70.0, 1341.0], [70.1, 1342.0], [70.2, 1342.0], [70.3, 1343.0], [70.4, 1343.0], [70.5, 1344.0], [70.6, 1345.0], [70.7, 1345.0], [70.8, 1346.0], [70.9, 1346.0], [71.0, 1347.0], [71.1, 1347.0], [71.2, 1348.0], [71.3, 1349.0], [71.4, 1349.0], [71.5, 1350.0], [71.6, 1350.0], [71.7, 1351.0], [71.8, 1352.0], [71.9, 1352.0], [72.0, 1353.0], [72.1, 1354.0], [72.2, 1354.0], [72.3, 1355.0], [72.4, 1355.0], [72.5, 1356.0], [72.6, 1357.0], [72.7, 1357.0], [72.8, 1358.0], [72.9, 1358.0], [73.0, 1359.0], [73.1, 1360.0], [73.2, 1360.0], [73.3, 1361.0], [73.4, 1362.0], [73.5, 1362.0], [73.6, 1363.0], [73.7, 1363.0], [73.8, 1364.0], [73.9, 1365.0], [74.0, 1365.0], [74.1, 1366.0], [74.2, 1367.0], [74.3, 1367.0], [74.4, 1368.0], [74.5, 1368.0], [74.6, 1369.0], [74.7, 1370.0], [74.8, 1370.0], [74.9, 1371.0], [75.0, 1372.0], [75.1, 1372.0], [75.2, 1373.0], [75.3, 1373.0], [75.4, 1374.0], [75.5, 1375.0], [75.6, 1375.0], [75.7, 1376.0], [75.8, 1377.0], [75.9, 1377.0], [76.0, 1378.0], [76.1, 1378.0], [76.2, 1379.0], [76.3, 1380.0], [76.4, 1381.0], [76.5, 1381.0], [76.6, 1382.0], [76.7, 1382.0], [76.8, 1383.0], [76.9, 1384.0], [77.0, 1385.0], [77.1, 1385.0], [77.2, 1386.0], [77.3, 1386.0], [77.4, 1387.0], [77.5, 1388.0], [77.6, 1388.0], [77.7, 1389.0], [77.8, 1390.0], [77.9, 1390.0], [78.0, 1391.0], [78.1, 1392.0], [78.2, 1393.0], [78.3, 1393.0], [78.4, 1394.0], [78.5, 1395.0], [78.6, 1395.0], [78.7, 1396.0], [78.8, 1397.0], [78.9, 1398.0], [79.0, 1398.0], [79.1, 1399.0], [79.2, 1400.0], [79.3, 1400.0], [79.4, 1401.0], [79.5, 1402.0], [79.6, 1402.0], [79.7, 1403.0], [79.8, 1404.0], [79.9, 1405.0], [80.0, 1406.0], [80.1, 1406.0], [80.2, 1407.0], [80.3, 1408.0], [80.4, 1409.0], [80.5, 1410.0], [80.6, 1410.0], [80.7, 1411.0], [80.8, 1412.0], [80.9, 1413.0], [81.0, 1414.0], [81.1, 1414.0], [81.2, 1415.0], [81.3, 1416.0], [81.4, 1417.0], [81.5, 1418.0], [81.6, 1418.0], [81.7, 1419.0], [81.8, 1420.0], [81.9, 1421.0], [82.0, 1422.0], [82.1, 1423.0], [82.2, 1424.0], [82.3, 1424.0], [82.4, 1425.0], [82.5, 1426.0], [82.6, 1427.0], [82.7, 1428.0], [82.8, 1429.0], [82.9, 1430.0], [83.0, 1431.0], [83.1, 1432.0], [83.2, 1433.0], [83.3, 1434.0], [83.4, 1434.0], [83.5, 1435.0], [83.6, 1436.0], [83.7, 1437.0], [83.8, 1438.0], [83.9, 1439.0], [84.0, 1440.0], [84.1, 1441.0], [84.2, 1442.0], [84.3, 1443.0], [84.4, 1444.0], [84.5, 1445.0], [84.6, 1446.0], [84.7, 1447.0], [84.8, 1448.0], [84.9, 1449.0], [85.0, 1450.0], [85.1, 1451.0], [85.2, 1452.0], [85.3, 1453.0], [85.4, 1454.0], [85.5, 1455.0], [85.6, 1456.0], [85.7, 1457.0], [85.8, 1458.0], [85.9, 1459.0], [86.0, 1460.0], [86.1, 1461.0], [86.2, 1463.0], [86.3, 1464.0], [86.4, 1465.0], [86.5, 1466.0], [86.6, 1467.0], [86.7, 1468.0], [86.8, 1470.0], [86.9, 1471.0], [87.0, 1472.0], [87.1, 1473.0], [87.2, 1474.0], [87.3, 1476.0], [87.4, 1477.0], [87.5, 1478.0], [87.6, 1479.0], [87.7, 1481.0], [87.8, 1482.0], [87.9, 1484.0], [88.0, 1485.0], [88.1, 1486.0], [88.2, 1487.0], [88.3, 1489.0], [88.4, 1490.0], [88.5, 1492.0], [88.6, 1493.0], [88.7, 1494.0], [88.8, 1496.0], [88.9, 1497.0], [89.0, 1499.0], [89.1, 1500.0], [89.2, 1501.0], [89.3, 1503.0], [89.4, 1504.0], [89.5, 1506.0], [89.6, 1507.0], [89.7, 1509.0], [89.8, 1510.0], [89.9, 1512.0], [90.0, 1514.0], [90.1, 1515.0], [90.2, 1517.0], [90.3, 1519.0], [90.4, 1521.0], [90.5, 1522.0], [90.6, 1524.0], [90.7, 1526.0], [90.8, 1528.0], [90.9, 1530.0], [91.0, 1532.0], [91.1, 1534.0], [91.2, 1536.0], [91.3, 1538.0], [91.4, 1540.0], [91.5, 1542.0], [91.6, 1544.0], [91.7, 1546.0], [91.8, 1549.0], [91.9, 1551.0], [92.0, 1553.0], [92.1, 1556.0], [92.2, 1558.0], [92.3, 1561.0], [92.4, 1563.0], [92.5, 1566.0], [92.6, 1568.0], [92.7, 1571.0], [92.8, 1574.0], [92.9, 1576.0], [93.0, 1579.0], [93.1, 1581.0], [93.2, 1584.0], [93.3, 1587.0], [93.4, 1590.0], [93.5, 1593.0], [93.6, 1596.0], [93.7, 1599.0], [93.8, 1601.0], [93.9, 1604.0], [94.0, 1607.0], [94.1, 1610.0], [94.2, 1613.0], [94.3, 1616.0], [94.4, 1619.0], [94.5, 1623.0], [94.6, 1626.0], [94.7, 1629.0], [94.8, 1633.0], [94.9, 1636.0], [95.0, 1639.0], [95.1, 1643.0], [95.2, 1646.0], [95.3, 1650.0], [95.4, 1653.0], [95.5, 1657.0], [95.6, 1660.0], [95.7, 1665.0], [95.8, 1669.0], [95.9, 1674.0], [96.0, 1678.0], [96.1, 1682.0], [96.2, 1686.0], [96.3, 1692.0], [96.4, 1697.0], [96.5, 1701.0], [96.6, 1705.0], [96.7, 1710.0], [96.8, 1716.0], [96.9, 1721.0], [97.0, 1726.0], [97.1, 1732.0], [97.2, 1737.0], [97.3, 1743.0], [97.4, 1749.0], [97.5, 1755.0], [97.6, 1760.0], [97.7, 1767.0], [97.8, 1774.0], [97.9, 1782.0], [98.0, 1790.0], [98.1, 1797.0], [98.2, 1805.0], [98.3, 1814.0], [98.4, 1823.0], [98.5, 1834.0], [98.6, 1846.0], [98.7, 1858.0], [98.8, 1871.0], [98.9, 1885.0], [99.0, 1900.0], [99.1, 1918.0], [99.2, 1936.0], [99.3, 1959.0], [99.4, 1983.0], [99.5, 2012.0], [99.6, 2052.0], [99.7, 2105.0], [99.8, 2196.0], [99.9, 2377.0], [100.0, 5126.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 47275.0, "series": [{"data": [[0.0, 19.0], [600.0, 1565.0], [700.0, 7753.0], [800.0, 20493.0], [900.0, 32785.0], [1000.0, 39818.0], [1100.0, 40224.0], [1200.0, 44594.0], [1300.0, 47275.0], [1400.0, 29350.0], [1500.0, 13838.0], [100.0, 22.0], [1600.0, 8122.0], [1700.0, 4925.0], [1800.0, 2561.0], [1900.0, 1397.0], [2000.0, 685.0], [2100.0, 326.0], [2200.0, 190.0], [2300.0, 129.0], [2400.0, 89.0], [2500.0, 49.0], [2600.0, 42.0], [2700.0, 24.0], [2800.0, 19.0], [2900.0, 10.0], [3000.0, 5.0], [3100.0, 3.0], [200.0, 53.0], [3300.0, 1.0], [3200.0, 3.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 5.0], [3700.0, 2.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 2.0], [4400.0, 1.0], [300.0, 62.0], [5100.0, 1.0], [400.0, 147.0], [500.0, 189.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 305.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 264268.0, "series": [{"data": [[0.0, 305.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 264268.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 32215.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 552.9389732844423, "minX": 1.62027534E12, "maxY": 600.0, "series": [{"data": [[1.62027576E12, 600.0], [1.62027546E12, 600.0], [1.62027594E12, 552.9389732844423], [1.62027564E12, 600.0], [1.62027582E12, 600.0], [1.62027534E12, 596.8683206106863], [1.62027552E12, 600.0], [1.6202757E12, 600.0], [1.6202754E12, 600.0], [1.62027588E12, 600.0], [1.62027558E12, 600.0]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62027594E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 88.0, "minX": 1.0, "maxY": 2908.5, "series": [{"data": [[4.0, 1649.6666666666667], [5.0, 1614.0], [7.0, 2908.5], [8.0, 1588.0], [9.0, 1892.0], [10.0, 1685.0], [11.0, 1308.0], [12.0, 1487.0], [13.0, 1239.0], [14.0, 1265.0], [16.0, 1265.0], [17.0, 1279.0], [18.0, 1518.0], [21.0, 1315.6666666666667], [23.0, 1406.0], [25.0, 1510.5], [26.0, 1310.0], [27.0, 1370.0], [28.0, 1513.0], [31.0, 1447.6666666666667], [33.0, 1513.0], [32.0, 1503.0], [35.0, 1406.0], [34.0, 1295.0], [37.0, 1402.0], [36.0, 1599.0], [38.0, 1456.0], [41.0, 1328.5], [40.0, 1619.0], [44.0, 1427.6666666666667], [46.0, 1436.5], [49.0, 1451.0], [48.0, 1459.5], [51.0, 1366.0], [52.0, 1360.5], [55.0, 1456.0], [54.0, 1272.0], [57.0, 1448.0], [56.0, 1264.0], [58.0, 1492.0], [60.0, 1400.5], [62.0, 1301.0], [66.0, 1466.0], [64.0, 1452.5], [71.0, 1249.0], [70.0, 1248.0], [69.0, 1288.0], [68.0, 1380.0], [75.0, 1457.0], [73.0, 1455.0], [72.0, 1413.0], [79.0, 1536.5], [77.0, 1342.5], [76.0, 1455.0], [82.0, 1500.0], [80.0, 1453.0], [87.0, 1268.0], [86.0, 1274.5], [84.0, 1261.0], [91.0, 1331.0], [90.0, 1364.0], [89.0, 1335.0], [88.0, 1363.0], [95.0, 1411.0], [92.0, 1396.0], [99.0, 1379.0], [98.0, 1410.0], [96.0, 1414.0], [103.0, 1332.0], [102.0, 1439.0], [101.0, 1372.0], [100.0, 1393.0], [106.0, 1563.0], [105.0, 1396.0], [104.0, 1386.0], [111.0, 1422.0], [109.0, 1429.0], [108.0, 1420.0], [115.0, 1370.0], [114.0, 1370.0], [113.0, 1374.0], [112.0, 1492.0], [119.0, 1403.3333333333333], [116.0, 1418.0], [123.0, 1487.0], [120.0, 1381.0], [127.0, 1580.0], [126.0, 1549.0], [125.0, 1389.0], [124.0, 1476.0], [135.0, 1376.0], [134.0, 1426.75], [130.0, 1579.3333333333333], [143.0, 1368.0], [142.0, 1360.0], [141.0, 1321.0], [140.0, 1433.0], [138.0, 1487.0], [137.0, 1366.0], [136.0, 1367.0], [151.0, 261.3333333333333], [150.0, 1371.0], [149.0, 1381.5], [148.0, 1346.0], [145.0, 1560.0], [144.0, 1522.0], [153.0, 88.0], [154.0, 701.25], [159.0, 1328.0], [158.0, 1122.0], [157.0, 1337.0], [156.0, 1337.0], [155.0, 1491.0], [152.0, 1344.0], [161.0, 699.0], [162.0, 699.0], [167.0, 762.5], [166.0, 1543.0], [165.0, 1462.0], [164.0, 1481.0], [163.0, 1570.0], [160.0, 1485.0], [168.0, 869.5], [170.0, 328.0], [171.0, 739.5], [173.0, 717.5], [175.0, 1484.0], [174.0, 1371.0], [172.0, 1344.0], [169.0, 1475.0], [176.0, 713.0], [183.0, 365.6], [182.0, 1244.0], [181.0, 1286.0], [180.0, 1276.0], [179.0, 1269.0], [178.0, 1327.5], [184.0, 597.3333333333333], [188.0, 772.0], [189.0, 527.6666666666667], [190.0, 774.5], [191.0, 115.0], [187.0, 1346.0], [186.0, 1418.0], [199.0, 742.5], [198.0, 1318.0], [197.0, 1321.0], [196.0, 1345.0], [195.0, 1346.0], [194.0, 1613.0], [193.0, 1482.0], [192.0, 1651.5], [200.0, 160.0], [201.0, 763.25], [205.0, 1013.3333333333334], [206.0, 1558.0], [203.0, 1494.0], [202.0, 1388.0], [215.0, 671.4], [213.0, 1429.0], [212.0, 1309.0], [211.0, 1307.0], [210.0, 1340.0], [209.0, 1331.0], [208.0, 1332.5], [217.0, 998.3333333333334], [219.0, 836.0], [220.0, 532.0], [223.0, 1303.0], [222.0, 1302.0], [221.0, 1299.0], [228.0, 806.25], [231.0, 1399.5], [230.0, 1333.0], [226.0, 1424.0], [225.0, 1364.5], [234.0, 492.0], [239.0, 505.0], [238.0, 1295.0], [237.0, 1422.0], [236.0, 1384.0], [233.0, 1332.0], [240.0, 814.0], [243.0, 890.5], [244.0, 214.5], [247.0, 1368.0], [246.0, 1359.5], [245.0, 1404.0], [242.0, 1471.0], [241.0, 1360.0], [248.0, 873.0], [249.0, 787.0], [253.0, 636.6666666666667], [254.0, 1812.0], [251.0, 1253.0], [250.0, 1291.0], [268.0, 278.8333333333333], [257.0, 295.0], [256.0, 1170.25], [258.0, 967.6666666666666], [259.0, 1390.0], [262.0, 625.3333333333333], [261.0, 1306.0], [260.0, 1536.0], [263.0, 1299.0], [265.0, 1051.5], [266.0, 767.6666666666667], [267.0, 503.6], [269.0, 643.0], [270.0, 1032.3333333333333], [271.0, 1415.0], [264.0, 1749.0], [286.0, 1325.0], [278.0, 955.75], [277.0, 1422.0], [276.0, 1367.0], [279.0, 1307.0], [272.0, 1386.0], [274.0, 1402.0], [273.0, 1423.0], [284.0, 838.0], [285.0, 821.5], [287.0, 1793.0], [283.0, 1378.0], [282.0, 1328.0], [281.0, 1772.0], [280.0, 1735.0], [302.0, 1233.0], [297.0, 348.0], [288.0, 819.0], [291.0, 1302.0], [290.0, 1411.0], [289.0, 1413.0], [293.0, 1296.5], [298.0, 926.0], [299.0, 808.0], [303.0, 799.0], [301.0, 1235.0], [300.0, 1279.0], [296.0, 1427.6666666666667], [317.0, 1384.0], [308.0, 384.3333333333333], [309.0, 1095.8], [311.0, 986.6666666666666], [304.0, 1634.0], [319.0, 2432.5], [316.0, 1386.0], [306.0, 1429.0], [315.0, 1386.0], [314.0, 1264.0], [313.0, 1765.0], [312.0, 1285.0], [334.0, 1259.0], [335.0, 1222.0], [332.0, 1438.0], [323.0, 1477.0], [322.0, 1298.0], [321.0, 1265.0], [320.0, 1352.0], [331.0, 1434.0], [329.0, 1212.0], [328.0, 1249.0], [327.0, 1921.0], [326.0, 1239.0], [325.0, 1367.0], [350.0, 1458.0], [351.0, 1192.0], [349.0, 1233.0], [348.0, 1403.0], [347.0, 1453.0], [345.0, 1300.0], [344.0, 1456.0], [343.0, 1374.0], [338.0, 1378.5], [336.0, 1456.0], [341.0, 1295.0], [340.0, 1378.0], [354.0, 978.3333333333334], [356.0, 788.0], [357.0, 668.8], [359.0, 237.0], [352.0, 1378.0], [358.0, 1217.0], [364.0, 509.4], [355.0, 1434.0], [366.0, 543.5], [367.0, 959.5], [360.0, 1295.0], [365.0, 1325.0], [363.0, 1289.5], [362.0, 1330.0], [380.0, 496.0], [368.0, 935.5], [371.0, 1327.0], [369.0, 1329.0], [375.0, 1465.0], [372.0, 1004.5], [373.0, 1611.0], [374.0, 931.0], [377.0, 753.6666666666667], [378.0, 1205.3333333333333], [379.0, 424.0], [381.0, 1350.5], [383.0, 1177.6666666666667], [385.0, 904.6666666666667], [384.0, 799.3333333333333], [386.0, 428.6666666666667], [387.0, 968.0], [389.0, 874.5], [388.0, 1604.0], [390.0, 827.3333333333333], [391.0, 1040.5], [394.0, 748.3333333333333], [396.0, 689.3333333333333], [397.0, 1267.0], [398.0, 737.0], [399.0, 799.0], [393.0, 1323.0], [392.0, 1349.0], [395.0, 830.5], [401.0, 926.5], [400.0, 495.0], [402.0, 685.25], [403.0, 938.75], [404.0, 349.0], [405.0, 1032.5], [406.0, 1299.0], [408.0, 1198.0], [410.0, 1314.0], [409.0, 1271.0], [414.0, 742.0], [412.0, 660.3333333333333], [413.0, 407.0], [417.0, 735.0], [419.0, 766.6666666666667], [418.0, 1663.0], [420.0, 801.0], [421.0, 503.0], [422.0, 1012.6666666666666], [423.0, 434.5], [416.0, 1515.0], [424.0, 493.0], [425.0, 987.5], [427.0, 1582.0], [428.0, 899.0], [430.0, 912.0], [429.0, 1378.0], [431.0, 1266.0], [444.0, 1219.6666666666667], [434.0, 1118.0], [435.0, 885.0], [436.0, 673.3333333333333], [437.0, 488.5], [439.0, 1299.0], [432.0, 1257.0], [440.0, 451.5], [442.0, 542.0], [443.0, 425.0], [445.0, 622.0], [446.0, 854.0], [447.0, 581.0], [449.0, 681.375], [448.0, 545.5], [450.0, 866.6666666666667], [451.0, 925.5], [453.0, 512.0], [452.0, 1164.0], [454.0, 1134.0], [455.0, 589.0], [461.0, 673.0], [460.0, 1271.5], [462.0, 689.0], [463.0, 605.7142857142857], [456.0, 1428.5], [458.0, 1207.0], [457.0, 1207.0], [476.0, 405.3333333333333], [465.0, 652.5], [466.0, 1301.5], [471.0, 1298.0], [464.0, 1244.0], [469.0, 359.0], [468.0, 1300.0], [470.0, 1157.3333333333333], [472.0, 394.6666666666667], [473.0, 458.5], [475.0, 632.5], [474.0, 1260.0], [477.0, 839.5], [478.0, 603.75], [479.0, 1143.0], [481.0, 567.3333333333334], [480.0, 919.6666666666667], [482.0, 958.0], [483.0, 1273.0], [492.0, 1040.0], [493.0, 861.3333333333333], [494.0, 719.3333333333334], [495.0, 792.3333333333334], [484.0, 877.5], [485.0, 459.0], [486.0, 499.0], [487.0, 869.0], [488.0, 559.75], [490.0, 956.6666666666666], [496.0, 704.6], [499.0, 1185.5], [498.0, 1330.0], [497.0, 1432.0], [508.0, 572.5], [509.0, 642.6], [510.0, 840.3333333333333], [511.0, 454.0], [504.0, 1495.5], [500.0, 388.0], [501.0, 856.6], [502.0, 965.6666666666666], [503.0, 520.2], [505.0, 604.0], [506.0, 567.5], [507.0, 1374.5], [524.0, 533.0], [513.0, 1104.5], [512.0, 698.75], [526.0, 734.0], [525.0, 1418.0], [527.0, 1012.6666666666666], [514.0, 743.5], [516.0, 508.0], [517.0, 499.0], [538.0, 1768.5], [518.0, 1655.75], [540.0, 1444.0], [539.0, 1392.5], [541.0, 420.0], [543.0, 848.4], [542.0, 1413.5], [528.0, 367.0], [532.0, 489.0], [535.0, 1458.5], [533.0, 1373.3333333333333], [521.0, 412.0], [520.0, 1337.0], [522.0, 908.5], [523.0, 463.0], [549.0, 436.0], [545.0, 756.5], [544.0, 533.2], [558.0, 1220.0], [547.0, 462.0], [548.0, 1599.0], [555.0, 1214.8333333333333], [553.0, 1369.5], [556.0, 1052.0], [560.0, 408.0], [563.0, 1253.6666666666667], [561.0, 1626.0], [572.0, 544.0], [573.0, 1237.0], [574.0, 1213.0], [570.0, 493.5], [571.0, 805.6], [568.0, 496.3333333333333], [551.0, 1381.5], [569.0, 1128.6666666666667], [564.0, 1187.3333333333333], [566.0, 430.5], [565.0, 1951.0], [567.0, 1094.5], [582.0, 990.8571428571428], [579.0, 937.25], [577.0, 1397.8], [580.0, 800.2], [581.0, 549.75], [583.0, 1258.5], [600.0, 1214.1558701099168], [587.0, 1182.6666666666667], [586.0, 1406.0], [584.0, 1422.8], [588.0, 1358.0], [590.0, 1260.0], [589.0, 1303.1666666666667], [591.0, 1465.5], [592.0, 955.5], [593.0, 796.0000000000001], [594.0, 1354.0], [595.0, 780.75], [596.0, 887.125], [599.0, 1251.5], [598.0, 1716.2], [597.0, 1354.5], [1.0, 2092.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[599.1347156893141, 1213.45609997707]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10054.066666666668, "minX": 1.62027534E12, "maxY": 158971.73333333334, "series": [{"data": [[1.62027576E12, 148985.33333333334], [1.62027546E12, 146933.33333333334], [1.62027594E12, 19344.533333333333], [1.62027564E12, 155805.06666666668], [1.62027582E12, 158257.33333333334], [1.62027534E12, 124781.86666666667], [1.62027552E12, 148873.86666666667], [1.6202757E12, 141284.0], [1.6202754E12, 158971.73333333334], [1.62027588E12, 146786.4], [1.62027558E12, 153702.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62027576E12, 77433.16666666667], [1.62027546E12, 76366.66666666667], [1.62027594E12, 10054.066666666668], [1.62027564E12, 80977.63333333333], [1.62027582E12, 82252.16666666667], [1.62027534E12, 64853.73333333333], [1.62027552E12, 77375.23333333334], [1.6202757E12, 73430.5], [1.6202754E12, 82623.46666666666], [1.62027588E12, 76290.3], [1.62027558E12, 79884.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62027594E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1149.5218319734824, "minX": 1.62027534E12, "maxY": 1512.3514929282355, "series": [{"data": [[1.62027576E12, 1223.4232613501167], [1.62027546E12, 1235.121482758607], [1.62027594E12, 1512.3514929282355], [1.62027564E12, 1167.105199830901], [1.62027582E12, 1158.6863134304494], [1.62027534E12, 1238.3211385414972], [1.62027552E12, 1226.5150937617027], [1.6202757E12, 1287.0614667383952], [1.6202754E12, 1149.5218319734824], [1.62027588E12, 1235.831831831836], [1.62027558E12, 1193.106935654018]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62027594E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1149.493402600719, "minX": 1.62027534E12, "maxY": 1512.3289680460955, "series": [{"data": [[1.62027576E12, 1223.3976874681186], [1.62027546E12, 1235.0945862068922], [1.62027594E12, 1512.3289680460955], [1.62027564E12, 1167.0823713050013], [1.62027582E12, 1158.6623979510246], [1.62027534E12, 1238.2938119213884], [1.62027552E12, 1226.4889221658816], [1.6202757E12, 1287.0379415456252], [1.6202754E12, 1149.493402600719], [1.62027588E12, 1235.8083946014972], [1.62027558E12, 1193.0808610232116]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62027594E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62027534E12, "maxY": 0.255440961507229, "series": [{"data": [[1.62027576E12, 0.0446862778439045], [1.62027546E12, 0.0726551724137924], [1.62027594E12, 0.0], [1.62027564E12, 0.03551104029137259], [1.62027582E12, 0.0374259644629429], [1.62027534E12, 0.255440961507229], [1.62027552E12, 0.08879283939692968], [1.6202757E12, 0.05999641384256863], [1.6202754E12, 0.0846506884242732], [1.62027588E12, 0.03254979117048138], [1.62027558E12, 0.037249472573839364]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62027594E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.62027534E12, "maxY": 5126.0, "series": [{"data": [[1.62027576E12, 4160.0], [1.62027546E12, 5126.0], [1.62027594E12, 4018.0], [1.62027564E12, 4110.0], [1.62027582E12, 3878.0], [1.62027534E12, 3734.0], [1.62027552E12, 3046.0], [1.6202757E12, 3601.0], [1.6202754E12, 4425.0], [1.62027588E12, 3543.0], [1.62027558E12, 3423.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62027576E12, 1529.0], [1.62027546E12, 1497.0], [1.62027594E12, 1773.0], [1.62027564E12, 1433.0], [1.62027582E12, 1418.0], [1.62027534E12, 1509.0], [1.62027552E12, 1521.0], [1.6202757E12, 1573.0], [1.6202754E12, 1428.0], [1.62027588E12, 1547.0], [1.62027558E12, 1443.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62027576E12, 1904.0], [1.62027546E12, 1893.0], [1.62027594E12, 2199.81], [1.62027564E12, 1804.9900000000016], [1.62027582E12, 1811.9800000000032], [1.62027534E12, 1876.9700000000048], [1.62027552E12, 1882.0], [1.6202757E12, 1936.0], [1.6202754E12, 1779.0], [1.62027588E12, 1932.0], [1.62027558E12, 1812.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62027576E12, 1660.0], [1.62027546E12, 1619.9500000000007], [1.62027594E12, 1903.0], [1.62027564E12, 1566.0], [1.62027582E12, 1541.9500000000007], [1.62027534E12, 1630.0], [1.62027552E12, 1645.0], [1.6202757E12, 1702.0], [1.6202754E12, 1529.0], [1.62027588E12, 1681.0], [1.62027558E12, 1563.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62027576E12, 402.0], [1.62027546E12, 483.0], [1.62027594E12, 1080.0], [1.62027564E12, 419.0], [1.62027582E12, 374.0], [1.62027534E12, 40.0], [1.62027552E12, 490.0], [1.6202757E12, 638.0], [1.6202754E12, 355.0], [1.62027588E12, 627.0], [1.62027558E12, 552.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62027576E12, 1243.0], [1.62027546E12, 1223.0], [1.62027594E12, 1471.0], [1.62027564E12, 1135.0], [1.62027582E12, 1071.0], [1.62027534E12, 1221.0], [1.62027552E12, 1268.0], [1.6202757E12, 1319.0], [1.6202754E12, 1086.0], [1.62027588E12, 1275.0], [1.62027558E12, 1103.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62027594E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 432.0, "minX": 241.0, "maxY": 1509.0, "series": [{"data": [[241.0, 1396.0], [353.0, 432.0], [359.0, 1509.0], [364.0, 1462.0], [367.0, 1436.0], [375.0, 1380.5], [382.0, 1434.0], [374.0, 1409.5], [372.0, 1404.5], [377.0, 1480.5], [368.0, 1451.0], [383.0, 1462.0], [371.0, 1412.0], [380.0, 1507.0], [397.0, 1416.0], [394.0, 1401.0], [395.0, 1420.0], [392.0, 1436.5], [393.0, 1357.0], [391.0, 1403.0], [388.0, 1492.5], [390.0, 1409.5], [389.0, 1458.0], [399.0, 1488.0], [398.0, 1411.5], [384.0, 1483.0], [386.0, 1423.0], [400.0, 1362.0], [407.0, 1452.0], [412.0, 1397.0], [402.0, 1367.5], [414.0, 1436.0], [413.0, 1378.0], [403.0, 1392.0], [404.0, 1355.0], [405.0, 1397.5], [406.0, 1372.0], [415.0, 1364.0], [408.0, 1402.0], [409.0, 1312.0], [411.0, 1451.0], [410.0, 1368.0], [401.0, 1383.0], [419.0, 1376.0], [420.0, 1291.0], [421.0, 1351.5], [429.0, 1360.0], [428.0, 1309.0], [416.0, 1374.0], [422.0, 1340.0], [423.0, 1340.0], [418.0, 1339.0], [417.0, 1334.0], [426.0, 1323.0], [427.0, 1333.0], [431.0, 1322.0], [424.0, 1312.0], [425.0, 1272.0], [433.0, 1332.0], [446.0, 1301.5], [442.0, 1275.0], [439.0, 1283.0], [437.0, 1239.0], [438.0, 1329.0], [436.0, 1359.5], [447.0, 1234.5], [441.0, 1383.0], [440.0, 1311.0], [444.0, 1242.0], [445.0, 1234.0], [435.0, 1327.0], [434.0, 1263.0], [443.0, 1245.0], [432.0, 1273.0], [462.0, 1297.0], [450.0, 1300.0], [457.0, 1221.0], [452.0, 1151.0], [456.0, 1301.5], [463.0, 1420.0], [461.0, 1305.0], [460.0, 1067.5], [449.0, 1314.5], [454.0, 1240.0], [448.0, 1476.5], [453.0, 1264.0], [467.0, 1340.0], [469.0, 1206.0], [468.0, 1224.0], [474.0, 1288.0], [475.0, 1055.0], [473.0, 1137.0], [466.0, 1281.0], [472.0, 1179.0], [479.0, 1058.0], [478.0, 1068.0], [476.0, 1164.0], [477.0, 1314.0], [465.0, 1036.0], [464.0, 1047.0], [492.0, 1243.5], [485.0, 1294.0], [484.0, 1134.5], [486.0, 1168.0], [491.0, 1117.0], [490.0, 1126.0], [489.0, 1123.0], [482.0, 1127.5], [481.0, 1184.5], [480.0, 1048.0], [487.0, 1288.0], [488.0, 1094.0], [495.0, 1275.0], [483.0, 1223.0], [493.0, 1202.0], [494.0, 1210.5], [508.0, 1088.0], [507.0, 1188.0], [496.0, 1173.5], [497.0, 1266.0], [498.0, 1127.5], [499.0, 1366.0], [504.0, 1096.5], [503.0, 1276.0], [510.0, 1190.0], [509.0, 1188.0], [502.0, 1246.0], [500.0, 1101.5], [506.0, 1214.0], [505.0, 1163.5], [519.0, 1072.0], [518.0, 1146.0], [517.0, 1066.0], [534.0, 1094.5], [535.0, 1198.0], [516.0, 1205.5], [529.0, 1150.5], [541.0, 1081.0], [528.0, 1096.0], [542.0, 1025.0], [543.0, 1001.0], [539.0, 1245.0], [540.0, 1191.0], [538.0, 990.0], [537.0, 1203.0], [532.0, 976.0], [533.0, 1204.5], [530.0, 1160.0], [531.0, 1139.5], [514.0, 1160.0], [515.0, 1027.0], [513.0, 961.0], [527.0, 1328.0], [526.0, 1157.5], [523.0, 1104.0], [524.0, 1169.5], [521.0, 961.0], [520.0, 1097.5], [525.0, 1171.0], [561.0, 1130.0], [551.0, 1031.0], [566.0, 1096.5], [565.0, 1135.0], [562.0, 989.5], [564.0, 1109.0], [545.0, 1190.0], [556.0, 998.0], [558.0, 1124.0], [544.0, 1060.5], [557.0, 1054.0], [548.0, 950.0], [546.0, 1039.5], [547.0, 1118.0], [568.0, 1026.0], [572.0, 1004.0], [575.0, 1295.0], [574.0, 1061.5], [560.0, 1101.5], [571.0, 937.0], [570.0, 1089.0], [569.0, 1011.5], [567.0, 1139.0], [554.0, 1125.0], [552.0, 1098.0], [577.0, 1007.0], [601.0, 1073.5], [607.0, 1005.0], [600.0, 970.0], [578.0, 1028.0], [593.0, 1112.0], [592.0, 1175.0], [595.0, 865.0], [590.0, 924.0], [589.0, 1046.0], [576.0, 1321.0], [603.0, 930.0], [604.0, 1040.0], [585.0, 1021.0], [586.0, 1125.0], [587.0, 1046.0], [588.0, 1159.5], [637.0, 996.0], [623.0, 1033.0], [618.0, 948.0], [619.0, 985.0], [622.0, 1006.0], [620.0, 1061.0], [624.0, 1061.5], [629.0, 1050.0], [628.0, 996.0], [617.0, 933.0], [616.0, 925.0], [610.0, 1013.0], [633.0, 906.0], [614.0, 1070.5], [608.0, 998.0], [609.0, 1066.0], [627.0, 954.0], [625.0, 1087.0], [638.0, 991.0], [639.0, 972.0], [669.0, 938.0], [644.0, 958.5], [654.0, 977.0], [670.0, 943.0], [656.0, 1073.0], [646.0, 885.0], [664.0, 1062.0], [667.0, 955.0], [650.0, 1037.0], [648.0, 860.0], [652.0, 1016.5], [642.0, 1001.0], [658.0, 970.0], [662.0, 980.0], [659.0, 857.0], [660.0, 990.0], [663.0, 922.5], [677.0, 767.0], [691.0, 886.0], [689.0, 801.0], [674.0, 948.0], [688.0, 1015.0], [683.0, 882.0], [682.0, 880.0], [680.0, 856.5], [687.0, 1030.0], [672.0, 997.0], [679.0, 962.0], [698.0, 996.0], [676.0, 1078.0], [729.0, 834.0], [720.0, 867.5], [708.0, 973.0], [711.0, 966.0], [710.0, 872.5], [725.0, 991.0], [705.0, 973.0], [731.0, 999.0], [732.0, 1102.0], [765.0, 850.0], [740.0, 775.0], [752.0, 848.0], [804.0, 774.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 804.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 432.0, "minX": 241.0, "maxY": 1509.0, "series": [{"data": [[241.0, 1396.0], [353.0, 432.0], [359.0, 1509.0], [364.0, 1462.0], [367.0, 1436.0], [375.0, 1380.5], [382.0, 1434.0], [374.0, 1409.0], [372.0, 1404.0], [377.0, 1480.5], [368.0, 1451.0], [383.0, 1462.0], [371.0, 1412.0], [380.0, 1507.0], [397.0, 1416.0], [394.0, 1401.0], [395.0, 1420.0], [392.0, 1436.5], [393.0, 1357.0], [391.0, 1403.0], [388.0, 1492.5], [390.0, 1409.5], [389.0, 1458.0], [399.0, 1488.0], [398.0, 1411.5], [384.0, 1483.0], [386.0, 1423.0], [400.0, 1362.0], [407.0, 1452.0], [412.0, 1397.0], [402.0, 1367.5], [414.0, 1436.0], [413.0, 1377.5], [403.0, 1391.5], [404.0, 1355.0], [405.0, 1397.5], [406.0, 1372.0], [415.0, 1364.0], [408.0, 1402.0], [409.0, 1312.0], [411.0, 1451.0], [410.0, 1368.0], [401.0, 1383.0], [419.0, 1376.0], [420.0, 1291.0], [421.0, 1351.5], [429.0, 1360.0], [428.0, 1309.0], [416.0, 1374.0], [422.0, 1340.0], [423.0, 1340.0], [418.0, 1339.0], [417.0, 1334.0], [426.0, 1323.0], [427.0, 1333.0], [431.0, 1322.0], [424.0, 1312.0], [425.0, 1272.0], [433.0, 1332.0], [446.0, 1301.0], [442.0, 1275.0], [439.0, 1283.0], [437.0, 1239.0], [438.0, 1329.0], [436.0, 1359.5], [447.0, 1234.5], [441.0, 1382.5], [440.0, 1311.0], [444.0, 1242.0], [445.0, 1234.0], [435.0, 1327.0], [434.0, 1263.0], [443.0, 1245.0], [432.0, 1273.0], [462.0, 1297.0], [450.0, 1300.0], [457.0, 1221.0], [452.0, 1151.0], [456.0, 1301.5], [463.0, 1420.0], [461.0, 1305.0], [460.0, 1067.5], [449.0, 1314.5], [454.0, 1240.0], [448.0, 1476.5], [453.0, 1264.0], [467.0, 1340.0], [469.0, 1206.0], [468.0, 1224.0], [474.0, 1287.5], [475.0, 1055.0], [473.0, 1137.0], [466.0, 1281.0], [472.0, 1179.0], [479.0, 1058.0], [478.0, 1068.0], [476.0, 1164.0], [477.0, 1314.0], [465.0, 1036.0], [464.0, 1047.0], [492.0, 1243.5], [485.0, 1294.0], [484.0, 1134.5], [486.0, 1168.0], [491.0, 1117.0], [490.0, 1126.0], [489.0, 1123.0], [482.0, 1127.5], [481.0, 1184.5], [480.0, 1048.0], [487.0, 1287.5], [488.0, 1094.0], [495.0, 1275.0], [483.0, 1223.0], [493.0, 1202.0], [494.0, 1210.5], [508.0, 1088.0], [507.0, 1188.0], [496.0, 1173.5], [497.0, 1265.0], [498.0, 1127.5], [499.0, 1366.0], [504.0, 1096.5], [503.0, 1276.0], [510.0, 1190.0], [509.0, 1188.0], [502.0, 1246.0], [500.0, 1101.5], [506.0, 1214.0], [505.0, 1163.5], [519.0, 1072.0], [518.0, 1146.0], [517.0, 1066.0], [534.0, 1094.5], [535.0, 1198.0], [516.0, 1205.5], [529.0, 1150.0], [541.0, 1081.0], [528.0, 1096.0], [542.0, 1025.0], [543.0, 1001.0], [539.0, 1245.0], [540.0, 1191.0], [538.0, 990.0], [537.0, 1203.0], [532.0, 976.0], [533.0, 1204.5], [530.0, 1160.0], [531.0, 1139.5], [514.0, 1160.0], [515.0, 1027.0], [513.0, 961.0], [527.0, 1328.0], [526.0, 1157.5], [523.0, 1104.0], [524.0, 1169.5], [521.0, 961.0], [520.0, 1097.5], [525.0, 1171.0], [561.0, 1130.0], [551.0, 1031.0], [566.0, 1096.5], [565.0, 1135.0], [562.0, 989.5], [564.0, 1109.0], [545.0, 1190.0], [556.0, 998.0], [558.0, 1124.0], [544.0, 1060.5], [557.0, 1054.0], [548.0, 950.0], [546.0, 1039.5], [547.0, 1118.0], [568.0, 1026.0], [572.0, 1004.0], [575.0, 1295.0], [574.0, 1061.0], [560.0, 1101.5], [571.0, 937.0], [570.0, 1089.0], [569.0, 1011.5], [567.0, 1139.0], [554.0, 1125.0], [552.0, 1098.0], [577.0, 1007.0], [601.0, 1073.5], [607.0, 1005.0], [600.0, 969.5], [578.0, 1027.5], [593.0, 1112.0], [592.0, 1175.0], [595.0, 865.0], [590.0, 924.0], [589.0, 1046.0], [576.0, 1321.0], [603.0, 930.0], [604.0, 1040.0], [585.0, 1021.0], [586.0, 1125.0], [587.0, 1046.0], [588.0, 1159.5], [637.0, 996.0], [623.0, 1033.0], [618.0, 948.0], [619.0, 985.0], [622.0, 1006.0], [620.0, 1061.0], [624.0, 1061.5], [629.0, 1050.0], [628.0, 996.0], [617.0, 933.0], [616.0, 925.0], [610.0, 1013.0], [633.0, 906.0], [614.0, 1070.5], [608.0, 998.0], [609.0, 1066.0], [627.0, 954.0], [625.0, 1087.0], [638.0, 991.0], [639.0, 972.0], [669.0, 938.0], [644.0, 958.5], [654.0, 977.0], [670.0, 943.0], [656.0, 1073.0], [646.0, 885.0], [664.0, 1062.0], [667.0, 955.0], [650.0, 1037.0], [648.0, 860.0], [652.0, 1016.5], [642.0, 1001.0], [658.0, 970.0], [662.0, 980.0], [659.0, 857.0], [660.0, 990.0], [663.0, 922.5], [677.0, 767.0], [691.0, 886.0], [689.0, 801.0], [674.0, 948.0], [688.0, 1015.0], [683.0, 882.0], [682.0, 880.0], [680.0, 856.5], [687.0, 1030.0], [672.0, 997.0], [679.0, 962.0], [698.0, 996.0], [676.0, 1078.0], [729.0, 834.0], [720.0, 867.5], [708.0, 973.0], [711.0, 966.0], [710.0, 872.5], [725.0, 991.0], [705.0, 973.0], [731.0, 999.0], [732.0, 1102.0], [765.0, 850.0], [740.0, 775.0], [752.0, 848.0], [804.0, 774.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 804.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.63333333333333, "minX": 1.62027534E12, "maxY": 522.9333333333333, "series": [{"data": [[1.62027576E12, 490.0833333333333], [1.62027546E12, 483.3333333333333], [1.62027594E12, 53.63333333333333], [1.62027564E12, 512.5166666666667], [1.62027582E12, 520.5833333333334], [1.62027534E12, 420.46666666666664], [1.62027552E12, 489.71666666666664], [1.6202757E12, 464.75], [1.6202754E12, 522.9333333333333], [1.62027588E12, 482.85], [1.62027558E12, 505.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62027594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 63.63333333333333, "minX": 1.62027534E12, "maxY": 522.9333333333333, "series": [{"data": [[1.62027576E12, 490.0833333333333], [1.62027546E12, 483.3333333333333], [1.62027594E12, 63.63333333333333], [1.62027564E12, 512.5166666666667], [1.62027582E12, 520.5833333333334], [1.62027534E12, 410.46666666666664], [1.62027552E12, 489.71666666666664], [1.6202757E12, 464.75], [1.6202754E12, 522.9333333333333], [1.62027588E12, 482.85], [1.62027558E12, 505.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62027594E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 63.63333333333333, "minX": 1.62027534E12, "maxY": 522.9333333333333, "series": [{"data": [[1.62027576E12, 490.0833333333333], [1.62027546E12, 483.3333333333333], [1.62027594E12, 63.63333333333333], [1.62027564E12, 512.5166666666667], [1.62027582E12, 520.5833333333334], [1.62027534E12, 410.46666666666664], [1.62027552E12, 489.71666666666664], [1.6202757E12, 464.75], [1.6202754E12, 522.9333333333333], [1.62027588E12, 482.85], [1.62027558E12, 505.6]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62027594E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 63.63333333333333, "minX": 1.62027534E12, "maxY": 522.9333333333333, "series": [{"data": [[1.62027576E12, 490.0833333333333], [1.62027546E12, 483.3333333333333], [1.62027594E12, 63.63333333333333], [1.62027564E12, 512.5166666666667], [1.62027582E12, 520.5833333333334], [1.62027534E12, 410.46666666666664], [1.62027552E12, 489.71666666666664], [1.6202757E12, 464.75], [1.6202754E12, 522.9333333333333], [1.62027588E12, 482.85], [1.62027558E12, 505.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62027594E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

