/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 1542.0, "series": [{"data": [[0.0, 45.0], [0.1, 349.0], [0.2, 363.0], [0.3, 369.0], [0.4, 373.0], [0.5, 376.0], [0.6, 379.0], [0.7, 381.0], [0.8, 383.0], [0.9, 384.0], [1.0, 386.0], [1.1, 387.0], [1.2, 388.0], [1.3, 389.0], [1.4, 390.0], [1.5, 391.0], [1.6, 392.0], [1.7, 393.0], [1.8, 394.0], [1.9, 394.0], [2.0, 395.0], [2.1, 395.0], [2.2, 396.0], [2.3, 396.0], [2.4, 397.0], [2.5, 397.0], [2.6, 398.0], [2.7, 398.0], [2.8, 399.0], [2.9, 399.0], [3.0, 400.0], [3.1, 400.0], [3.2, 400.0], [3.3, 401.0], [3.4, 401.0], [3.5, 401.0], [3.6, 402.0], [3.7, 402.0], [3.8, 403.0], [3.9, 403.0], [4.0, 403.0], [4.1, 403.0], [4.2, 404.0], [4.3, 404.0], [4.4, 404.0], [4.5, 405.0], [4.6, 405.0], [4.7, 405.0], [4.8, 405.0], [4.9, 406.0], [5.0, 406.0], [5.1, 406.0], [5.2, 406.0], [5.3, 407.0], [5.4, 407.0], [5.5, 407.0], [5.6, 407.0], [5.7, 408.0], [5.8, 408.0], [5.9, 408.0], [6.0, 408.0], [6.1, 409.0], [6.2, 409.0], [6.3, 409.0], [6.4, 409.0], [6.5, 409.0], [6.6, 410.0], [6.7, 410.0], [6.8, 410.0], [6.9, 410.0], [7.0, 410.0], [7.1, 410.0], [7.2, 411.0], [7.3, 411.0], [7.4, 411.0], [7.5, 411.0], [7.6, 411.0], [7.7, 412.0], [7.8, 412.0], [7.9, 412.0], [8.0, 412.0], [8.1, 412.0], [8.2, 412.0], [8.3, 413.0], [8.4, 413.0], [8.5, 413.0], [8.6, 413.0], [8.7, 413.0], [8.8, 413.0], [8.9, 414.0], [9.0, 414.0], [9.1, 414.0], [9.2, 414.0], [9.3, 414.0], [9.4, 414.0], [9.5, 414.0], [9.6, 415.0], [9.7, 415.0], [9.8, 415.0], [9.9, 415.0], [10.0, 415.0], [10.1, 415.0], [10.2, 415.0], [10.3, 416.0], [10.4, 416.0], [10.5, 416.0], [10.6, 416.0], [10.7, 416.0], [10.8, 416.0], [10.9, 416.0], [11.0, 417.0], [11.1, 417.0], [11.2, 417.0], [11.3, 417.0], [11.4, 417.0], [11.5, 417.0], [11.6, 417.0], [11.7, 417.0], [11.8, 418.0], [11.9, 418.0], [12.0, 418.0], [12.1, 418.0], [12.2, 418.0], [12.3, 418.0], [12.4, 418.0], [12.5, 418.0], [12.6, 419.0], [12.7, 419.0], [12.8, 419.0], [12.9, 419.0], [13.0, 419.0], [13.1, 419.0], [13.2, 419.0], [13.3, 419.0], [13.4, 419.0], [13.5, 420.0], [13.6, 420.0], [13.7, 420.0], [13.8, 420.0], [13.9, 420.0], [14.0, 420.0], [14.1, 420.0], [14.2, 420.0], [14.3, 420.0], [14.4, 421.0], [14.5, 421.0], [14.6, 421.0], [14.7, 421.0], [14.8, 421.0], [14.9, 421.0], [15.0, 421.0], [15.1, 421.0], [15.2, 421.0], [15.3, 422.0], [15.4, 422.0], [15.5, 422.0], [15.6, 422.0], [15.7, 422.0], [15.8, 422.0], [15.9, 422.0], [16.0, 422.0], [16.1, 422.0], [16.2, 422.0], [16.3, 423.0], [16.4, 423.0], [16.5, 423.0], [16.6, 423.0], [16.7, 423.0], [16.8, 423.0], [16.9, 423.0], [17.0, 423.0], [17.1, 423.0], [17.2, 423.0], [17.3, 423.0], [17.4, 424.0], [17.5, 424.0], [17.6, 424.0], [17.7, 424.0], [17.8, 424.0], [17.9, 424.0], [18.0, 424.0], [18.1, 424.0], [18.2, 424.0], [18.3, 424.0], [18.4, 425.0], [18.5, 425.0], [18.6, 425.0], [18.7, 425.0], [18.8, 425.0], [18.9, 425.0], [19.0, 425.0], [19.1, 425.0], [19.2, 425.0], [19.3, 425.0], [19.4, 425.0], [19.5, 426.0], [19.6, 426.0], [19.7, 426.0], [19.8, 426.0], [19.9, 426.0], [20.0, 426.0], [20.1, 426.0], [20.2, 426.0], [20.3, 426.0], [20.4, 426.0], [20.5, 426.0], [20.6, 426.0], [20.7, 427.0], [20.8, 427.0], [20.9, 427.0], [21.0, 427.0], [21.1, 427.0], [21.2, 427.0], [21.3, 427.0], [21.4, 427.0], [21.5, 427.0], [21.6, 427.0], [21.7, 427.0], [21.8, 427.0], [21.9, 428.0], [22.0, 428.0], [22.1, 428.0], [22.2, 428.0], [22.3, 428.0], [22.4, 428.0], [22.5, 428.0], [22.6, 428.0], [22.7, 428.0], [22.8, 428.0], [22.9, 428.0], [23.0, 428.0], [23.1, 428.0], [23.2, 429.0], [23.3, 429.0], [23.4, 429.0], [23.5, 429.0], [23.6, 429.0], [23.7, 429.0], [23.8, 429.0], [23.9, 429.0], [24.0, 429.0], [24.1, 429.0], [24.2, 429.0], [24.3, 429.0], [24.4, 430.0], [24.5, 430.0], [24.6, 430.0], [24.7, 430.0], [24.8, 430.0], [24.9, 430.0], [25.0, 430.0], [25.1, 430.0], [25.2, 430.0], [25.3, 430.0], [25.4, 430.0], [25.5, 430.0], [25.6, 430.0], [25.7, 430.0], [25.8, 431.0], [25.9, 431.0], [26.0, 431.0], [26.1, 431.0], [26.2, 431.0], [26.3, 431.0], [26.4, 431.0], [26.5, 431.0], [26.6, 431.0], [26.7, 431.0], [26.8, 431.0], [26.9, 431.0], [27.0, 431.0], [27.1, 432.0], [27.2, 432.0], [27.3, 432.0], [27.4, 432.0], [27.5, 432.0], [27.6, 432.0], [27.7, 432.0], [27.8, 432.0], [27.9, 432.0], [28.0, 432.0], [28.1, 432.0], [28.2, 432.0], [28.3, 432.0], [28.4, 432.0], [28.5, 433.0], [28.6, 433.0], [28.7, 433.0], [28.8, 433.0], [28.9, 433.0], [29.0, 433.0], [29.1, 433.0], [29.2, 433.0], [29.3, 433.0], [29.4, 433.0], [29.5, 433.0], [29.6, 433.0], [29.7, 433.0], [29.8, 433.0], [29.9, 434.0], [30.0, 434.0], [30.1, 434.0], [30.2, 434.0], [30.3, 434.0], [30.4, 434.0], [30.5, 434.0], [30.6, 434.0], [30.7, 434.0], [30.8, 434.0], [30.9, 434.0], [31.0, 434.0], [31.1, 434.0], [31.2, 434.0], [31.3, 435.0], [31.4, 435.0], [31.5, 435.0], [31.6, 435.0], [31.7, 435.0], [31.8, 435.0], [31.9, 435.0], [32.0, 435.0], [32.1, 435.0], [32.2, 435.0], [32.3, 435.0], [32.4, 435.0], [32.5, 435.0], [32.6, 435.0], [32.7, 435.0], [32.8, 436.0], [32.9, 436.0], [33.0, 436.0], [33.1, 436.0], [33.2, 436.0], [33.3, 436.0], [33.4, 436.0], [33.5, 436.0], [33.6, 436.0], [33.7, 436.0], [33.8, 436.0], [33.9, 436.0], [34.0, 436.0], [34.1, 436.0], [34.2, 436.0], [34.3, 437.0], [34.4, 437.0], [34.5, 437.0], [34.6, 437.0], [34.7, 437.0], [34.8, 437.0], [34.9, 437.0], [35.0, 437.0], [35.1, 437.0], [35.2, 437.0], [35.3, 437.0], [35.4, 437.0], [35.5, 437.0], [35.6, 437.0], [35.7, 438.0], [35.8, 438.0], [35.9, 438.0], [36.0, 438.0], [36.1, 438.0], [36.2, 438.0], [36.3, 438.0], [36.4, 438.0], [36.5, 438.0], [36.6, 438.0], [36.7, 438.0], [36.8, 438.0], [36.9, 438.0], [37.0, 438.0], [37.1, 438.0], [37.2, 438.0], [37.3, 439.0], [37.4, 439.0], [37.5, 439.0], [37.6, 439.0], [37.7, 439.0], [37.8, 439.0], [37.9, 439.0], [38.0, 439.0], [38.1, 439.0], [38.2, 439.0], [38.3, 439.0], [38.4, 439.0], [38.5, 439.0], [38.6, 439.0], [38.7, 439.0], [38.8, 440.0], [38.9, 440.0], [39.0, 440.0], [39.1, 440.0], [39.2, 440.0], [39.3, 440.0], [39.4, 440.0], [39.5, 440.0], [39.6, 440.0], [39.7, 440.0], [39.8, 440.0], [39.9, 440.0], [40.0, 440.0], [40.1, 440.0], [40.2, 440.0], [40.3, 440.0], [40.4, 441.0], [40.5, 441.0], [40.6, 441.0], [40.7, 441.0], [40.8, 441.0], [40.9, 441.0], [41.0, 441.0], [41.1, 441.0], [41.2, 441.0], [41.3, 441.0], [41.4, 441.0], [41.5, 441.0], [41.6, 441.0], [41.7, 441.0], [41.8, 441.0], [41.9, 442.0], [42.0, 442.0], [42.1, 442.0], [42.2, 442.0], [42.3, 442.0], [42.4, 442.0], [42.5, 442.0], [42.6, 442.0], [42.7, 442.0], [42.8, 442.0], [42.9, 442.0], [43.0, 442.0], [43.1, 442.0], [43.2, 442.0], [43.3, 442.0], [43.4, 442.0], [43.5, 443.0], [43.6, 443.0], [43.7, 443.0], [43.8, 443.0], [43.9, 443.0], [44.0, 443.0], [44.1, 443.0], [44.2, 443.0], [44.3, 443.0], [44.4, 443.0], [44.5, 443.0], [44.6, 443.0], [44.7, 443.0], [44.8, 443.0], [44.9, 443.0], [45.0, 443.0], [45.1, 443.0], [45.2, 444.0], [45.3, 444.0], [45.4, 444.0], [45.5, 444.0], [45.6, 444.0], [45.7, 444.0], [45.8, 444.0], [45.9, 444.0], [46.0, 444.0], [46.1, 444.0], [46.2, 444.0], [46.3, 444.0], [46.4, 444.0], [46.5, 444.0], [46.6, 444.0], [46.7, 444.0], [46.8, 445.0], [46.9, 445.0], [47.0, 445.0], [47.1, 445.0], [47.2, 445.0], [47.3, 445.0], [47.4, 445.0], [47.5, 445.0], [47.6, 445.0], [47.7, 445.0], [47.8, 445.0], [47.9, 445.0], [48.0, 445.0], [48.1, 445.0], [48.2, 445.0], [48.3, 445.0], [48.4, 446.0], [48.5, 446.0], [48.6, 446.0], [48.7, 446.0], [48.8, 446.0], [48.9, 446.0], [49.0, 446.0], [49.1, 446.0], [49.2, 446.0], [49.3, 446.0], [49.4, 446.0], [49.5, 446.0], [49.6, 446.0], [49.7, 446.0], [49.8, 446.0], [49.9, 446.0], [50.0, 447.0], [50.1, 447.0], [50.2, 447.0], [50.3, 447.0], [50.4, 447.0], [50.5, 447.0], [50.6, 447.0], [50.7, 447.0], [50.8, 447.0], [50.9, 447.0], [51.0, 447.0], [51.1, 447.0], [51.2, 447.0], [51.3, 447.0], [51.4, 447.0], [51.5, 448.0], [51.6, 448.0], [51.7, 448.0], [51.8, 448.0], [51.9, 448.0], [52.0, 448.0], [52.1, 448.0], [52.2, 448.0], [52.3, 448.0], [52.4, 448.0], [52.5, 448.0], [52.6, 448.0], [52.7, 448.0], [52.8, 448.0], [52.9, 448.0], [53.0, 448.0], [53.1, 449.0], [53.2, 449.0], [53.3, 449.0], [53.4, 449.0], [53.5, 449.0], [53.6, 449.0], [53.7, 449.0], [53.8, 449.0], [53.9, 449.0], [54.0, 449.0], [54.1, 449.0], [54.2, 449.0], [54.3, 449.0], [54.4, 449.0], [54.5, 449.0], [54.6, 449.0], [54.7, 450.0], [54.8, 450.0], [54.9, 450.0], [55.0, 450.0], [55.1, 450.0], [55.2, 450.0], [55.3, 450.0], [55.4, 450.0], [55.5, 450.0], [55.6, 450.0], [55.7, 450.0], [55.8, 450.0], [55.9, 450.0], [56.0, 450.0], [56.1, 450.0], [56.2, 450.0], [56.3, 451.0], [56.4, 451.0], [56.5, 451.0], [56.6, 451.0], [56.7, 451.0], [56.8, 451.0], [56.9, 451.0], [57.0, 451.0], [57.1, 451.0], [57.2, 451.0], [57.3, 451.0], [57.4, 451.0], [57.5, 451.0], [57.6, 451.0], [57.7, 451.0], [57.8, 452.0], [57.9, 452.0], [58.0, 452.0], [58.1, 452.0], [58.2, 452.0], [58.3, 452.0], [58.4, 452.0], [58.5, 452.0], [58.6, 452.0], [58.7, 452.0], [58.8, 452.0], [58.9, 452.0], [59.0, 452.0], [59.1, 452.0], [59.2, 452.0], [59.3, 453.0], [59.4, 453.0], [59.5, 453.0], [59.6, 453.0], [59.7, 453.0], [59.8, 453.0], [59.9, 453.0], [60.0, 453.0], [60.1, 453.0], [60.2, 453.0], [60.3, 453.0], [60.4, 453.0], [60.5, 453.0], [60.6, 453.0], [60.7, 453.0], [60.8, 454.0], [60.9, 454.0], [61.0, 454.0], [61.1, 454.0], [61.2, 454.0], [61.3, 454.0], [61.4, 454.0], [61.5, 454.0], [61.6, 454.0], [61.7, 454.0], [61.8, 454.0], [61.9, 454.0], [62.0, 454.0], [62.1, 454.0], [62.2, 454.0], [62.3, 455.0], [62.4, 455.0], [62.5, 455.0], [62.6, 455.0], [62.7, 455.0], [62.8, 455.0], [62.9, 455.0], [63.0, 455.0], [63.1, 455.0], [63.2, 455.0], [63.3, 455.0], [63.4, 455.0], [63.5, 455.0], [63.6, 455.0], [63.7, 456.0], [63.8, 456.0], [63.9, 456.0], [64.0, 456.0], [64.1, 456.0], [64.2, 456.0], [64.3, 456.0], [64.4, 456.0], [64.5, 456.0], [64.6, 456.0], [64.7, 456.0], [64.8, 456.0], [64.9, 456.0], [65.0, 456.0], [65.1, 457.0], [65.2, 457.0], [65.3, 457.0], [65.4, 457.0], [65.5, 457.0], [65.6, 457.0], [65.7, 457.0], [65.8, 457.0], [65.9, 457.0], [66.0, 457.0], [66.1, 457.0], [66.2, 457.0], [66.3, 457.0], [66.4, 457.0], [66.5, 458.0], [66.6, 458.0], [66.7, 458.0], [66.8, 458.0], [66.9, 458.0], [67.0, 458.0], [67.1, 458.0], [67.2, 458.0], [67.3, 458.0], [67.4, 458.0], [67.5, 458.0], [67.6, 458.0], [67.7, 458.0], [67.8, 458.0], [67.9, 459.0], [68.0, 459.0], [68.1, 459.0], [68.2, 459.0], [68.3, 459.0], [68.4, 459.0], [68.5, 459.0], [68.6, 459.0], [68.7, 459.0], [68.8, 459.0], [68.9, 459.0], [69.0, 459.0], [69.1, 459.0], [69.2, 460.0], [69.3, 460.0], [69.4, 460.0], [69.5, 460.0], [69.6, 460.0], [69.7, 460.0], [69.8, 460.0], [69.9, 460.0], [70.0, 460.0], [70.1, 460.0], [70.2, 460.0], [70.3, 460.0], [70.4, 460.0], [70.5, 461.0], [70.6, 461.0], [70.7, 461.0], [70.8, 461.0], [70.9, 461.0], [71.0, 461.0], [71.1, 461.0], [71.2, 461.0], [71.3, 461.0], [71.4, 461.0], [71.5, 461.0], [71.6, 461.0], [71.7, 461.0], [71.8, 462.0], [71.9, 462.0], [72.0, 462.0], [72.1, 462.0], [72.2, 462.0], [72.3, 462.0], [72.4, 462.0], [72.5, 462.0], [72.6, 462.0], [72.7, 462.0], [72.8, 462.0], [72.9, 462.0], [73.0, 463.0], [73.1, 463.0], [73.2, 463.0], [73.3, 463.0], [73.4, 463.0], [73.5, 463.0], [73.6, 463.0], [73.7, 463.0], [73.8, 463.0], [73.9, 463.0], [74.0, 463.0], [74.1, 463.0], [74.2, 464.0], [74.3, 464.0], [74.4, 464.0], [74.5, 464.0], [74.6, 464.0], [74.7, 464.0], [74.8, 464.0], [74.9, 464.0], [75.0, 464.0], [75.1, 464.0], [75.2, 464.0], [75.3, 464.0], [75.4, 465.0], [75.5, 465.0], [75.6, 465.0], [75.7, 465.0], [75.8, 465.0], [75.9, 465.0], [76.0, 465.0], [76.1, 465.0], [76.2, 465.0], [76.3, 465.0], [76.4, 465.0], [76.5, 465.0], [76.6, 466.0], [76.7, 466.0], [76.8, 466.0], [76.9, 466.0], [77.0, 466.0], [77.1, 466.0], [77.2, 466.0], [77.3, 466.0], [77.4, 466.0], [77.5, 466.0], [77.6, 466.0], [77.7, 467.0], [77.8, 467.0], [77.9, 467.0], [78.0, 467.0], [78.1, 467.0], [78.2, 467.0], [78.3, 467.0], [78.4, 467.0], [78.5, 467.0], [78.6, 467.0], [78.7, 467.0], [78.8, 468.0], [78.9, 468.0], [79.0, 468.0], [79.1, 468.0], [79.2, 468.0], [79.3, 468.0], [79.4, 468.0], [79.5, 468.0], [79.6, 468.0], [79.7, 468.0], [79.8, 469.0], [79.9, 469.0], [80.0, 469.0], [80.1, 469.0], [80.2, 469.0], [80.3, 469.0], [80.4, 469.0], [80.5, 469.0], [80.6, 469.0], [80.7, 469.0], [80.8, 469.0], [80.9, 470.0], [81.0, 470.0], [81.1, 470.0], [81.2, 470.0], [81.3, 470.0], [81.4, 470.0], [81.5, 470.0], [81.6, 470.0], [81.7, 470.0], [81.8, 471.0], [81.9, 471.0], [82.0, 471.0], [82.1, 471.0], [82.2, 471.0], [82.3, 471.0], [82.4, 471.0], [82.5, 471.0], [82.6, 471.0], [82.7, 471.0], [82.8, 472.0], [82.9, 472.0], [83.0, 472.0], [83.1, 472.0], [83.2, 472.0], [83.3, 472.0], [83.4, 472.0], [83.5, 472.0], [83.6, 472.0], [83.7, 473.0], [83.8, 473.0], [83.9, 473.0], [84.0, 473.0], [84.1, 473.0], [84.2, 473.0], [84.3, 473.0], [84.4, 473.0], [84.5, 474.0], [84.6, 474.0], [84.7, 474.0], [84.8, 474.0], [84.9, 474.0], [85.0, 474.0], [85.1, 474.0], [85.2, 474.0], [85.3, 474.0], [85.4, 475.0], [85.5, 475.0], [85.6, 475.0], [85.7, 475.0], [85.8, 475.0], [85.9, 475.0], [86.0, 475.0], [86.1, 476.0], [86.2, 476.0], [86.3, 476.0], [86.4, 476.0], [86.5, 476.0], [86.6, 476.0], [86.7, 476.0], [86.8, 476.0], [86.9, 477.0], [87.0, 477.0], [87.1, 477.0], [87.2, 477.0], [87.3, 477.0], [87.4, 477.0], [87.5, 477.0], [87.6, 478.0], [87.7, 478.0], [87.8, 478.0], [87.9, 478.0], [88.0, 478.0], [88.1, 478.0], [88.2, 479.0], [88.3, 479.0], [88.4, 479.0], [88.5, 479.0], [88.6, 479.0], [88.7, 479.0], [88.8, 479.0], [88.9, 480.0], [89.0, 480.0], [89.1, 480.0], [89.2, 480.0], [89.3, 480.0], [89.4, 480.0], [89.5, 481.0], [89.6, 481.0], [89.7, 481.0], [89.8, 481.0], [89.9, 481.0], [90.0, 481.0], [90.1, 481.0], [90.2, 482.0], [90.3, 482.0], [90.4, 482.0], [90.5, 482.0], [90.6, 482.0], [90.7, 483.0], [90.8, 483.0], [90.9, 483.0], [91.0, 483.0], [91.1, 483.0], [91.2, 484.0], [91.3, 484.0], [91.4, 484.0], [91.5, 484.0], [91.6, 484.0], [91.7, 485.0], [91.8, 485.0], [91.9, 485.0], [92.0, 485.0], [92.1, 485.0], [92.2, 486.0], [92.3, 486.0], [92.4, 486.0], [92.5, 486.0], [92.6, 486.0], [92.7, 487.0], [92.8, 487.0], [92.9, 487.0], [93.0, 487.0], [93.1, 488.0], [93.2, 488.0], [93.3, 488.0], [93.4, 488.0], [93.5, 489.0], [93.6, 489.0], [93.7, 489.0], [93.8, 489.0], [93.9, 490.0], [94.0, 490.0], [94.1, 490.0], [94.2, 490.0], [94.3, 491.0], [94.4, 491.0], [94.5, 491.0], [94.6, 492.0], [94.7, 492.0], [94.8, 492.0], [94.9, 492.0], [95.0, 493.0], [95.1, 493.0], [95.2, 493.0], [95.3, 494.0], [95.4, 494.0], [95.5, 494.0], [95.6, 495.0], [95.7, 495.0], [95.8, 495.0], [95.9, 496.0], [96.0, 496.0], [96.1, 497.0], [96.2, 497.0], [96.3, 497.0], [96.4, 498.0], [96.5, 498.0], [96.6, 499.0], [96.7, 499.0], [96.8, 500.0], [96.9, 500.0], [97.0, 501.0], [97.1, 501.0], [97.2, 502.0], [97.3, 502.0], [97.4, 503.0], [97.5, 504.0], [97.6, 504.0], [97.7, 505.0], [97.8, 505.0], [97.9, 506.0], [98.0, 507.0], [98.1, 508.0], [98.2, 509.0], [98.3, 510.0], [98.4, 511.0], [98.5, 512.0], [98.6, 513.0], [98.7, 514.0], [98.8, 516.0], [98.9, 517.0], [99.0, 519.0], [99.1, 521.0], [99.2, 523.0], [99.3, 525.0], [99.4, 528.0], [99.5, 532.0], [99.6, 536.0], [99.7, 542.0], [99.8, 565.0], [99.9, 654.0], [100.0, 1542.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 753698.0, "series": [{"data": [[0.0, 18.0], [300.0, 23593.0], [600.0, 1199.0], [700.0, 113.0], [1400.0, 6.0], [1500.0, 3.0], [100.0, 174.0], [200.0, 244.0], [400.0, 753698.0], [500.0, 24641.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 779382.0, "series": [{"data": [[0.0, 779382.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24304.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 590.0710004359207, "minX": 1.62030006E12, "maxY": 600.0, "series": [{"data": [[1.62030048E12, 600.0], [1.62030066E12, 590.0710004359207], [1.62030018E12, 600.0], [1.62030036E12, 600.0], [1.62030054E12, 600.0], [1.62030006E12, 597.6975250727816], [1.62030024E12, 600.0], [1.62030042E12, 600.0], [1.6203006E12, 600.0], [1.62030012E12, 600.0], [1.6203003E12, 600.0]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62030066E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.5, "minX": 1.0, "maxY": 622.5, "series": [{"data": [[2.0, 233.0], [3.0, 233.0], [4.0, 252.0], [5.0, 241.0], [6.0, 263.0], [8.0, 243.5], [10.0, 251.0], [12.0, 456.0], [14.0, 305.6666666666667], [16.0, 240.0], [17.0, 347.5], [19.0, 354.0], [22.0, 397.3333333333333], [25.0, 261.5], [26.0, 263.5], [27.0, 452.0], [28.0, 269.0], [29.0, 258.0], [30.0, 261.0], [33.0, 262.0], [32.0, 337.5], [35.0, 261.5], [37.0, 409.0], [36.0, 472.0], [39.0, 463.0], [41.0, 357.0], [43.0, 470.0], [42.0, 265.0], [45.0, 465.0], [44.0, 472.0], [46.0, 464.0], [49.0, 445.5], [48.0, 445.0], [51.0, 470.0], [50.0, 255.0], [53.0, 397.0], [52.0, 398.0], [55.0, 432.0], [54.0, 405.0], [57.0, 463.0], [59.0, 253.0], [58.0, 433.0], [63.0, 415.75], [67.0, 441.0], [65.0, 252.0], [64.0, 344.5], [71.0, 461.0], [70.0, 456.0], [69.0, 395.0], [68.0, 440.0], [73.0, 421.5], [79.0, 456.6666666666667], [76.0, 453.0], [83.0, 464.5], [81.0, 463.0], [87.0, 465.5], [85.0, 467.5], [91.0, 465.5], [89.0, 465.5], [94.0, 464.0], [93.0, 472.0], [99.0, 469.0], [98.0, 468.0], [97.0, 468.6666666666667], [103.0, 467.0], [102.0, 467.0], [101.0, 493.0], [100.0, 468.0], [107.0, 500.0], [106.0, 472.0], [104.0, 472.0], [111.0, 498.0], [110.0, 483.0], [109.0, 492.0], [108.0, 486.0], [115.0, 491.0], [114.0, 492.0], [113.0, 491.0], [119.0, 481.6666666666667], [117.0, 503.0], [123.0, 477.5], [121.0, 511.0], [120.0, 478.0], [127.0, 499.0], [126.0, 475.0], [125.0, 473.0], [124.0, 476.0], [135.0, 485.0], [134.0, 483.0], [131.0, 477.6666666666667], [128.0, 473.0], [142.0, 479.0], [141.0, 483.5], [139.0, 505.0], [138.0, 482.0], [136.0, 479.0], [151.0, 475.0], [150.0, 481.0], [149.0, 475.5], [147.0, 481.0], [146.0, 479.0], [144.0, 483.0], [159.0, 488.5], [158.0, 482.0], [157.0, 481.0], [155.0, 483.0], [153.0, 485.0], [152.0, 477.0], [164.0, 194.85714285714286], [165.0, 144.66666666666666], [167.0, 489.0], [166.0, 487.0], [162.0, 488.6666666666667], [169.0, 221.66666666666666], [170.0, 296.5], [172.0, 363.3333333333333], [173.0, 235.33333333333331], [175.0, 292.5], [174.0, 487.0], [168.0, 487.0], [176.0, 113.0], [178.0, 231.66666666666669], [179.0, 298.0], [180.0, 230.66666666666666], [183.0, 494.0], [182.0, 490.5], [177.0, 490.5], [185.0, 239.33333333333331], [186.0, 219.5], [187.0, 100.5], [189.0, 311.5], [190.0, 150.66666666666666], [188.0, 488.0], [184.0, 491.0], [192.0, 317.5], [193.0, 238.66666666666669], [194.0, 163.0], [195.0, 288.0], [196.0, 143.5], [197.0, 149.0], [198.0, 354.8], [199.0, 212.0], [204.0, 330.0], [205.0, 326.0], [207.0, 486.0], [206.0, 487.0], [203.0, 493.0], [201.0, 491.0], [200.0, 489.0], [214.0, 498.0], [213.0, 493.0], [212.0, 489.0], [210.0, 494.0], [208.0, 487.0], [222.0, 480.0], [221.0, 484.0], [220.0, 487.0], [219.0, 484.0], [218.0, 483.5], [216.0, 481.0], [226.0, 268.0], [227.0, 231.66666666666669], [230.0, 265.25], [231.0, 272.4], [229.0, 477.0], [228.0, 475.0], [225.0, 477.3333333333333], [239.0, 272.2], [238.0, 473.0], [237.0, 472.0], [236.0, 477.6666666666667], [234.0, 474.0], [233.0, 473.0], [240.0, 257.0], [241.0, 272.0], [242.0, 259.2], [243.0, 365.5], [244.0, 318.6666666666667], [245.0, 355.0], [247.0, 467.0], [246.0, 466.0], [249.0, 319.0], [251.0, 401.6666666666667], [253.0, 278.0], [248.0, 467.0], [263.0, 252.33333333333331], [260.0, 361.0], [261.0, 247.75], [262.0, 384.25], [264.0, 315.6666666666667], [265.0, 249.75], [266.0, 226.6], [267.0, 309.0], [271.0, 468.0], [269.0, 469.5], [259.0, 468.0], [258.0, 462.0], [257.0, 481.0], [256.0, 466.0], [285.0, 382.0], [277.0, 163.0], [278.0, 475.5], [279.0, 246.66666666666669], [281.0, 332.75], [284.0, 344.5], [275.0, 476.0], [274.0, 473.0], [273.0, 474.0], [272.0, 470.0], [287.0, 362.5], [286.0, 473.0], [283.0, 476.5], [280.0, 477.0], [291.0, 371.33333333333337], [289.0, 260.25], [288.0, 287.0], [290.0, 189.0], [293.0, 263.5], [294.0, 467.0], [295.0, 302.75], [296.0, 407.5], [302.0, 305.71428571428567], [303.0, 248.4], [300.0, 323.0], [301.0, 346.0], [297.0, 380.5], [298.0, 297.0], [299.0, 329.0], [307.0, 363.0], [304.0, 379.0], [311.0, 457.0], [310.0, 460.0], [308.0, 463.0], [305.0, 301.7], [306.0, 332.6666666666667], [315.0, 330.0], [316.0, 354.25], [318.0, 365.6666666666667], [319.0, 318.8181818181818], [312.0, 462.0], [334.0, 376.75], [320.0, 436.3333333333333], [325.0, 465.6666666666667], [321.0, 434.1666666666667], [330.0, 363.4], [331.0, 349.25000000000006], [333.0, 146.0], [335.0, 137.0], [332.0, 478.0], [323.0, 461.0], [329.0, 468.0], [328.0, 465.5], [350.0, 470.0], [337.0, 305.0], [336.0, 329.5], [343.0, 466.0], [338.0, 163.75], [339.0, 466.0], [341.0, 307.5], [340.0, 466.0], [342.0, 152.0], [344.0, 369.3333333333333], [345.0, 474.0], [347.0, 471.0], [346.0, 472.0], [349.0, 470.0], [348.0, 470.0], [353.0, 416.3333333333333], [352.0, 172.0], [354.0, 220.0], [355.0, 253.0], [356.0, 481.0], [357.0, 404.0], [359.0, 541.25], [360.0, 241.0], [366.0, 289.8], [367.0, 467.0], [364.0, 280.33333333333326], [365.0, 264.1666666666667], [361.0, 152.0], [362.0, 438.6], [363.0, 323.5], [369.0, 227.0], [371.0, 182.0], [370.0, 473.0], [373.0, 368.0], [372.0, 468.5], [374.0, 327.5714285714286], [375.0, 343.8], [368.0, 472.5], [376.0, 405.3333333333333], [379.0, 469.0], [377.0, 622.5], [383.0, 468.0], [381.0, 554.0], [380.0, 620.5], [385.0, 290.8333333333333], [384.0, 307.49999999999994], [386.0, 395.5], [387.0, 467.0], [388.0, 426.0], [390.0, 465.0], [391.0, 309.1666666666667], [392.0, 378.6666666666667], [395.0, 610.6666666666666], [393.0, 622.0], [396.0, 308.0], [398.0, 489.5], [397.0, 610.5], [399.0, 307.0], [403.0, 349.6666666666667], [400.0, 332.3333333333333], [401.0, 360.0], [402.0, 504.5], [404.0, 320.5], [405.0, 598.0], [406.0, 595.5], [411.0, 338.55555555555554], [409.0, 597.5], [412.0, 442.76923076923083], [415.0, 413.1818181818182], [413.0, 605.0], [428.0, 373.0], [419.0, 359.5], [423.0, 599.3333333333334], [416.0, 595.0], [417.0, 463.0], [420.0, 462.2], [421.0, 390.0], [424.0, 469.0], [425.0, 435.0], [426.0, 382.2], [427.0, 462.0], [430.0, 467.0], [431.0, 382.0], [445.0, 443.0], [432.0, 502.875], [435.0, 350.5], [444.0, 556.3333333333334], [436.0, 431.6666666666667], [439.0, 438.5], [438.0, 575.0], [440.0, 499.75], [441.0, 400.0], [442.0, 522.1428571428571], [443.0, 498.5], [447.0, 454.75], [448.0, 457.25], [449.0, 444.25], [452.0, 239.2], [453.0, 486.5], [454.0, 220.0], [455.0, 307.2857142857143], [458.0, 242.5], [459.0, 373.5], [460.0, 321.0], [461.0, 198.0], [462.0, 496.2], [463.0, 399.0], [456.0, 471.0], [471.0, 339.5], [467.0, 494.6666666666667], [466.0, 548.0], [465.0, 542.0], [468.0, 222.0], [469.0, 299.0], [470.0, 400.1666666666667], [472.0, 340.0], [473.0, 434.2857142857143], [474.0, 290.0], [476.0, 353.0], [477.0, 451.0], [478.0, 464.6], [479.0, 536.0], [481.0, 334.75], [480.0, 349.0], [482.0, 387.3], [483.0, 327.3333333333333], [485.0, 392.4], [486.0, 460.25], [487.0, 357.5], [488.0, 370.75], [494.0, 372.7142857142857], [495.0, 516.5], [492.0, 386.0], [493.0, 352.0], [489.0, 359.6666666666667], [490.0, 344.0], [491.0, 359.0], [496.0, 355.1666666666667], [499.0, 325.6666666666667], [500.0, 449.2], [501.0, 300.0], [502.0, 315.0], [503.0, 495.3333333333333], [505.0, 348.6666666666667], [507.0, 385.0], [506.0, 526.5], [508.0, 441.6666666666667], [509.0, 365.076923076923], [511.0, 421.0], [504.0, 522.0], [513.0, 471.75], [524.0, 445.1], [512.0, 477.0], [527.0, 442.0], [525.0, 417.5], [526.0, 450.57142857142856], [514.0, 404.0], [516.0, 463.3333333333333], [517.0, 415.0], [537.0, 483.83333333333337], [538.0, 437.0], [539.0, 447.0], [540.0, 501.75], [543.0, 367.0], [542.0, 466.0], [528.0, 456.6666666666667], [529.0, 467.6], [530.0, 460.0], [531.0, 478.0], [532.0, 450.0], [534.0, 479.5], [535.0, 465.0], [520.0, 444.75], [522.0, 488.3333333333333], [523.0, 450.0], [551.0, 472.0], [545.0, 475.1666666666667], [544.0, 462.6], [558.0, 350.0], [546.0, 441.0], [547.0, 466.8571428571429], [548.0, 489.5], [550.0, 495.3333333333333], [549.0, 480.0], [560.0, 394.0], [575.0, 409.6666666666667], [572.0, 396.3333333333333], [573.0, 477.0], [574.0, 376.0], [568.0, 450.6], [569.0, 415.125], [561.0, 394.0], [562.0, 403.25], [564.0, 400.0], [565.0, 428.0], [566.0, 449.0], [567.0, 423.3333333333333], [552.0, 480.3333333333333], [553.0, 477.5], [555.0, 459.3333333333333], [554.0, 497.5], [556.0, 472.0], [557.0, 410.0], [578.0, 387.0], [587.0, 419.0], [577.0, 412.2], [576.0, 451.0], [590.0, 429.2777777777777], [591.0, 429.25], [588.0, 418.375], [589.0, 439.0], [579.0, 374.0], [580.0, 360.0], [581.0, 369.3333333333333], [582.0, 465.7391304347826], [600.0, 447.8167778592077], [583.0, 456.0], [592.0, 426.0], [593.0, 432.39285714285705], [594.0, 427.72727272727275], [595.0, 417.3333333333333], [596.0, 407.92307692307696], [597.0, 412.1111111111111], [598.0, 391.0], [599.0, 417.43478260869557], [584.0, 389.0], [585.0, 432.99999999999994], [586.0, 421.1111111111111], [1.0, 229.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[599.5961671741288, 447.7145251459076]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 48326.933333333334, "minX": 1.62030006E12, "maxY": 411234.8, "series": [{"data": [[1.62030048E12, 406315.06666666665], [1.62030066E12, 92983.46666666666], [1.62030018E12, 407931.3333333333], [1.62030036E12, 406831.86666666664], [1.62030054E12, 411234.8], [1.62030006E12, 312931.3333333333], [1.62030024E12, 403537.3333333333], [1.62030042E12, 403800.8], [1.6203006E12, 410129.06666666665], [1.62030012E12, 409046.0], [1.6203003E12, 403513.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62030048E12, 211327.63333333333], [1.62030066E12, 48326.933333333334], [1.62030018E12, 212167.66666666666], [1.62030036E12, 211596.23333333334], [1.62030054E12, 213884.6], [1.62030006E12, 162792.66666666666], [1.62030024E12, 210034.66666666666], [1.62030042E12, 210171.6], [1.6203006E12, 213460.63333333333], [1.62030012E12, 212747.0], [1.6203003E12, 209871.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62030066E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 443.1978527985033, "minX": 1.62030006E12, "maxY": 456.18433958151735, "series": [{"data": [[1.62030048E12, 448.58730732327194], [1.62030066E12, 456.18433958151735], [1.62030018E12, 446.53195978651814], [1.62030036E12, 447.9103829352988], [1.62030054E12, 443.1978527985033], [1.62030006E12, 444.4953251375001], [1.62030024E12, 451.4695837512556], [1.62030042E12, 450.9981456422583], [1.6203006E12, 444.14676601571847], [1.62030012E12, 445.5972150018514], [1.6203003E12, 451.7122888905643]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62030066E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 443.1576666420413, "minX": 1.62030006E12, "maxY": 456.1364428945051, "series": [{"data": [[1.62030048E12, 448.5496504716409], [1.62030066E12, 456.1364428945051], [1.62030018E12, 446.4913739605322], [1.62030036E12, 447.86054036563684], [1.62030054E12, 443.1576666420413], [1.62030006E12, 444.45127790359277], [1.62030024E12, 451.4238465396159], [1.62030042E12, 450.9516739337441], [1.6203006E12, 444.0969886875297], [1.62030012E12, 445.54941205594355], [1.6203003E12, 451.66517353007254]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62030066E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62030006E12, "maxY": 0.21523778712390815, "series": [{"data": [[1.62030048E12, 0.027438910418561384], [1.62030066E12, 0.0], [1.62030018E12, 0.024090852674692725], [1.62030036E12, 0.039314026856496036], [1.62030054E12, 0.03751446652384743], [1.62030006E12, 0.21523778712390815], [1.62030024E12, 0.06914493480441333], [1.62030042E12, 0.07364807297148197], [1.6203006E12, 0.11131123474913925], [1.62030012E12, 0.032801089243718475], [1.6203003E12, 0.05899771637933196]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62030066E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.62030006E12, "maxY": 1542.0, "series": [{"data": [[1.62030048E12, 688.0], [1.62030066E12, 735.0], [1.62030018E12, 647.0], [1.62030036E12, 1509.0], [1.62030054E12, 1458.0], [1.62030006E12, 538.0], [1.62030024E12, 1542.0], [1.62030042E12, 1471.0], [1.6203006E12, 1492.0], [1.62030012E12, 657.0], [1.6203003E12, 1505.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62030048E12, 474.0], [1.62030066E12, 488.0], [1.62030018E12, 477.0], [1.62030036E12, 490.0], [1.62030054E12, 480.0], [1.62030006E12, 475.0], [1.62030024E12, 485.0], [1.62030042E12, 499.0], [1.6203006E12, 487.0], [1.62030012E12, 470.0], [1.6203003E12, 484.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62030048E12, 502.0], [1.62030066E12, 677.0], [1.62030018E12, 500.0], [1.62030036E12, 519.0], [1.62030054E12, 503.0], [1.62030006E12, 497.0], [1.62030024E12, 538.0], [1.62030042E12, 664.0], [1.6203006E12, 535.0], [1.62030012E12, 499.0], [1.6203003E12, 513.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62030048E12, 486.0], [1.62030066E12, 509.0], [1.62030018E12, 485.0], [1.62030036E12, 504.0], [1.62030054E12, 488.0], [1.62030006E12, 481.0], [1.62030024E12, 505.0], [1.62030042E12, 531.0], [1.6203006E12, 500.0], [1.62030012E12, 480.0], [1.6203003E12, 494.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62030048E12, 127.0], [1.62030066E12, 143.0], [1.62030018E12, 142.0], [1.62030036E12, 110.0], [1.62030054E12, 97.0], [1.62030006E12, 45.0], [1.62030024E12, 134.0], [1.62030042E12, 140.0], [1.6203006E12, 135.0], [1.62030012E12, 144.0], [1.6203003E12, 153.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62030048E12, 441.0], [1.62030066E12, 449.0], [1.62030018E12, 449.0], [1.62030036E12, 448.0], [1.62030054E12, 449.0], [1.62030006E12, 450.0], [1.62030024E12, 449.0], [1.62030042E12, 451.0], [1.6203006E12, 450.0], [1.62030012E12, 438.0], [1.6203003E12, 451.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62030066E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 223.0, "minX": 227.0, "maxY": 650.0, "series": [{"data": [[227.0, 223.0], [1029.0, 650.0], [1097.0, 453.0], [1140.0, 520.0], [1211.0, 486.0], [1208.0, 486.0], [1186.0, 524.0], [1166.0, 493.0], [1181.0, 507.0], [1184.0, 443.0], [1192.0, 495.0], [1194.0, 476.0], [1212.0, 489.5], [1203.0, 503.0], [1204.0, 493.0], [1268.0, 455.0], [1231.0, 486.0], [1277.0, 465.0], [1278.0, 475.0], [1279.0, 489.0], [1256.0, 463.0], [1257.0, 465.0], [1254.0, 491.0], [1255.0, 491.0], [1258.0, 453.0], [1263.0, 457.0], [1262.0, 465.0], [1261.0, 469.0], [1259.0, 476.0], [1260.0, 475.0], [1238.0, 445.5], [1234.0, 474.0], [1245.0, 466.0], [1247.0, 471.0], [1239.0, 459.0], [1219.0, 485.0], [1221.0, 473.0], [1226.0, 485.0], [1227.0, 482.0], [1228.0, 469.0], [1229.0, 485.0], [1222.0, 492.0], [1252.0, 481.0], [1264.0, 474.0], [1273.0, 465.0], [1276.0, 472.0], [1274.0, 472.0], [1275.0, 471.0], [1271.0, 456.0], [1272.0, 468.0], [1267.0, 461.0], [1265.0, 474.0], [1286.0, 468.0], [1330.0, 447.0], [1333.0, 455.5], [1328.0, 455.0], [1329.0, 453.0], [1294.0, 454.0], [1292.0, 463.0], [1295.0, 464.0], [1290.0, 463.0], [1288.0, 463.0], [1287.0, 459.0], [1289.0, 477.0], [1291.0, 460.0], [1302.0, 460.0], [1301.0, 460.0], [1300.0, 455.0], [1299.0, 457.0], [1298.0, 451.0], [1297.0, 451.0], [1296.0, 458.0], [1310.0, 454.0], [1308.0, 458.0], [1307.0, 453.0], [1309.0, 455.0], [1306.0, 461.0], [1305.0, 455.0], [1304.0, 458.0], [1281.0, 464.0], [1311.0, 450.0], [1280.0, 483.0], [1284.0, 467.0], [1283.0, 469.0], [1285.0, 460.0], [1282.0, 464.0], [1303.0, 460.0], [1324.0, 453.0], [1321.0, 451.0], [1322.0, 462.0], [1323.0, 447.0], [1326.0, 449.0], [1327.0, 449.0], [1325.0, 452.0], [1331.0, 448.0], [1332.0, 451.0], [1320.0, 455.0], [1342.0, 444.0], [1313.0, 459.0], [1315.0, 457.0], [1314.0, 459.0], [1312.0, 455.0], [1343.0, 441.0], [1317.0, 456.0], [1316.0, 461.0], [1341.0, 446.0], [1338.0, 450.0], [1337.0, 442.0], [1334.0, 453.0], [1335.0, 446.0], [1336.0, 444.0], [1339.0, 444.0], [1340.0, 448.0], [1318.0, 456.0], [1319.0, 456.0], [1400.0, 425.0], [1366.0, 439.0], [1365.0, 428.0], [1368.0, 441.0], [1369.0, 441.0], [1367.0, 442.0], [1373.0, 439.0], [1372.0, 439.0], [1371.0, 444.0], [1370.0, 436.0], [1374.0, 443.0], [1375.0, 435.0], [1344.0, 444.0], [1345.0, 450.0], [1357.0, 444.0], [1353.0, 441.0], [1350.0, 446.0], [1348.0, 454.0], [1349.0, 444.0], [1347.0, 442.0], [1351.0, 454.0], [1352.0, 443.0], [1354.0, 444.0], [1355.0, 447.0], [1356.0, 445.0], [1346.0, 447.0], [1386.0, 433.0], [1391.0, 439.0], [1390.0, 429.0], [1388.0, 433.0], [1389.0, 437.0], [1387.0, 434.0], [1384.0, 436.0], [1385.0, 433.0], [1407.0, 429.0], [1406.0, 426.0], [1376.0, 437.0], [1377.0, 441.0], [1381.0, 436.0], [1382.0, 434.0], [1380.0, 437.0], [1379.0, 441.0], [1378.0, 439.0], [1404.0, 430.0], [1401.0, 440.0], [1402.0, 440.0], [1403.0, 430.0], [1405.0, 421.0], [1383.0, 447.0], [1364.0, 446.0], [1399.0, 428.0], [1396.0, 430.0], [1397.0, 433.0], [1398.0, 446.0], [1358.0, 446.0], [1392.0, 433.0], [1393.0, 434.0], [1394.0, 422.0], [1359.0, 442.0], [1395.0, 433.0], [1362.0, 443.0], [1363.0, 446.0], [1360.0, 444.0], [1361.0, 440.0], [1414.0, 424.0], [1463.0, 415.0], [1448.0, 418.0], [1450.0, 410.0], [1451.0, 424.0], [1452.0, 417.0], [1444.0, 424.0], [1441.0, 426.0], [1469.0, 415.0], [1471.0, 423.0], [1428.0, 422.0], [1425.0, 427.0], [1424.0, 417.0], [1426.0, 421.0], [1411.0, 425.0], [1413.0, 424.0], [1412.0, 429.0], [1423.0, 411.0], [1456.0, 419.0], [1457.0, 406.0], [1419.0, 424.0], [1420.0, 417.0], [1421.0, 414.0], [1410.0, 429.0], [1408.0, 429.0], [1431.0, 420.0], [1429.0, 423.0], [1432.0, 408.0], [1438.0, 414.0], [1416.0, 422.0], [1415.0, 436.0], [1417.0, 425.0], [1472.0, 412.0], [1496.0, 415.0], [1497.0, 413.0], [1523.0, 405.0], [1499.0, 407.0], [1508.0, 406.0], [1480.0, 409.0], [1509.0, 415.0], [1493.0, 423.0], [1541.0, 389.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1541.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 222.0, "minX": 227.0, "maxY": 650.0, "series": [{"data": [[227.0, 222.0], [1029.0, 650.0], [1097.0, 453.0], [1140.0, 520.0], [1211.0, 486.0], [1208.0, 486.0], [1186.0, 523.5], [1166.0, 493.0], [1181.0, 507.0], [1184.0, 443.0], [1192.0, 495.0], [1194.0, 476.0], [1212.0, 489.5], [1203.0, 503.0], [1204.0, 493.0], [1268.0, 455.0], [1231.0, 486.0], [1277.0, 465.0], [1278.0, 475.0], [1279.0, 489.0], [1256.0, 463.0], [1257.0, 465.0], [1254.0, 491.0], [1255.0, 491.0], [1258.0, 453.0], [1263.0, 457.0], [1262.0, 465.0], [1261.0, 469.0], [1259.0, 476.0], [1260.0, 475.0], [1238.0, 445.5], [1234.0, 474.0], [1245.0, 466.0], [1247.0, 471.0], [1239.0, 459.0], [1219.0, 485.0], [1221.0, 473.0], [1226.0, 485.0], [1227.0, 482.0], [1228.0, 469.0], [1229.0, 485.0], [1222.0, 492.0], [1252.0, 481.0], [1264.0, 474.0], [1273.0, 465.0], [1276.0, 472.0], [1274.0, 472.0], [1275.0, 471.0], [1271.0, 456.0], [1272.0, 468.0], [1267.0, 461.0], [1265.0, 474.0], [1286.0, 468.0], [1330.0, 447.0], [1333.0, 455.0], [1328.0, 455.0], [1329.0, 453.0], [1294.0, 454.0], [1292.0, 463.0], [1295.0, 464.0], [1290.0, 463.0], [1288.0, 463.0], [1287.0, 459.0], [1289.0, 477.0], [1291.0, 460.0], [1302.0, 460.0], [1301.0, 460.0], [1300.0, 455.0], [1299.0, 457.0], [1298.0, 451.0], [1297.0, 451.0], [1296.0, 458.0], [1310.0, 454.0], [1308.0, 458.0], [1307.0, 453.0], [1309.0, 455.0], [1306.0, 461.0], [1305.0, 455.0], [1304.0, 458.0], [1281.0, 464.0], [1311.0, 450.0], [1280.0, 483.0], [1284.0, 467.0], [1283.0, 469.0], [1285.0, 460.0], [1282.0, 464.0], [1303.0, 460.0], [1324.0, 453.0], [1321.0, 451.0], [1322.0, 461.0], [1323.0, 447.0], [1326.0, 449.0], [1327.0, 449.0], [1325.0, 452.0], [1331.0, 448.0], [1332.0, 451.0], [1320.0, 455.0], [1342.0, 444.0], [1313.0, 459.0], [1315.0, 457.0], [1314.0, 459.0], [1312.0, 455.0], [1343.0, 441.0], [1317.0, 456.0], [1316.0, 461.0], [1341.0, 446.0], [1338.0, 450.0], [1337.0, 442.0], [1334.0, 453.0], [1335.0, 446.0], [1336.0, 444.0], [1339.0, 444.0], [1340.0, 448.0], [1318.0, 456.0], [1319.0, 456.0], [1400.0, 425.0], [1366.0, 439.0], [1365.0, 428.0], [1368.0, 441.0], [1369.0, 441.0], [1367.0, 442.0], [1373.0, 439.0], [1372.0, 439.0], [1371.0, 444.0], [1370.0, 436.0], [1374.0, 443.0], [1375.0, 435.0], [1344.0, 444.0], [1345.0, 450.0], [1357.0, 444.0], [1353.0, 441.0], [1350.0, 446.0], [1348.0, 454.0], [1349.0, 444.0], [1347.0, 442.0], [1351.0, 454.0], [1352.0, 443.0], [1354.0, 444.0], [1355.0, 447.0], [1356.0, 445.0], [1346.0, 447.0], [1386.0, 433.0], [1391.0, 439.0], [1390.0, 429.0], [1388.0, 433.0], [1389.0, 437.0], [1387.0, 434.0], [1384.0, 436.0], [1385.0, 433.0], [1407.0, 429.0], [1406.0, 426.0], [1376.0, 437.0], [1377.0, 441.0], [1381.0, 436.0], [1382.0, 434.0], [1380.0, 437.0], [1379.0, 441.0], [1378.0, 439.0], [1404.0, 430.0], [1401.0, 440.0], [1402.0, 440.0], [1403.0, 430.0], [1405.0, 421.0], [1383.0, 447.0], [1364.0, 446.0], [1399.0, 428.0], [1396.0, 430.0], [1397.0, 433.0], [1398.0, 446.0], [1358.0, 446.0], [1392.0, 433.0], [1393.0, 434.0], [1394.0, 422.0], [1359.0, 442.0], [1395.0, 433.0], [1362.0, 443.0], [1363.0, 446.0], [1360.0, 444.0], [1361.0, 440.0], [1414.0, 424.0], [1463.0, 415.0], [1448.0, 418.0], [1450.0, 410.0], [1451.0, 424.0], [1452.0, 417.0], [1444.0, 424.0], [1441.0, 426.0], [1469.0, 415.0], [1471.0, 423.0], [1428.0, 422.0], [1425.0, 426.0], [1424.0, 417.0], [1426.0, 421.0], [1411.0, 425.0], [1413.0, 424.0], [1412.0, 429.0], [1423.0, 411.0], [1456.0, 419.0], [1457.0, 406.0], [1419.0, 424.0], [1420.0, 417.0], [1421.0, 414.0], [1410.0, 429.0], [1408.0, 429.0], [1431.0, 420.0], [1429.0, 423.0], [1432.0, 408.0], [1438.0, 414.0], [1416.0, 422.0], [1415.0, 436.0], [1417.0, 425.0], [1472.0, 412.0], [1496.0, 415.0], [1497.0, 413.0], [1523.0, 405.0], [1499.0, 407.0], [1508.0, 406.0], [1480.0, 409.0], [1509.0, 415.0], [1493.0, 423.0], [1541.0, 389.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1541.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 295.8666666666667, "minX": 1.62030006E12, "maxY": 1353.7, "series": [{"data": [[1.62030048E12, 1337.5333333333333], [1.62030066E12, 295.8666666666667], [1.62030018E12, 1342.8333333333333], [1.62030036E12, 1339.2166666666667], [1.62030054E12, 1353.7], [1.62030006E12, 1040.3333333333333], [1.62030024E12, 1329.3333333333333], [1.62030042E12, 1330.1833333333334], [1.6203006E12, 1351.0166666666667], [1.62030012E12, 1346.5], [1.6203003E12, 1328.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62030066E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 305.8666666666667, "minX": 1.62030006E12, "maxY": 1353.7, "series": [{"data": [[1.62030048E12, 1337.5166666666667], [1.62030066E12, 305.8666666666667], [1.62030018E12, 1342.8333333333333], [1.62030036E12, 1339.2166666666667], [1.62030054E12, 1353.7], [1.62030006E12, 1030.3333333333333], [1.62030024E12, 1329.3333333333333], [1.62030042E12, 1330.2], [1.6203006E12, 1351.0166666666667], [1.62030012E12, 1346.5], [1.6203003E12, 1328.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62030066E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 305.8666666666667, "minX": 1.62030006E12, "maxY": 1353.7, "series": [{"data": [[1.62030048E12, 1337.5166666666667], [1.62030066E12, 305.8666666666667], [1.62030018E12, 1342.8333333333333], [1.62030036E12, 1339.2166666666667], [1.62030054E12, 1353.7], [1.62030006E12, 1030.3333333333333], [1.62030024E12, 1329.3333333333333], [1.62030042E12, 1330.2], [1.6203006E12, 1351.0166666666667], [1.62030012E12, 1346.5], [1.6203003E12, 1328.3]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62030066E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 305.8666666666667, "minX": 1.62030006E12, "maxY": 1353.7, "series": [{"data": [[1.62030048E12, 1337.5166666666667], [1.62030066E12, 305.8666666666667], [1.62030018E12, 1342.8333333333333], [1.62030036E12, 1339.2166666666667], [1.62030054E12, 1353.7], [1.62030006E12, 1030.3333333333333], [1.62030024E12, 1329.3333333333333], [1.62030042E12, 1330.2], [1.6203006E12, 1351.0166666666667], [1.62030012E12, 1346.5], [1.6203003E12, 1328.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62030066E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

