/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 1987.0, "series": [{"data": [[0.0, 76.0], [0.1, 246.0], [0.2, 251.0], [0.3, 254.0], [0.4, 257.0], [0.5, 258.0], [0.6, 260.0], [0.7, 261.0], [0.8, 263.0], [0.9, 264.0], [1.0, 264.0], [1.1, 265.0], [1.2, 266.0], [1.3, 267.0], [1.4, 268.0], [1.5, 268.0], [1.6, 269.0], [1.7, 270.0], [1.8, 270.0], [1.9, 271.0], [2.0, 271.0], [2.1, 272.0], [2.2, 272.0], [2.3, 273.0], [2.4, 273.0], [2.5, 274.0], [2.6, 274.0], [2.7, 275.0], [2.8, 275.0], [2.9, 276.0], [3.0, 276.0], [3.1, 276.0], [3.2, 277.0], [3.3, 277.0], [3.4, 277.0], [3.5, 278.0], [3.6, 278.0], [3.7, 279.0], [3.8, 279.0], [3.9, 279.0], [4.0, 280.0], [4.1, 280.0], [4.2, 280.0], [4.3, 281.0], [4.4, 281.0], [4.5, 281.0], [4.6, 281.0], [4.7, 282.0], [4.8, 282.0], [4.9, 282.0], [5.0, 283.0], [5.1, 283.0], [5.2, 283.0], [5.3, 283.0], [5.4, 284.0], [5.5, 284.0], [5.6, 284.0], [5.7, 284.0], [5.8, 285.0], [5.9, 285.0], [6.0, 285.0], [6.1, 285.0], [6.2, 286.0], [6.3, 286.0], [6.4, 286.0], [6.5, 286.0], [6.6, 287.0], [6.7, 287.0], [6.8, 287.0], [6.9, 287.0], [7.0, 287.0], [7.1, 288.0], [7.2, 288.0], [7.3, 288.0], [7.4, 288.0], [7.5, 288.0], [7.6, 289.0], [7.7, 289.0], [7.8, 289.0], [7.9, 289.0], [8.0, 289.0], [8.1, 290.0], [8.2, 290.0], [8.3, 290.0], [8.4, 290.0], [8.5, 290.0], [8.6, 290.0], [8.7, 291.0], [8.8, 291.0], [8.9, 291.0], [9.0, 291.0], [9.1, 291.0], [9.2, 291.0], [9.3, 292.0], [9.4, 292.0], [9.5, 292.0], [9.6, 292.0], [9.7, 292.0], [9.8, 292.0], [9.9, 293.0], [10.0, 293.0], [10.1, 293.0], [10.2, 293.0], [10.3, 293.0], [10.4, 293.0], [10.5, 293.0], [10.6, 294.0], [10.7, 294.0], [10.8, 294.0], [10.9, 294.0], [11.0, 294.0], [11.1, 294.0], [11.2, 294.0], [11.3, 295.0], [11.4, 295.0], [11.5, 295.0], [11.6, 295.0], [11.7, 295.0], [11.8, 295.0], [11.9, 295.0], [12.0, 296.0], [12.1, 296.0], [12.2, 296.0], [12.3, 296.0], [12.4, 296.0], [12.5, 296.0], [12.6, 296.0], [12.7, 296.0], [12.8, 297.0], [12.9, 297.0], [13.0, 297.0], [13.1, 297.0], [13.2, 297.0], [13.3, 297.0], [13.4, 297.0], [13.5, 297.0], [13.6, 298.0], [13.7, 298.0], [13.8, 298.0], [13.9, 298.0], [14.0, 298.0], [14.1, 298.0], [14.2, 298.0], [14.3, 298.0], [14.4, 299.0], [14.5, 299.0], [14.6, 299.0], [14.7, 299.0], [14.8, 299.0], [14.9, 299.0], [15.0, 299.0], [15.1, 299.0], [15.2, 300.0], [15.3, 300.0], [15.4, 300.0], [15.5, 300.0], [15.6, 300.0], [15.7, 300.0], [15.8, 300.0], [15.9, 300.0], [16.0, 300.0], [16.1, 301.0], [16.2, 301.0], [16.3, 301.0], [16.4, 301.0], [16.5, 301.0], [16.6, 301.0], [16.7, 301.0], [16.8, 301.0], [16.9, 302.0], [17.0, 302.0], [17.1, 302.0], [17.2, 302.0], [17.3, 302.0], [17.4, 302.0], [17.5, 302.0], [17.6, 302.0], [17.7, 302.0], [17.8, 303.0], [17.9, 303.0], [18.0, 303.0], [18.1, 303.0], [18.2, 303.0], [18.3, 303.0], [18.4, 303.0], [18.5, 303.0], [18.6, 303.0], [18.7, 303.0], [18.8, 304.0], [18.9, 304.0], [19.0, 304.0], [19.1, 304.0], [19.2, 304.0], [19.3, 304.0], [19.4, 304.0], [19.5, 304.0], [19.6, 304.0], [19.7, 305.0], [19.8, 305.0], [19.9, 305.0], [20.0, 305.0], [20.1, 305.0], [20.2, 305.0], [20.3, 305.0], [20.4, 305.0], [20.5, 305.0], [20.6, 305.0], [20.7, 306.0], [20.8, 306.0], [20.9, 306.0], [21.0, 306.0], [21.1, 306.0], [21.2, 306.0], [21.3, 306.0], [21.4, 306.0], [21.5, 306.0], [21.6, 306.0], [21.7, 307.0], [21.8, 307.0], [21.9, 307.0], [22.0, 307.0], [22.1, 307.0], [22.2, 307.0], [22.3, 307.0], [22.4, 307.0], [22.5, 307.0], [22.6, 307.0], [22.7, 308.0], [22.8, 308.0], [22.9, 308.0], [23.0, 308.0], [23.1, 308.0], [23.2, 308.0], [23.3, 308.0], [23.4, 308.0], [23.5, 308.0], [23.6, 308.0], [23.7, 308.0], [23.8, 309.0], [23.9, 309.0], [24.0, 309.0], [24.1, 309.0], [24.2, 309.0], [24.3, 309.0], [24.4, 309.0], [24.5, 309.0], [24.6, 309.0], [24.7, 309.0], [24.8, 309.0], [24.9, 310.0], [25.0, 310.0], [25.1, 310.0], [25.2, 310.0], [25.3, 310.0], [25.4, 310.0], [25.5, 310.0], [25.6, 310.0], [25.7, 310.0], [25.8, 310.0], [25.9, 311.0], [26.0, 311.0], [26.1, 311.0], [26.2, 311.0], [26.3, 311.0], [26.4, 311.0], [26.5, 311.0], [26.6, 311.0], [26.7, 311.0], [26.8, 311.0], [26.9, 311.0], [27.0, 311.0], [27.1, 312.0], [27.2, 312.0], [27.3, 312.0], [27.4, 312.0], [27.5, 312.0], [27.6, 312.0], [27.7, 312.0], [27.8, 312.0], [27.9, 312.0], [28.0, 312.0], [28.1, 312.0], [28.2, 313.0], [28.3, 313.0], [28.4, 313.0], [28.5, 313.0], [28.6, 313.0], [28.7, 313.0], [28.8, 313.0], [28.9, 313.0], [29.0, 313.0], [29.1, 313.0], [29.2, 313.0], [29.3, 314.0], [29.4, 314.0], [29.5, 314.0], [29.6, 314.0], [29.7, 314.0], [29.8, 314.0], [29.9, 314.0], [30.0, 314.0], [30.1, 314.0], [30.2, 314.0], [30.3, 314.0], [30.4, 314.0], [30.5, 315.0], [30.6, 315.0], [30.7, 315.0], [30.8, 315.0], [30.9, 315.0], [31.0, 315.0], [31.1, 315.0], [31.2, 315.0], [31.3, 315.0], [31.4, 315.0], [31.5, 315.0], [31.6, 316.0], [31.7, 316.0], [31.8, 316.0], [31.9, 316.0], [32.0, 316.0], [32.1, 316.0], [32.2, 316.0], [32.3, 316.0], [32.4, 316.0], [32.5, 316.0], [32.6, 316.0], [32.7, 316.0], [32.8, 317.0], [32.9, 317.0], [33.0, 317.0], [33.1, 317.0], [33.2, 317.0], [33.3, 317.0], [33.4, 317.0], [33.5, 317.0], [33.6, 317.0], [33.7, 317.0], [33.8, 317.0], [33.9, 317.0], [34.0, 318.0], [34.1, 318.0], [34.2, 318.0], [34.3, 318.0], [34.4, 318.0], [34.5, 318.0], [34.6, 318.0], [34.7, 318.0], [34.8, 318.0], [34.9, 318.0], [35.0, 318.0], [35.1, 319.0], [35.2, 319.0], [35.3, 319.0], [35.4, 319.0], [35.5, 319.0], [35.6, 319.0], [35.7, 319.0], [35.8, 319.0], [35.9, 319.0], [36.0, 319.0], [36.1, 319.0], [36.2, 319.0], [36.3, 320.0], [36.4, 320.0], [36.5, 320.0], [36.6, 320.0], [36.7, 320.0], [36.8, 320.0], [36.9, 320.0], [37.0, 320.0], [37.1, 320.0], [37.2, 320.0], [37.3, 320.0], [37.4, 321.0], [37.5, 321.0], [37.6, 321.0], [37.7, 321.0], [37.8, 321.0], [37.9, 321.0], [38.0, 321.0], [38.1, 321.0], [38.2, 321.0], [38.3, 321.0], [38.4, 321.0], [38.5, 321.0], [38.6, 322.0], [38.7, 322.0], [38.8, 322.0], [38.9, 322.0], [39.0, 322.0], [39.1, 322.0], [39.2, 322.0], [39.3, 322.0], [39.4, 322.0], [39.5, 322.0], [39.6, 322.0], [39.7, 322.0], [39.8, 323.0], [39.9, 323.0], [40.0, 323.0], [40.1, 323.0], [40.2, 323.0], [40.3, 323.0], [40.4, 323.0], [40.5, 323.0], [40.6, 323.0], [40.7, 323.0], [40.8, 323.0], [40.9, 323.0], [41.0, 324.0], [41.1, 324.0], [41.2, 324.0], [41.3, 324.0], [41.4, 324.0], [41.5, 324.0], [41.6, 324.0], [41.7, 324.0], [41.8, 324.0], [41.9, 324.0], [42.0, 324.0], [42.1, 324.0], [42.2, 325.0], [42.3, 325.0], [42.4, 325.0], [42.5, 325.0], [42.6, 325.0], [42.7, 325.0], [42.8, 325.0], [42.9, 325.0], [43.0, 325.0], [43.1, 325.0], [43.2, 325.0], [43.3, 325.0], [43.4, 326.0], [43.5, 326.0], [43.6, 326.0], [43.7, 326.0], [43.8, 326.0], [43.9, 326.0], [44.0, 326.0], [44.1, 326.0], [44.2, 326.0], [44.3, 326.0], [44.4, 326.0], [44.5, 326.0], [44.6, 327.0], [44.7, 327.0], [44.8, 327.0], [44.9, 327.0], [45.0, 327.0], [45.1, 327.0], [45.2, 327.0], [45.3, 327.0], [45.4, 327.0], [45.5, 327.0], [45.6, 327.0], [45.7, 328.0], [45.8, 328.0], [45.9, 328.0], [46.0, 328.0], [46.1, 328.0], [46.2, 328.0], [46.3, 328.0], [46.4, 328.0], [46.5, 328.0], [46.6, 328.0], [46.7, 328.0], [46.8, 328.0], [46.9, 329.0], [47.0, 329.0], [47.1, 329.0], [47.2, 329.0], [47.3, 329.0], [47.4, 329.0], [47.5, 329.0], [47.6, 329.0], [47.7, 329.0], [47.8, 329.0], [47.9, 329.0], [48.0, 330.0], [48.1, 330.0], [48.2, 330.0], [48.3, 330.0], [48.4, 330.0], [48.5, 330.0], [48.6, 330.0], [48.7, 330.0], [48.8, 330.0], [48.9, 330.0], [49.0, 330.0], [49.1, 331.0], [49.2, 331.0], [49.3, 331.0], [49.4, 331.0], [49.5, 331.0], [49.6, 331.0], [49.7, 331.0], [49.8, 331.0], [49.9, 331.0], [50.0, 331.0], [50.1, 331.0], [50.2, 331.0], [50.3, 332.0], [50.4, 332.0], [50.5, 332.0], [50.6, 332.0], [50.7, 332.0], [50.8, 332.0], [50.9, 332.0], [51.0, 332.0], [51.1, 332.0], [51.2, 332.0], [51.3, 332.0], [51.4, 333.0], [51.5, 333.0], [51.6, 333.0], [51.7, 333.0], [51.8, 333.0], [51.9, 333.0], [52.0, 333.0], [52.1, 333.0], [52.2, 333.0], [52.3, 333.0], [52.4, 333.0], [52.5, 334.0], [52.6, 334.0], [52.7, 334.0], [52.8, 334.0], [52.9, 334.0], [53.0, 334.0], [53.1, 334.0], [53.2, 334.0], [53.3, 334.0], [53.4, 334.0], [53.5, 334.0], [53.6, 335.0], [53.7, 335.0], [53.8, 335.0], [53.9, 335.0], [54.0, 335.0], [54.1, 335.0], [54.2, 335.0], [54.3, 335.0], [54.4, 335.0], [54.5, 335.0], [54.6, 335.0], [54.7, 336.0], [54.8, 336.0], [54.9, 336.0], [55.0, 336.0], [55.1, 336.0], [55.2, 336.0], [55.3, 336.0], [55.4, 336.0], [55.5, 336.0], [55.6, 336.0], [55.7, 336.0], [55.8, 337.0], [55.9, 337.0], [56.0, 337.0], [56.1, 337.0], [56.2, 337.0], [56.3, 337.0], [56.4, 337.0], [56.5, 337.0], [56.6, 337.0], [56.7, 337.0], [56.8, 337.0], [56.9, 338.0], [57.0, 338.0], [57.1, 338.0], [57.2, 338.0], [57.3, 338.0], [57.4, 338.0], [57.5, 338.0], [57.6, 338.0], [57.7, 338.0], [57.8, 338.0], [57.9, 338.0], [58.0, 339.0], [58.1, 339.0], [58.2, 339.0], [58.3, 339.0], [58.4, 339.0], [58.5, 339.0], [58.6, 339.0], [58.7, 339.0], [58.8, 339.0], [58.9, 339.0], [59.0, 339.0], [59.1, 340.0], [59.2, 340.0], [59.3, 340.0], [59.4, 340.0], [59.5, 340.0], [59.6, 340.0], [59.7, 340.0], [59.8, 340.0], [59.9, 340.0], [60.0, 340.0], [60.1, 341.0], [60.2, 341.0], [60.3, 341.0], [60.4, 341.0], [60.5, 341.0], [60.6, 341.0], [60.7, 341.0], [60.8, 341.0], [60.9, 341.0], [61.0, 341.0], [61.1, 342.0], [61.2, 342.0], [61.3, 342.0], [61.4, 342.0], [61.5, 342.0], [61.6, 342.0], [61.7, 342.0], [61.8, 342.0], [61.9, 342.0], [62.0, 342.0], [62.1, 343.0], [62.2, 343.0], [62.3, 343.0], [62.4, 343.0], [62.5, 343.0], [62.6, 343.0], [62.7, 343.0], [62.8, 343.0], [62.9, 343.0], [63.0, 343.0], [63.1, 344.0], [63.2, 344.0], [63.3, 344.0], [63.4, 344.0], [63.5, 344.0], [63.6, 344.0], [63.7, 344.0], [63.8, 344.0], [63.9, 344.0], [64.0, 345.0], [64.1, 345.0], [64.2, 345.0], [64.3, 345.0], [64.4, 345.0], [64.5, 345.0], [64.6, 345.0], [64.7, 345.0], [64.8, 345.0], [64.9, 346.0], [65.0, 346.0], [65.1, 346.0], [65.2, 346.0], [65.3, 346.0], [65.4, 346.0], [65.5, 346.0], [65.6, 346.0], [65.7, 346.0], [65.8, 346.0], [65.9, 347.0], [66.0, 347.0], [66.1, 347.0], [66.2, 347.0], [66.3, 347.0], [66.4, 347.0], [66.5, 347.0], [66.6, 347.0], [66.7, 347.0], [66.8, 348.0], [66.9, 348.0], [67.0, 348.0], [67.1, 348.0], [67.2, 348.0], [67.3, 348.0], [67.4, 348.0], [67.5, 348.0], [67.6, 348.0], [67.7, 349.0], [67.8, 349.0], [67.9, 349.0], [68.0, 349.0], [68.1, 349.0], [68.2, 349.0], [68.3, 349.0], [68.4, 349.0], [68.5, 349.0], [68.6, 350.0], [68.7, 350.0], [68.8, 350.0], [68.9, 350.0], [69.0, 350.0], [69.1, 350.0], [69.2, 350.0], [69.3, 350.0], [69.4, 351.0], [69.5, 351.0], [69.6, 351.0], [69.7, 351.0], [69.8, 351.0], [69.9, 351.0], [70.0, 351.0], [70.1, 351.0], [70.2, 351.0], [70.3, 352.0], [70.4, 352.0], [70.5, 352.0], [70.6, 352.0], [70.7, 352.0], [70.8, 352.0], [70.9, 352.0], [71.0, 352.0], [71.1, 352.0], [71.2, 353.0], [71.3, 353.0], [71.4, 353.0], [71.5, 353.0], [71.6, 353.0], [71.7, 353.0], [71.8, 353.0], [71.9, 353.0], [72.0, 354.0], [72.1, 354.0], [72.2, 354.0], [72.3, 354.0], [72.4, 354.0], [72.5, 354.0], [72.6, 354.0], [72.7, 354.0], [72.8, 355.0], [72.9, 355.0], [73.0, 355.0], [73.1, 355.0], [73.2, 355.0], [73.3, 355.0], [73.4, 355.0], [73.5, 355.0], [73.6, 356.0], [73.7, 356.0], [73.8, 356.0], [73.9, 356.0], [74.0, 356.0], [74.1, 356.0], [74.2, 356.0], [74.3, 356.0], [74.4, 357.0], [74.5, 357.0], [74.6, 357.0], [74.7, 357.0], [74.8, 357.0], [74.9, 357.0], [75.0, 357.0], [75.1, 357.0], [75.2, 358.0], [75.3, 358.0], [75.4, 358.0], [75.5, 358.0], [75.6, 358.0], [75.7, 358.0], [75.8, 358.0], [75.9, 358.0], [76.0, 359.0], [76.1, 359.0], [76.2, 359.0], [76.3, 359.0], [76.4, 359.0], [76.5, 359.0], [76.6, 359.0], [76.7, 360.0], [76.8, 360.0], [76.9, 360.0], [77.0, 360.0], [77.1, 360.0], [77.2, 360.0], [77.3, 360.0], [77.4, 361.0], [77.5, 361.0], [77.6, 361.0], [77.7, 361.0], [77.8, 361.0], [77.9, 361.0], [78.0, 361.0], [78.1, 362.0], [78.2, 362.0], [78.3, 362.0], [78.4, 362.0], [78.5, 362.0], [78.6, 362.0], [78.7, 362.0], [78.8, 363.0], [78.9, 363.0], [79.0, 363.0], [79.1, 363.0], [79.2, 363.0], [79.3, 363.0], [79.4, 363.0], [79.5, 364.0], [79.6, 364.0], [79.7, 364.0], [79.8, 364.0], [79.9, 364.0], [80.0, 364.0], [80.1, 365.0], [80.2, 365.0], [80.3, 365.0], [80.4, 365.0], [80.5, 365.0], [80.6, 365.0], [80.7, 365.0], [80.8, 366.0], [80.9, 366.0], [81.0, 366.0], [81.1, 366.0], [81.2, 366.0], [81.3, 366.0], [81.4, 367.0], [81.5, 367.0], [81.6, 367.0], [81.7, 367.0], [81.8, 367.0], [81.9, 368.0], [82.0, 368.0], [82.1, 368.0], [82.2, 368.0], [82.3, 368.0], [82.4, 368.0], [82.5, 369.0], [82.6, 369.0], [82.7, 369.0], [82.8, 369.0], [82.9, 369.0], [83.0, 369.0], [83.1, 370.0], [83.2, 370.0], [83.3, 370.0], [83.4, 370.0], [83.5, 370.0], [83.6, 371.0], [83.7, 371.0], [83.8, 371.0], [83.9, 371.0], [84.0, 371.0], [84.1, 372.0], [84.2, 372.0], [84.3, 372.0], [84.4, 372.0], [84.5, 372.0], [84.6, 373.0], [84.7, 373.0], [84.8, 373.0], [84.9, 373.0], [85.0, 373.0], [85.1, 374.0], [85.2, 374.0], [85.3, 374.0], [85.4, 374.0], [85.5, 374.0], [85.6, 375.0], [85.7, 375.0], [85.8, 375.0], [85.9, 375.0], [86.0, 376.0], [86.1, 376.0], [86.2, 376.0], [86.3, 376.0], [86.4, 376.0], [86.5, 377.0], [86.6, 377.0], [86.7, 377.0], [86.8, 377.0], [86.9, 378.0], [87.0, 378.0], [87.1, 378.0], [87.2, 378.0], [87.3, 379.0], [87.4, 379.0], [87.5, 379.0], [87.6, 379.0], [87.7, 380.0], [87.8, 380.0], [87.9, 380.0], [88.0, 380.0], [88.1, 381.0], [88.2, 381.0], [88.3, 381.0], [88.4, 381.0], [88.5, 382.0], [88.6, 382.0], [88.7, 382.0], [88.8, 382.0], [88.9, 383.0], [89.0, 383.0], [89.1, 383.0], [89.2, 384.0], [89.3, 384.0], [89.4, 384.0], [89.5, 384.0], [89.6, 385.0], [89.7, 385.0], [89.8, 385.0], [89.9, 386.0], [90.0, 386.0], [90.1, 386.0], [90.2, 387.0], [90.3, 387.0], [90.4, 387.0], [90.5, 387.0], [90.6, 388.0], [90.7, 388.0], [90.8, 388.0], [90.9, 389.0], [91.0, 389.0], [91.1, 389.0], [91.2, 390.0], [91.3, 390.0], [91.4, 391.0], [91.5, 391.0], [91.6, 391.0], [91.7, 392.0], [91.8, 392.0], [91.9, 392.0], [92.0, 393.0], [92.1, 393.0], [92.2, 394.0], [92.3, 394.0], [92.4, 394.0], [92.5, 395.0], [92.6, 395.0], [92.7, 396.0], [92.8, 396.0], [92.9, 397.0], [93.0, 397.0], [93.1, 398.0], [93.2, 398.0], [93.3, 399.0], [93.4, 399.0], [93.5, 400.0], [93.6, 400.0], [93.7, 401.0], [93.8, 401.0], [93.9, 402.0], [94.0, 402.0], [94.1, 403.0], [94.2, 404.0], [94.3, 404.0], [94.4, 405.0], [94.5, 405.0], [94.6, 406.0], [94.7, 407.0], [94.8, 407.0], [94.9, 408.0], [95.0, 409.0], [95.1, 410.0], [95.2, 410.0], [95.3, 411.0], [95.4, 412.0], [95.5, 413.0], [95.6, 414.0], [95.7, 415.0], [95.8, 416.0], [95.9, 417.0], [96.0, 418.0], [96.1, 419.0], [96.2, 420.0], [96.3, 421.0], [96.4, 422.0], [96.5, 423.0], [96.6, 424.0], [96.7, 426.0], [96.8, 427.0], [96.9, 428.0], [97.0, 430.0], [97.1, 432.0], [97.2, 434.0], [97.3, 435.0], [97.4, 438.0], [97.5, 440.0], [97.6, 442.0], [97.7, 444.0], [97.8, 447.0], [97.9, 451.0], [98.0, 454.0], [98.1, 458.0], [98.2, 461.0], [98.3, 466.0], [98.4, 472.0], [98.5, 478.0], [98.6, 484.0], [98.7, 492.0], [98.8, 500.0], [98.9, 510.0], [99.0, 520.0], [99.1, 531.0], [99.2, 545.0], [99.3, 564.0], [99.4, 592.0], [99.5, 616.0], [99.6, 656.0], [99.7, 727.0], [99.8, 842.0], [99.9, 1073.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[0.0, 45.0], [0.1, 254.0], [0.2, 263.0], [0.3, 268.0], [0.4, 271.0], [0.5, 273.0], [0.6, 276.0], [0.7, 277.0], [0.8, 279.0], [0.9, 280.0], [1.0, 282.0], [1.1, 283.0], [1.2, 284.0], [1.3, 285.0], [1.4, 286.0], [1.5, 287.0], [1.6, 288.0], [1.7, 288.0], [1.8, 289.0], [1.9, 290.0], [2.0, 290.0], [2.1, 291.0], [2.2, 292.0], [2.3, 292.0], [2.4, 293.0], [2.5, 293.0], [2.6, 294.0], [2.7, 294.0], [2.8, 295.0], [2.9, 295.0], [3.0, 296.0], [3.1, 296.0], [3.2, 297.0], [3.3, 297.0], [3.4, 297.0], [3.5, 298.0], [3.6, 298.0], [3.7, 298.0], [3.8, 299.0], [3.9, 299.0], [4.0, 299.0], [4.1, 300.0], [4.2, 300.0], [4.3, 300.0], [4.4, 301.0], [4.5, 301.0], [4.6, 301.0], [4.7, 302.0], [4.8, 302.0], [4.9, 302.0], [5.0, 303.0], [5.1, 303.0], [5.2, 303.0], [5.3, 303.0], [5.4, 304.0], [5.5, 304.0], [5.6, 304.0], [5.7, 304.0], [5.8, 305.0], [5.9, 305.0], [6.0, 305.0], [6.1, 305.0], [6.2, 306.0], [6.3, 306.0], [6.4, 306.0], [6.5, 306.0], [6.6, 307.0], [6.7, 307.0], [6.8, 307.0], [6.9, 307.0], [7.0, 308.0], [7.1, 308.0], [7.2, 308.0], [7.3, 308.0], [7.4, 308.0], [7.5, 309.0], [7.6, 309.0], [7.7, 309.0], [7.8, 309.0], [7.9, 310.0], [8.0, 310.0], [8.1, 310.0], [8.2, 310.0], [8.3, 310.0], [8.4, 311.0], [8.5, 311.0], [8.6, 311.0], [8.7, 311.0], [8.8, 311.0], [8.9, 312.0], [9.0, 312.0], [9.1, 312.0], [9.2, 312.0], [9.3, 312.0], [9.4, 312.0], [9.5, 313.0], [9.6, 313.0], [9.7, 313.0], [9.8, 313.0], [9.9, 313.0], [10.0, 314.0], [10.1, 314.0], [10.2, 314.0], [10.3, 314.0], [10.4, 314.0], [10.5, 314.0], [10.6, 315.0], [10.7, 315.0], [10.8, 315.0], [10.9, 315.0], [11.0, 315.0], [11.1, 315.0], [11.2, 316.0], [11.3, 316.0], [11.4, 316.0], [11.5, 316.0], [11.6, 316.0], [11.7, 316.0], [11.8, 317.0], [11.9, 317.0], [12.0, 317.0], [12.1, 317.0], [12.2, 317.0], [12.3, 317.0], [12.4, 317.0], [12.5, 318.0], [12.6, 318.0], [12.7, 318.0], [12.8, 318.0], [12.9, 318.0], [13.0, 318.0], [13.1, 319.0], [13.2, 319.0], [13.3, 319.0], [13.4, 319.0], [13.5, 319.0], [13.6, 319.0], [13.7, 319.0], [13.8, 320.0], [13.9, 320.0], [14.0, 320.0], [14.1, 320.0], [14.2, 320.0], [14.3, 320.0], [14.4, 320.0], [14.5, 321.0], [14.6, 321.0], [14.7, 321.0], [14.8, 321.0], [14.9, 321.0], [15.0, 321.0], [15.1, 321.0], [15.2, 321.0], [15.3, 322.0], [15.4, 322.0], [15.5, 322.0], [15.6, 322.0], [15.7, 322.0], [15.8, 322.0], [15.9, 322.0], [16.0, 323.0], [16.1, 323.0], [16.2, 323.0], [16.3, 323.0], [16.4, 323.0], [16.5, 323.0], [16.6, 323.0], [16.7, 323.0], [16.8, 324.0], [16.9, 324.0], [17.0, 324.0], [17.1, 324.0], [17.2, 324.0], [17.3, 324.0], [17.4, 324.0], [17.5, 324.0], [17.6, 324.0], [17.7, 325.0], [17.8, 325.0], [17.9, 325.0], [18.0, 325.0], [18.1, 325.0], [18.2, 325.0], [18.3, 325.0], [18.4, 325.0], [18.5, 326.0], [18.6, 326.0], [18.7, 326.0], [18.8, 326.0], [18.9, 326.0], [19.0, 326.0], [19.1, 326.0], [19.2, 326.0], [19.3, 326.0], [19.4, 327.0], [19.5, 327.0], [19.6, 327.0], [19.7, 327.0], [19.8, 327.0], [19.9, 327.0], [20.0, 327.0], [20.1, 327.0], [20.2, 327.0], [20.3, 327.0], [20.4, 328.0], [20.5, 328.0], [20.6, 328.0], [20.7, 328.0], [20.8, 328.0], [20.9, 328.0], [21.0, 328.0], [21.1, 328.0], [21.2, 328.0], [21.3, 329.0], [21.4, 329.0], [21.5, 329.0], [21.6, 329.0], [21.7, 329.0], [21.8, 329.0], [21.9, 329.0], [22.0, 329.0], [22.1, 329.0], [22.2, 329.0], [22.3, 330.0], [22.4, 330.0], [22.5, 330.0], [22.6, 330.0], [22.7, 330.0], [22.8, 330.0], [22.9, 330.0], [23.0, 330.0], [23.1, 330.0], [23.2, 330.0], [23.3, 331.0], [23.4, 331.0], [23.5, 331.0], [23.6, 331.0], [23.7, 331.0], [23.8, 331.0], [23.9, 331.0], [24.0, 331.0], [24.1, 331.0], [24.2, 331.0], [24.3, 332.0], [24.4, 332.0], [24.5, 332.0], [24.6, 332.0], [24.7, 332.0], [24.8, 332.0], [24.9, 332.0], [25.0, 332.0], [25.1, 332.0], [25.2, 332.0], [25.3, 333.0], [25.4, 333.0], [25.5, 333.0], [25.6, 333.0], [25.7, 333.0], [25.8, 333.0], [25.9, 333.0], [26.0, 333.0], [26.1, 333.0], [26.2, 333.0], [26.3, 333.0], [26.4, 334.0], [26.5, 334.0], [26.6, 334.0], [26.7, 334.0], [26.8, 334.0], [26.9, 334.0], [27.0, 334.0], [27.1, 334.0], [27.2, 334.0], [27.3, 334.0], [27.4, 335.0], [27.5, 335.0], [27.6, 335.0], [27.7, 335.0], [27.8, 335.0], [27.9, 335.0], [28.0, 335.0], [28.1, 335.0], [28.2, 335.0], [28.3, 335.0], [28.4, 335.0], [28.5, 336.0], [28.6, 336.0], [28.7, 336.0], [28.8, 336.0], [28.9, 336.0], [29.0, 336.0], [29.1, 336.0], [29.2, 336.0], [29.3, 336.0], [29.4, 336.0], [29.5, 337.0], [29.6, 337.0], [29.7, 337.0], [29.8, 337.0], [29.9, 337.0], [30.0, 337.0], [30.1, 337.0], [30.2, 337.0], [30.3, 337.0], [30.4, 337.0], [30.5, 337.0], [30.6, 338.0], [30.7, 338.0], [30.8, 338.0], [30.9, 338.0], [31.0, 338.0], [31.1, 338.0], [31.2, 338.0], [31.3, 338.0], [31.4, 338.0], [31.5, 338.0], [31.6, 338.0], [31.7, 339.0], [31.8, 339.0], [31.9, 339.0], [32.0, 339.0], [32.1, 339.0], [32.2, 339.0], [32.3, 339.0], [32.4, 339.0], [32.5, 339.0], [32.6, 339.0], [32.7, 339.0], [32.8, 340.0], [32.9, 340.0], [33.0, 340.0], [33.1, 340.0], [33.2, 340.0], [33.3, 340.0], [33.4, 340.0], [33.5, 340.0], [33.6, 340.0], [33.7, 340.0], [33.8, 340.0], [33.9, 341.0], [34.0, 341.0], [34.1, 341.0], [34.2, 341.0], [34.3, 341.0], [34.4, 341.0], [34.5, 341.0], [34.6, 341.0], [34.7, 341.0], [34.8, 341.0], [34.9, 341.0], [35.0, 342.0], [35.1, 342.0], [35.2, 342.0], [35.3, 342.0], [35.4, 342.0], [35.5, 342.0], [35.6, 342.0], [35.7, 342.0], [35.8, 342.0], [35.9, 342.0], [36.0, 342.0], [36.1, 343.0], [36.2, 343.0], [36.3, 343.0], [36.4, 343.0], [36.5, 343.0], [36.6, 343.0], [36.7, 343.0], [36.8, 343.0], [36.9, 343.0], [37.0, 343.0], [37.1, 343.0], [37.2, 343.0], [37.3, 344.0], [37.4, 344.0], [37.5, 344.0], [37.6, 344.0], [37.7, 344.0], [37.8, 344.0], [37.9, 344.0], [38.0, 344.0], [38.1, 344.0], [38.2, 344.0], [38.3, 344.0], [38.4, 345.0], [38.5, 345.0], [38.6, 345.0], [38.7, 345.0], [38.8, 345.0], [38.9, 345.0], [39.0, 345.0], [39.1, 345.0], [39.2, 345.0], [39.3, 345.0], [39.4, 345.0], [39.5, 345.0], [39.6, 346.0], [39.7, 346.0], [39.8, 346.0], [39.9, 346.0], [40.0, 346.0], [40.1, 346.0], [40.2, 346.0], [40.3, 346.0], [40.4, 346.0], [40.5, 346.0], [40.6, 346.0], [40.7, 347.0], [40.8, 347.0], [40.9, 347.0], [41.0, 347.0], [41.1, 347.0], [41.2, 347.0], [41.3, 347.0], [41.4, 347.0], [41.5, 347.0], [41.6, 347.0], [41.7, 347.0], [41.8, 347.0], [41.9, 348.0], [42.0, 348.0], [42.1, 348.0], [42.2, 348.0], [42.3, 348.0], [42.4, 348.0], [42.5, 348.0], [42.6, 348.0], [42.7, 348.0], [42.8, 348.0], [42.9, 348.0], [43.0, 348.0], [43.1, 349.0], [43.2, 349.0], [43.3, 349.0], [43.4, 349.0], [43.5, 349.0], [43.6, 349.0], [43.7, 349.0], [43.8, 349.0], [43.9, 349.0], [44.0, 349.0], [44.1, 349.0], [44.2, 350.0], [44.3, 350.0], [44.4, 350.0], [44.5, 350.0], [44.6, 350.0], [44.7, 350.0], [44.8, 350.0], [44.9, 350.0], [45.0, 350.0], [45.1, 350.0], [45.2, 350.0], [45.3, 350.0], [45.4, 351.0], [45.5, 351.0], [45.6, 351.0], [45.7, 351.0], [45.8, 351.0], [45.9, 351.0], [46.0, 351.0], [46.1, 351.0], [46.2, 351.0], [46.3, 351.0], [46.4, 351.0], [46.5, 352.0], [46.6, 352.0], [46.7, 352.0], [46.8, 352.0], [46.9, 352.0], [47.0, 352.0], [47.1, 352.0], [47.2, 352.0], [47.3, 352.0], [47.4, 352.0], [47.5, 352.0], [47.6, 352.0], [47.7, 353.0], [47.8, 353.0], [47.9, 353.0], [48.0, 353.0], [48.1, 353.0], [48.2, 353.0], [48.3, 353.0], [48.4, 353.0], [48.5, 353.0], [48.6, 353.0], [48.7, 353.0], [48.8, 353.0], [48.9, 354.0], [49.0, 354.0], [49.1, 354.0], [49.2, 354.0], [49.3, 354.0], [49.4, 354.0], [49.5, 354.0], [49.6, 354.0], [49.7, 354.0], [49.8, 354.0], [49.9, 354.0], [50.0, 355.0], [50.1, 355.0], [50.2, 355.0], [50.3, 355.0], [50.4, 355.0], [50.5, 355.0], [50.6, 355.0], [50.7, 355.0], [50.8, 355.0], [50.9, 355.0], [51.0, 355.0], [51.1, 356.0], [51.2, 356.0], [51.3, 356.0], [51.4, 356.0], [51.5, 356.0], [51.6, 356.0], [51.7, 356.0], [51.8, 356.0], [51.9, 356.0], [52.0, 356.0], [52.1, 356.0], [52.2, 356.0], [52.3, 357.0], [52.4, 357.0], [52.5, 357.0], [52.6, 357.0], [52.7, 357.0], [52.8, 357.0], [52.9, 357.0], [53.0, 357.0], [53.1, 357.0], [53.2, 357.0], [53.3, 357.0], [53.4, 358.0], [53.5, 358.0], [53.6, 358.0], [53.7, 358.0], [53.8, 358.0], [53.9, 358.0], [54.0, 358.0], [54.1, 358.0], [54.2, 358.0], [54.3, 358.0], [54.4, 358.0], [54.5, 359.0], [54.6, 359.0], [54.7, 359.0], [54.8, 359.0], [54.9, 359.0], [55.0, 359.0], [55.1, 359.0], [55.2, 359.0], [55.3, 359.0], [55.4, 359.0], [55.5, 359.0], [55.6, 360.0], [55.7, 360.0], [55.8, 360.0], [55.9, 360.0], [56.0, 360.0], [56.1, 360.0], [56.2, 360.0], [56.3, 360.0], [56.4, 360.0], [56.5, 360.0], [56.6, 360.0], [56.7, 361.0], [56.8, 361.0], [56.9, 361.0], [57.0, 361.0], [57.1, 361.0], [57.2, 361.0], [57.3, 361.0], [57.4, 361.0], [57.5, 361.0], [57.6, 361.0], [57.7, 361.0], [57.8, 362.0], [57.9, 362.0], [58.0, 362.0], [58.1, 362.0], [58.2, 362.0], [58.3, 362.0], [58.4, 362.0], [58.5, 362.0], [58.6, 362.0], [58.7, 362.0], [58.8, 362.0], [58.9, 363.0], [59.0, 363.0], [59.1, 363.0], [59.2, 363.0], [59.3, 363.0], [59.4, 363.0], [59.5, 363.0], [59.6, 363.0], [59.7, 363.0], [59.8, 363.0], [59.9, 363.0], [60.0, 363.0], [60.1, 364.0], [60.2, 364.0], [60.3, 364.0], [60.4, 364.0], [60.5, 364.0], [60.6, 364.0], [60.7, 364.0], [60.8, 364.0], [60.9, 364.0], [61.0, 364.0], [61.1, 364.0], [61.2, 365.0], [61.3, 365.0], [61.4, 365.0], [61.5, 365.0], [61.6, 365.0], [61.7, 365.0], [61.8, 365.0], [61.9, 365.0], [62.0, 365.0], [62.1, 365.0], [62.2, 366.0], [62.3, 366.0], [62.4, 366.0], [62.5, 366.0], [62.6, 366.0], [62.7, 366.0], [62.8, 366.0], [62.9, 366.0], [63.0, 366.0], [63.1, 366.0], [63.2, 366.0], [63.3, 367.0], [63.4, 367.0], [63.5, 367.0], [63.6, 367.0], [63.7, 367.0], [63.8, 367.0], [63.9, 367.0], [64.0, 367.0], [64.1, 367.0], [64.2, 367.0], [64.3, 368.0], [64.4, 368.0], [64.5, 368.0], [64.6, 368.0], [64.7, 368.0], [64.8, 368.0], [64.9, 368.0], [65.0, 368.0], [65.1, 368.0], [65.2, 368.0], [65.3, 369.0], [65.4, 369.0], [65.5, 369.0], [65.6, 369.0], [65.7, 369.0], [65.8, 369.0], [65.9, 369.0], [66.0, 369.0], [66.1, 369.0], [66.2, 369.0], [66.3, 370.0], [66.4, 370.0], [66.5, 370.0], [66.6, 370.0], [66.7, 370.0], [66.8, 370.0], [66.9, 370.0], [67.0, 370.0], [67.1, 370.0], [67.2, 371.0], [67.3, 371.0], [67.4, 371.0], [67.5, 371.0], [67.6, 371.0], [67.7, 371.0], [67.8, 371.0], [67.9, 371.0], [68.0, 371.0], [68.1, 371.0], [68.2, 372.0], [68.3, 372.0], [68.4, 372.0], [68.5, 372.0], [68.6, 372.0], [68.7, 372.0], [68.8, 372.0], [68.9, 372.0], [69.0, 372.0], [69.1, 373.0], [69.2, 373.0], [69.3, 373.0], [69.4, 373.0], [69.5, 373.0], [69.6, 373.0], [69.7, 373.0], [69.8, 373.0], [69.9, 373.0], [70.0, 374.0], [70.1, 374.0], [70.2, 374.0], [70.3, 374.0], [70.4, 374.0], [70.5, 374.0], [70.6, 374.0], [70.7, 374.0], [70.8, 374.0], [70.9, 374.0], [71.0, 375.0], [71.1, 375.0], [71.2, 375.0], [71.3, 375.0], [71.4, 375.0], [71.5, 375.0], [71.6, 375.0], [71.7, 375.0], [71.8, 375.0], [71.9, 376.0], [72.0, 376.0], [72.1, 376.0], [72.2, 376.0], [72.3, 376.0], [72.4, 376.0], [72.5, 376.0], [72.6, 376.0], [72.7, 376.0], [72.8, 377.0], [72.9, 377.0], [73.0, 377.0], [73.1, 377.0], [73.2, 377.0], [73.3, 377.0], [73.4, 377.0], [73.5, 377.0], [73.6, 377.0], [73.7, 378.0], [73.8, 378.0], [73.9, 378.0], [74.0, 378.0], [74.1, 378.0], [74.2, 378.0], [74.3, 378.0], [74.4, 378.0], [74.5, 378.0], [74.6, 379.0], [74.7, 379.0], [74.8, 379.0], [74.9, 379.0], [75.0, 379.0], [75.1, 379.0], [75.2, 379.0], [75.3, 379.0], [75.4, 380.0], [75.5, 380.0], [75.6, 380.0], [75.7, 380.0], [75.8, 380.0], [75.9, 380.0], [76.0, 380.0], [76.1, 380.0], [76.2, 380.0], [76.3, 381.0], [76.4, 381.0], [76.5, 381.0], [76.6, 381.0], [76.7, 381.0], [76.8, 381.0], [76.9, 381.0], [77.0, 381.0], [77.1, 382.0], [77.2, 382.0], [77.3, 382.0], [77.4, 382.0], [77.5, 382.0], [77.6, 382.0], [77.7, 382.0], [77.8, 382.0], [77.9, 383.0], [78.0, 383.0], [78.1, 383.0], [78.2, 383.0], [78.3, 383.0], [78.4, 383.0], [78.5, 383.0], [78.6, 383.0], [78.7, 384.0], [78.8, 384.0], [78.9, 384.0], [79.0, 384.0], [79.1, 384.0], [79.2, 384.0], [79.3, 384.0], [79.4, 385.0], [79.5, 385.0], [79.6, 385.0], [79.7, 385.0], [79.8, 385.0], [79.9, 385.0], [80.0, 385.0], [80.1, 386.0], [80.2, 386.0], [80.3, 386.0], [80.4, 386.0], [80.5, 386.0], [80.6, 386.0], [80.7, 386.0], [80.8, 387.0], [80.9, 387.0], [81.0, 387.0], [81.1, 387.0], [81.2, 387.0], [81.3, 387.0], [81.4, 387.0], [81.5, 388.0], [81.6, 388.0], [81.7, 388.0], [81.8, 388.0], [81.9, 388.0], [82.0, 388.0], [82.1, 388.0], [82.2, 389.0], [82.3, 389.0], [82.4, 389.0], [82.5, 389.0], [82.6, 389.0], [82.7, 389.0], [82.8, 390.0], [82.9, 390.0], [83.0, 390.0], [83.1, 390.0], [83.2, 390.0], [83.3, 390.0], [83.4, 390.0], [83.5, 391.0], [83.6, 391.0], [83.7, 391.0], [83.8, 391.0], [83.9, 391.0], [84.0, 391.0], [84.1, 392.0], [84.2, 392.0], [84.3, 392.0], [84.4, 392.0], [84.5, 392.0], [84.6, 392.0], [84.7, 393.0], [84.8, 393.0], [84.9, 393.0], [85.0, 393.0], [85.1, 393.0], [85.2, 393.0], [85.3, 394.0], [85.4, 394.0], [85.5, 394.0], [85.6, 394.0], [85.7, 394.0], [85.8, 394.0], [85.9, 395.0], [86.0, 395.0], [86.1, 395.0], [86.2, 395.0], [86.3, 395.0], [86.4, 395.0], [86.5, 396.0], [86.6, 396.0], [86.7, 396.0], [86.8, 396.0], [86.9, 396.0], [87.0, 397.0], [87.1, 397.0], [87.2, 397.0], [87.3, 397.0], [87.4, 397.0], [87.5, 398.0], [87.6, 398.0], [87.7, 398.0], [87.8, 398.0], [87.9, 398.0], [88.0, 399.0], [88.1, 399.0], [88.2, 399.0], [88.3, 399.0], [88.4, 400.0], [88.5, 400.0], [88.6, 400.0], [88.7, 400.0], [88.8, 400.0], [88.9, 401.0], [89.0, 401.0], [89.1, 401.0], [89.2, 401.0], [89.3, 402.0], [89.4, 402.0], [89.5, 402.0], [89.6, 402.0], [89.7, 403.0], [89.8, 403.0], [89.9, 403.0], [90.0, 403.0], [90.1, 404.0], [90.2, 404.0], [90.3, 404.0], [90.4, 405.0], [90.5, 405.0], [90.6, 405.0], [90.7, 405.0], [90.8, 406.0], [90.9, 406.0], [91.0, 406.0], [91.1, 407.0], [91.2, 407.0], [91.3, 407.0], [91.4, 407.0], [91.5, 408.0], [91.6, 408.0], [91.7, 408.0], [91.8, 409.0], [91.9, 409.0], [92.0, 409.0], [92.1, 410.0], [92.2, 410.0], [92.3, 410.0], [92.4, 411.0], [92.5, 411.0], [92.6, 411.0], [92.7, 412.0], [92.8, 412.0], [92.9, 413.0], [93.0, 413.0], [93.1, 413.0], [93.2, 414.0], [93.3, 414.0], [93.4, 415.0], [93.5, 415.0], [93.6, 415.0], [93.7, 416.0], [93.8, 416.0], [93.9, 417.0], [94.0, 417.0], [94.1, 417.0], [94.2, 418.0], [94.3, 418.0], [94.4, 419.0], [94.5, 419.0], [94.6, 420.0], [94.7, 420.0], [94.8, 421.0], [94.9, 421.0], [95.0, 422.0], [95.1, 422.0], [95.2, 423.0], [95.3, 423.0], [95.4, 424.0], [95.5, 424.0], [95.6, 425.0], [95.7, 425.0], [95.8, 426.0], [95.9, 427.0], [96.0, 427.0], [96.1, 428.0], [96.2, 429.0], [96.3, 429.0], [96.4, 430.0], [96.5, 431.0], [96.6, 432.0], [96.7, 432.0], [96.8, 433.0], [96.9, 434.0], [97.0, 435.0], [97.1, 436.0], [97.2, 437.0], [97.3, 438.0], [97.4, 439.0], [97.5, 440.0], [97.6, 441.0], [97.7, 442.0], [97.8, 444.0], [97.9, 445.0], [98.0, 446.0], [98.1, 448.0], [98.2, 449.0], [98.3, 451.0], [98.4, 453.0], [98.5, 455.0], [98.6, 457.0], [98.7, 459.0], [98.8, 462.0], [98.9, 464.0], [99.0, 467.0], [99.1, 471.0], [99.2, 475.0], [99.3, 480.0], [99.4, 487.0], [99.5, 498.0], [99.6, 511.0], [99.7, 528.0], [99.8, 548.0], [99.9, 584.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 424398.0, "series": [{"data": [[0.0, 9.0], [600.0, 1262.0], [700.0, 582.0], [800.0, 359.0], [200.0, 80191.0], [900.0, 240.0], [1000.0, 97.0], [1100.0, 120.0], [300.0, 415408.0], [1200.0, 98.0], [1300.0, 26.0], [1400.0, 45.0], [1500.0, 81.0], [1600.0, 83.0], [400.0, 28215.0], [100.0, 12.0], [1700.0, 28.0], [1800.0, 17.0], [1900.0, 7.0], [500.0, 3358.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[0.0, 11.0], [300.0, 424398.0], [600.0, 320.0], [1200.0, 1.0], [1300.0, 6.0], [700.0, 10.0], [1400.0, 1.0], [100.0, 50.0], [200.0, 20110.0], [400.0, 56116.0], [500.0, 2118.0]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 216.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1024622.0, "series": [{"data": [[0.0, 1024622.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8541.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 216.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 298.34865828485664, "minX": 1.6205496E12, "maxY": 300.0, "series": [{"data": [[1.62054978E12, 300.0], [1.6205496E12, 298.84913167820406], [1.62055008E12, 300.0], [1.62055014E12, 300.0], [1.62054966E12, 300.0], [1.62054996E12, 300.0], [1.62055002E12, 300.0], [1.62054984E12, 300.0], [1.6205499E12, 300.0], [1.6205502E12, 298.34865828485664], [1.62054972E12, 300.0]], "isOverall": false, "label": "Thread Group rcdn-2", "isController": false}, {"data": [[1.62054978E12, 300.0], [1.6205496E12, 299.9848403397506], [1.62055008E12, 300.0], [1.62055014E12, 300.0], [1.62054966E12, 300.0], [1.62054996E12, 300.0], [1.62055002E12, 300.0], [1.62054984E12, 300.0], [1.6205499E12, 300.0], [1.6205502E12, 298.38444289232854], [1.62054972E12, 300.0]], "isOverall": false, "label": "Thread Group rcdn-3", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6205502E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 57.75, "minX": 1.0, "maxY": 681.0, "series": [{"data": [[5.0, 566.0], [12.0, 562.0], [14.0, 560.0], [16.0, 558.0], [17.0, 559.0], [18.0, 593.3333333333334], [20.0, 615.0], [24.0, 549.0], [26.0, 681.0], [29.0, 633.6666666666666], [31.0, 677.0], [33.0, 539.0], [34.0, 542.0], [37.0, 533.0], [36.0, 541.5], [41.0, 583.3333333333334], [42.0, 536.0], [45.0, 673.5], [46.0, 568.0], [49.0, 545.0], [55.0, 608.0], [71.0, 633.5], [70.0, 496.25], [74.0, 648.0], [79.0, 657.0], [78.0, 651.0], [77.0, 674.0], [83.0, 489.0], [82.0, 558.5], [86.0, 94.0], [88.0, 488.0], [93.0, 492.0], [99.0, 412.6], [97.0, 511.0], [104.0, 492.0], [110.0, 487.5], [115.0, 492.0], [114.0, 478.0], [113.0, 492.0], [112.0, 94.0], [117.0, 475.0], [122.0, 94.0], [127.0, 473.3333333333333], [134.0, 468.5], [130.0, 84.0], [128.0, 484.0], [142.0, 258.0], [137.0, 468.0], [144.0, 86.0], [159.0, 79.0], [154.0, 257.0], [153.0, 264.0], [152.0, 276.0], [167.0, 261.0], [166.0, 457.0], [165.0, 456.5], [162.0, 390.6666666666667], [161.0, 461.0], [175.0, 254.0], [168.0, 399.6666666666667], [180.0, 76.0], [186.0, 253.0], [184.0, 254.0], [195.0, 318.3333333333333], [205.0, 246.0], [211.0, 256.0], [208.0, 258.0], [218.0, 241.0], [216.0, 247.0], [230.0, 255.0], [226.0, 249.0], [224.0, 254.0], [238.0, 243.0], [237.0, 249.0], [233.0, 289.0], [246.0, 263.5], [244.0, 254.0], [241.0, 441.5], [251.0, 252.0], [249.0, 245.0], [248.0, 251.0], [269.0, 433.0], [268.0, 257.0], [267.0, 434.0], [265.0, 259.0], [260.0, 258.5], [258.0, 254.0], [256.0, 251.5], [284.0, 262.0], [282.0, 256.0], [277.0, 357.0], [275.0, 265.0], [272.0, 342.5], [296.0, 301.5], [303.0, 263.0], [302.0, 255.0], [300.0, 339.0], [294.0, 255.0], [290.0, 259.0], [316.0, 261.0], [315.0, 257.0], [311.0, 263.5], [305.0, 260.0], [327.0, 416.0], [326.0, 418.0], [322.0, 261.0], [349.0, 401.0], [341.0, 407.6666666666667], [340.0, 407.0], [339.0, 415.0], [363.0, 426.0], [362.0, 428.0], [358.0, 396.0], [357.0, 393.0], [356.0, 397.5], [355.0, 404.0], [354.0, 410.0], [383.0, 458.0], [382.0, 259.0], [380.0, 260.0], [376.0, 421.0], [372.0, 426.3333333333333], [370.0, 388.0], [399.0, 458.0], [397.0, 454.0], [395.0, 376.0], [394.0, 424.0], [388.0, 418.0], [387.0, 271.0], [415.0, 467.0], [411.0, 442.0], [409.0, 428.6666666666667], [404.0, 373.0], [401.0, 460.0], [400.0, 373.0], [423.0, 273.0], [422.0, 366.0], [421.0, 400.0], [417.0, 401.0], [446.0, 278.0], [445.0, 334.25], [443.0, 417.0], [442.0, 362.0], [438.0, 424.25], [437.0, 261.5], [434.0, 442.0], [463.0, 279.0], [457.0, 314.0], [456.0, 357.0], [455.0, 277.0], [452.0, 277.0], [451.0, 272.0], [450.0, 277.0], [468.0, 339.0], [477.0, 278.0], [469.0, 279.0], [467.0, 279.0], [465.0, 302.3333333333333], [464.0, 355.0], [494.0, 276.5], [487.0, 344.0], [485.0, 352.0], [481.0, 277.0], [509.0, 340.0], [497.0, 348.0], [537.0, 326.3333333333333], [543.0, 294.5], [542.0, 321.8], [541.0, 327.0], [531.0, 330.5], [527.0, 280.0], [524.0, 284.0], [519.0, 282.0], [513.0, 301.0], [512.0, 297.1666666666667], [562.0, 290.5], [573.0, 285.0], [571.0, 295.0], [569.0, 287.0], [550.0, 274.0], [548.0, 283.6666666666667], [544.0, 317.5], [567.0, 274.0], [564.0, 291.0], [563.0, 303.0], [560.0, 305.5], [559.0, 270.0], [557.0, 311.0], [556.0, 303.6666666666667], [555.0, 279.0], [554.0, 299.5], [552.0, 290.0], [592.0, 336.6666666666667], [600.0, 339.2356568050849], [583.0, 305.4], [582.0, 286.0], [581.0, 288.0], [580.0, 287.0], [597.0, 345.5], [594.0, 344.09090909090907], [593.0, 348.5454545454546], [590.0, 358.0], [589.0, 338.0], [588.0, 330.75], [587.0, 340.0], [586.0, 312.8571428571429], [585.0, 383.0], [584.0, 321.1666666666667], [1.0, 577.0]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[599.826057355371, 339.2564546486659]], "isOverall": false, "label": "AuthzRequest-rcdn-3-Aggregated", "isController": false}, {"data": [[14.0, 643.0], [15.0, 648.0], [17.0, 640.0], [18.0, 620.0], [19.0, 620.0], [20.0, 617.0], [21.0, 573.0], [23.0, 614.0], [26.0, 572.0], [29.0, 610.0], [31.0, 571.0], [36.0, 567.0], [41.0, 566.0], [45.0, 562.0], [49.0, 561.0], [55.0, 558.0], [71.0, 553.0], [70.0, 554.0], [75.0, 554.0], [74.0, 553.5], [79.0, 546.5], [78.0, 553.5], [77.0, 559.0], [82.0, 552.0], [88.0, 544.0], [93.0, 540.0], [97.0, 530.0], [101.0, 536.0], [104.0, 536.0], [110.0, 533.0], [113.0, 529.0], [112.0, 527.6666666666666], [117.0, 521.6666666666666], [125.0, 283.0], [127.0, 366.0], [124.0, 57.75], [126.0, 91.0], [129.0, 58.0], [132.0, 99.5], [134.0, 504.0], [128.0, 504.0], [137.0, 498.0], [148.0, 198.0], [147.0, 302.5], [144.0, 334.0], [156.0, 134.0], [158.0, 118.0], [159.0, 118.5], [155.0, 262.0], [153.0, 275.0], [160.0, 109.0], [162.0, 292.2], [163.0, 110.0], [164.0, 148.0], [165.0, 150.0], [161.0, 492.3333333333333], [170.0, 261.0], [169.0, 487.0], [168.0, 376.5], [177.0, 139.5], [178.0, 130.0], [179.0, 192.0], [180.0, 129.0], [182.0, 141.0], [183.0, 143.0], [181.0, 254.0], [176.0, 256.5], [184.0, 235.0], [186.0, 142.0], [189.0, 149.0], [190.0, 117.0], [188.0, 330.0], [192.0, 156.0], [194.0, 244.0], [195.0, 159.5], [196.0, 154.0], [197.0, 190.0], [198.0, 294.0], [193.0, 262.0], [200.0, 192.0], [204.0, 267.0], [203.0, 262.0], [201.0, 279.0], [213.0, 278.0], [212.0, 275.0], [210.0, 257.0], [209.0, 268.5], [221.0, 278.0], [219.0, 274.0], [218.0, 291.0], [216.0, 265.0], [224.0, 222.5], [225.0, 248.0], [226.0, 164.0], [230.0, 247.0], [231.0, 243.75], [228.0, 298.0], [227.0, 273.0], [234.0, 251.66666666666666], [236.0, 248.0], [237.0, 267.0], [233.0, 300.0], [242.0, 255.5], [243.0, 200.0], [244.0, 265.0], [245.0, 203.0], [247.0, 231.0], [246.0, 276.0], [241.0, 379.5], [252.0, 253.25], [253.0, 266.3333333333333], [254.0, 285.8], [248.0, 296.0], [256.0, 263.0], [261.0, 296.0], [260.0, 293.0], [262.0, 291.0], [263.0, 285.0], [265.0, 294.0], [266.0, 284.0], [267.0, 297.0], [268.0, 338.5], [258.0, 291.0], [269.0, 261.6666666666667], [270.0, 297.0], [264.0, 309.0], [272.0, 318.25], [284.0, 311.0], [282.0, 295.0], [280.0, 308.0], [279.0, 299.0], [278.0, 307.0], [274.0, 294.0], [302.0, 243.0], [291.0, 272.0], [292.0, 241.0], [300.0, 299.6], [303.0, 258.5], [299.0, 458.0], [298.0, 417.6666666666667], [297.0, 311.5], [290.0, 300.0], [289.0, 314.0], [305.0, 357.0], [304.0, 228.5], [307.0, 288.0], [309.0, 266.0], [308.0, 308.0], [310.0, 260.2], [311.0, 220.0], [312.0, 245.0], [315.0, 311.0], [316.0, 251.0], [318.0, 270.4], [320.0, 393.6666666666667], [334.0, 301.5], [326.0, 381.5], [322.0, 312.0], [336.0, 295.0], [340.0, 339.3333333333333], [341.0, 346.0], [343.0, 248.0], [346.0, 300.5], [347.0, 305.0], [350.0, 363.5], [351.0, 294.5], [349.0, 310.0], [339.0, 437.5], [352.0, 265.0], [354.0, 309.0], [355.0, 439.0], [356.0, 316.25], [357.0, 266.0], [358.0, 324.0], [359.0, 288.5], [360.0, 285.5], [361.0, 265.0], [362.0, 349.3333333333333], [363.0, 378.0], [370.0, 321.0], [368.0, 280.5], [371.0, 313.0], [372.0, 278.0], [374.0, 236.66666666666666], [375.0, 269.0], [380.0, 205.0], [383.0, 428.0], [378.0, 428.0], [376.0, 430.0], [397.0, 322.6666666666667], [384.0, 205.0], [387.0, 241.0], [388.0, 334.3333333333333], [389.0, 285.5], [399.0, 418.0], [398.0, 415.0], [396.0, 420.0], [395.0, 424.5], [394.0, 415.0], [404.0, 356.0], [406.0, 342.0], [410.0, 246.0], [413.0, 401.0], [411.0, 398.0], [409.0, 402.5], [401.0, 413.0], [400.0, 403.0], [416.0, 312.0], [428.0, 287.0], [430.0, 276.5], [422.0, 390.0], [420.0, 391.0], [418.0, 391.0], [417.0, 394.0], [433.0, 288.0], [432.0, 310.7142857142857], [434.0, 282.5], [444.0, 331.3333333333333], [446.0, 314.77777777777777], [445.0, 381.0], [447.0, 314.3333333333333], [436.0, 336.8], [437.0, 285.0], [438.0, 330.0], [439.0, 365.0], [440.0, 333.6666666666667], [442.0, 343.3333333333333], [443.0, 336.0], [450.0, 252.0], [452.0, 306.5], [457.0, 252.0], [460.0, 254.0], [461.0, 255.0], [463.0, 237.0], [456.0, 369.0], [453.0, 380.0], [448.0, 379.3333333333333], [471.0, 250.0], [466.0, 271.0], [465.0, 370.0], [464.0, 364.0], [468.0, 265.0], [469.0, 260.0], [470.0, 246.0], [473.0, 301.0], [474.0, 314.0], [475.0, 298.5], [478.0, 332.3333333333333], [479.0, 353.0], [495.0, 347.2], [480.0, 294.5], [485.0, 352.5], [487.0, 367.5], [488.0, 402.0], [489.0, 345.0], [490.0, 356.0], [491.0, 383.0], [492.0, 333.5], [494.0, 368.0], [509.0, 313.0], [496.0, 337.5], [497.0, 329.8], [498.0, 293.0], [500.0, 370.0], [506.0, 316.6], [507.0, 319.5], [510.0, 364.0], [511.0, 376.5], [513.0, 355.0], [512.0, 336.40000000000003], [515.0, 345.0], [516.0, 310.0], [517.0, 352.0], [519.0, 298.0], [536.0, 326.0], [539.0, 310.0], [541.0, 342.0], [543.0, 339.0], [542.0, 340.0], [528.0, 343.4], [530.0, 370.6], [532.0, 328.3333333333333], [533.0, 310.0], [521.0, 344.0], [522.0, 378.0], [524.0, 316.3333333333333], [525.0, 309.0], [526.0, 330.5], [547.0, 351.0], [544.0, 352.0], [559.0, 335.5], [556.0, 337.5], [557.0, 330.0], [558.0, 373.8], [554.0, 359.0], [555.0, 354.0], [545.0, 328.0], [546.0, 350.0], [548.0, 330.0], [549.0, 316.0], [550.0, 356.0], [551.0, 337.0], [560.0, 338.8], [574.0, 353.0], [572.0, 338.3333333333333], [573.0, 385.0], [570.0, 354.0], [571.0, 371.0], [568.0, 363.0], [569.0, 334.5], [561.0, 343.6666666666667], [562.0, 344.12500000000006], [563.0, 352.3333333333333], [564.0, 349.75], [565.0, 347.3333333333333], [566.0, 343.0], [567.0, 366.3333333333333], [552.0, 341.0], [553.0, 349.6666666666667], [577.0, 369.0], [576.0, 341.5], [591.0, 375.5], [590.0, 354.5], [588.0, 356.8], [589.0, 370.0], [586.0, 355.25], [587.0, 352.0], [578.0, 365.25], [580.0, 354.75], [581.0, 338.85714285714283], [582.0, 341.5], [583.0, 355.6], [600.0, 357.66028369076963], [592.0, 368.5], [593.0, 356.0], [594.0, 351.6363636363636], [595.0, 386.7142857142857], [599.0, 347.5], [597.0, 352.0], [596.0, 373.5], [584.0, 357.9], [585.0, 348.8]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}, {"data": [[599.6745782991011, 357.6175008596048]], "isOverall": false, "label": "AuthzRequest-rcdn-2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 112519.7, "minX": 1.6205496E12, "maxY": 1.4092631366666667E7, "series": [{"data": [[1.62054978E12, 1.38786071E7], [1.6205496E12, 5655895.3], [1.62055008E12, 1.38407521E7], [1.62055014E12, 1.34947419E7], [1.62054966E12, 1.3787261466666667E7], [1.62054996E12, 1.3752196933333334E7], [1.62055002E12, 1.33900291E7], [1.62054984E12, 1.38726506E7], [1.6205499E12, 1.38879925E7], [1.6205502E12, 7127390.266666667], [1.62054972E12, 1.4092631366666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62054978E12, 276112.9], [1.6205496E12, 112519.7], [1.62055008E12, 275362.4], [1.62055014E12, 268473.6], [1.62054966E12, 274298.5333333333], [1.62054996E12, 273598.06666666665], [1.62055002E12, 266395.9], [1.62054984E12, 275994.4], [1.6205499E12, 276302.5], [1.6205502E12, 141799.73333333334], [1.62054972E12, 280373.63333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6205502E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 324.6400490514332, "minX": 1.6205496E12, "maxY": 451.34329641974, "series": [{"data": [[1.62054978E12, 331.7097833102833], [1.6205496E12, 451.34329641974], [1.62055008E12, 336.12640653865964], [1.62055014E12, 342.5089722364923], [1.62054966E12, 338.6851248847168], [1.62054996E12, 331.44756185177437], [1.62055002E12, 346.9673219004992], [1.62054984E12, 327.5775001363929], [1.6205499E12, 330.88614881018106], [1.6205502E12, 349.67341837297346], [1.62054972E12, 324.6400490514332]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62054978E12, 355.26886307971444], [1.6205496E12, 349.8000165789387], [1.62055008E12, 353.25838090194225], [1.62055014E12, 364.24748486872625], [1.62054966E12, 352.6284902517904], [1.62054996E12, 362.9183513050546], [1.62055002E12, 364.5202741059144], [1.62054984E12, 361.4730535316423], [1.6205499E12, 355.8406037944884], [1.6205502E12, 357.17714392944055], [1.62054972E12, 352.96859993335596]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6205502E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 324.61595614224433, "minX": 1.6205496E12, "maxY": 451.2963659821516, "series": [{"data": [[1.62054978E12, 331.68241585984174], [1.6205496E12, 451.2963659821516], [1.62055008E12, 336.09821045364276], [1.62055014E12, 342.4788681471324], [1.62054966E12, 338.6538048899809], [1.62054996E12, 331.4191920122335], [1.62055002E12, 346.93425799109065], [1.62054984E12, 327.5517667812422], [1.6205499E12, 330.85709294199756], [1.6205502E12, 349.6409219571402], [1.62054972E12, 324.61595614224433]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62054978E12, 355.23319111953924], [1.6205496E12, 349.75479752973877], [1.62055008E12, 353.22485729417895], [1.62055014E12, 364.21396328009394], [1.62054966E12, 352.59474870187046], [1.62054996E12, 362.886727804094], [1.62055002E12, 364.48177357878257], [1.62054984E12, 361.4429256739136], [1.6205499E12, 355.8058836330533], [1.6205502E12, 357.134884593733], [1.62054972E12, 352.93596503263626]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6205502E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.006528815901940427, "minX": 1.6205496E12, "maxY": 0.11323413603017189, "series": [{"data": [[1.62054978E12, 0.013278008298755192], [1.6205496E12, 0.04811310611762164], [1.62055008E12, 0.011662841254735193], [1.62055014E12, 0.009019809328081213], [1.62054966E12, 0.014191872611944416], [1.62054996E12, 0.013540150691745141], [1.62055002E12, 0.013754123343428723], [1.62054984E12, 0.006528815901940427], [1.6205499E12, 0.01335098753172252], [1.6205502E12, 0.011947211704591426], [1.62054972E12, 0.013723580754526423]], "isOverall": false, "label": "AuthzRequest-rcdn-3", "isController": false}, {"data": [[1.62054978E12, 0.05597692976218679], [1.6205496E12, 0.11323413603017189], [1.62055008E12, 0.026834578944271097], [1.62055014E12, 0.07926965041193536], [1.62054966E12, 0.09356324091309765], [1.62054996E12, 0.015499344956162545], [1.62055002E12, 0.025261535966263966], [1.62054984E12, 0.025069749703940134], [1.6205499E12, 0.023858982728945294], [1.6205502E12, 0.03475323700506695], [1.62054972E12, 0.03112565906819062]], "isOverall": false, "label": "AuthzRequest-rcdn-2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6205502E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.6205496E12, "maxY": 1987.0, "series": [{"data": [[1.62054978E12, 1302.0], [1.6205496E12, 1987.0], [1.62055008E12, 544.0], [1.62055014E12, 1388.0], [1.62054966E12, 1402.0], [1.62054996E12, 533.0], [1.62055002E12, 690.0], [1.62054984E12, 623.0], [1.6205499E12, 689.0], [1.6205502E12, 682.0], [1.62054972E12, 521.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62054978E12, 390.0], [1.6205496E12, 410.0], [1.62055008E12, 377.0], [1.62055014E12, 397.0], [1.62054966E12, 379.0], [1.62054996E12, 407.0], [1.62055002E12, 418.0], [1.62054984E12, 402.0], [1.6205499E12, 393.0], [1.6205502E12, 390.0], [1.62054972E12, 379.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62054978E12, 442.9900000000016], [1.6205496E12, 493.9900000000016], [1.62055008E12, 427.0], [1.62055014E12, 447.0], [1.62054966E12, 426.9900000000016], [1.62054996E12, 465.9900000000016], [1.62055002E12, 614.0], [1.62054984E12, 547.9900000000016], [1.6205499E12, 526.9900000000016], [1.6205502E12, 471.0], [1.62054972E12, 412.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62054978E12, 405.0], [1.6205496E12, 435.0], [1.62055008E12, 395.0], [1.62055014E12, 411.0], [1.62054966E12, 391.0], [1.62054996E12, 425.0], [1.62055002E12, 492.0], [1.62054984E12, 450.0], [1.6205499E12, 421.0], [1.6205502E12, 412.0], [1.62054972E12, 392.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62054978E12, 186.0], [1.6205496E12, 45.0], [1.62055008E12, 203.0], [1.62055014E12, 205.0], [1.62054966E12, 197.0], [1.62054996E12, 191.0], [1.62055002E12, 195.0], [1.62054984E12, 176.0], [1.6205499E12, 174.0], [1.6205502E12, 76.0], [1.62054972E12, 187.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62054978E12, 339.0], [1.6205496E12, 349.0], [1.62055008E12, 333.0], [1.62055014E12, 349.0], [1.62054966E12, 336.0], [1.62054996E12, 351.0], [1.62055002E12, 350.0], [1.62054984E12, 335.0], [1.6205499E12, 341.0], [1.6205502E12, 338.0], [1.62054972E12, 339.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6205502E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 261.5, "minX": 234.0, "maxY": 426.0, "series": [{"data": [[234.0, 261.5], [796.0, 366.0], [1197.0, 344.0], [1181.0, 313.0], [1156.0, 386.0], [1169.0, 345.0], [1218.0, 426.0], [1307.0, 369.0], [1368.0, 376.0], [1380.0, 367.0], [1431.0, 340.0], [1459.0, 343.0], [1448.0, 377.5], [1457.0, 391.0], [1411.0, 416.0], [1469.0, 368.0], [1413.0, 382.0], [1461.0, 382.0], [1486.0, 360.0], [1477.0, 365.0], [1525.0, 381.0], [1516.0, 365.0], [1501.0, 370.0], [1517.0, 377.0], [1492.0, 389.0], [1478.0, 396.0], [1535.0, 372.0], [1591.0, 368.0], [1567.0, 333.0], [1540.0, 348.0], [1539.0, 351.0], [1594.0, 349.0], [1593.0, 381.0], [1542.0, 376.5], [1583.0, 376.0], [1581.0, 333.0], [1548.0, 376.0], [1584.0, 361.0], [1590.0, 377.0], [1589.0, 363.0], [1562.0, 372.0], [1563.0, 382.0], [1554.0, 368.0], [1560.0, 371.0], [1579.0, 375.0], [1570.0, 357.0], [1599.0, 393.0], [1595.0, 372.0], [1597.0, 366.0], [1598.0, 377.0], [1577.0, 384.0], [1573.0, 384.0], [1574.0, 358.0], [1612.0, 381.0], [1658.0, 358.0], [1604.0, 372.0], [1607.0, 374.0], [1606.0, 356.0], [1608.0, 376.0], [1631.0, 358.0], [1602.0, 365.0], [1601.0, 376.0], [1611.0, 352.0], [1610.0, 380.0], [1609.0, 348.0], [1636.0, 365.0], [1630.0, 379.0], [1655.0, 349.0], [1657.0, 350.0], [1656.0, 353.0], [1652.0, 349.0], [1651.0, 368.0], [1615.0, 367.0], [1614.0, 377.0], [1649.0, 367.0], [1650.0, 366.0], [1620.0, 355.0], [1628.0, 370.5], [1627.0, 366.0], [1626.0, 368.0], [1624.0, 370.0], [1621.0, 358.0], [1629.0, 353.0], [1616.0, 361.5], [1619.0, 368.0], [1660.0, 349.0], [1662.0, 353.0], [1659.0, 364.0], [1633.0, 363.0], [1635.0, 367.0], [1634.0, 359.0], [1663.0, 356.0], [1638.0, 325.0], [1641.0, 354.0], [1646.0, 358.0], [1645.0, 372.0], [1637.0, 362.0], [1722.0, 348.0], [1700.0, 348.0], [1695.0, 350.0], [1680.0, 351.0], [1681.0, 349.0], [1682.0, 358.0], [1694.0, 354.0], [1686.0, 353.0], [1685.0, 356.0], [1683.0, 367.0], [1691.0, 342.0], [1690.0, 357.0], [1692.0, 357.0], [1689.0, 356.0], [1688.0, 351.0], [1693.0, 358.0], [1709.0, 346.0], [1710.0, 354.0], [1711.0, 346.0], [1672.0, 358.0], [1718.0, 353.0], [1717.0, 346.0], [1715.0, 345.0], [1716.0, 352.0], [1714.0, 350.0], [1679.0, 348.0], [1713.0, 350.0], [1720.0, 342.0], [1719.0, 347.0], [1697.0, 355.0], [1724.0, 357.0], [1727.0, 347.0], [1726.0, 340.0], [1725.0, 353.0], [1696.0, 347.0], [1723.0, 343.0], [1699.0, 351.0], [1673.0, 344.0], [1674.0, 355.0], [1676.0, 351.0], [1675.0, 344.0], [1678.0, 357.0], [1701.0, 347.0], [1702.0, 357.5], [1708.0, 347.0], [1703.0, 344.0], [1705.0, 344.0], [1704.0, 352.0], [1706.0, 350.0], [1707.0, 347.0], [1669.0, 356.0], [1670.0, 351.0], [1671.0, 352.0], [1668.0, 363.0], [1667.0, 350.0], [1665.0, 358.0], [1664.0, 362.0], [1732.0, 344.0], [1768.0, 341.0], [1765.0, 343.0], [1767.0, 334.0], [1763.0, 334.0], [1775.0, 339.0], [1774.0, 334.0], [1771.0, 347.0], [1770.0, 340.0], [1769.0, 330.0], [1773.0, 332.0], [1761.0, 343.0], [1759.0, 340.0], [1754.0, 334.0], [1753.0, 339.0], [1755.0, 339.0], [1756.0, 338.0], [1757.0, 340.0], [1758.0, 358.0], [1779.0, 332.0], [1740.0, 339.0], [1741.0, 348.0], [1743.0, 345.0], [1776.0, 338.0], [1777.0, 328.0], [1742.0, 341.0], [1739.0, 342.0], [1737.0, 321.0], [1738.0, 342.0], [1733.0, 343.0], [1734.0, 334.0], [1736.0, 347.0], [1752.0, 340.0], [1750.0, 343.0], [1751.0, 339.0], [1748.0, 342.0], [1749.0, 342.0], [1745.0, 336.0], [1744.0, 350.0], [1746.0, 339.0], [1787.0, 338.0], [1791.0, 334.0], [1790.0, 340.0], [1760.0, 339.0], [1788.0, 333.0], [1789.0, 331.0], [1785.0, 337.0], [1782.0, 341.0], [1781.0, 329.0], [1780.0, 355.0], [1786.0, 324.0], [1730.0, 340.0], [1728.0, 353.0], [1729.0, 343.0], [1731.0, 345.0], [1796.0, 334.0], [1807.0, 329.0], [1806.0, 321.0], [1804.0, 336.0], [1805.0, 344.0], [1803.0, 330.0], [1802.0, 333.0], [1801.0, 337.0], [1800.0, 325.0], [1797.0, 350.0], [1798.0, 337.0], [1799.0, 327.0], [1849.0, 323.0], [1848.0, 325.0], [1854.0, 321.0], [1853.0, 317.0], [1842.0, 328.0], [1841.0, 327.0], [1843.0, 332.0], [1845.0, 320.0], [1840.0, 327.0], [1821.0, 327.0], [1855.0, 323.0], [1793.0, 329.0], [1792.0, 329.0], [1823.0, 326.0], [1795.0, 341.0], [1794.0, 332.0], [1818.0, 339.0], [1816.0, 339.0], [1819.0, 332.0], [1815.0, 329.0], [1809.0, 330.0], [1808.0, 332.0], [1814.0, 341.0], [1813.0, 332.0], [1811.0, 325.0], [1810.0, 325.0], [1812.0, 336.0], [1827.0, 329.0], [1831.0, 324.0], [1830.0, 327.0], [1829.0, 331.0], [1824.0, 332.0], [1826.0, 339.0], [1832.0, 330.0], [1834.0, 332.5], [1833.0, 324.0], [1836.0, 320.0], [1835.0, 330.0], [1839.0, 324.0], [1838.0, 320.0], [1837.0, 333.0], [1857.0, 320.0], [1871.0, 327.0], [1893.0, 305.0], [1899.0, 313.0], [1896.0, 309.0], [1911.0, 311.0], [1863.0, 322.0], [1859.0, 321.0], [1860.0, 322.0], [1868.0, 315.0], [1866.0, 316.0], [1877.0, 322.0], [1879.0, 341.0], [1880.0, 318.0], [1910.0, 313.0], [1909.0, 317.0], [1886.0, 318.0], [1856.0, 329.0], [1885.0, 333.0], [1876.0, 321.0], [1874.0, 326.5], [1875.0, 324.0], [1934.0, 314.0], [1920.0, 318.0], [1926.0, 319.0], [1922.0, 318.0], [1924.0, 307.0], [1959.0, 306.0], [1954.0, 312.5], [1957.0, 310.0], [2002.0, 302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2002.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 261.0, "minX": 234.0, "maxY": 426.0, "series": [{"data": [[234.0, 261.0], [796.0, 366.0], [1197.0, 344.0], [1181.0, 313.0], [1156.0, 386.0], [1169.0, 345.0], [1218.0, 426.0], [1307.0, 369.0], [1368.0, 376.0], [1380.0, 367.0], [1431.0, 340.0], [1459.0, 343.0], [1448.0, 377.5], [1457.0, 391.0], [1411.0, 416.0], [1469.0, 368.0], [1413.0, 382.0], [1461.0, 382.0], [1486.0, 360.0], [1477.0, 365.0], [1525.0, 380.0], [1516.0, 365.0], [1501.0, 370.0], [1517.0, 377.0], [1492.0, 389.0], [1478.0, 396.0], [1535.0, 372.0], [1591.0, 368.0], [1567.0, 333.0], [1540.0, 348.0], [1539.0, 351.0], [1594.0, 349.0], [1593.0, 381.0], [1542.0, 376.5], [1583.0, 376.0], [1581.0, 333.0], [1548.0, 376.0], [1584.0, 361.0], [1590.0, 377.0], [1589.0, 363.0], [1562.0, 372.0], [1563.0, 382.0], [1554.0, 368.0], [1560.0, 371.0], [1579.0, 375.0], [1570.0, 357.0], [1599.0, 393.0], [1595.0, 371.0], [1597.0, 366.0], [1598.0, 377.0], [1577.0, 384.0], [1573.0, 384.0], [1574.0, 358.0], [1612.0, 381.0], [1658.0, 358.0], [1604.0, 372.0], [1607.0, 373.0], [1606.0, 356.0], [1608.0, 376.0], [1631.0, 358.0], [1602.0, 365.0], [1601.0, 376.0], [1611.0, 352.0], [1610.0, 380.0], [1609.0, 348.0], [1636.0, 365.0], [1630.0, 379.0], [1655.0, 349.0], [1657.0, 350.0], [1656.0, 353.0], [1652.0, 349.0], [1651.0, 368.0], [1615.0, 367.0], [1614.0, 377.0], [1649.0, 367.0], [1650.0, 366.0], [1620.0, 355.0], [1628.0, 370.5], [1627.0, 366.0], [1626.0, 368.0], [1624.0, 370.0], [1621.0, 358.0], [1629.0, 353.0], [1616.0, 361.5], [1619.0, 368.0], [1660.0, 349.0], [1662.0, 353.0], [1659.0, 364.0], [1633.0, 363.0], [1635.0, 367.0], [1634.0, 359.0], [1663.0, 356.0], [1638.0, 325.0], [1641.0, 354.0], [1646.0, 358.0], [1645.0, 372.0], [1637.0, 362.0], [1722.0, 348.0], [1700.0, 348.0], [1695.0, 350.0], [1680.0, 351.0], [1681.0, 349.0], [1682.0, 358.0], [1694.0, 354.0], [1686.0, 353.0], [1685.0, 356.0], [1683.0, 367.0], [1691.0, 342.0], [1690.0, 357.0], [1692.0, 357.0], [1689.0, 356.0], [1688.0, 351.0], [1693.0, 358.0], [1709.0, 346.0], [1710.0, 354.0], [1711.0, 346.0], [1672.0, 358.0], [1718.0, 353.0], [1717.0, 346.0], [1715.0, 345.0], [1716.0, 352.0], [1714.0, 350.0], [1679.0, 348.0], [1713.0, 350.0], [1720.0, 342.0], [1719.0, 347.0], [1697.0, 355.0], [1724.0, 357.0], [1727.0, 347.0], [1726.0, 340.0], [1725.0, 353.0], [1696.0, 346.5], [1723.0, 343.0], [1699.0, 350.0], [1673.0, 344.0], [1674.0, 355.0], [1676.0, 351.0], [1675.0, 344.0], [1678.0, 357.0], [1701.0, 347.0], [1702.0, 357.5], [1708.0, 347.0], [1703.0, 344.0], [1705.0, 343.0], [1704.0, 352.0], [1706.0, 350.0], [1707.0, 347.0], [1669.0, 356.0], [1670.0, 351.0], [1671.0, 352.0], [1668.0, 363.0], [1667.0, 350.0], [1665.0, 358.0], [1664.0, 362.0], [1732.0, 344.0], [1768.0, 341.0], [1765.0, 343.0], [1767.0, 334.0], [1763.0, 334.0], [1775.0, 339.0], [1774.0, 334.0], [1771.0, 347.0], [1770.0, 340.0], [1769.0, 330.0], [1773.0, 332.0], [1761.0, 343.0], [1759.0, 340.0], [1754.0, 334.0], [1753.0, 339.0], [1755.0, 339.0], [1756.0, 338.0], [1757.0, 340.0], [1758.0, 358.0], [1779.0, 332.0], [1740.0, 339.0], [1741.0, 348.0], [1743.0, 345.0], [1776.0, 338.0], [1777.0, 328.0], [1742.0, 341.0], [1739.0, 342.0], [1737.0, 321.0], [1738.0, 342.0], [1733.0, 343.0], [1734.0, 333.5], [1736.0, 346.5], [1752.0, 340.0], [1750.0, 343.0], [1751.0, 339.0], [1748.0, 342.0], [1749.0, 342.0], [1745.0, 336.0], [1744.0, 350.0], [1746.0, 339.0], [1787.0, 338.0], [1791.0, 333.0], [1790.0, 340.0], [1760.0, 339.0], [1788.0, 333.0], [1789.0, 330.0], [1785.0, 337.0], [1782.0, 341.0], [1781.0, 329.0], [1780.0, 355.0], [1786.0, 324.0], [1730.0, 340.0], [1728.0, 353.0], [1729.0, 343.0], [1731.0, 345.0], [1796.0, 334.0], [1807.0, 329.0], [1806.0, 321.0], [1804.0, 336.0], [1805.0, 344.0], [1803.0, 330.0], [1802.0, 333.0], [1801.0, 337.0], [1800.0, 325.0], [1797.0, 349.0], [1798.0, 337.0], [1799.0, 327.0], [1849.0, 323.0], [1848.0, 325.0], [1854.0, 321.0], [1853.0, 317.0], [1842.0, 328.0], [1841.0, 326.0], [1843.0, 332.0], [1845.0, 320.0], [1840.0, 327.0], [1821.0, 327.0], [1855.0, 323.0], [1793.0, 329.0], [1792.0, 329.0], [1823.0, 326.0], [1795.0, 341.0], [1794.0, 332.0], [1818.0, 339.0], [1816.0, 339.0], [1819.0, 332.0], [1815.0, 329.0], [1809.0, 330.0], [1808.0, 332.0], [1814.0, 341.0], [1813.0, 332.0], [1811.0, 325.0], [1810.0, 325.0], [1812.0, 336.0], [1827.0, 329.0], [1831.0, 324.0], [1830.0, 327.0], [1829.0, 331.0], [1824.0, 332.0], [1826.0, 339.0], [1832.0, 330.0], [1834.0, 332.0], [1833.0, 324.0], [1836.0, 320.0], [1835.0, 330.0], [1839.0, 324.0], [1838.0, 320.0], [1837.0, 333.0], [1857.0, 320.0], [1871.0, 327.0], [1893.0, 305.0], [1899.0, 313.0], [1896.0, 309.0], [1911.0, 311.0], [1863.0, 322.0], [1859.0, 321.0], [1860.0, 322.0], [1868.0, 315.0], [1866.0, 316.0], [1877.0, 322.0], [1879.0, 341.0], [1880.0, 318.0], [1910.0, 313.0], [1909.0, 317.0], [1886.0, 318.0], [1856.0, 329.0], [1885.0, 333.0], [1876.0, 321.0], [1874.0, 326.5], [1875.0, 324.0], [1934.0, 314.0], [1920.0, 318.0], [1926.0, 319.0], [1922.0, 318.0], [1924.0, 307.0], [1959.0, 306.0], [1954.0, 312.5], [1957.0, 310.0], [2002.0, 302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2002.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 722.15, "minX": 1.6205496E12, "maxY": 1774.5166666666667, "series": [{"data": [[1.62054978E12, 1747.55], [1.6205496E12, 722.15], [1.62055008E12, 1742.7833333333333], [1.62055014E12, 1699.2166666666667], [1.62054966E12, 1736.0666666666666], [1.62054996E12, 1731.6333333333334], [1.62055002E12, 1686.05], [1.62054984E12, 1746.8], [1.6205499E12, 1748.75], [1.6205502E12, 887.4666666666667], [1.62054972E12, 1774.5166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6205502E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 712.15, "minX": 1.6205496E12, "maxY": 1774.5166666666667, "series": [{"data": [[1.62054978E12, 1747.55], [1.6205496E12, 712.15], [1.62055008E12, 1742.8], [1.62055014E12, 1699.2], [1.62054966E12, 1736.0666666666666], [1.62054996E12, 1731.6333333333334], [1.62055002E12, 1686.05], [1.62054984E12, 1746.8], [1.6205499E12, 1748.75], [1.6205502E12, 897.4666666666667], [1.62054972E12, 1774.5166666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6205502E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 310.03333333333336, "minX": 1.6205496E12, "maxY": 924.2, "series": [{"data": [[1.62054978E12, 903.75], [1.6205496E12, 310.03333333333336], [1.62055008E12, 893.15], [1.62055014E12, 875.85], [1.62054966E12, 885.4833333333333], [1.62054996E12, 904.7166666666667], [1.62055002E12, 863.9833333333333], [1.62054984E12, 916.45], [1.6205499E12, 906.3], [1.6205502E12, 453.3833333333333], [1.62054972E12, 924.2]], "isOverall": false, "label": "AuthzRequest-rcdn-3-success", "isController": false}, {"data": [[1.62054978E12, 843.8], [1.6205496E12, 402.1166666666667], [1.62055008E12, 849.65], [1.62055014E12, 823.35], [1.62054966E12, 850.5833333333334], [1.62054996E12, 826.9166666666666], [1.62055002E12, 822.0666666666667], [1.62054984E12, 830.35], [1.6205499E12, 842.45], [1.6205502E12, 444.0833333333333], [1.62054972E12, 850.3166666666667]], "isOverall": false, "label": "AuthzRequest-rcdn-2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6205502E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 712.15, "minX": 1.6205496E12, "maxY": 1774.5166666666667, "series": [{"data": [[1.62054978E12, 1747.55], [1.6205496E12, 712.15], [1.62055008E12, 1742.8], [1.62055014E12, 1699.2], [1.62054966E12, 1736.0666666666666], [1.62054996E12, 1731.6333333333334], [1.62055002E12, 1686.05], [1.62054984E12, 1746.8], [1.6205499E12, 1748.75], [1.6205502E12, 897.4666666666667], [1.62054972E12, 1774.5166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6205502E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

